
HeadsUp!.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00003e96  00003f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001c0  008001c0  00003fea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003fea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a81  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aad  00000000  00000000  00006d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002925  00000000  00000000  000077c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  0000a0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b6d3  00000000  00000000  0000a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b4  00000000  00000000  000160cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0001747f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f11  00000000  00000000  00017657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	6d c6       	rjmp	.+3290   	; 0xcec <__vector_4>
      12:	00 00       	nop
      14:	40 c1       	rjmp	.+640    	; 0x296 <__vector_5>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	87 0e       	add	r8, r23

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d0 e4       	ldi	r29, 0x40	; 64
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e6 e9       	ldi	r30, 0x96	; 150
      a2:	fe e3       	ldi	r31, 0x3E	; 62
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0b bf       	out	0x3b, r16	; 59
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
      aa:	07 90       	elpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 3c       	cpi	r26, 0xC0	; 192
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 ec       	ldi	r26, 0xC0	; 192
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a6 3c       	cpi	r26, 0xC6	; 198
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	c7 e4       	ldi	r28, 0x47	; 71
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
      cc:	21 97       	sbiw	r28, 0x01	; 1
      ce:	fe 01       	movw	r30, r28
      d0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__tablejump2__>
      d4:	c6 34       	cpi	r28, 0x46	; 70
      d6:	d1 07       	cpc	r29, r17
      d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
      da:	eb d2       	rcall	.+1494   	; 0x6b2 <main>
      dc:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <_ZN3batC1Ev>:
#include "bat.h"


bat::bat(){
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <_ZN3batC1Ev+0x6>
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	9a 83       	std	Y+2, r25	; 0x02
      ee:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX |= (1 << REFS1) | (1 << MUX0);	// MUX0 picks ADC1 Pin
      f0:	8c e7       	ldi	r24, 0x7C	; 124
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2c e7       	ldi	r18, 0x7C	; 124
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	21 68       	ori	r18, 0x81	; 129
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// Enable ADC prescaler  to 64 (125KHz @ 8 MHz)
     102:	8a e7       	ldi	r24, 0x7A	; 122
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2a e7       	ldi	r18, 0x7A	; 122
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	26 60       	ori	r18, 0x06	; 6
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
	DIDR0 |= (1 << ADC1D);	// Disable digital input buffer on ADC1 pin
     114:	8e e7       	ldi	r24, 0x7E	; 126
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	2e e7       	ldi	r18, 0x7E	; 126
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	22 60       	ori	r18, 0x02	; 2
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
	
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <_ZN3bat6ENABLEEv>:


void bat::ENABLE(){
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	00 d0       	rcall	.+0      	; 0x136 <_ZN3bat6ENABLEEv+0x6>
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= ( 1 << ADEN );
     13e:	8a e7       	ldi	r24, 0x7A	; 122
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	2a e7       	ldi	r18, 0x7A	; 122
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	20 68       	ori	r18, 0x80	; 128
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	//_delay_ms( 200 );
	ADCSRA |= ( 1 << ADSC );
     150:	8a e7       	ldi	r24, 0x7A	; 122
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2a e7       	ldi	r18, 0x7A	; 122
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	20 64       	ori	r18, 0x40	; 64
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18

}
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <_ZN3bat7DISABLEEv>:


void bat::DISABLE(){
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <_ZN3bat7DISABLEEv+0x6>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~( 1 << ADEN );
     17a:	8a e7       	ldi	r24, 0x7A	; 122
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	2a e7       	ldi	r18, 0x7A	; 122
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	2f 77       	andi	r18, 0x7F	; 127
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
	
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN3bat3getEv>:

unsigned char bat::get(){
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	2d 97       	sbiw	r28, 0x0d	; 13
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	99 87       	std	Y+9, r25	; 0x09
     1b4:	88 87       	std	Y+8, r24	; 0x08
	
	adc_out adoCurrent;
	uint8_t valBatteryLevel;
	uint16_t minADCpercent = 0x02DA;
     1b6:	8a ed       	ldi	r24, 0xDA	; 218
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
	uint16_t adcdifference = 0x0125;
     1be:	85 e2       	ldi	r24, 0x25	; 37
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9c 83       	std	Y+4, r25	; 0x04
     1c4:	8b 83       	std	Y+3, r24	; 0x03
	
	ENABLE();
     1c6:	88 85       	ldd	r24, Y+8	; 0x08
     1c8:	99 85       	ldd	r25, Y+9	; 0x09
     1ca:	b2 df       	rcall	.-156    	; 0x130 <_ZN3bat6ENABLEEv>
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1cc:	8a e7       	ldi	r24, 0x7A	; 122
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	80 74       	andi	r24, 0x40	; 64
     1da:	99 27       	eor	r25, r25
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	89 2b       	or	r24, r25
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <_ZN3bat3getEv+0x4e>
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	22 23       	and	r18, r18
     1e6:	91 f7       	brne	.-28     	; 0x1cc <_ZN3bat3getEv+0x36>
	adoCurrent = ADC - minADCpercent;
     1e8:	88 e7       	ldi	r24, 0x78	; 120
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	a9 01       	movw	r20, r18
     1f8:	48 1b       	sub	r20, r24
     1fa:	59 0b       	sbc	r21, r25
     1fc:	ca 01       	movw	r24, r20
     1fe:	9e 83       	std	Y+6, r25	; 0x06
     200:	8d 83       	std	Y+5, r24	; 0x05
	DISABLE();
     202:	88 85       	ldd	r24, Y+8	; 0x08
     204:	99 85       	ldd	r25, Y+9	; 0x09
     206:	b2 df       	rcall	.-156    	; 0x16c <_ZN3bat7DISABLEEv>
	
	valBatteryLevel = (( uint32_t )adoCurrent * 100 ) / adcdifference;
     208:	8d 81       	ldd	r24, Y+5	; 0x05
     20a:	9e 81       	ldd	r25, Y+6	; 0x06
     20c:	9c 01       	movw	r18, r24
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	84 e6       	ldi	r24, 0x64	; 100
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	dc 01       	movw	r26, r24
     218:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__muluhisi3>
     21c:	7b 01       	movw	r14, r22
     21e:	8c 01       	movw	r16, r24
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	9c 01       	movw	r18, r24
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	c8 01       	movw	r24, r16
     22c:	b7 01       	movw	r22, r14
     22e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__udivmodsi4>
     232:	da 01       	movw	r26, r20
     234:	c9 01       	movw	r24, r18
     236:	8f 83       	std	Y+7, r24	; 0x07
	return (( valBatteryLevel / 10 ) << 4 ) | ( valBatteryLevel % 10 );
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	8d ec       	ldi	r24, 0xCD	; 205
     23c:	98 9f       	mul	r25, r24
     23e:	81 2d       	mov	r24, r1
     240:	11 24       	eor	r1, r1
     242:	86 95       	lsr	r24
     244:	86 95       	lsr	r24
     246:	86 95       	lsr	r24
     248:	88 2f       	mov	r24, r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	82 95       	swap	r24
     24e:	92 95       	swap	r25
     250:	90 7f       	andi	r25, 0xF0	; 240
     252:	98 27       	eor	r25, r24
     254:	80 7f       	andi	r24, 0xF0	; 240
     256:	98 27       	eor	r25, r24
     258:	38 2f       	mov	r19, r24
     25a:	9f 81       	ldd	r25, Y+7	; 0x07
     25c:	8d ec       	ldi	r24, 0xCD	; 205
     25e:	98 9f       	mul	r25, r24
     260:	81 2d       	mov	r24, r1
     262:	11 24       	eor	r1, r1
     264:	86 95       	lsr	r24
     266:	86 95       	lsr	r24
     268:	86 95       	lsr	r24
     26a:	88 0f       	add	r24, r24
     26c:	28 2f       	mov	r18, r24
     26e:	22 0f       	add	r18, r18
     270:	22 0f       	add	r18, r18
     272:	82 0f       	add	r24, r18
     274:	59 2f       	mov	r21, r25
     276:	58 1b       	sub	r21, r24
     278:	85 2f       	mov	r24, r21
     27a:	83 2b       	or	r24, r19
	
     27c:	2d 96       	adiw	r28, 0x0d	; 13
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	08 95       	ret

00000296 <__vector_5>:
#include "but.h"


ISR( PCINT1_vect ){
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	00 90 5f 00 	lds	r0, 0x005F
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	00 90 5b 00 	lds	r0, 0x005B
     2a6:	0f 92       	push	r0
     2a8:	2f 93       	push	r18
     2aa:	3f 93       	push	r19
     2ac:	4f 93       	push	r20
     2ae:	5f 93       	push	r21
     2b0:	6f 93       	push	r22
     2b2:	7f 93       	push	r23
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	af 93       	push	r26
     2ba:	bf 93       	push	r27
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	6d 97       	sbiw	r28, 0x1d	; 29
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a0 ef       	ldi	r26, 0xF0	; 240
     2d4:	b1 e4       	ldi	r27, 0x41	; 65
     2d6:	89 83       	std	Y+1, r24	; 0x01
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	ab 83       	std	Y+3, r26	; 0x03
     2dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a e7       	ldi	r20, 0x7A	; 122
     2e4:	53 e4       	ldi	r21, 0x43	; 67
     2e6:	69 81       	ldd	r22, Y+1	; 0x01
     2e8:	7a 81       	ldd	r23, Y+2	; 0x02
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	8d 83       	std	Y+5, r24	; 0x05
     2f8:	9e 83       	std	Y+6, r25	; 0x06
     2fa:	af 83       	std	Y+7, r26	; 0x07
     2fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	6d 81       	ldd	r22, Y+5	; 0x05
     308:	7e 81       	ldd	r23, Y+6	; 0x06
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	2c f4       	brge	.+10     	; 0x320 <__vector_5+0x8a>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9a 87       	std	Y+10, r25	; 0x0a
     31c:	89 87       	std	Y+9, r24	; 0x09
     31e:	3f c0       	rjmp	.+126    	; 0x39e <__vector_5+0x108>
	else if (__tmp > 65535)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	6d 81       	ldd	r22, Y+5	; 0x05
     32a:	7e 81       	ldd	r23, Y+6	; 0x06
     32c:	8f 81       	ldd	r24, Y+7	; 0x07
     32e:	98 85       	ldd	r25, Y+8	; 0x08
     330:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	4c f5       	brge	.+82     	; 0x38a <__vector_5+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9a 87       	std	Y+10, r25	; 0x0a
     35e:	89 87       	std	Y+9, r24	; 0x09
     360:	0f c0       	rjmp	.+30     	; 0x380 <__vector_5+0xea>
     362:	89 e1       	ldi	r24, 0x19	; 25
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	9c 87       	std	Y+12, r25	; 0x0c
     368:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     36a:	8b 85       	ldd	r24, Y+11	; 0x0b
     36c:	9c 85       	ldd	r25, Y+12	; 0x0c
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <__vector_5+0xd8>
     372:	9c 87       	std	Y+12, r25	; 0x0c
     374:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	89 85       	ldd	r24, Y+9	; 0x09
     378:	9a 85       	ldd	r25, Y+10	; 0x0a
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9a 87       	std	Y+10, r25	; 0x0a
     37e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	89 85       	ldd	r24, Y+9	; 0x09
     382:	9a 85       	ldd	r25, Y+10	; 0x0a
     384:	89 2b       	or	r24, r25
     386:	69 f7       	brne	.-38     	; 0x362 <__vector_5+0xcc>
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <__vector_5+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38a:	6d 81       	ldd	r22, Y+5	; 0x05
     38c:	7e 81       	ldd	r23, Y+6	; 0x06
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	98 85       	ldd	r25, Y+8	; 0x08
     392:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	9a 87       	std	Y+10, r25	; 0x0a
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	89 85       	ldd	r24, Y+9	; 0x09
     3a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	8d 87       	std	Y+13, r24	; 0x0d
     3a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <__vector_5+0x114>
     3ae:	9e 87       	std	Y+14, r25	; 0x0e
     3b0:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char chrPinB;
	static uint8_t valPressed{ BUT_UP };


	_delay_ms(30);
	if( valPressed == BUT_UP ){
     3b2:	80 91 c0 01 	lds	r24, 0x01C0
     3b6:	88 23       	and	r24, r24
     3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_5+0x126>
     3ba:	cf c0       	rjmp	.+414    	; 0x55a <__vector_5+0x2c4>
		memcpy(( void* )&chrPinB, ( void* )0x23, 1 );
     3bc:	80 91 23 00 	lds	r24, 0x0023
     3c0:	8d 8f       	std	Y+29, r24	; 0x1d
		chrPinB = (((( chrPinB & 0x01 ) << 2 ) | ( chrPinB & 0x02 ) | (( chrPinB >> 2 ) & 0x01 )) + 1 ) % 0x08;
     3c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	81 70       	andi	r24, 0x01	; 1
     3ca:	99 27       	eor	r25, r25
     3cc:	9c 01       	movw	r18, r24
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	22 0f       	add	r18, r18
     3d4:	33 1f       	adc	r19, r19
     3d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	82 70       	andi	r24, 0x02	; 2
     3de:	99 27       	eor	r25, r25
     3e0:	28 2b       	or	r18, r24
     3e2:	39 2b       	or	r19, r25
     3e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	81 70       	andi	r24, 0x01	; 1
     3f4:	99 27       	eor	r25, r25
     3f6:	82 2b       	or	r24, r18
     3f8:	93 2b       	or	r25, r19
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	87 70       	andi	r24, 0x07	; 7
     3fe:	90 78       	andi	r25, 0x80	; 128
     400:	99 23       	and	r25, r25
     402:	24 f4       	brge	.+8      	; 0x40c <__vector_5+0x176>
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	88 6f       	ori	r24, 0xF8	; 248
     408:	9f 6f       	ori	r25, 0xFF	; 255
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	8d 8f       	std	Y+29, r24	; 0x1d
		if( valLastPress == BUT_UP ){
     40e:	90 91 c5 01 	lds	r25, 0x01C5
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	99 23       	and	r25, r25
     416:	09 f0       	breq	.+2      	; 0x41a <__vector_5+0x184>
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	88 23       	and	r24, r24
     41c:	19 f0       	breq	.+6      	; 0x424 <__vector_5+0x18e>
			valLastPress = chrPinB;
     41e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     420:	80 93 c5 01 	sts	0x01C5, r24
		}
		if( valLastPress = chrPinB ){
     424:	8d 8d       	ldd	r24, Y+29	; 0x1d
     426:	80 93 c5 01 	sts	0x01C5, r24
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	88 23       	and	r24, r24
     42e:	09 f4       	brne	.+2      	; 0x432 <__vector_5+0x19c>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	99 23       	and	r25, r25
     434:	09 f4       	brne	.+2      	; 0x438 <__vector_5+0x1a2>
     436:	93 c0       	rjmp	.+294    	; 0x55e <__vector_5+0x2c8>
			valPressed = BUT_DWN;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	80 93 c0 01 	sts	0x01C0, r24
			DDRA |= 1 << PORTA4;
     43e:	81 e2       	ldi	r24, 0x21	; 33
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	21 e2       	ldi	r18, 0x21	; 33
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	20 61       	ori	r18, 0x10	; 16
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
			PORTA |= ( 1 << PINA4);
     450:	82 e2       	ldi	r24, 0x22	; 34
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	22 e2       	ldi	r18, 0x22	; 34
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 61       	ori	r18, 0x10	; 16
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	a0 ef       	ldi	r26, 0xF0	; 240
     468:	b1 e4       	ldi	r27, 0x41	; 65
     46a:	8f 87       	std	Y+15, r24	; 0x0f
     46c:	98 8b       	std	Y+16, r25	; 0x10
     46e:	a9 8b       	std	Y+17, r26	; 0x11
     470:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	4a e7       	ldi	r20, 0x7A	; 122
     478:	53 e4       	ldi	r21, 0x43	; 67
     47a:	6f 85       	ldd	r22, Y+15	; 0x0f
     47c:	78 89       	ldd	r23, Y+16	; 0x10
     47e:	89 89       	ldd	r24, Y+17	; 0x11
     480:	9a 89       	ldd	r25, Y+18	; 0x12
     482:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	8b 8b       	std	Y+19, r24	; 0x13
     48c:	9c 8b       	std	Y+20, r25	; 0x14
     48e:	ad 8b       	std	Y+21, r26	; 0x15
     490:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	6b 89       	ldd	r22, Y+19	; 0x13
     49c:	7c 89       	ldd	r23, Y+20	; 0x14
     49e:	8d 89       	ldd	r24, Y+21	; 0x15
     4a0:	9e 89       	ldd	r25, Y+22	; 0x16
     4a2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     4a6:	88 23       	and	r24, r24
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <__vector_5+0x21e>
		__ticks = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 8f       	std	Y+24, r25	; 0x18
     4b0:	8f 8b       	std	Y+23, r24	; 0x17
     4b2:	3f c0       	rjmp	.+126    	; 0x532 <__vector_5+0x29c>
	else if (__tmp > 65535)
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	3f ef       	ldi	r19, 0xFF	; 255
     4b8:	4f e7       	ldi	r20, 0x7F	; 127
     4ba:	57 e4       	ldi	r21, 0x47	; 71
     4bc:	6b 89       	ldd	r22, Y+19	; 0x13
     4be:	7c 89       	ldd	r23, Y+20	; 0x14
     4c0:	8d 89       	ldd	r24, Y+21	; 0x15
     4c2:	9e 89       	ldd	r25, Y+22	; 0x16
     4c4:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	4c f5       	brge	.+82     	; 0x51e <__vector_5+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	6f 85       	ldd	r22, Y+15	; 0x0f
     4d6:	78 89       	ldd	r23, Y+16	; 0x10
     4d8:	89 89       	ldd	r24, Y+17	; 0x11
     4da:	9a 89       	ldd	r25, Y+18	; 0x12
     4dc:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	98 8f       	std	Y+24, r25	; 0x18
     4f2:	8f 8b       	std	Y+23, r24	; 0x17
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <__vector_5+0x27e>
     4f6:	89 e1       	ldi	r24, 0x19	; 25
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9a 8f       	std	Y+26, r25	; 0x1a
     4fc:	89 8f       	std	Y+25, r24	; 0x19
     4fe:	89 8d       	ldd	r24, Y+25	; 0x19
     500:	9a 8d       	ldd	r25, Y+26	; 0x1a
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <__vector_5+0x26c>
     506:	9a 8f       	std	Y+26, r25	; 0x1a
     508:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50a:	8f 89       	ldd	r24, Y+23	; 0x17
     50c:	98 8d       	ldd	r25, Y+24	; 0x18
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	98 8f       	std	Y+24, r25	; 0x18
     512:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     514:	8f 89       	ldd	r24, Y+23	; 0x17
     516:	98 8d       	ldd	r25, Y+24	; 0x18
     518:	89 2b       	or	r24, r25
     51a:	69 f7       	brne	.-38     	; 0x4f6 <__vector_5+0x260>
     51c:	14 c0       	rjmp	.+40     	; 0x546 <__vector_5+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     51e:	6b 89       	ldd	r22, Y+19	; 0x13
     520:	7c 89       	ldd	r23, Y+20	; 0x14
     522:	8d 89       	ldd	r24, Y+21	; 0x15
     524:	9e 89       	ldd	r25, Y+22	; 0x16
     526:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	98 8f       	std	Y+24, r25	; 0x18
     530:	8f 8b       	std	Y+23, r24	; 0x17
     532:	8f 89       	ldd	r24, Y+23	; 0x17
     534:	98 8d       	ldd	r25, Y+24	; 0x18
     536:	9c 8f       	std	Y+28, r25	; 0x1c
     538:	8b 8f       	std	Y+27, r24	; 0x1b
     53a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <__vector_5+0x2a8>
     542:	9c 8f       	std	Y+28, r25	; 0x1c
     544:	8b 8f       	std	Y+27, r24	; 0x1b
			_delay_ms(30);
			PORTA &= ~( 1 << PINA4);
     546:	82 e2       	ldi	r24, 0x22	; 34
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	22 e2       	ldi	r18, 0x22	; 34
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	2f 7e       	andi	r18, 0xEF	; 239
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
     558:	02 c0       	rjmp	.+4      	; 0x55e <__vector_5+0x2c8>
		}
	}else{
		valPressed = BUT_UP;
     55a:	10 92 c0 01 	sts	0x01C0, r1
	}
}
     55e:	6d 96       	adiw	r28, 0x1d	; 29
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	ff 91       	pop	r31
     570:	ef 91       	pop	r30
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	0f 90       	pop	r0
     588:	00 92 5b 00 	sts	0x005B, r0
     58c:	0f 90       	pop	r0
     58e:	00 92 5f 00 	sts	0x005F, r0
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     598:	2f 92       	push	r2
     59a:	3f 92       	push	r3
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	29 97       	sbiw	r28, 0x09	; 9
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	99 87       	std	Y+9, r25	; 0x09
     5ce:	88 87       	std	Y+8, r24	; 0x08
     5d0:	88 85       	ldd	r24, Y+8	; 0x08
     5d2:	99 85       	ldd	r25, Y+9	; 0x09
     5d4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <_ZN3rtc8get_timeEv>
     5d8:	a2 2e       	mov	r10, r18
     5da:	b3 2e       	mov	r11, r19
     5dc:	c4 2e       	mov	r12, r20
     5de:	d5 2e       	mov	r13, r21
     5e0:	e6 2e       	mov	r14, r22
     5e2:	f7 2e       	mov	r15, r23
     5e4:	08 2f       	mov	r16, r24
     5e6:	19 2f       	mov	r17, r25
     5e8:	2a 2d       	mov	r18, r10
     5ea:	3b 2d       	mov	r19, r11
     5ec:	4c 2d       	mov	r20, r12
     5ee:	5d 2d       	mov	r21, r13
     5f0:	6e 2d       	mov	r22, r14
     5f2:	7f 2d       	mov	r23, r15
     5f4:	80 2f       	mov	r24, r16
     5f6:	91 2f       	mov	r25, r17
     5f8:	29 83       	std	Y+1, r18	; 0x01
     5fa:	3a 83       	std	Y+2, r19	; 0x02
     5fc:	4b 83       	std	Y+3, r20	; 0x03
     5fe:	5c 83       	std	Y+4, r21	; 0x04
     600:	6d 83       	std	Y+5, r22	; 0x05
     602:	7e 83       	std	Y+6, r23	; 0x06
     604:	8f 83       	std	Y+7, r24	; 0x07
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	5a 81       	ldd	r21, Y+2	; 0x02
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	4b 81       	ldd	r20, Y+3	; 0x03
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	3c 81       	ldd	r19, Y+4	; 0x04
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	2d 81       	ldd	r18, Y+5	; 0x05
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9e 81       	ldd	r25, Y+6	; 0x06
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	8f 81       	ldd	r24, Y+7	; 0x07
     622:	26 2e       	mov	r2, r22
     624:	35 2e       	mov	r3, r21
     626:	44 2e       	mov	r4, r20
     628:	53 2e       	mov	r5, r19
     62a:	62 2e       	mov	r6, r18
     62c:	79 2e       	mov	r7, r25
     62e:	88 2e       	mov	r8, r24
     630:	a2 2c       	mov	r10, r2
     632:	b3 2c       	mov	r11, r3
     634:	c4 2c       	mov	r12, r4
     636:	d5 2c       	mov	r13, r5
     638:	e6 2c       	mov	r14, r6
     63a:	f7 2c       	mov	r15, r7
     63c:	08 2d       	mov	r16, r8
     63e:	19 2d       	mov	r17, r9
     640:	2a 2d       	mov	r18, r10
     642:	3b 2d       	mov	r19, r11
     644:	4c 2d       	mov	r20, r12
     646:	5d 2d       	mov	r21, r13
     648:	6e 2d       	mov	r22, r14
     64a:	7f 2d       	mov	r23, r15
     64c:	80 2f       	mov	r24, r16
     64e:	91 2f       	mov	r25, r17
     650:	29 96       	adiw	r28, 0x09	; 9
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	7f 90       	pop	r7
     676:	6f 90       	pop	r6
     678:	5f 90       	pop	r5
     67a:	4f 90       	pop	r4
     67c:	3f 90       	pop	r3
     67e:	2f 90       	pop	r2
     680:	08 95       	ret

00000682 <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	00 d0       	rcall	.+0      	; 0x688 <_ZN3rtc3setEP8rtc_time+0x6>
     688:	00 d0       	rcall	.+0      	; 0x68a <_ZN3rtc3setEP8rtc_time+0x8>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	7c 83       	std	Y+4, r23	; 0x04
     694:	6b 83       	std	Y+3, r22	; 0x03
     696:	2b 81       	ldd	r18, Y+3	; 0x03
     698:	3c 81       	ldd	r19, Y+4	; 0x04
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	b9 01       	movw	r22, r18
     6a0:	0e 94 0e 18 	call	0x301c	; 0x301c <_ZN3rtc8set_timeEP8rtc_time>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <main>:
led ledAlarm;
rtc_time rtmCurrent{0x50, 0x59, 0x72, 0x02, 0x11, 0x04, 0x16};
uint8_t valLastPress{ BUT_UP };


int main(){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <main+0x6>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <main+0x8>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	
	rtc_alarm rtaAlarm0{ 0x00, 0x61 };
     6be:	19 82       	std	Y+1, r1	; 0x01
     6c0:	81 e6       	ldi	r24, 0x61	; 97
     6c2:	8a 83       	std	Y+2, r24	; 0x02
	rtc_alarm rtaAlarm1 { 0x80, 0x80 };
     6c4:	80 e8       	ldi	r24, 0x80	; 128
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	80 e8       	ldi	r24, 0x80	; 128
     6ca:	8c 83       	std	Y+4, r24	; 0x04
	
	HeadsUp_Init();
     6cc:	1c d0       	rcall	.+56     	; 0x706 <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	9c 01       	movw	r18, r24
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	81 ec       	ldi	r24, 0xC1	; 193
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 ad 1b 	call	0x375a	; 0x375a <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	9c 01       	movw	r18, r24
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	81 ec       	ldi	r24, 0xC1	; 193
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 ad 1b 	call	0x375a	; 0x375a <_ZN3rtc5alarmEhh9rtc_alarm>

	Menu_Main();
     6f2:	26 d5       	rcall	.+2636   	; 0x1140 <_Z9Menu_Mainv>
	
	return 0;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0

}
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <_Z12HeadsUp_Initv>:


void HeadsUp_Init(){
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	a4 97       	sbiw	r28, 0x24	; 36
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrCurrentTime[ LCD_LINE_SIZE ] ;
	unsigned char chrTime[]{"1259PMOJAN01"};
     726:	8d e0       	ldi	r24, 0x0D	; 13
     728:	e7 e0       	ldi	r30, 0x07	; 7
     72a:	f1 e0       	ldi	r31, 0x01	; 1
     72c:	de 01       	movw	r26, r28
     72e:	51 96       	adiw	r26, 0x11	; 17
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	8a 95       	dec	r24
     736:	e1 f7       	brne	.-8      	; 0x730 <_Z12HeadsUp_Initv+0x2a>
	rtc_time rtmTime;
	
	
	Test_On_PortA0();
     738:	be d1       	rcall	.+892    	; 0xab6 <_Z14Test_On_PortA0v>
	rtcDS.char_to_rtm(chrTime, &rtmTime);
     73a:	9e 01       	movw	r18, r28
     73c:	22 5e       	subi	r18, 0xE2	; 226
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	ce 01       	movw	r24, r28
     742:	41 96       	adiw	r24, 0x11	; 17
     744:	a9 01       	movw	r20, r18
     746:	bc 01       	movw	r22, r24
     748:	81 ec       	ldi	r24, 0xC1	; 193
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN3rtc11char_to_rtmEPhP8rtc_time>
	rtcDS.set(&rtmTime);
     750:	ce 01       	movw	r24, r28
     752:	4e 96       	adiw	r24, 0x1e	; 30
     754:	bc 01       	movw	r22, r24
     756:	81 ec       	ldi	r24, 0xC1	; 193
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	93 df       	rcall	.-218    	; 0x682 <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT( 2 );
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	32 d0       	rcall	.+100    	; 0x7c4 <_Z12Enable_PCINTh>
	Enable_PCINT( 3 );
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	30 d0       	rcall	.+96     	; 0x7c4 <_Z12Enable_PCINTh>
	Enable_PCINT( 8 );
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	2e d0       	rcall	.+92     	; 0x7c4 <_Z12Enable_PCINTh>
	Enable_PCINT( 9 );
     768:	89 e0       	ldi	r24, 0x09	; 9
     76a:	2c d0       	rcall	.+88     	; 0x7c4 <_Z12Enable_PCINTh>
	Enable_PCINT( 10 );
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	2a d0       	rcall	.+84     	; 0x7c4 <_Z12Enable_PCINTh>
	sei();
     770:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmTime, chrCurrentTime, LCD_LINE_SIZE );
     772:	68 94       	set
     774:	cc 24       	eor	r12, r12
     776:	c4 f8       	bld	r12, 4
     778:	d1 2c       	mov	r13, r1
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	7c 01       	movw	r14, r24
     780:	0e 8d       	ldd	r16, Y+30	; 0x1e
     782:	1f 8d       	ldd	r17, Y+31	; 0x1f
     784:	28 a1       	ldd	r18, Y+32	; 0x20
     786:	39 a1       	ldd	r19, Y+33	; 0x21
     788:	4a a1       	ldd	r20, Y+34	; 0x22
     78a:	5b a1       	ldd	r21, Y+35	; 0x23
     78c:	6c a1       	ldd	r22, Y+36	; 0x24
     78e:	81 ec       	ldi	r24, 0xC1	; 193
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( chrCurrentTime , LCD_LINE_TOP );
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	bc 01       	movw	r22, r24
     79e:	82 ec       	ldi	r24, 0xC2	; 194
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>

}
     7a6:	a4 96       	adiw	r28, 0x24	; 36
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <_Z12Enable_PCINTh>:


void Enable_PCINT( uint8_t valPC ){
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	1f 92       	push	r1
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	89 83       	std	Y+1, r24	; 0x01
	
	if( valPC < 8 ){
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	88 30       	cpi	r24, 0x08	; 8
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <_Z12Enable_PCINTh+0x14>
     7d6:	59 c0       	rjmp	.+178    	; 0x88a <_Z12Enable_PCINTh+0xc6>
		DDRA &= ~( 1 << ( valPC % 8 ));
     7d8:	81 e2       	ldi	r24, 0x21	; 33
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	21 e2       	ldi	r18, 0x21	; 33
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	62 2f       	mov	r22, r18
     7e6:	29 81       	ldd	r18, Y+1	; 0x01
     7e8:	22 2f       	mov	r18, r18
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	47 70       	andi	r20, 0x07	; 7
     7f0:	55 27       	eor	r21, r21
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_Z12Enable_PCINTh+0x38>
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	4a 95       	dec	r20
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <_Z12Enable_PCINTh+0x34>
     800:	20 95       	com	r18
     802:	26 23       	and	r18, r22
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
		PORTA |= 1 << ( valPC % 8 );
     808:	82 e2       	ldi	r24, 0x22	; 34
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	22 e2       	ldi	r18, 0x22	; 34
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	62 2f       	mov	r22, r18
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	22 2f       	mov	r18, r18
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	47 70       	andi	r20, 0x07	; 7
     820:	55 27       	eor	r21, r21
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <_Z12Enable_PCINTh+0x68>
     828:	22 0f       	add	r18, r18
     82a:	33 1f       	adc	r19, r19
     82c:	4a 95       	dec	r20
     82e:	e2 f7       	brpl	.-8      	; 0x828 <_Z12Enable_PCINTh+0x64>
     830:	26 2b       	or	r18, r22
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE0;
     836:	88 e6       	ldi	r24, 0x68	; 104
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	28 e6       	ldi	r18, 0x68	; 104
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	21 60       	ori	r18, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
		PCMSK0 |= 1 << ( valPC % 8 );
     848:	8b e6       	ldi	r24, 0x6B	; 107
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2b e6       	ldi	r18, 0x6B	; 107
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	62 2f       	mov	r22, r18
     856:	29 81       	ldd	r18, Y+1	; 0x01
     858:	22 2f       	mov	r18, r18
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	a9 01       	movw	r20, r18
     85e:	47 70       	andi	r20, 0x07	; 7
     860:	55 27       	eor	r21, r21
     862:	21 e0       	ldi	r18, 0x01	; 1
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <_Z12Enable_PCINTh+0xa8>
     868:	22 0f       	add	r18, r18
     86a:	33 1f       	adc	r19, r19
     86c:	4a 95       	dec	r20
     86e:	e2 f7       	brpl	.-8      	; 0x868 <_Z12Enable_PCINTh+0xa4>
     870:	26 2b       	or	r18, r22
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF0;
     876:	8b e3       	ldi	r24, 0x3B	; 59
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	2b e3       	ldi	r18, 0x3B	; 59
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	f9 01       	movw	r30, r18
     880:	20 81       	ld	r18, Z
     882:	21 60       	ori	r18, 0x01	; 1
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
     888:	12 c1       	rjmp	.+548    	; 0xaae <_Z12Enable_PCINTh+0x2ea>
	}else if( valPC < 16 ){
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	80 31       	cpi	r24, 0x10	; 16
     88e:	08 f0       	brcs	.+2      	; 0x892 <_Z12Enable_PCINTh+0xce>
     890:	59 c0       	rjmp	.+178    	; 0x944 <_Z12Enable_PCINTh+0x180>
		DDRB &= ~( 1 << ( valPC % 8 ));
     892:	84 e2       	ldi	r24, 0x24	; 36
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	24 e2       	ldi	r18, 0x24	; 36
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	f9 01       	movw	r30, r18
     89c:	20 81       	ld	r18, Z
     89e:	62 2f       	mov	r22, r18
     8a0:	29 81       	ldd	r18, Y+1	; 0x01
     8a2:	22 2f       	mov	r18, r18
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	a9 01       	movw	r20, r18
     8a8:	47 70       	andi	r20, 0x07	; 7
     8aa:	55 27       	eor	r21, r21
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <_Z12Enable_PCINTh+0xf2>
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	4a 95       	dec	r20
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <_Z12Enable_PCINTh+0xee>
     8ba:	20 95       	com	r18
     8bc:	26 23       	and	r18, r22
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
		PORTB |= 1 << ( valPC % 8 );
     8c2:	85 e2       	ldi	r24, 0x25	; 37
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	25 e2       	ldi	r18, 0x25	; 37
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	f9 01       	movw	r30, r18
     8cc:	20 81       	ld	r18, Z
     8ce:	62 2f       	mov	r22, r18
     8d0:	29 81       	ldd	r18, Y+1	; 0x01
     8d2:	22 2f       	mov	r18, r18
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	a9 01       	movw	r20, r18
     8d8:	47 70       	andi	r20, 0x07	; 7
     8da:	55 27       	eor	r21, r21
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <_Z12Enable_PCINTh+0x122>
     8e2:	22 0f       	add	r18, r18
     8e4:	33 1f       	adc	r19, r19
     8e6:	4a 95       	dec	r20
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <_Z12Enable_PCINTh+0x11e>
     8ea:	26 2b       	or	r18, r22
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE1;
     8f0:	88 e6       	ldi	r24, 0x68	; 104
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	28 e6       	ldi	r18, 0x68	; 104
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	22 60       	ori	r18, 0x02	; 2
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
		PCMSK1 |= 1 << ( valPC % 8 );
     902:	8c e6       	ldi	r24, 0x6C	; 108
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	2c e6       	ldi	r18, 0x6C	; 108
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	62 2f       	mov	r22, r18
     910:	29 81       	ldd	r18, Y+1	; 0x01
     912:	22 2f       	mov	r18, r18
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	a9 01       	movw	r20, r18
     918:	47 70       	andi	r20, 0x07	; 7
     91a:	55 27       	eor	r21, r21
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <_Z12Enable_PCINTh+0x162>
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	4a 95       	dec	r20
     928:	e2 f7       	brpl	.-8      	; 0x922 <_Z12Enable_PCINTh+0x15e>
     92a:	26 2b       	or	r18, r22
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF1;
     930:	8b e3       	ldi	r24, 0x3B	; 59
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2b e3       	ldi	r18, 0x3B	; 59
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	22 60       	ori	r18, 0x02	; 2
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
     942:	b5 c0       	rjmp	.+362    	; 0xaae <_Z12Enable_PCINTh+0x2ea>
	}else if( valPC < 24 ){
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 31       	cpi	r24, 0x18	; 24
     948:	08 f0       	brcs	.+2      	; 0x94c <_Z12Enable_PCINTh+0x188>
     94a:	59 c0       	rjmp	.+178    	; 0x9fe <_Z12Enable_PCINTh+0x23a>
		DDRC &= ~( 1 << ( valPC % 8 ));
     94c:	87 e2       	ldi	r24, 0x27	; 39
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	27 e2       	ldi	r18, 0x27	; 39
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	62 2f       	mov	r22, r18
     95a:	29 81       	ldd	r18, Y+1	; 0x01
     95c:	22 2f       	mov	r18, r18
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	a9 01       	movw	r20, r18
     962:	47 70       	andi	r20, 0x07	; 7
     964:	55 27       	eor	r21, r21
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <_Z12Enable_PCINTh+0x1ac>
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	4a 95       	dec	r20
     972:	e2 f7       	brpl	.-8      	; 0x96c <_Z12Enable_PCINTh+0x1a8>
     974:	20 95       	com	r18
     976:	26 23       	and	r18, r22
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18
		PORTC |= 1 << ( valPC % 8 );
     97c:	88 e2       	ldi	r24, 0x28	; 40
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	28 e2       	ldi	r18, 0x28	; 40
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	62 2f       	mov	r22, r18
     98a:	29 81       	ldd	r18, Y+1	; 0x01
     98c:	22 2f       	mov	r18, r18
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	a9 01       	movw	r20, r18
     992:	47 70       	andi	r20, 0x07	; 7
     994:	55 27       	eor	r21, r21
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <_Z12Enable_PCINTh+0x1dc>
     99c:	22 0f       	add	r18, r18
     99e:	33 1f       	adc	r19, r19
     9a0:	4a 95       	dec	r20
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <_Z12Enable_PCINTh+0x1d8>
     9a4:	26 2b       	or	r18, r22
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE2;
     9aa:	88 e6       	ldi	r24, 0x68	; 104
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 e6       	ldi	r18, 0x68	; 104
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	24 60       	ori	r18, 0x04	; 4
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
		PCMSK2 |= 1 << ( valPC % 8 );
     9bc:	8d e6       	ldi	r24, 0x6D	; 109
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	2d e6       	ldi	r18, 0x6D	; 109
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	62 2f       	mov	r22, r18
     9ca:	29 81       	ldd	r18, Y+1	; 0x01
     9cc:	22 2f       	mov	r18, r18
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	a9 01       	movw	r20, r18
     9d2:	47 70       	andi	r20, 0x07	; 7
     9d4:	55 27       	eor	r21, r21
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <_Z12Enable_PCINTh+0x21c>
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	4a 95       	dec	r20
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <_Z12Enable_PCINTh+0x218>
     9e4:	26 2b       	or	r18, r22
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF2;
     9ea:	8b e3       	ldi	r24, 0x3B	; 59
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2b e3       	ldi	r18, 0x3B	; 59
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	24 60       	ori	r18, 0x04	; 4
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	58 c0       	rjmp	.+176    	; 0xaae <_Z12Enable_PCINTh+0x2ea>
	}else{
		DDRD &= ~( 1 << ( valPC % 8 ));
     9fe:	8a e2       	ldi	r24, 0x2A	; 42
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	2a e2       	ldi	r18, 0x2A	; 42
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	62 2f       	mov	r22, r18
     a0c:	29 81       	ldd	r18, Y+1	; 0x01
     a0e:	22 2f       	mov	r18, r18
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	a9 01       	movw	r20, r18
     a14:	47 70       	andi	r20, 0x07	; 7
     a16:	55 27       	eor	r21, r21
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <_Z12Enable_PCINTh+0x25e>
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	4a 95       	dec	r20
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <_Z12Enable_PCINTh+0x25a>
     a26:	20 95       	com	r18
     a28:	26 23       	and	r18, r22
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
		PORTD |= 1 << ( valPC % 8 );
     a2e:	8b e2       	ldi	r24, 0x2B	; 43
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2b e2       	ldi	r18, 0x2B	; 43
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	62 2f       	mov	r22, r18
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	22 2f       	mov	r18, r18
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	a9 01       	movw	r20, r18
     a44:	47 70       	andi	r20, 0x07	; 7
     a46:	55 27       	eor	r21, r21
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <_Z12Enable_PCINTh+0x28e>
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	4a 95       	dec	r20
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <_Z12Enable_PCINTh+0x28a>
     a56:	26 2b       	or	r18, r22
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE3;
     a5c:	88 e6       	ldi	r24, 0x68	; 104
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	28 e6       	ldi	r18, 0x68	; 104
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	28 60       	ori	r18, 0x08	; 8
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
		PCMSK3 |= 1 << ( valPC % 8 );
     a6e:	83 e7       	ldi	r24, 0x73	; 115
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	23 e7       	ldi	r18, 0x73	; 115
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	62 2f       	mov	r22, r18
     a7c:	29 81       	ldd	r18, Y+1	; 0x01
     a7e:	22 2f       	mov	r18, r18
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	a9 01       	movw	r20, r18
     a84:	47 70       	andi	r20, 0x07	; 7
     a86:	55 27       	eor	r21, r21
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <_Z12Enable_PCINTh+0x2ce>
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	4a 95       	dec	r20
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <_Z12Enable_PCINTh+0x2ca>
     a96:	26 2b       	or	r18, r22
     a98:	fc 01       	movw	r30, r24
     a9a:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF3;
     a9c:	8b e3       	ldi	r24, 0x3B	; 59
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	2b e3       	ldi	r18, 0x3B	; 59
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	f9 01       	movw	r30, r18
     aa6:	20 81       	ld	r18, Z
     aa8:	28 60       	ori	r18, 0x08	; 8
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
	}

}
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	6c 97       	sbiw	r28, 0x1c	; 28
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     aca:	81 e2       	ldi	r24, 0x21	; 33
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	21 e2       	ldi	r18, 0x21	; 33
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	f9 01       	movw	r30, r18
     ad4:	20 81       	ld	r18, Z
     ad6:	21 60       	ori	r18, 0x01	; 1
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     adc:	82 e2       	ldi	r24, 0x22	; 34
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	22 e2       	ldi	r18, 0x22	; 34
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	21 60       	ori	r18, 0x01	; 1
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	aa e7       	ldi	r26, 0x7A	; 122
     af4:	b3 e4       	ldi	r27, 0x43	; 67
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	9a 83       	std	Y+2, r25	; 0x02
     afa:	ab 83       	std	Y+3, r26	; 0x03
     afc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	4a e7       	ldi	r20, 0x7A	; 122
     b04:	53 e4       	ldi	r21, 0x43	; 67
     b06:	69 81       	ldd	r22, Y+1	; 0x01
     b08:	7a 81       	ldd	r23, Y+2	; 0x02
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	8d 83       	std	Y+5, r24	; 0x05
     b18:	9e 83       	std	Y+6, r25	; 0x06
     b1a:	af 83       	std	Y+7, r26	; 0x07
     b1c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e8       	ldi	r20, 0x80	; 128
     b24:	5f e3       	ldi	r21, 0x3F	; 63
     b26:	6d 81       	ldd	r22, Y+5	; 0x05
     b28:	7e 81       	ldd	r23, Y+6	; 0x06
     b2a:	8f 81       	ldd	r24, Y+7	; 0x07
     b2c:	98 85       	ldd	r25, Y+8	; 0x08
     b2e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     b32:	88 23       	and	r24, r24
     b34:	2c f4       	brge	.+10     	; 0xb40 <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	9a 87       	std	Y+10, r25	; 0x0a
     b3c:	89 87       	std	Y+9, r24	; 0x09
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	4f e7       	ldi	r20, 0x7F	; 127
     b46:	57 e4       	ldi	r21, 0x47	; 71
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	7e 81       	ldd	r23, Y+6	; 0x06
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	98 85       	ldd	r25, Y+8	; 0x08
     b50:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     b54:	18 16       	cp	r1, r24
     b56:	4c f5       	brge	.+82     	; 0xbaa <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e2       	ldi	r20, 0x20	; 32
     b5e:	51 e4       	ldi	r21, 0x41	; 65
     b60:	69 81       	ldd	r22, Y+1	; 0x01
     b62:	7a 81       	ldd	r23, Y+2	; 0x02
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	9a 87       	std	Y+10, r25	; 0x0a
     b7e:	89 87       	std	Y+9, r24	; 0x09
     b80:	0f c0       	rjmp	.+30     	; 0xba0 <_Z14Test_On_PortA0v+0xea>
     b82:	89 e1       	ldi	r24, 0x19	; 25
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <_Z14Test_On_PortA0v+0xd8>
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b96:	89 85       	ldd	r24, Y+9	; 0x09
     b98:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	9a 87       	std	Y+10, r25	; 0x0a
     b9e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	89 2b       	or	r24, r25
     ba6:	69 f7       	brne	.-38     	; 0xb82 <_Z14Test_On_PortA0v+0xcc>
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     baa:	6d 81       	ldd	r22, Y+5	; 0x05
     bac:	7e 81       	ldd	r23, Y+6	; 0x06
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	9a 87       	std	Y+10, r25	; 0x0a
     bbc:	89 87       	std	Y+9, r24	; 0x09
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	9e 87       	std	Y+14, r25	; 0x0e
     bc4:	8d 87       	std	Y+13, r24	; 0x0d
     bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <_Z14Test_On_PortA0v+0x114>
     bce:	9e 87       	std	Y+14, r25	; 0x0e
     bd0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     bd2:	82 e2       	ldi	r24, 0x22	; 34
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	22 e2       	ldi	r18, 0x22	; 34
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	2e 7f       	andi	r18, 0xFE	; 254
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	aa e7       	ldi	r26, 0x7A	; 122
     bea:	b3 e4       	ldi	r27, 0x43	; 67
     bec:	8f 87       	std	Y+15, r24	; 0x0f
     bee:	98 8b       	std	Y+16, r25	; 0x10
     bf0:	a9 8b       	std	Y+17, r26	; 0x11
     bf2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4a e7       	ldi	r20, 0x7A	; 122
     bfa:	53 e4       	ldi	r21, 0x43	; 67
     bfc:	6f 85       	ldd	r22, Y+15	; 0x0f
     bfe:	78 89       	ldd	r23, Y+16	; 0x10
     c00:	89 89       	ldd	r24, Y+17	; 0x11
     c02:	9a 89       	ldd	r25, Y+18	; 0x12
     c04:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	8b 8b       	std	Y+19, r24	; 0x13
     c0e:	9c 8b       	std	Y+20, r25	; 0x14
     c10:	ad 8b       	std	Y+21, r26	; 0x15
     c12:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e8       	ldi	r20, 0x80	; 128
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	6b 89       	ldd	r22, Y+19	; 0x13
     c1e:	7c 89       	ldd	r23, Y+20	; 0x14
     c20:	8d 89       	ldd	r24, Y+21	; 0x15
     c22:	9e 89       	ldd	r25, Y+22	; 0x16
     c24:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     c28:	88 23       	and	r24, r24
     c2a:	2c f4       	brge	.+10     	; 0xc36 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	98 8f       	std	Y+24, r25	; 0x18
     c32:	8f 8b       	std	Y+23, r24	; 0x17
     c34:	3f c0       	rjmp	.+126    	; 0xcb4 <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	3f ef       	ldi	r19, 0xFF	; 255
     c3a:	4f e7       	ldi	r20, 0x7F	; 127
     c3c:	57 e4       	ldi	r21, 0x47	; 71
     c3e:	6b 89       	ldd	r22, Y+19	; 0x13
     c40:	7c 89       	ldd	r23, Y+20	; 0x14
     c42:	8d 89       	ldd	r24, Y+21	; 0x15
     c44:	9e 89       	ldd	r25, Y+22	; 0x16
     c46:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	4c f5       	brge	.+82     	; 0xca0 <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e2       	ldi	r20, 0x20	; 32
     c54:	51 e4       	ldi	r21, 0x41	; 65
     c56:	6f 85       	ldd	r22, Y+15	; 0x0f
     c58:	78 89       	ldd	r23, Y+16	; 0x10
     c5a:	89 89       	ldd	r24, Y+17	; 0x11
     c5c:	9a 89       	ldd	r25, Y+18	; 0x12
     c5e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	98 8f       	std	Y+24, r25	; 0x18
     c74:	8f 8b       	std	Y+23, r24	; 0x17
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <_Z14Test_On_PortA0v+0x1e0>
     c78:	89 e1       	ldi	r24, 0x19	; 25
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9a 8f       	std	Y+26, r25	; 0x1a
     c7e:	89 8f       	std	Y+25, r24	; 0x19
     c80:	89 8d       	ldd	r24, Y+25	; 0x19
     c82:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <_Z14Test_On_PortA0v+0x1ce>
     c88:	9a 8f       	std	Y+26, r25	; 0x1a
     c8a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8c:	8f 89       	ldd	r24, Y+23	; 0x17
     c8e:	98 8d       	ldd	r25, Y+24	; 0x18
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	98 8f       	std	Y+24, r25	; 0x18
     c94:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c96:	8f 89       	ldd	r24, Y+23	; 0x17
     c98:	98 8d       	ldd	r25, Y+24	; 0x18
     c9a:	89 2b       	or	r24, r25
     c9c:	69 f7       	brne	.-38     	; 0xc78 <_Z14Test_On_PortA0v+0x1c2>
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca0:	6b 89       	ldd	r22, Y+19	; 0x13
     ca2:	7c 89       	ldd	r23, Y+20	; 0x14
     ca4:	8d 89       	ldd	r24, Y+21	; 0x15
     ca6:	9e 89       	ldd	r25, Y+22	; 0x16
     ca8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	98 8f       	std	Y+24, r25	; 0x18
     cb2:	8f 8b       	std	Y+23, r24	; 0x17
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	9c 8f       	std	Y+28, r25	; 0x1c
     cba:	8b 8f       	std	Y+27, r24	; 0x1b
     cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <_Z14Test_On_PortA0v+0x20a>
     cc4:	9c 8f       	std	Y+28, r25	; 0x1c
     cc6:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     cc8:	82 e2       	ldi	r24, 0x22	; 34
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	22 e2       	ldi	r18, 0x22	; 34
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	20 81       	ld	r18, Z
     cd4:	21 60       	ori	r18, 0x01	; 1
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
	
}
     cda:	6c 96       	adiw	r28, 0x1c	; 28
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <__vector_4>:


ISR( PCINT0_vect ){
     cec:	1f 92       	push	r1
     cee:	0f 92       	push	r0
     cf0:	00 90 5f 00 	lds	r0, 0x005F
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	00 90 5b 00 	lds	r0, 0x005B
     cfc:	0f 92       	push	r0
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	c1 54       	subi	r28, 0x41	; 65
     d30:	d1 09       	sbc	r29, r1
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	uint8_t valCounter{ 100 };
     d36:	84 e6       	ldi	r24, 0x64	; 100
     d38:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t valIDelta{ valCounter / 100 };
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	89 e2       	ldi	r24, 0x29	; 41
     d3e:	98 9f       	mul	r25, r24
     d40:	81 2d       	mov	r24, r1
     d42:	11 24       	eor	r1, r1
     d44:	82 95       	swap	r24
     d46:	8f 70       	andi	r24, 0x0F	; 15
     d48:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t valI{ 0 };
     d4a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char chrAlarmBot[LCD_LINE_SIZE + 1]{ " ((( ALARM! ))) "};
     d4c:	81 e1       	ldi	r24, 0x11	; 17
     d4e:	e4 e1       	ldi	r30, 0x14	; 20
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	de 01       	movw	r26, r28
     d54:	91 96       	adiw	r26, 0x21	; 33
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <__vector_4+0x6a>
	unsigned char chrTop[LCD_LINE_SIZE]{ };
     d5e:	20 e1       	ldi	r18, 0x10	; 16
     d60:	ce 01       	movw	r24, r28
     d62:	c2 96       	adiw	r24, 0x32	; 50
     d64:	fc 01       	movw	r30, r24
     d66:	32 2f       	mov	r19, r18
     d68:	11 92       	st	Z+, r1
     d6a:	3a 95       	dec	r19
     d6c:	e9 f7       	brne	.-6      	; 0xd68 <__vector_4+0x7c>

	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     d6e:	80 91 20 00 	lds	r24, 0x0020
     d72:	88 a3       	std	Y+32, r24	; 0x20
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     d74:	88 a1       	ldd	r24, Y+32	; 0x20
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	88 70       	andi	r24, 0x08	; 8
     d7c:	99 27       	eor	r25, r25
     d7e:	89 2b       	or	r24, r25
     d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_4+0x98>
     d82:	69 c1       	rjmp	.+722    	; 0x1056 <__vector_4+0x36a>
		lcdNHD.print( chrAlarmBot, LCD_LINE_BOTTOM );
     d84:	ce 01       	movw	r24, r28
     d86:	81 96       	adiw	r24, 0x21	; 33
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	bc 01       	movw	r22, r24
     d8c:	82 ec       	ldi	r24, 0xC2	; 194
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>
		rtmCurrent = rtcDS.get();
     d94:	81 ec       	ldi	r24, 0xC1	; 193
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	ff db       	rcall	.-2050   	; 0x598 <_ZN3rtc3getEv>
     d9a:	a2 2e       	mov	r10, r18
     d9c:	b3 2e       	mov	r11, r19
     d9e:	c4 2e       	mov	r12, r20
     da0:	d5 2e       	mov	r13, r21
     da2:	e6 2e       	mov	r14, r22
     da4:	f7 2e       	mov	r15, r23
     da6:	08 2f       	mov	r16, r24
     da8:	19 2f       	mov	r17, r25
     daa:	2a 2d       	mov	r18, r10
     dac:	3b 2d       	mov	r19, r11
     dae:	4c 2d       	mov	r20, r12
     db0:	5d 2d       	mov	r21, r13
     db2:	6e 2d       	mov	r22, r14
     db4:	7f 2d       	mov	r23, r15
     db6:	80 2f       	mov	r24, r16
     db8:	91 2f       	mov	r25, r17
     dba:	20 93 00 01 	sts	0x0100, r18
     dbe:	30 93 01 01 	sts	0x0101, r19
     dc2:	40 93 02 01 	sts	0x0102, r20
     dc6:	50 93 03 01 	sts	0x0103, r21
     dca:	60 93 04 01 	sts	0x0104, r22
     dce:	70 93 05 01 	sts	0x0105, r23
     dd2:	80 93 06 01 	sts	0x0106, r24
		rtcDS.rtm_to_char( rtmCurrent, chrTop, LCD_LINE_SIZE );
     dd6:	ce 01       	movw	r24, r28
     dd8:	c2 96       	adiw	r24, 0x32	; 50
     dda:	68 94       	set
     ddc:	cc 24       	eor	r12, r12
     dde:	c4 f8       	bld	r12, 4
     de0:	d1 2c       	mov	r13, r1
     de2:	7c 01       	movw	r14, r24
     de4:	00 91 00 01 	lds	r16, 0x0100
     de8:	10 91 01 01 	lds	r17, 0x0101
     dec:	20 91 02 01 	lds	r18, 0x0102
     df0:	30 91 03 01 	lds	r19, 0x0103
     df4:	40 91 04 01 	lds	r20, 0x0104
     df8:	50 91 05 01 	lds	r21, 0x0105
     dfc:	60 91 06 01 	lds	r22, 0x0106
     e00:	81 ec       	ldi	r24, 0xC1	; 193
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrTop, LCD_LINE_TOP );
     e08:	ce 01       	movw	r24, r28
     e0a:	c2 96       	adiw	r24, 0x32	; 50
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	bc 01       	movw	r22, r24
     e10:	82 ec       	ldi	r24, 0xC2	; 194
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>
		rtcDS.clear_interupt( RTC_ALARM_0 );
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	81 ec       	ldi	r24, 0xC1	; 193
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN3rtc14clear_interuptEh>
		DDRA |= 1 << PORTA4;
     e22:	81 e2       	ldi	r24, 0x21	; 33
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	21 e2       	ldi	r18, 0x21	; 33
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	f9 01       	movw	r30, r18
     e2c:	20 81       	ld	r18, Z
     e2e:	20 61       	ori	r18, 0x10	; 16
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     e34:	82 e2       	ldi	r24, 0x22	; 34
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	22 e2       	ldi	r18, 0x22	; 34
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	f9 01       	movw	r30, r18
     e3e:	20 81       	ld	r18, Z
     e40:	20 61       	ori	r18, 0x10	; 16
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e7       	ldi	r26, 0x70	; 112
     e4c:	b1 e4       	ldi	r27, 0x41	; 65
     e4e:	8c 83       	std	Y+4, r24	; 0x04
     e50:	9d 83       	std	Y+5, r25	; 0x05
     e52:	ae 83       	std	Y+6, r26	; 0x06
     e54:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	53 e4       	ldi	r21, 0x43	; 67
     e5e:	6c 81       	ldd	r22, Y+4	; 0x04
     e60:	7d 81       	ldd	r23, Y+5	; 0x05
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	88 87       	std	Y+8, r24	; 0x08
     e70:	99 87       	std	Y+9, r25	; 0x09
     e72:	aa 87       	std	Y+10, r26	; 0x0a
     e74:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	68 85       	ldd	r22, Y+8	; 0x08
     e80:	79 85       	ldd	r23, Y+9	; 0x09
     e82:	8a 85       	ldd	r24, Y+10	; 0x0a
     e84:	9b 85       	ldd	r25, Y+11	; 0x0b
     e86:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <__vector_4+0x1ac>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9d 87       	std	Y+13, r25	; 0x0d
     e94:	8c 87       	std	Y+12, r24	; 0x0c
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <__vector_4+0x22a>
	else if (__tmp > 65535)
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	68 85       	ldd	r22, Y+8	; 0x08
     ea2:	79 85       	ldd	r23, Y+9	; 0x09
     ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <__vector_4+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	6c 81       	ldd	r22, Y+4	; 0x04
     eba:	7d 81       	ldd	r23, Y+5	; 0x05
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9d 87       	std	Y+13, r25	; 0x0d
     ed6:	8c 87       	std	Y+12, r24	; 0x0c
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <__vector_4+0x20c>
     eda:	89 e1       	ldi	r24, 0x19	; 25
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9f 87       	std	Y+15, r25	; 0x0f
     ee0:	8e 87       	std	Y+14, r24	; 0x0e
     ee2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <__vector_4+0x1fa>
     eea:	9f 87       	std	Y+15, r25	; 0x0f
     eec:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9d 87       	std	Y+13, r25	; 0x0d
     ef6:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
     efa:	9d 85       	ldd	r25, Y+13	; 0x0d
     efc:	89 2b       	or	r24, r25
     efe:	69 f7       	brne	.-38     	; 0xeda <__vector_4+0x1ee>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <__vector_4+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	68 85       	ldd	r22, Y+8	; 0x08
     f04:	79 85       	ldd	r23, Y+9	; 0x09
     f06:	8a 85       	ldd	r24, Y+10	; 0x0a
     f08:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9d 87       	std	Y+13, r25	; 0x0d
     f14:	8c 87       	std	Y+12, r24	; 0x0c
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1a:	99 8b       	std	Y+17, r25	; 0x11
     f1c:	88 8b       	std	Y+16, r24	; 0x10
     f1e:	88 89       	ldd	r24, Y+16	; 0x10
     f20:	99 89       	ldd	r25, Y+17	; 0x11
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <__vector_4+0x236>
     f26:	99 8b       	std	Y+17, r25	; 0x11
     f28:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(15);
		PORTA &= ~( 1 << PINA4);
     f2a:	82 e2       	ldi	r24, 0x22	; 34
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	22 e2       	ldi	r18, 0x22	; 34
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	2f 7e       	andi	r18, 0xEF	; 239
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
		sei();
     f3c:	78 94       	sei
		for(;;){
			if( valLastPress ){
     f3e:	80 91 c5 01 	lds	r24, 0x01C5
     f42:	88 23       	and	r24, r24
     f44:	49 f0       	breq	.+18     	; 0xf58 <__vector_4+0x26c>
				cli();
     f46:	f8 94       	cli
				ledAlarm.set( 0 );
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	84 ec       	ldi	r24, 0xC4	; 196
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN3led3setEh>
				valLastPress = 0;
     f52:	10 92 c5 01 	sts	0x01C5, r1
     f56:	ce c0       	rjmp	.+412    	; 0x10f4 <__vector_4+0x408>
				return;
			}else{
				if( valCounter ){
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	88 23       	and	r24, r24
     f5c:	49 f0       	breq	.+18     	; 0xf70 <__vector_4+0x284>
					ledAlarm.set( valI );
     f5e:	69 81       	ldd	r22, Y+1	; 0x01
     f60:	84 ec       	ldi	r24, 0xC4	; 196
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN3led3setEh>
					valI = valI + valIDelta;	
     f68:	99 81       	ldd	r25, Y+1	; 0x01
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	89 0f       	add	r24, r25
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 ef       	ldi	r26, 0xF0	; 240
     f76:	b1 e4       	ldi	r27, 0x41	; 65
     f78:	8a 8b       	std	Y+18, r24	; 0x12
     f7a:	9b 8b       	std	Y+19, r25	; 0x13
     f7c:	ac 8b       	std	Y+20, r26	; 0x14
     f7e:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a e7       	ldi	r20, 0x7A	; 122
     f86:	53 e4       	ldi	r21, 0x43	; 67
     f88:	6a 89       	ldd	r22, Y+18	; 0x12
     f8a:	7b 89       	ldd	r23, Y+19	; 0x13
     f8c:	8c 89       	ldd	r24, Y+20	; 0x14
     f8e:	9d 89       	ldd	r25, Y+21	; 0x15
     f90:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	8e 8b       	std	Y+22, r24	; 0x16
     f9a:	9f 8b       	std	Y+23, r25	; 0x17
     f9c:	a8 8f       	std	Y+24, r26	; 0x18
     f9e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	6e 89       	ldd	r22, Y+22	; 0x16
     faa:	7f 89       	ldd	r23, Y+23	; 0x17
     fac:	88 8d       	ldd	r24, Y+24	; 0x18
     fae:	99 8d       	ldd	r25, Y+25	; 0x19
     fb0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
     fb4:	88 23       	and	r24, r24
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <__vector_4+0x2d6>
		__ticks = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b 8f       	std	Y+27, r25	; 0x1b
     fbe:	8a 8f       	std	Y+26, r24	; 0x1a
     fc0:	3f c0       	rjmp	.+126    	; 0x1040 <__vector_4+0x354>
	else if (__tmp > 65535)
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	6e 89       	ldd	r22, Y+22	; 0x16
     fcc:	7f 89       	ldd	r23, Y+23	; 0x17
     fce:	88 8d       	ldd	r24, Y+24	; 0x18
     fd0:	99 8d       	ldd	r25, Y+25	; 0x19
     fd2:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	4c f5       	brge	.+82     	; 0x102c <__vector_4+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	6a 89       	ldd	r22, Y+18	; 0x12
     fe4:	7b 89       	ldd	r23, Y+19	; 0x13
     fe6:	8c 89       	ldd	r24, Y+20	; 0x14
     fe8:	9d 89       	ldd	r25, Y+21	; 0x15
     fea:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9b 8f       	std	Y+27, r25	; 0x1b
    1000:	8a 8f       	std	Y+26, r24	; 0x1a
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <__vector_4+0x336>
    1004:	89 e1       	ldi	r24, 0x19	; 25
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9d 8f       	std	Y+29, r25	; 0x1d
    100a:	8c 8f       	std	Y+28, r24	; 0x1c
    100c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    100e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <__vector_4+0x324>
    1014:	9d 8f       	std	Y+29, r25	; 0x1d
    1016:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1018:	8a 8d       	ldd	r24, Y+26	; 0x1a
    101a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	9b 8f       	std	Y+27, r25	; 0x1b
    1020:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1022:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1024:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1026:	89 2b       	or	r24, r25
    1028:	69 f7       	brne	.-38     	; 0x1004 <__vector_4+0x318>
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <__vector_4+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102c:	6e 89       	ldd	r22, Y+22	; 0x16
    102e:	7f 89       	ldd	r23, Y+23	; 0x17
    1030:	88 8d       	ldd	r24, Y+24	; 0x18
    1032:	99 8d       	ldd	r25, Y+25	; 0x19
    1034:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9b 8f       	std	Y+27, r25	; 0x1b
    103e:	8a 8f       	std	Y+26, r24	; 0x1a
    1040:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1042:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1044:	9f 8f       	std	Y+31, r25	; 0x1f
    1046:	8e 8f       	std	Y+30, r24	; 0x1e
    1048:	8e 8d       	ldd	r24, Y+30	; 0x1e
    104a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <__vector_4+0x360>
    1050:	9f 8f       	std	Y+31, r25	; 0x1f
    1052:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char chrTop[LCD_LINE_SIZE]{ };

	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
    1054:	74 cf       	rjmp	.-280    	; 0xf3e <__vector_4+0x252>
				}
			
			}
			_delay_ms( 30 );
		};
	}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
    1056:	88 a1       	ldd	r24, Y+32	; 0x20
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	84 70       	andi	r24, 0x04	; 4
    105e:	99 27       	eor	r25, r25
    1060:	89 2b       	or	r24, r25
    1062:	09 f0       	breq	.+2      	; 0x1066 <__vector_4+0x37a>
    1064:	47 c0       	rjmp	.+142    	; 0x10f4 <__vector_4+0x408>
		rtmCurrent = rtcDS.get();
    1066:	81 ec       	ldi	r24, 0xC1	; 193
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	96 da       	rcall	.-2772   	; 0x598 <_ZN3rtc3getEv>
    106c:	a2 2e       	mov	r10, r18
    106e:	b3 2e       	mov	r11, r19
    1070:	c4 2e       	mov	r12, r20
    1072:	d5 2e       	mov	r13, r21
    1074:	e6 2e       	mov	r14, r22
    1076:	f7 2e       	mov	r15, r23
    1078:	08 2f       	mov	r16, r24
    107a:	19 2f       	mov	r17, r25
    107c:	2a 2d       	mov	r18, r10
    107e:	3b 2d       	mov	r19, r11
    1080:	4c 2d       	mov	r20, r12
    1082:	5d 2d       	mov	r21, r13
    1084:	6e 2d       	mov	r22, r14
    1086:	7f 2d       	mov	r23, r15
    1088:	80 2f       	mov	r24, r16
    108a:	91 2f       	mov	r25, r17
    108c:	20 93 00 01 	sts	0x0100, r18
    1090:	30 93 01 01 	sts	0x0101, r19
    1094:	40 93 02 01 	sts	0x0102, r20
    1098:	50 93 03 01 	sts	0x0103, r21
    109c:	60 93 04 01 	sts	0x0104, r22
    10a0:	70 93 05 01 	sts	0x0105, r23
    10a4:	80 93 06 01 	sts	0x0106, r24
		rtcDS.rtm_to_char( rtmCurrent, chrTop, LCD_LINE_SIZE );
    10a8:	ce 01       	movw	r24, r28
    10aa:	c2 96       	adiw	r24, 0x32	; 50
    10ac:	68 94       	set
    10ae:	cc 24       	eor	r12, r12
    10b0:	c4 f8       	bld	r12, 4
    10b2:	d1 2c       	mov	r13, r1
    10b4:	7c 01       	movw	r14, r24
    10b6:	00 91 00 01 	lds	r16, 0x0100
    10ba:	10 91 01 01 	lds	r17, 0x0101
    10be:	20 91 02 01 	lds	r18, 0x0102
    10c2:	30 91 03 01 	lds	r19, 0x0103
    10c6:	40 91 04 01 	lds	r20, 0x0104
    10ca:	50 91 05 01 	lds	r21, 0x0105
    10ce:	60 91 06 01 	lds	r22, 0x0106
    10d2:	81 ec       	ldi	r24, 0xC1	; 193
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrTop, LCD_LINE_TOP );
    10da:	ce 01       	movw	r24, r28
    10dc:	c2 96       	adiw	r24, 0x32	; 50
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	bc 01       	movw	r22, r24
    10e2:	82 ec       	ldi	r24, 0xC2	; 194
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>
		rtcDS.clear_interupt( RTC_ALARM_1 );
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	81 ec       	ldi	r24, 0xC1	; 193
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN3rtc14clear_interuptEh>
	}
	
}
    10f4:	cf 5b       	subi	r28, 0xBF	; 191
    10f6:	df 4f       	sbci	r29, 0xFF	; 255
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	0f 90       	pop	r0
    1130:	00 92 5b 00 	sts	0x005B, r0
    1134:	0f 90       	pop	r0
    1136:	00 92 5f 00 	sts	0x005F, r0
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <_Z9Menu_Mainv>:


void Menu_Main(){
    1140:	ef 92       	push	r14
    1142:	0f 93       	push	r16
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	c7 52       	subi	r28, 0x27	; 39
    114e:	d1 40       	sbci	r29, 0x01	; 1
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
	
	const char chrMenu[ MENU_LEN_MAX ][ MENU_WID_MAX ]{ "ALRM", "BAT  %", "TIME" };
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	31 e0       	ldi	r19, 0x01	; 1
    115e:	ce 01       	movw	r24, r28
    1160:	86 96       	adiw	r24, 0x26	; 38
    1162:	fc 01       	movw	r30, r24
    1164:	a9 01       	movw	r20, r18
    1166:	11 92       	st	Z+, r1
    1168:	41 50       	subi	r20, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	e1 f7       	brne	.-8      	; 0x1166 <_Z9Menu_Mainv+0x26>
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	e5 e2       	ldi	r30, 0x25	; 37
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	de 01       	movw	r26, r28
    1176:	96 96       	adiw	r26, 0x26	; 38
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	8a 95       	dec	r24
    117e:	e1 f7       	brne	.-8      	; 0x1178 <_Z9Menu_Mainv+0x38>
    1180:	2b e0       	ldi	r18, 0x0B	; 11
    1182:	ce 01       	movw	r24, r28
    1184:	8b 96       	adiw	r24, 0x2b	; 43
    1186:	fc 01       	movw	r30, r24
    1188:	32 2f       	mov	r19, r18
    118a:	11 92       	st	Z+, r1
    118c:	3a 95       	dec	r19
    118e:	e9 f7       	brne	.-6      	; 0x118a <_Z9Menu_Mainv+0x4a>
    1190:	87 e0       	ldi	r24, 0x07	; 7
    1192:	e5 e3       	ldi	r30, 0x35	; 53
    1194:	f1 e0       	ldi	r31, 0x01	; 1
    1196:	de 01       	movw	r26, r28
    1198:	d6 96       	adiw	r26, 0x36	; 54
    119a:	01 90       	ld	r0, Z+
    119c:	0d 92       	st	X+, r0
    119e:	8a 95       	dec	r24
    11a0:	e1 f7       	brne	.-8      	; 0x119a <_Z9Menu_Mainv+0x5a>
    11a2:	29 e0       	ldi	r18, 0x09	; 9
    11a4:	ce 01       	movw	r24, r28
    11a6:	cd 96       	adiw	r24, 0x3d	; 61
    11a8:	fc 01       	movw	r30, r24
    11aa:	32 2f       	mov	r19, r18
    11ac:	11 92       	st	Z+, r1
    11ae:	3a 95       	dec	r19
    11b0:	e9 f7       	brne	.-6      	; 0x11ac <_Z9Menu_Mainv+0x6c>
    11b2:	ce 01       	movw	r24, r28
    11b4:	8a 5b       	subi	r24, 0xBA	; 186
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	25 e0       	ldi	r18, 0x05	; 5
    11ba:	e5 e4       	ldi	r30, 0x45	; 69
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	dc 01       	movw	r26, r24
    11c0:	01 90       	ld	r0, Z+
    11c2:	0d 92       	st	X+, r0
    11c4:	2a 95       	dec	r18
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <_Z9Menu_Mainv+0x80>
    11c8:	2b e0       	ldi	r18, 0x0B	; 11
    11ca:	05 96       	adiw	r24, 0x05	; 5
    11cc:	fc 01       	movw	r30, r24
    11ce:	32 2f       	mov	r19, r18
    11d0:	11 92       	st	Z+, r1
    11d2:	3a 95       	dec	r19
    11d4:	e9 f7       	brne	.-6      	; 0x11d0 <_Z9Menu_Mainv+0x90>
	unsigned char chrBat[2]{'0','0'};
    11d6:	80 e3       	ldi	r24, 0x30	; 48
    11d8:	8c 8b       	std	Y+20, r24	; 0x14
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	8d 8b       	std	Y+21, r24	; 0x15
	unsigned char chrMenuOut[ LCD_LINE_SIZE ];
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t valCursorState{ CURSOR_OFF };
    11e2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valCursorDivider{ 0 };
    11e4:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t valBatUpdate{ 0 };
    11e6:	1d 82       	std	Y+5, r1	; 0x05
    11e8:	1c 82       	std	Y+4, r1	; 0x04

	extern uint8_t valLastPress;
	
	
	rtcDS.alarm_on( RTC_ALARM_1 );
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	81 ec       	ldi	r24, 0xC1	; 193
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN3rtc8alarm_onEh>

	for(;;){
		build_menu_main( chrMenu, chrMenuOut, ( valCursorState ) ? (( valMenuState == MAIN_STATE_ALARMS ) ? 1 : 3 ) : 0 , MENU_PAD_OFF, MAIN_LENGTH, MAIN_MAX );
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 23       	and	r24, r24
    11f8:	39 f0       	breq	.+14     	; 0x1208 <_Z9Menu_Mainv+0xc8>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	11 f4       	brne	.+4      	; 0x1204 <_Z9Menu_Mainv+0xc4>
    1200:	31 e0       	ldi	r19, 0x01	; 1
    1202:	03 c0       	rjmp	.+6      	; 0x120a <_Z9Menu_Mainv+0xca>
    1204:	33 e0       	ldi	r19, 0x03	; 3
    1206:	01 c0       	rjmp	.+2      	; 0x120a <_Z9Menu_Mainv+0xca>
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	be 01       	movw	r22, r28
    120c:	6a 5e       	subi	r22, 0xEA	; 234
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	ce 01       	movw	r24, r28
    1212:	86 96       	adiw	r24, 0x26	; 38
    1214:	0f 2e       	mov	r0, r31
    1216:	f7 e0       	ldi	r31, 0x07	; 7
    1218:	ef 2e       	mov	r14, r31
    121a:	f0 2d       	mov	r31, r0
    121c:	03 e0       	ldi	r16, 0x03	; 3
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	43 2f       	mov	r20, r19
    1222:	25 d2       	rcall	.+1098   	; 0x166e <_Z15build_menu_mainPA16_KcPhhhhh>
		if( valBatUpdate == 0 ){
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	89 2b       	or	r24, r25
    122a:	b9 f4       	brne	.+46     	; 0x125a <_Z9Menu_Mainv+0x11a>
			chrBat[0] = ( batLiPo.get() >> 4 ) + 0x30;
    122c:	83 ec       	ldi	r24, 0xC3	; 195
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3bat3getEv>
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	95 95       	asr	r25
    123a:	87 95       	ror	r24
    123c:	95 95       	asr	r25
    123e:	87 95       	ror	r24
    1240:	95 95       	asr	r25
    1242:	87 95       	ror	r24
    1244:	95 95       	asr	r25
    1246:	87 95       	ror	r24
    1248:	80 5d       	subi	r24, 0xD0	; 208
    124a:	8c 8b       	std	Y+20, r24	; 0x14
			chrBat[1] = ( batLiPo.get() & 0x0F ) + 0x30;
    124c:	83 ec       	ldi	r24, 0xC3	; 195
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3bat3getEv>
    1254:	8f 70       	andi	r24, 0x0F	; 15
    1256:	80 5d       	subi	r24, 0xD0	; 208
    1258:	8d 8b       	std	Y+21, r24	; 0x15
		}
		memcpy( ( void* )( &chrMenuOut[8] ), ( void* )&chrBat, 2 );
    125a:	8c 89       	ldd	r24, Y+20	; 0x14
    125c:	9d 89       	ldd	r25, Y+21	; 0x15
    125e:	9f 8f       	std	Y+31, r25	; 0x1f
    1260:	8e 8f       	std	Y+30, r24	; 0x1e
		valBatUpdate = ( valBatUpdate + 1 ) % 100;
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	ac 01       	movw	r20, r24
    1268:	4f 5f       	subi	r20, 0xFF	; 255
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	ca 01       	movw	r24, r20
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	9c 01       	movw	r18, r24
    1278:	ab e7       	ldi	r26, 0x7B	; 123
    127a:	b4 e1       	ldi	r27, 0x14	; 20
    127c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__umulhisi3>
    1280:	9c 01       	movw	r18, r24
    1282:	36 95       	lsr	r19
    1284:	27 95       	ror	r18
    1286:	64 e6       	ldi	r22, 0x64	; 100
    1288:	62 9f       	mul	r22, r18
    128a:	c0 01       	movw	r24, r0
    128c:	63 9f       	mul	r22, r19
    128e:	90 0d       	add	r25, r0
    1290:	11 24       	eor	r1, r1
    1292:	fa 01       	movw	r30, r20
    1294:	e8 1b       	sub	r30, r24
    1296:	f9 0b       	sbc	r31, r25
    1298:	cf 01       	movw	r24, r30
    129a:	9d 83       	std	Y+5, r25	; 0x05
    129c:	8c 83       	std	Y+4, r24	; 0x04
		lcdNHD.print( chrMenuOut, LCD_LINE_BOTTOM );
    129e:	ce 01       	movw	r24, r28
    12a0:	46 96       	adiw	r24, 0x16	; 22
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	bc 01       	movw	r22, r24
    12a6:	82 ec       	ldi	r24, 0xC2	; 194
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>
		
		if( valLastPress == 0x03 ){
    12ae:	80 91 c5 01 	lds	r24, 0x01C5
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	71 f4       	brne	.+28     	; 0x12d2 <_Z9Menu_Mainv+0x192>
			valMenuState = ( valMenuState + 0x03 ) % 0x02;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	03 96       	adiw	r24, 0x03	; 3
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 78       	andi	r25, 0x80	; 128
    12c2:	99 23       	and	r25, r25
    12c4:	24 f4       	brge	.+8      	; 0x12ce <_Z9Menu_Mainv+0x18e>
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	8e 6f       	ori	r24, 0xFE	; 254
    12ca:	9f 6f       	ori	r25, 0xFF	; 255
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	17 c0       	rjmp	.+46     	; 0x1300 <_Z9Menu_Mainv+0x1c0>
		}else if( valLastPress == 0x02 ){
    12d2:	80 91 c5 01 	lds	r24, 0x01C5
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	71 f4       	brne	.+28     	; 0x12f6 <_Z9Menu_Mainv+0x1b6>
			valMenuState = ( valMenuState + 0x01 ) % 0x02;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	90 78       	andi	r25, 0x80	; 128
    12e6:	99 23       	and	r25, r25
    12e8:	24 f4       	brge	.+8      	; 0x12f2 <_Z9Menu_Mainv+0x1b2>
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	8e 6f       	ori	r24, 0xFE	; 254
    12ee:	9f 6f       	ori	r25, 0xFF	; 255
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <_Z9Menu_Mainv+0x1c0>
		}else if( valLastPress == 0x05 ){
    12f6:	80 91 c5 01 	lds	r24, 0x01C5
    12fa:	85 30       	cpi	r24, 0x05	; 5
    12fc:	09 f4       	brne	.+2      	; 0x1300 <_Z9Menu_Mainv+0x1c0>
			Menu_Alarm();
    12fe:	85 d0       	rcall	.+266    	; 0x140a <_Z10Menu_Alarmv>
		}
		valLastPress = 0;
    1300:	10 92 c5 01 	sts	0x01C5, r1
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	21 e1       	ldi	r18, 0x11	; 17
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	b9 01       	movw	r22, r18
    1312:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__divmodhi4>
    1316:	8b 83       	std	Y+3, r24	; 0x03
		if( valCursorDivider == 0 ){
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 23       	and	r24, r24
    131c:	19 f4       	brne	.+6      	; 0x1324 <_Z9Menu_Mainv+0x1e4>
			valCursorState = ~valCursorState;
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 95       	com	r24
    1322:	8a 83       	std	Y+2, r24	; 0x02
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 ef       	ldi	r26, 0xF0	; 240
    132a:	b1 e4       	ldi	r27, 0x41	; 65
    132c:	8e 83       	std	Y+6, r24	; 0x06
    132e:	9f 83       	std	Y+7, r25	; 0x07
    1330:	a8 87       	std	Y+8, r26	; 0x08
    1332:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	53 e4       	ldi	r21, 0x43	; 67
    133c:	6e 81       	ldd	r22, Y+6	; 0x06
    133e:	7f 81       	ldd	r23, Y+7	; 0x07
    1340:	88 85       	ldd	r24, Y+8	; 0x08
    1342:	99 85       	ldd	r25, Y+9	; 0x09
    1344:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	8a 87       	std	Y+10, r24	; 0x0a
    134e:	9b 87       	std	Y+11, r25	; 0x0b
    1350:	ac 87       	std	Y+12, r26	; 0x0c
    1352:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	6a 85       	ldd	r22, Y+10	; 0x0a
    135e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1360:	8c 85       	ldd	r24, Y+12	; 0x0c
    1362:	9d 85       	ldd	r25, Y+13	; 0x0d
    1364:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <_Z9Menu_Mainv+0x236>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9f 87       	std	Y+15, r25	; 0x0f
    1372:	8e 87       	std	Y+14, r24	; 0x0e
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <_Z9Menu_Mainv+0x2b4>
	else if (__tmp > 65535)
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1380:	7b 85       	ldd	r23, Y+11	; 0x0b
    1382:	8c 85       	ldd	r24, Y+12	; 0x0c
    1384:	9d 85       	ldd	r25, Y+13	; 0x0d
    1386:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    138a:	18 16       	cp	r1, r24
    138c:	4c f5       	brge	.+82     	; 0x13e0 <_Z9Menu_Mainv+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	6e 81       	ldd	r22, Y+6	; 0x06
    1398:	7f 81       	ldd	r23, Y+7	; 0x07
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	99 85       	ldd	r25, Y+9	; 0x09
    139e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9f 87       	std	Y+15, r25	; 0x0f
    13b4:	8e 87       	std	Y+14, r24	; 0x0e
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <_Z9Menu_Mainv+0x296>
    13b8:	89 e1       	ldi	r24, 0x19	; 25
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	99 8b       	std	Y+17, r25	; 0x11
    13be:	88 8b       	std	Y+16, r24	; 0x10
    13c0:	88 89       	ldd	r24, Y+16	; 0x10
    13c2:	99 89       	ldd	r25, Y+17	; 0x11
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <_Z9Menu_Mainv+0x284>
    13c8:	99 8b       	std	Y+17, r25	; 0x11
    13ca:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9f 87       	std	Y+15, r25	; 0x0f
    13d4:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13da:	89 2b       	or	r24, r25
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <_Z9Menu_Mainv+0x278>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <_Z9Menu_Mainv+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	6a 85       	ldd	r22, Y+10	; 0x0a
    13e2:	7b 85       	ldd	r23, Y+11	; 0x0b
    13e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9f 87       	std	Y+15, r25	; 0x0f
    13f2:	8e 87       	std	Y+14, r24	; 0x0e
    13f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f8:	9b 8b       	std	Y+19, r25	; 0x13
    13fa:	8a 8b       	std	Y+18, r24	; 0x12
    13fc:	8a 89       	ldd	r24, Y+18	; 0x12
    13fe:	9b 89       	ldd	r25, Y+19	; 0x13
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <_Z9Menu_Mainv+0x2c0>
    1404:	9b 8b       	std	Y+19, r25	; 0x13
    1406:	8a 8b       	std	Y+18, r24	; 0x12
		}
		_delay_ms(30);
	}
    1408:	f5 ce       	rjmp	.-534    	; 0x11f4 <_Z9Menu_Mainv+0xb4>

0000140a <_Z10Menu_Alarmv>:
	
}


void Menu_Alarm(){
    140a:	ef 92       	push	r14
    140c:	0f 93       	push	r16
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	c9 53       	subi	r28, 0x39	; 57
    1418:	d1 40       	sbci	r29, 0x01	; 1
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
	
	const char chrMenuTop[]="Setting Alarm...";
    1424:	81 e1       	ldi	r24, 0x11	; 17
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	de 01       	movw	r26, r28
    142c:	53 96       	adiw	r26, 0x13	; 19
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	8a 95       	dec	r24
    1434:	e1 f7       	brne	.-8      	; 0x142e <_Z10Menu_Alarmv+0x24>
	const char chrMenu[ MENU_LEN_MAX ][ MENU_WID_MAX ]{ "08", "00", "AM" };
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	31 e0       	ldi	r19, 0x01	; 1
    143a:	ce 01       	movw	r24, r28
    143c:	c4 96       	adiw	r24, 0x34	; 52
    143e:	fc 01       	movw	r30, r24
    1440:	a9 01       	movw	r20, r18
    1442:	11 92       	st	Z+, r1
    1444:	41 50       	subi	r20, 0x01	; 1
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	e1 f7       	brne	.-8      	; 0x1442 <_Z10Menu_Alarmv+0x38>
    144a:	80 e3       	ldi	r24, 0x30	; 48
    144c:	98 e3       	ldi	r25, 0x38	; 56
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	8c ab       	std	Y+52, r24	; 0x34
    1454:	9d ab       	std	Y+53, r25	; 0x35
    1456:	ae ab       	std	Y+54, r26	; 0x36
    1458:	bf ab       	std	Y+55, r27	; 0x37
    145a:	2c e0       	ldi	r18, 0x0C	; 12
    145c:	ce 01       	movw	r24, r28
    145e:	c8 96       	adiw	r24, 0x38	; 56
    1460:	fc 01       	movw	r30, r24
    1462:	32 2f       	mov	r19, r18
    1464:	11 92       	st	Z+, r1
    1466:	3a 95       	dec	r19
    1468:	e9 f7       	brne	.-6      	; 0x1464 <_Z10Menu_Alarmv+0x5a>
    146a:	9e 01       	movw	r18, r28
    146c:	2c 5b       	subi	r18, 0xBC	; 188
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	90 e3       	ldi	r25, 0x30	; 48
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	80 83       	st	Z, r24
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	a2 83       	std	Z+2, r26	; 0x02
    1480:	b3 83       	std	Z+3, r27	; 0x03
    1482:	4c e0       	ldi	r20, 0x0C	; 12
    1484:	c9 01       	movw	r24, r18
    1486:	04 96       	adiw	r24, 0x04	; 4
    1488:	fc 01       	movw	r30, r24
    148a:	24 2f       	mov	r18, r20
    148c:	11 92       	st	Z+, r1
    148e:	2a 95       	dec	r18
    1490:	e9 f7       	brne	.-6      	; 0x148c <_Z10Menu_Alarmv+0x82>
    1492:	9e 01       	movw	r18, r28
    1494:	2c 5a       	subi	r18, 0xAC	; 172
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	81 e4       	ldi	r24, 0x41	; 65
    149a:	9d e4       	ldi	r25, 0x4D	; 77
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	f9 01       	movw	r30, r18
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
    14aa:	4c e0       	ldi	r20, 0x0C	; 12
    14ac:	c9 01       	movw	r24, r18
    14ae:	04 96       	adiw	r24, 0x04	; 4
    14b0:	fc 01       	movw	r30, r24
    14b2:	24 2f       	mov	r18, r20
    14b4:	11 92       	st	Z+, r1
    14b6:	2a 95       	dec	r18
    14b8:	e9 f7       	brne	.-6      	; 0x14b4 <_Z10Menu_Alarmv+0xaa>
	unsigned char chrMenuOut[ LCD_LINE_SIZE ];
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t valCursorPos{ 0 };
    14be:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t valCursorState{ CURSOR_OFF };
    14c0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valCursorDivider{ 0 };
    14c2:	1b 82       	std	Y+3, r1	; 0x03

	extern uint8_t valLastPress;
	
	
	rtcDS.alarm_off( RTC_ALARM_1 );
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	81 ec       	ldi	r24, 0xC1	; 193
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN3rtc9alarm_offEh>
	lcdNHD.print( reinterpret_cast<unsigned char*>((const_cast<char*>(chrMenuTop))), LCD_LINE_TOP );
    14ce:	ce 01       	movw	r24, r28
    14d0:	43 96       	adiw	r24, 0x13	; 19
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	bc 01       	movw	r22, r24
    14d6:	82 ec       	ldi	r24, 0xC2	; 194
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>

	for(;;){
		valCursorPos = ( valCursorState ) ? (( valMenuState == ALARM_STATE_MINUTES ) ? 1 : (( valMenuState == ALARM_STATE_SECONDS ) ? 2 : 3 ) ) : 0;
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	88 23       	and	r24, r24
    14e2:	61 f0       	breq	.+24     	; 0x14fc <_Z10Menu_Alarmv+0xf2>
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <_Z10Menu_Alarmv+0xee>
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <_Z10Menu_Alarmv+0xea>
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <_Z10Menu_Alarmv+0xf4>
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <_Z10Menu_Alarmv+0xf4>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <_Z10Menu_Alarmv+0xf4>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	8c 83       	std	Y+4, r24	; 0x04
		build_menu_alarm( chrMenu, chrMenuOut, valCursorPos , MENU_PAD_ON, ALARM_LENGTH, ALARM_MAX );
    1500:	be 01       	movw	r22, r28
    1502:	6c 5d       	subi	r22, 0xDC	; 220
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	ce 01       	movw	r24, r28
    1508:	c4 96       	adiw	r24, 0x34	; 52
    150a:	0f 2e       	mov	r0, r31
    150c:	f3 e0       	ldi	r31, 0x03	; 3
    150e:	ef 2e       	mov	r14, r31
    1510:	f0 2d       	mov	r31, r0
    1512:	03 e0       	ldi	r16, 0x03	; 3
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	4c 81       	ldd	r20, Y+4	; 0x04
    1518:	6f d2       	rcall	.+1246   	; 0x19f8 <_Z16build_menu_alarmPA16_KcPhhhhh>
		lcdNHD.print( chrMenuOut, LCD_LINE_BOTTOM );
    151a:	ce 01       	movw	r24, r28
    151c:	84 96       	adiw	r24, 0x24	; 36
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	bc 01       	movw	r22, r24
    1522:	82 ec       	ldi	r24, 0xC2	; 194
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN3lcd5printEPhh>
		
		if( valLastPress == 0x03 ){
    152a:	80 91 c5 01 	lds	r24, 0x01C5
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	59 f4       	brne	.+22     	; 0x1548 <_Z10Menu_Alarmv+0x13e>
			valMenuState = ( valMenuState + 0x04 ) % 0x03;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	04 96       	adiw	r24, 0x04	; 4
    153a:	23 e0       	ldi	r18, 0x03	; 3
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	b9 01       	movw	r22, r18
    1540:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__divmodhi4>
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <_Z10Menu_Alarmv+0x15a>
		}else if( valLastPress == 0x02 ){
    1548:	80 91 c5 01 	lds	r24, 0x01C5
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	51 f4       	brne	.+20     	; 0x1564 <_Z10Menu_Alarmv+0x15a>
			valMenuState = ( valMenuState + 0x01 ) % 0x03;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	23 e0       	ldi	r18, 0x03	; 3
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__divmodhi4>
    1562:	89 83       	std	Y+1, r24	; 0x01
		}
		valLastPress = 0;
    1564:	10 92 c5 01 	sts	0x01C5, r1
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	21 e1       	ldi	r18, 0x11	; 17
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	b9 01       	movw	r22, r18
    1576:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__divmodhi4>
    157a:	8b 83       	std	Y+3, r24	; 0x03
		if( valCursorDivider == 0 ){
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 23       	and	r24, r24
    1580:	19 f4       	brne	.+6      	; 0x1588 <_Z10Menu_Alarmv+0x17e>
			valCursorState = ~valCursorState;
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 95       	com	r24
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 ef       	ldi	r26, 0xF0	; 240
    158e:	b1 e4       	ldi	r27, 0x41	; 65
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	af 83       	std	Y+7, r26	; 0x07
    1596:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a e7       	ldi	r20, 0x7A	; 122
    159e:	53 e4       	ldi	r21, 0x43	; 67
    15a0:	6d 81       	ldd	r22, Y+5	; 0x05
    15a2:	7e 81       	ldd	r23, Y+6	; 0x06
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 87       	std	Y+9, r24	; 0x09
    15b2:	9a 87       	std	Y+10, r25	; 0x0a
    15b4:	ab 87       	std	Y+11, r26	; 0x0b
    15b6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	69 85       	ldd	r22, Y+9	; 0x09
    15c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    15c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15c8:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <_Z10Menu_Alarmv+0x1d0>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9e 87       	std	Y+14, r25	; 0x0e
    15d6:	8d 87       	std	Y+13, r24	; 0x0d
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <_Z10Menu_Alarmv+0x24e>
	else if (__tmp > 65535)
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	69 85       	ldd	r22, Y+9	; 0x09
    15e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    15e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ea:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <_Z10Menu_Alarmv+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	6d 81       	ldd	r22, Y+5	; 0x05
    15fc:	7e 81       	ldd	r23, Y+6	; 0x06
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 87       	std	Y+14, r25	; 0x0e
    1618:	8d 87       	std	Y+13, r24	; 0x0d
    161a:	0f c0       	rjmp	.+30     	; 0x163a <_Z10Menu_Alarmv+0x230>
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	98 8b       	std	Y+16, r25	; 0x10
    1622:	8f 87       	std	Y+15, r24	; 0x0f
    1624:	8f 85       	ldd	r24, Y+15	; 0x0f
    1626:	98 89       	ldd	r25, Y+16	; 0x10
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <_Z10Menu_Alarmv+0x21e>
    162c:	98 8b       	std	Y+16, r25	; 0x10
    162e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9e 87       	std	Y+14, r25	; 0x0e
    1638:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8d 85       	ldd	r24, Y+13	; 0x0d
    163c:	9e 85       	ldd	r25, Y+14	; 0x0e
    163e:	89 2b       	or	r24, r25
    1640:	69 f7       	brne	.-38     	; 0x161c <_Z10Menu_Alarmv+0x212>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <_Z10Menu_Alarmv+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	69 85       	ldd	r22, Y+9	; 0x09
    1646:	7a 85       	ldd	r23, Y+10	; 0x0a
    1648:	8b 85       	ldd	r24, Y+11	; 0x0b
    164a:	9c 85       	ldd	r25, Y+12	; 0x0c
    164c:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9e 87       	std	Y+14, r25	; 0x0e
    1656:	8d 87       	std	Y+13, r24	; 0x0d
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	89 8b       	std	Y+17, r24	; 0x11
    1660:	89 89       	ldd	r24, Y+17	; 0x11
    1662:	9a 89       	ldd	r25, Y+18	; 0x12
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <_Z10Menu_Alarmv+0x25a>
    1668:	9a 8b       	std	Y+18, r25	; 0x12
    166a:	89 8b       	std	Y+17, r24	; 0x11
		}
		_delay_ms(30);
	}
    166c:	38 cf       	rjmp	.-400    	; 0x14de <_Z10Menu_Alarmv+0xd4>

0000166e <_Z15build_menu_mainPA16_KcPhhhhh>:
	
}



void build_menu_main( const char chpStates[MENU_LEN_MAX][MENU_WID_MAX], unsigned char* chrReturn, uint8_t valCursPos, uint8_t valPad, uint8_t valLen, uint8_t valWid ){
    166e:	ef 92       	push	r14
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	6f 97       	sbiw	r28, 0x1f	; 31
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	99 8f       	std	Y+25, r25	; 0x19
    168a:	88 8f       	std	Y+24, r24	; 0x18
    168c:	7b 8f       	std	Y+27, r23	; 0x1b
    168e:	6a 8f       	std	Y+26, r22	; 0x1a
    1690:	4c 8f       	std	Y+28, r20	; 0x1c
    1692:	2d 8f       	std	Y+29, r18	; 0x1d
    1694:	0e 8f       	std	Y+30, r16	; 0x1e
    1696:	ef 8e       	std	Y+31, r14	; 0x1f
	
	unsigned char chrOutput[ LCD_LINE_SIZE ];
	uint8_t valDivPos{ 0 };
    1698:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursStart{ 0 };
    169a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valCursEnd{ 0 };
    169c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valN{ 1 };
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	8c 83       	std	Y+4, r24	; 0x04
	
	
	valDivPos = (( strlen( chpStates[0] ) < 2 ) | ( sizeof( chrOutput ) <= strlen( chpStates[0] )) ? 0 : strlen( chpStates[0] ) + 1 );
    16a2:	88 8d       	ldd	r24, Y+24	; 0x18
    16a4:	99 8d       	ldd	r25, Y+25	; 0x19
    16a6:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    16aa:	11 e0       	ldi	r17, 0x01	; 1
    16ac:	02 97       	sbiw	r24, 0x02	; 2
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <_Z15build_menu_mainPA16_KcPhhhhh+0x44>
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	88 8d       	ldd	r24, Y+24	; 0x18
    16b4:	99 8d       	ldd	r25, Y+25	; 0x19
    16b6:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    16ba:	21 e0       	ldi	r18, 0x01	; 1
    16bc:	40 97       	sbiw	r24, 0x10	; 16
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <_Z15build_menu_mainPA16_KcPhhhhh+0x54>
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	81 2f       	mov	r24, r17
    16c4:	82 23       	and	r24, r18
    16c6:	88 23       	and	r24, r24
    16c8:	31 f0       	breq	.+12     	; 0x16d6 <_Z15build_menu_mainPA16_KcPhhhhh+0x68>
    16ca:	88 8d       	ldd	r24, Y+24	; 0x18
    16cc:	99 8d       	ldd	r25, Y+25	; 0x19
    16ce:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <_Z15build_menu_mainPA16_KcPhhhhh+0x6a>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	89 83       	std	Y+1, r24	; 0x01
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    16da:	1d 82       	std	Y+5, r1	; 0x05
    16dc:	35 c0       	rjmp	.+106    	; 0x1748 <_Z15build_menu_mainPA16_KcPhhhhh+0xda>
		if( valR == 0 ){
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	88 23       	and	r24, r24
    16e2:	19 f4       	brne	.+6      	; 0x16ea <_Z15build_menu_mainPA16_KcPhhhhh+0x7c>
			valCursStart = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <_Z15build_menu_mainPA16_KcPhhhhh+0xae>
			}else{
			valCursStart += strlen( chpStates[valR] );
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	82 95       	swap	r24
    16f2:	92 95       	swap	r25
    16f4:	90 7f       	andi	r25, 0xF0	; 240
    16f6:	98 27       	eor	r25, r24
    16f8:	80 7f       	andi	r24, 0xF0	; 240
    16fa:	98 27       	eor	r25, r24
    16fc:	28 8d       	ldd	r18, Y+24	; 0x18
    16fe:	39 8d       	ldd	r19, Y+25	; 0x19
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    1708:	98 2f       	mov	r25, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	89 0f       	add	r24, r25
    170e:	8a 83       	std	Y+2, r24	; 0x02
			valCursStart++;
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	8a 83       	std	Y+2, r24	; 0x02
			valCursEnd++;
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	8f 5f       	subi	r24, 0xFF	; 255
    171a:	8b 83       	std	Y+3, r24	; 0x03
		}
		valCursEnd += strlen( &chpStates[valR][0] );
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	82 95       	swap	r24
    1724:	92 95       	swap	r25
    1726:	90 7f       	andi	r25, 0xF0	; 240
    1728:	98 27       	eor	r25, r24
    172a:	80 7f       	andi	r24, 0xF0	; 240
    172c:	98 27       	eor	r25, r24
    172e:	28 8d       	ldd	r18, Y+24	; 0x18
    1730:	39 8d       	ldd	r19, Y+25	; 0x19
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    173a:	98 2f       	mov	r25, r24
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	89 0f       	add	r24, r25
    1740:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t valCursEnd{ 0 };
	uint8_t valN{ 1 };
	
	
	valDivPos = (( strlen( chpStates[0] ) < 2 ) | ( sizeof( chrOutput ) <= strlen( chpStates[0] )) ? 0 : strlen( chpStates[0] ) + 1 );
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    174c:	98 17       	cp	r25, r24
    174e:	38 f2       	brcs	.-114    	; 0x16de <_Z15build_menu_mainPA16_KcPhhhhh+0x70>
			valCursStart++;
			valCursEnd++;
		}
		valCursEnd += strlen( &chpStates[valR][0] );
	}
	valCursEnd++;
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	8b 83       	std	Y+3, r24	; 0x03
	valCursStart = ( valCursStart > sizeof( chrOutput ) ? 0 : valCursStart );
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	41 97       	sbiw	r24, 0x11	; 17
    175e:	10 f4       	brcc	.+4      	; 0x1764 <_Z15build_menu_mainPA16_KcPhhhhh+0xf6>
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <_Z15build_menu_mainPA16_KcPhhhhh+0xf8>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	8a 83       	std	Y+2, r24	; 0x02
	valCursEnd = ( valCursStart == 0 ) ? 0 : ( valCursEnd >= sizeof( chrOutput )) ? sizeof( chrOutput ) : valCursEnd;
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	88 23       	and	r24, r24
    176c:	49 f0       	breq	.+18     	; 0x1780 <_Z15build_menu_mainPA16_KcPhhhhh+0x112>
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	40 97       	sbiw	r24, 0x10	; 16
    1776:	10 f0       	brcs	.+4      	; 0x177c <_Z15build_menu_mainPA16_KcPhhhhh+0x10e>
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <_Z15build_menu_mainPA16_KcPhhhhh+0x114>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <_Z15build_menu_mainPA16_KcPhhhhh+0x114>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	8b 83       	std	Y+3, r24	; 0x03
	
	valDivPos = ( valPad != MENU_PAD_ON ) ? valDivPos : ( valDivPos >= ( sizeof( chrOutput ) - 1 )) ? 0 : ( valDivPos + 1 );
    1784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	69 f4       	brne	.+26     	; 0x17a4 <_Z15build_menu_mainPA16_KcPhhhhh+0x136>
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8f e0       	ldi	r24, 0x0F	; 15
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	28 17       	cp	r18, r24
    1796:	39 07       	cpc	r19, r25
    1798:	18 f4       	brcc	.+6      	; 0x17a0 <_Z15build_menu_mainPA16_KcPhhhhh+0x132>
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <_Z15build_menu_mainPA16_KcPhhhhh+0x138>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <_Z15build_menu_mainPA16_KcPhhhhh+0x138>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	89 83       	std	Y+1, r24	; 0x01
	valCursStart = ( valPad != MENU_PAD_ON ) ? valCursStart : ( valCursStart + 1 );
    17a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17aa:	8f 3f       	cpi	r24, 0xFF	; 255
    17ac:	19 f4       	brne	.+6      	; 0x17b4 <_Z15build_menu_mainPA16_KcPhhhhh+0x146>
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <_Z15build_menu_mainPA16_KcPhhhhh+0x148>
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	valCursEnd = ( valPad != MENU_PAD_ON ) ? valCursEnd : ( valCursEnd - 1 );
    17b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ba:	8f 3f       	cpi	r24, 0xFF	; 255
    17bc:	19 f4       	brne	.+6      	; 0x17c4 <_Z15build_menu_mainPA16_KcPhhhhh+0x156>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	81 50       	subi	r24, 0x01	; 1
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <_Z15build_menu_mainPA16_KcPhhhhh+0x158>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	8b 83       	std	Y+3, r24	; 0x03
	
	if( valPad == MENU_PAD_ON ){
    17c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ca:	8f 3f       	cpi	r24, 0xFF	; 255
    17cc:	71 f4       	brne	.+28     	; 0x17ea <_Z15build_menu_mainPA16_KcPhhhhh+0x17c>
		chrOutput[ valN ] = ' ';
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9e 01       	movw	r18, r28
    17d6:	28 5f       	subi	r18, 0xF8	; 248
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	20 e2       	ldi	r18, 0x20	; 32
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
		valN++;
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8e 83       	std	Y+6, r24	; 0x06
    17ee:	f3 c0       	rjmp	.+486    	; 0x19d6 <_Z15build_menu_mainPA16_KcPhhhhh+0x368>
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	8f 83       	std	Y+7, r24	; 0x07
    17f4:	e8 c0       	rjmp	.+464    	; 0x19c6 <_Z15build_menu_mainPA16_KcPhhhhh+0x358>
			if( valN == valDivPos ){
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	98 17       	cp	r25, r24
    17fc:	09 f0       	breq	.+2      	; 0x1800 <_Z15build_menu_mainPA16_KcPhhhhh+0x192>
    17fe:	53 c0       	rjmp	.+166    	; 0x18a6 <_Z15build_menu_mainPA16_KcPhhhhh+0x238>
				chrOutput[ valN - 1 ] = '|';
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	9e 01       	movw	r18, r28
    180a:	28 5f       	subi	r18, 0xF8	; 248
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	2c e7       	ldi	r18, 0x7C	; 124
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
				valDivPos = (( sizeof( chrOutput ) - ( valDivPos + 1  )) < strlen( chpStates[valQ] )) ? 0 : ( valDivPos + strlen( chpStates[valQ] )) + 1;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	20 e1       	ldi	r18, 0x10	; 16
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	a9 01       	movw	r20, r18
    1824:	48 1b       	sub	r20, r24
    1826:	59 0b       	sbc	r21, r25
    1828:	ca 01       	movw	r24, r20
    182a:	8c 01       	movw	r16, r24
    182c:	01 50       	subi	r16, 0x01	; 1
    182e:	11 09       	sbc	r17, r1
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	82 95       	swap	r24
    1838:	92 95       	swap	r25
    183a:	90 7f       	andi	r25, 0xF0	; 240
    183c:	98 27       	eor	r25, r24
    183e:	80 7f       	andi	r24, 0xF0	; 240
    1840:	98 27       	eor	r25, r24
    1842:	28 8d       	ldd	r18, Y+24	; 0x18
    1844:	39 8d       	ldd	r19, Y+25	; 0x19
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    184e:	08 17       	cp	r16, r24
    1850:	19 07       	cpc	r17, r25
    1852:	a0 f0       	brcs	.+40     	; 0x187c <_Z15build_menu_mainPA16_KcPhhhhh+0x20e>
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	82 95       	swap	r24
    185c:	92 95       	swap	r25
    185e:	90 7f       	andi	r25, 0xF0	; 240
    1860:	98 27       	eor	r25, r24
    1862:	80 7f       	andi	r24, 0xF0	; 240
    1864:	98 27       	eor	r25, r24
    1866:	28 8d       	ldd	r18, Y+24	; 0x18
    1868:	39 8d       	ldd	r19, Y+25	; 0x19
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    1872:	98 2f       	mov	r25, r24
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	89 0f       	add	r24, r25
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	01 c0       	rjmp	.+2      	; 0x187e <_Z15build_menu_mainPA16_KcPhhhhh+0x210>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	89 83       	std	Y+1, r24	; 0x01
				valDivPos = ( valPad != MENU_PAD_ON ) ? valDivPos : ( valDivPos >= ( sizeof( chrOutput ) - 1 )) ? 0 : ( valDivPos + 1 );
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	8f 3f       	cpi	r24, 0xFF	; 255
    1884:	69 f4       	brne	.+26     	; 0x18a0 <_Z15build_menu_mainPA16_KcPhhhhh+0x232>
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	28 17       	cp	r18, r24
    1892:	39 07       	cpc	r19, r25
    1894:	18 f4       	brcc	.+6      	; 0x189c <_Z15build_menu_mainPA16_KcPhhhhh+0x22e>
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <_Z15build_menu_mainPA16_KcPhhhhh+0x234>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <_Z15build_menu_mainPA16_KcPhhhhh+0x234>
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	79 c0       	rjmp	.+242    	; 0x1998 <_Z15build_menu_mainPA16_KcPhhhhh+0x32a>
			}else if(( valN >= valCursStart ) & ( valN <= valCursEnd )){
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	2c 81       	ldd	r18, Y+4	; 0x04
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 17       	cp	r18, r24
    18ae:	08 f4       	brcc	.+2      	; 0x18b2 <_Z15build_menu_mainPA16_KcPhhhhh+0x244>
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	23 17       	cp	r18, r19
    18ba:	08 f4       	brcc	.+2      	; 0x18be <_Z15build_menu_mainPA16_KcPhhhhh+0x250>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	89 23       	and	r24, r25
    18c0:	88 23       	and	r24, r24
    18c2:	69 f0       	breq	.+26     	; 0x18de <_Z15build_menu_mainPA16_KcPhhhhh+0x270>
				chrOutput[ valN - 1 ] = '_';
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9e 01       	movw	r18, r28
    18ce:	28 5f       	subi	r18, 0xF8	; 248
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	2f e5       	ldi	r18, 0x5F	; 95
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
    18dc:	5d c0       	rjmp	.+186    	; 0x1998 <_Z15build_menu_mainPA16_KcPhhhhh+0x32a>
			}else if(( valPad == MENU_PAD_ON ) & ( valN == sizeof( chrOutput ))){
    18de:	31 e0       	ldi	r19, 0x01	; 1
    18e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e2:	8f 3f       	cpi	r24, 0xFF	; 255
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <_Z15build_menu_mainPA16_KcPhhhhh+0x27a>
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	40 97       	sbiw	r24, 0x10	; 16
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <_Z15build_menu_mainPA16_KcPhhhhh+0x288>
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	83 2f       	mov	r24, r19
    18f8:	82 23       	and	r24, r18
    18fa:	88 23       	and	r24, r24
    18fc:	69 f0       	breq	.+26     	; 0x1918 <_Z15build_menu_mainPA16_KcPhhhhh+0x2aa>
				chrOutput[ valN - 1 ] = ' ';
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 01       	movw	r18, r28
    1908:	28 5f       	subi	r18, 0xF8	; 248
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	20 e2       	ldi	r18, 0x20	; 32
    1912:	fc 01       	movw	r30, r24
    1914:	20 83       	st	Z, r18
    1916:	40 c0       	rjmp	.+128    	; 0x1998 <_Z15build_menu_mainPA16_KcPhhhhh+0x32a>
			}else{
				if( strlen( &chpStates[ valQ - 1 ][ valJ - 1 ] ) != 0 ){
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	81 50       	subi	r24, 0x01	; 1
    1920:	90 4f       	sbci	r25, 0xF0	; 240
    1922:	82 95       	swap	r24
    1924:	92 95       	swap	r25
    1926:	90 7f       	andi	r25, 0xF0	; 240
    1928:	98 27       	eor	r25, r24
    192a:	80 7f       	andi	r24, 0xF0	; 240
    192c:	98 27       	eor	r25, r24
    192e:	28 8d       	ldd	r18, Y+24	; 0x18
    1930:	39 8d       	ldd	r19, Y+25	; 0x19
    1932:	28 0f       	add	r18, r24
    1934:	39 1f       	adc	r19, r25
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	82 0f       	add	r24, r18
    1940:	93 1f       	adc	r25, r19
    1942:	fc 01       	movw	r30, r24
    1944:	80 81       	ld	r24, Z
    1946:	88 23       	and	r24, r24
    1948:	21 f1       	breq	.+72     	; 0x1992 <_Z15build_menu_mainPA16_KcPhhhhh+0x324>
					memcpy( ( void* )&chrOutput[ valN - 1 ], ( void* )&chpStates[ valQ - 1 ][ valJ - 1 ], 1);
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9e 01       	movw	r18, r28
    1954:	28 5f       	subi	r18, 0xF8	; 248
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	82 0f       	add	r24, r18
    195a:	93 1f       	adc	r25, r19
    195c:	2e 81       	ldd	r18, Y+6	; 0x06
    195e:	22 2f       	mov	r18, r18
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	30 4f       	sbci	r19, 0xF0	; 240
    1966:	22 95       	swap	r18
    1968:	32 95       	swap	r19
    196a:	30 7f       	andi	r19, 0xF0	; 240
    196c:	32 27       	eor	r19, r18
    196e:	20 7f       	andi	r18, 0xF0	; 240
    1970:	32 27       	eor	r19, r18
    1972:	48 8d       	ldd	r20, Y+24	; 0x18
    1974:	59 8d       	ldd	r21, Y+25	; 0x19
    1976:	42 0f       	add	r20, r18
    1978:	53 1f       	adc	r21, r19
    197a:	2f 81       	ldd	r18, Y+7	; 0x07
    197c:	22 2f       	mov	r18, r18
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	21 50       	subi	r18, 0x01	; 1
    1982:	31 09       	sbc	r19, r1
    1984:	24 0f       	add	r18, r20
    1986:	35 1f       	adc	r19, r21
    1988:	f9 01       	movw	r30, r18
    198a:	20 81       	ld	r18, Z
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <_Z15build_menu_mainPA16_KcPhhhhh+0x32a>
				}else{
					valN--;
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	81 50       	subi	r24, 0x01	; 1
    1996:	8c 83       	std	Y+4, r24	; 0x04
				}
			}
			if( valN < sizeof(chrOutput) ){
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	40 97       	sbiw	r24, 0x10	; 16
    19a0:	20 f4       	brcc	.+8      	; 0x19aa <_Z15build_menu_mainPA16_KcPhhhhh+0x33c>
				valN++;
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	8c 83       	std	Y+4, r24	; 0x04
    19a8:	0b c0       	rjmp	.+22     	; 0x19c0 <_Z15build_menu_mainPA16_KcPhhhhh+0x352>
			}else{
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
    19aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19ae:	20 e1       	ldi	r18, 0x10	; 16
    19b0:	fe 01       	movw	r30, r28
    19b2:	38 96       	adiw	r30, 0x08	; 8
    19b4:	dc 01       	movw	r26, r24
    19b6:	01 90       	ld	r0, Z+
    19b8:	0d 92       	st	X+, r0
    19ba:	2a 95       	dec	r18
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <_Z15build_menu_mainPA16_KcPhhhhh+0x348>
				return;
    19be:	10 c0       	rjmp	.+32     	; 0x19e0 <_Z15build_menu_mainPA16_KcPhhhhh+0x372>
		chrOutput[ valN ] = ' ';
		valN++;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    19c0:	8f 81       	ldd	r24, Y+7	; 0x07
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	8f 83       	std	Y+7, r24	; 0x07
    19c6:	9f 81       	ldd	r25, Y+7	; 0x07
    19c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ca:	89 17       	cp	r24, r25
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <_Z15build_menu_mainPA16_KcPhhhhh+0x362>
    19ce:	13 cf       	rjmp	.-474    	; 0x17f6 <_Z15build_menu_mainPA16_KcPhhhhh+0x188>
	if( valPad == MENU_PAD_ON ){
		chrOutput[ valN ] = ' ';
		valN++;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
    19d4:	8e 83       	std	Y+6, r24	; 0x06
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19da:	89 17       	cp	r24, r25
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <_Z15build_menu_mainPA16_KcPhhhhh+0x372>
    19de:	08 cf       	rjmp	.-496    	; 0x17f0 <_Z15build_menu_mainPA16_KcPhhhhh+0x182>
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
				return;
			}
		}
	}
}
    19e0:	6f 96       	adiw	r28, 0x1f	; 31
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ef 90       	pop	r14
    19f6:	08 95       	ret

000019f8 <_Z16build_menu_alarmPA16_KcPhhhhh>:


void build_menu_alarm( const char chpStates[MENU_LEN_MAX][MENU_WID_MAX], unsigned char* chrReturn, uint8_t valCursPos, uint8_t valPad, uint8_t valLen, uint8_t valWid ){
    19f8:	ef 92       	push	r14
    19fa:	0f 93       	push	r16
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	a0 97       	sbiw	r28, 0x20	; 32
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	9a 8f       	std	Y+26, r25	; 0x1a
    1a12:	89 8f       	std	Y+25, r24	; 0x19
    1a14:	7c 8f       	std	Y+28, r23	; 0x1c
    1a16:	6b 8f       	std	Y+27, r22	; 0x1b
    1a18:	4d 8f       	std	Y+29, r20	; 0x1d
    1a1a:	2e 8f       	std	Y+30, r18	; 0x1e
    1a1c:	0f 8f       	std	Y+31, r16	; 0x1f
    1a1e:	e8 a2       	std	Y+32, r14	; 0x20
	
	unsigned char chrOutput[ LCD_LINE_SIZE ];
	uint8_t valDiv1Pos{ 3 };
    1a20:	83 e0       	ldi	r24, 0x03	; 3
    1a22:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t valDiv2Pos{ 6 };
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	88 87       	std	Y+8, r24	; 0x08
	uint8_t valCursStart{ 0 };
    1a28:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursEnd{ 0 };
    1a2a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valN{ 1 };
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
	
	
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    1a30:	1c 82       	std	Y+4, r1	; 0x04
    1a32:	35 c0       	rjmp	.+106    	; 0x1a9e <_Z16build_menu_alarmPA16_KcPhhhhh+0xa6>
		if( valR == 0 ){
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	88 23       	and	r24, r24
    1a38:	19 f4       	brne	.+6      	; 0x1a40 <_Z16build_menu_alarmPA16_KcPhhhhh+0x48>
			valCursStart = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <_Z16build_menu_alarmPA16_KcPhhhhh+0x7a>
		}else{
			valCursStart += strlen( chpStates[valR] );
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	82 95       	swap	r24
    1a48:	92 95       	swap	r25
    1a4a:	90 7f       	andi	r25, 0xF0	; 240
    1a4c:	98 27       	eor	r25, r24
    1a4e:	80 7f       	andi	r24, 0xF0	; 240
    1a50:	98 27       	eor	r25, r24
    1a52:	29 8d       	ldd	r18, Y+25	; 0x19
    1a54:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a56:	82 0f       	add	r24, r18
    1a58:	93 1f       	adc	r25, r19
    1a5a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    1a5e:	98 2f       	mov	r25, r24
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	89 0f       	add	r24, r25
    1a64:	89 83       	std	Y+1, r24	; 0x01
			valCursStart++;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	89 83       	std	Y+1, r24	; 0x01
			valCursEnd++;
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	8a 83       	std	Y+2, r24	; 0x02
		}
		valCursEnd += strlen( &chpStates[valR][0] );
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	82 95       	swap	r24
    1a7a:	92 95       	swap	r25
    1a7c:	90 7f       	andi	r25, 0xF0	; 240
    1a7e:	98 27       	eor	r25, r24
    1a80:	80 7f       	andi	r24, 0xF0	; 240
    1a82:	98 27       	eor	r25, r24
    1a84:	29 8d       	ldd	r18, Y+25	; 0x19
    1a86:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <strlen>
    1a90:	98 2f       	mov	r25, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	89 0f       	add	r24, r25
    1a96:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t valCursStart{ 0 };
	uint8_t valCursEnd{ 0 };
	uint8_t valN{ 1 };
	
	
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa2:	98 17       	cp	r25, r24
    1aa4:	38 f2       	brcs	.-114    	; 0x1a34 <_Z16build_menu_alarmPA16_KcPhhhhh+0x3c>
			valCursStart++;
			valCursEnd++;
		}
		valCursEnd += strlen( &chpStates[valR][0] );
	}
	valCursEnd++;
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	8f 5f       	subi	r24, 0xFF	; 255
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
	
	valDiv1Pos = ( valPad != MENU_PAD_ON ) ? valDiv1Pos : valDiv1Pos + 4;
    1aac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aae:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab0:	19 f4       	brne	.+6      	; 0x1ab8 <_Z16build_menu_alarmPA16_KcPhhhhh+0xc0>
    1ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab4:	8c 5f       	subi	r24, 0xFC	; 252
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <_Z16build_menu_alarmPA16_KcPhhhhh+0xc2>
    1ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aba:	8f 83       	std	Y+7, r24	; 0x07
	valDiv2Pos = ( valPad != MENU_PAD_ON ) ? valDiv2Pos : valDiv2Pos + 4;
    1abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1abe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <_Z16build_menu_alarmPA16_KcPhhhhh+0xd0>
    1ac2:	88 85       	ldd	r24, Y+8	; 0x08
    1ac4:	8c 5f       	subi	r24, 0xFC	; 252
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <_Z16build_menu_alarmPA16_KcPhhhhh+0xd2>
    1ac8:	88 85       	ldd	r24, Y+8	; 0x08
    1aca:	88 87       	std	Y+8, r24	; 0x08
	valCursStart = ( valPad != MENU_PAD_ON ) ? valCursStart : ( valCursStart ) ? valCursStart + 4 : 0;
    1acc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ace:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad0:	41 f4       	brne	.+16     	; 0x1ae2 <_Z16build_menu_alarmPA16_KcPhhhhh+0xea>
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <_Z16build_menu_alarmPA16_KcPhhhhh+0xe6>
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	8c 5f       	subi	r24, 0xFC	; 252
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <_Z16build_menu_alarmPA16_KcPhhhhh+0xec>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <_Z16build_menu_alarmPA16_KcPhhhhh+0xec>
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	valCursEnd = ( valPad != MENU_PAD_ON ) ? valCursEnd : ( valCursStart ) ? valCursEnd + 4 : 0;
    1ae6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aea:	41 f4       	brne	.+16     	; 0x1afc <_Z16build_menu_alarmPA16_KcPhhhhh+0x104>
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	88 23       	and	r24, r24
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <_Z16build_menu_alarmPA16_KcPhhhhh+0x100>
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	8c 5f       	subi	r24, 0xFC	; 252
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <_Z16build_menu_alarmPA16_KcPhhhhh+0x106>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <_Z16build_menu_alarmPA16_KcPhhhhh+0x106>
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	
	if( valPad == MENU_PAD_ON ){
    1b00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b02:	8f 3f       	cpi	r24, 0xFF	; 255
    1b04:	59 f4       	brne	.+22     	; 0x1b1c <_Z16build_menu_alarmPA16_KcPhhhhh+0x124>
		chrOutput[ 0 ] = ' ';
    1b06:	80 e2       	ldi	r24, 0x20	; 32
    1b08:	89 87       	std	Y+9, r24	; 0x09
		chrOutput[ 1 ] = ' ';
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	8a 87       	std	Y+10, r24	; 0x0a
		chrOutput[ 2 ] = ' ';
    1b0e:	80 e2       	ldi	r24, 0x20	; 32
    1b10:	8b 87       	std	Y+11, r24	; 0x0b
		chrOutput[ 3 ] = ' ';
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	8c 87       	std	Y+12, r24	; 0x0c
		valN = valN + 4;
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	8c 5f       	subi	r24, 0xFC	; 252
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	c0 c0       	rjmp	.+384    	; 0x1ca2 <_Z16build_menu_alarmPA16_KcPhhhhh+0x2aa>
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	b5 c0       	rjmp	.+362    	; 0x1c92 <_Z16build_menu_alarmPA16_KcPhhhhh+0x29a>
			if( valN == valDiv1Pos ){
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2c:	98 17       	cp	r25, r24
    1b2e:	69 f4       	brne	.+26     	; 0x1b4a <_Z16build_menu_alarmPA16_KcPhhhhh+0x152>
				chrOutput[ valN - 1 ] = ':';
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 01       	movw	r18, r28
    1b3a:	27 5f       	subi	r18, 0xF7	; 247
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	82 0f       	add	r24, r18
    1b40:	93 1f       	adc	r25, r19
    1b42:	2a e3       	ldi	r18, 0x3A	; 58
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
    1b48:	8d c0       	rjmp	.+282    	; 0x1c64 <_Z16build_menu_alarmPA16_KcPhhhhh+0x26c>
			}else if( valN == valDiv2Pos ){
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	88 85       	ldd	r24, Y+8	; 0x08
    1b4e:	98 17       	cp	r25, r24
    1b50:	69 f4       	brne	.+26     	; 0x1b6c <_Z16build_menu_alarmPA16_KcPhhhhh+0x174>
				chrOutput[ valN - 1 ] = ' ';
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	9e 01       	movw	r18, r28
    1b5c:	27 5f       	subi	r18, 0xF7	; 247
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	82 0f       	add	r24, r18
    1b62:	93 1f       	adc	r25, r19
    1b64:	20 e2       	ldi	r18, 0x20	; 32
    1b66:	fc 01       	movw	r30, r24
    1b68:	20 83       	st	Z, r18
    1b6a:	7c c0       	rjmp	.+248    	; 0x1c64 <_Z16build_menu_alarmPA16_KcPhhhhh+0x26c>
			}else if(( valN >= valCursStart ) & ( valN <= valCursEnd )){
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	28 17       	cp	r18, r24
    1b74:	08 f4       	brcc	.+2      	; 0x1b78 <_Z16build_menu_alarmPA16_KcPhhhhh+0x180>
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7e:	23 17       	cp	r18, r19
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <_Z16build_menu_alarmPA16_KcPhhhhh+0x18c>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	89 23       	and	r24, r25
    1b86:	88 23       	and	r24, r24
    1b88:	69 f0       	breq	.+26     	; 0x1ba4 <_Z16build_menu_alarmPA16_KcPhhhhh+0x1ac>
				chrOutput[ valN - 1 ] = '_';
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9e 01       	movw	r18, r28
    1b94:	27 5f       	subi	r18, 0xF7	; 247
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	2f e5       	ldi	r18, 0x5F	; 95
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	20 83       	st	Z, r18
    1ba2:	60 c0       	rjmp	.+192    	; 0x1c64 <_Z16build_menu_alarmPA16_KcPhhhhh+0x26c>
			}else if(( valPad == MENU_PAD_ON ) & ( valN > ( sizeof( chrOutput ) - 3 ))){
    1ba4:	51 e0       	ldi	r21, 0x01	; 1
    1ba6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    1baa:	09 f0       	breq	.+2      	; 0x1bae <_Z16build_menu_alarmPA16_KcPhhhhh+0x1b6>
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	8d e0       	ldi	r24, 0x0D	; 13
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	82 17       	cp	r24, r18
    1bbc:	93 07       	cpc	r25, r19
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <_Z16build_menu_alarmPA16_KcPhhhhh+0x1ca>
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	85 2f       	mov	r24, r21
    1bc4:	84 23       	and	r24, r20
    1bc6:	88 23       	and	r24, r24
    1bc8:	69 f0       	breq	.+26     	; 0x1be4 <_Z16build_menu_alarmPA16_KcPhhhhh+0x1ec>
				chrOutput[ valN - 1 ] = ' ';
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 01       	movw	r18, r28
    1bd4:	27 5f       	subi	r18, 0xF7	; 247
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	82 0f       	add	r24, r18
    1bda:	93 1f       	adc	r25, r19
    1bdc:	20 e2       	ldi	r18, 0x20	; 32
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
    1be2:	40 c0       	rjmp	.+128    	; 0x1c64 <_Z16build_menu_alarmPA16_KcPhhhhh+0x26c>
			}else{
				if( strlen( &chpStates[ valQ - 1 ][ valJ - 1 ] ) != 0 ){
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	81 50       	subi	r24, 0x01	; 1
    1bec:	90 4f       	sbci	r25, 0xF0	; 240
    1bee:	82 95       	swap	r24
    1bf0:	92 95       	swap	r25
    1bf2:	90 7f       	andi	r25, 0xF0	; 240
    1bf4:	98 27       	eor	r25, r24
    1bf6:	80 7f       	andi	r24, 0xF0	; 240
    1bf8:	98 27       	eor	r25, r24
    1bfa:	29 8d       	ldd	r18, Y+25	; 0x19
    1bfc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1bfe:	28 0f       	add	r18, r24
    1c00:	39 1f       	adc	r19, r25
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	82 0f       	add	r24, r18
    1c0c:	93 1f       	adc	r25, r19
    1c0e:	fc 01       	movw	r30, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	88 23       	and	r24, r24
    1c14:	21 f1       	breq	.+72     	; 0x1c5e <_Z16build_menu_alarmPA16_KcPhhhhh+0x266>
					memcpy( ( void* )&chrOutput[ valN - 1 ], ( void* )&chpStates[ valQ - 1 ][ valJ - 1 ], 1);
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9e 01       	movw	r18, r28
    1c20:	27 5f       	subi	r18, 0xF7	; 247
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	82 0f       	add	r24, r18
    1c26:	93 1f       	adc	r25, r19
    1c28:	2d 81       	ldd	r18, Y+5	; 0x05
    1c2a:	22 2f       	mov	r18, r18
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	21 50       	subi	r18, 0x01	; 1
    1c30:	30 4f       	sbci	r19, 0xF0	; 240
    1c32:	22 95       	swap	r18
    1c34:	32 95       	swap	r19
    1c36:	30 7f       	andi	r19, 0xF0	; 240
    1c38:	32 27       	eor	r19, r18
    1c3a:	20 7f       	andi	r18, 0xF0	; 240
    1c3c:	32 27       	eor	r19, r18
    1c3e:	49 8d       	ldd	r20, Y+25	; 0x19
    1c40:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1c42:	42 0f       	add	r20, r18
    1c44:	53 1f       	adc	r21, r19
    1c46:	2e 81       	ldd	r18, Y+6	; 0x06
    1c48:	22 2f       	mov	r18, r18
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	21 50       	subi	r18, 0x01	; 1
    1c4e:	31 09       	sbc	r19, r1
    1c50:	24 0f       	add	r18, r20
    1c52:	35 1f       	adc	r19, r21
    1c54:	f9 01       	movw	r30, r18
    1c56:	20 81       	ld	r18, Z
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18
    1c5c:	03 c0       	rjmp	.+6      	; 0x1c64 <_Z16build_menu_alarmPA16_KcPhhhhh+0x26c>
				}else{
					valN--;
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	81 50       	subi	r24, 0x01	; 1
    1c62:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
			
			if( valN < sizeof(chrOutput) ){
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	40 97       	sbiw	r24, 0x10	; 16
    1c6c:	20 f4       	brcc	.+8      	; 0x1c76 <_Z16build_menu_alarmPA16_KcPhhhhh+0x27e>
				valN++;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	0b c0       	rjmp	.+22     	; 0x1c8c <_Z16build_menu_alarmPA16_KcPhhhhh+0x294>
			}else{
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
    1c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7a:	20 e1       	ldi	r18, 0x10	; 16
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	39 96       	adiw	r30, 0x09	; 9
    1c80:	dc 01       	movw	r26, r24
    1c82:	01 90       	ld	r0, Z+
    1c84:	0d 92       	st	X+, r0
    1c86:	2a 95       	dec	r18
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <_Z16build_menu_alarmPA16_KcPhhhhh+0x28a>
				return;
    1c8a:	10 c0       	rjmp	.+32     	; 0x1cac <_Z16build_menu_alarmPA16_KcPhhhhh+0x2b4>
		chrOutput[ 3 ] = ' ';
		valN = valN + 4;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    1c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	8e 83       	std	Y+6, r24	; 0x06
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	88 a1       	ldd	r24, Y+32	; 0x20
    1c96:	89 17       	cp	r24, r25
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <_Z16build_menu_alarmPA16_KcPhhhhh+0x2a4>
    1c9a:	46 cf       	rjmp	.-372    	; 0x1b28 <_Z16build_menu_alarmPA16_KcPhhhhh+0x130>
		chrOutput[ 2 ] = ' ';
		chrOutput[ 3 ] = ' ';
		valN = valN + 4;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ca6:	89 17       	cp	r24, r25
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <_Z16build_menu_alarmPA16_KcPhhhhh+0x2b4>
    1caa:	3b cf       	rjmp	.-394    	; 0x1b22 <_Z16build_menu_alarmPA16_KcPhhhhh+0x12a>
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
				return;
			}
		}
	}
    1cac:	a0 96       	adiw	r28, 0x20	; 32
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	0f 91       	pop	r16
    1cbe:	ef 90       	pop	r14
    1cc0:	08 95       	ret

00001cc2 <_Z41__static_initialization_and_destruction_0ii>:
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <_Z41__static_initialization_and_destruction_0ii+0x8>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	7c 83       	std	Y+4, r23	; 0x04
    1cd4:	6b 83       	std	Y+3, r22	; 0x03
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	89 f4       	brne	.+34     	; 0x1d00 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	69 f4       	brne	.+26     	; 0x1d00 <_Z41__static_initialization_and_destruction_0ii+0x3e>

 
#include "headsup.h"


rtc rtcDS;
    1ce6:	81 ec       	ldi	r24, 0xC1	; 193
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	a4 d7       	rcall	.+3912   	; 0x2c34 <_ZN3rtcC1Ev>
lcd lcdNHD;
    1cec:	82 ec       	ldi	r24, 0xC2	; 194
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	1a d0       	rcall	.+52     	; 0x1d26 <_ZN3lcdC1Ev>
bat batLiPo;
    1cf2:	83 ec       	ldi	r24, 0xC3	; 195
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN3batC1Ev>
led ledAlarm;
    1cfa:	84 ec       	ldi	r24, 0xC4	; 196
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	a3 d6       	rcall	.+3398   	; 0x2a46 <_ZN3ledC1Ev>
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
				return;
			}
		}
	}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	08 95       	ret

00001d0e <_GLOBAL__sub_I_rtcDS>:
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	6f ef       	ldi	r22, 0xFF	; 255
    1d18:	7f ef       	ldi	r23, 0xFF	; 255
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	d1 df       	rcall	.-94     	; 0x1cc2 <_Z41__static_initialization_and_destruction_0ii>
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <_ZN3lcdC1Ev>:
}

void lcd::TWI_CLEAR_ENABLE_ACK()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	60 97       	sbiw	r28, 0x10	; 16
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	98 8b       	std	Y+16, r25	; 0x10
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f
    1d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d40:	98 89       	ldd	r25, Y+16	; 0x10
    1d42:	81 d0       	rcall	.+258    	; 0x1e46 <_ZN3lcd8TWI_INITEv>
    1d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d46:	98 89       	ldd	r25, Y+16	; 0x10
    1d48:	87 d2       	rcall	.+1294   	; 0x2258 <_ZN3lcd4INITEv>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d50:	b1 e4       	ldi	r27, 0x41	; 65
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	ab 83       	std	Y+3, r26	; 0x03
    1d58:	bc 83       	std	Y+4, r27	; 0x04
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	69 81       	ldd	r22, Y+1	; 0x01
    1d64:	7a 81       	ldd	r23, Y+2	; 0x02
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	af 83       	std	Y+7, r26	; 0x07
    1d78:	b8 87       	std	Y+8, r27	; 0x08
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	6d 81       	ldd	r22, Y+5	; 0x05
    1d84:	7e 81       	ldd	r23, Y+6	; 0x06
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <_ZN3lcdC1Ev+0x76>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9a 87       	std	Y+10, r25	; 0x0a
    1d98:	89 87       	std	Y+9, r24	; 0x09
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <_ZN3lcdC1Ev+0xf4>
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	6d 81       	ldd	r22, Y+5	; 0x05
    1da6:	7e 81       	ldd	r23, Y+6	; 0x06
    1da8:	8f 81       	ldd	r24, Y+7	; 0x07
    1daa:	98 85       	ldd	r25, Y+8	; 0x08
    1dac:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <_ZN3lcdC1Ev+0xe0>
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	69 81       	ldd	r22, Y+1	; 0x01
    1dbe:	7a 81       	ldd	r23, Y+2	; 0x02
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a 87       	std	Y+10, r25	; 0x0a
    1dda:	89 87       	std	Y+9, r24	; 0x09
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <_ZN3lcdC1Ev+0xd6>
    1dde:	89 e1       	ldi	r24, 0x19	; 25
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	8b 87       	std	Y+11, r24	; 0x0b
    1de6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <_ZN3lcdC1Ev+0xc4>
    1dee:	9c 87       	std	Y+12, r25	; 0x0c
    1df0:	8b 87       	std	Y+11, r24	; 0x0b
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9a 87       	std	Y+10, r25	; 0x0a
    1dfa:	89 87       	std	Y+9, r24	; 0x09
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	89 2b       	or	r24, r25
    1e02:	69 f7       	brne	.-38     	; 0x1dde <_ZN3lcdC1Ev+0xb8>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <_ZN3lcdC1Ev+0x108>
    1e06:	6d 81       	ldd	r22, Y+5	; 0x05
    1e08:	7e 81       	ldd	r23, Y+6	; 0x06
    1e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0c:	98 85       	ldd	r25, Y+8	; 0x08
    1e0e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9a 87       	std	Y+10, r25	; 0x0a
    1e18:	89 87       	std	Y+9, r24	; 0x09
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	9e 87       	std	Y+14, r25	; 0x0e
    1e20:	8d 87       	std	Y+13, r24	; 0x0d
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <_ZN3lcdC1Ev+0x100>
    1e2a:	9e 87       	std	Y+14, r25	; 0x0e
    1e2c:	8d 87       	std	Y+13, r24	; 0x0d
    1e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e30:	98 89       	ldd	r25, Y+16	; 0x10
    1e32:	49 d4       	rcall	.+2194   	; 0x26c6 <_ZN3lcd12SHOW_WELCOMEEv>
    1e34:	60 96       	adiw	r28, 0x10	; 16
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <_ZN3lcd8TWI_INITEv>:
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <_ZN3lcd8TWI_INITEv+0x6>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	84 e6       	ldi	r24, 0x64	; 100
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	24 e6       	ldi	r18, 0x64	; 100
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	20 81       	ld	r18, Z
    1e60:	2f 77       	andi	r18, 0x7F	; 127
    1e62:	fc 01       	movw	r30, r24
    1e64:	20 83       	st	Z, r18
    1e66:	8c eb       	ldi	r24, 0xBC	; 188
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	2c eb       	ldi	r18, 0xBC	; 188
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	f9 01       	movw	r30, r18
    1e70:	20 81       	ld	r18, Z
    1e72:	2e 7f       	andi	r18, 0xFE	; 254
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 83       	st	Z, r18
    1e78:	88 eb       	ldi	r24, 0xB8	; 184
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	22 e0       	ldi	r18, 0x02	; 2
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
    1e82:	89 eb       	ldi	r24, 0xB9	; 185
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	29 eb       	ldi	r18, 0xB9	; 185
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	20 81       	ld	r18, Z
    1e8e:	2d 7f       	andi	r18, 0xFD	; 253
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <_ZN3lcd16TWI_CHECK_STATUSEh>:
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6b 83       	std	Y+3, r22	; 0x03
    1eb8:	89 eb       	ldi	r24, 0xB9	; 185
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	2a 96       	adiw	r28, 0x0a	; 10
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <_ZN3lcd16TWI_CLEAR_ENABLEEv>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <_ZN3lcd16TWI_CLEAR_ENABLEEv+0x6>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	8c eb       	ldi	r24, 0xBC	; 188
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	24 e8       	ldi	r18, 0x84	; 132
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 83       	st	Z, r18
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <_ZN3lcd8TWI_STOPEv+0x6>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1f02:	8c eb       	ldi	r24, 0xBC	; 188
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	24 e9       	ldi	r18, 0x94	; 148
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
	
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <_ZN3lcd9TWI_STARTEv>:

void lcd::TWI_START(){
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <_ZN3lcd9TWI_STARTEv+0x6>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1f24:	8c eb       	ldi	r24, 0xBC	; 188
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	24 ea       	ldi	r18, 0xA4	; 164
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
    1f2e:	00 00       	nop
    1f30:	8c eb       	ldi	r24, 0xBC	; 188
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	fc 01       	movw	r30, r24
    1f36:	80 81       	ld	r24, Z
    1f38:	80 95       	com	r24
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	88 27       	eor	r24, r24
    1f3e:	88 1f       	adc	r24, r24
    1f40:	88 23       	and	r24, r24
    1f42:	b1 f7       	brne	.-20     	; 0x1f30 <_ZN3lcd9TWI_STARTEv+0x1a>
	TWI_CHECK_STATUS(LCD_TW_START);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	68 e0       	ldi	r22, 0x08	; 8
    1f4a:	a9 df       	rcall	.-174    	; 0x1e9e <_ZN3lcd16TWI_CHECK_STATUSEh>
	
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <_ZN3lcd12TWI_TRANSMITEhh>:

void lcd::TWI_TRANSMIT(uint8_t TwiData, uint8_t StatusCode){
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <_ZN3lcd12TWI_TRANSMITEhh+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <_ZN3lcd12TWI_TRANSMITEhh+0x8>
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6b 83       	std	Y+3, r22	; 0x03
    1f68:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
    1f6a:	8b eb       	ldi	r24, 0xBB	; 187
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f70:	fc 01       	movw	r30, r24
    1f72:	20 83       	st	Z, r18
	/*After TWDR is loaded with LCD_SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the LCD_SLA+W present in TWDR*/
	TWI_CLEAR_ENABLE();
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	ac df       	rcall	.-168    	; 0x1ed2 <_ZN3lcd16TWI_CLEAR_ENABLEEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
    1f7a:	00 00       	nop
    1f7c:	8c eb       	ldi	r24, 0xBC	; 188
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	fc 01       	movw	r30, r24
    1f82:	80 81       	ld	r24, Z
    1f84:	80 95       	com	r24
    1f86:	88 1f       	adc	r24, r24
    1f88:	88 27       	eor	r24, r24
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	88 23       	and	r24, r24
    1f8e:	b1 f7       	brne	.-20     	; 0x1f7c <_ZN3lcd12TWI_TRANSMITEhh+0x26>
	TWI_CHECK_STATUS(StatusCode);	// works!!
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	6c 81       	ldd	r22, Y+4	; 0x04
    1f96:	83 df       	rcall	.-250    	; 0x1e9e <_ZN3lcd16TWI_CHECK_STATUSEh>

}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <_ZN3lcd4SHOWEPh>:


void lcd::SHOW(unsigned char* text){
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <_ZN3lcd4SHOWEPh+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <_ZN3lcd4SHOWEPh+0x8>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <_ZN3lcd4SHOWEPh+0xa>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	7e 83       	std	Y+6, r23	; 0x06
    1fba:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_START();
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	aa df       	rcall	.-172    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	48 e1       	ldi	r20, 0x18	; 24
    1fc8:	6c e7       	ldi	r22, 0x7C	; 124
    1fca:	c5 df       	rcall	.-118    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	48 e2       	ldi	r20, 0x28	; 40
    1fd2:	60 e4       	ldi	r22, 0x40	; 64
    1fd4:	c0 df       	rcall	.-128    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    1fd6:	1a 82       	std	Y+2, r1	; 0x02
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	13 c0       	rjmp	.+38     	; 0x2002 <_ZN3lcd4SHOWEPh+0x5c>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	20 81       	ld	r18, Z
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	48 e2       	ldi	r20, 0x28	; 40
    1fea:	62 2f       	mov	r22, r18
    1fec:	b4 df       	rcall	.-152    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
		++text;
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_START();
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	40 97       	sbiw	r24, 0x10	; 16
    2008:	4c f3       	brlt	.-46     	; 0x1fdc <_ZN3lcd4SHOWEPh+0x36>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	72 df       	rcall	.-284    	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
	
}
    2010:	26 96       	adiw	r28, 0x06	; 6
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <_ZN3lcd17SELECT_LCD_LINE_1Ev>:


void lcd::SELECT_LCD_LINE_1(){
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <_ZN3lcd17SELECT_LCD_LINE_1Ev+0x6>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	70 df       	rcall	.-288    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	48 e1       	ldi	r20, 0x18	; 24
    203c:	6c e7       	ldi	r22, 0x7C	; 124
    203e:	8b df       	rcall	.-234    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	48 e2       	ldi	r20, 0x28	; 40
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	86 df       	rcall	.-244    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_1,LCD_TW_MT_DATA_ACK);
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	48 e2       	ldi	r20, 0x28	; 40
    2050:	60 e8       	ldi	r22, 0x80	; 128
    2052:	81 df       	rcall	.-254    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	4d df       	rcall	.-358    	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	08 95       	ret

00002064 <_ZN3lcd17SELECT_LCD_LINE_2Ev>:


void lcd::SELECT_LCD_LINE_2(){
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	00 d0       	rcall	.+0      	; 0x206a <_ZN3lcd17SELECT_LCD_LINE_2Ev+0x6>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	4f df       	rcall	.-354    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	48 e1       	ldi	r20, 0x18	; 24
    207e:	6c e7       	ldi	r22, 0x7C	; 124
    2080:	6a df       	rcall	.-300    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	48 e2       	ldi	r20, 0x28	; 40
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	65 df       	rcall	.-310    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_2,LCD_TW_MT_DATA_ACK);
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	48 e2       	ldi	r20, 0x28	; 40
    2092:	60 ec       	ldi	r22, 0xC0	; 192
    2094:	60 df       	rcall	.-320    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	2c df       	rcall	.-424    	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	60 97       	sbiw	r28, 0x10	; 16
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	98 8b       	std	Y+16, r25	; 0x10
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_START();
    20be:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c0:	98 89       	ldd	r25, Y+16	; 0x10
    20c2:	29 df       	rcall	.-430    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	98 89       	ldd	r25, Y+16	; 0x10
    20c8:	48 e1       	ldi	r20, 0x18	; 24
    20ca:	6c e7       	ldi	r22, 0x7C	; 124
    20cc:	44 df       	rcall	.-376    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);;
    20ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d0:	98 89       	ldd	r25, Y+16	; 0x10
    20d2:	48 e2       	ldi	r20, 0x28	; 40
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	3f df       	rcall	.-386    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);		//go to instructino table 0
    20d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20da:	98 89       	ldd	r25, Y+16	; 0x10
    20dc:	48 e2       	ldi	r20, 0x28	; 40
    20de:	68 e3       	ldi	r22, 0x38	; 56
    20e0:	3a df       	rcall	.-396    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x40,LCD_TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
    20e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e4:	98 89       	ldd	r25, Y+16	; 0x10
    20e6:	48 e2       	ldi	r20, 0x28	; 40
    20e8:	60 e4       	ldi	r22, 0x40	; 64
    20ea:	35 df       	rcall	.-406    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 89       	ldd	r25, Y+16	; 0x10
    20f0:	01 df       	rcall	.-510    	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e2       	ldi	r26, 0x20	; 32
    20f8:	b1 e4       	ldi	r27, 0x41	; 65
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	ab 83       	std	Y+3, r26	; 0x03
    2100:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a e7       	ldi	r20, 0x7A	; 122
    2108:	53 e4       	ldi	r21, 0x43	; 67
    210a:	69 81       	ldd	r22, Y+1	; 0x01
    210c:	7a 81       	ldd	r23, Y+2	; 0x02
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	af 83       	std	Y+7, r26	; 0x07
    2120:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	6d 81       	ldd	r22, Y+5	; 0x05
    212c:	7e 81       	ldd	r23, Y+6	; 0x06
    212e:	8f 81       	ldd	r24, Y+7	; 0x07
    2130:	98 85       	ldd	r25, Y+8	; 0x08
    2132:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9a 87       	std	Y+10, r25	; 0x0a
    2140:	89 87       	std	Y+9, r24	; 0x09
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	6d 81       	ldd	r22, Y+5	; 0x05
    214e:	7e 81       	ldd	r23, Y+6	; 0x06
    2150:	8f 81       	ldd	r24, Y+7	; 0x07
    2152:	98 85       	ldd	r25, Y+8	; 0x08
    2154:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	69 81       	ldd	r22, Y+1	; 0x01
    2166:	7a 81       	ldd	r23, Y+2	; 0x02
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9a 87       	std	Y+10, r25	; 0x0a
    2182:	89 87       	std	Y+9, r24	; 0x09
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <_ZN3lcd5CGRAMEv+0xfe>
    2186:	89 e1       	ldi	r24, 0x19	; 25
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 87       	std	Y+12, r25	; 0x0c
    218c:	8b 87       	std	Y+11, r24	; 0x0b
    218e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2190:	9c 85       	ldd	r25, Y+12	; 0x0c
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <_ZN3lcd5CGRAMEv+0xec>
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9a 87       	std	Y+10, r25	; 0x0a
    21a2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	89 2b       	or	r24, r25
    21aa:	69 f7       	brne	.-38     	; 0x2186 <_ZN3lcd5CGRAMEv+0xe0>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6d 81       	ldd	r22, Y+5	; 0x05
    21b0:	7e 81       	ldd	r23, Y+6	; 0x06
    21b2:	8f 81       	ldd	r24, Y+7	; 0x07
    21b4:	98 85       	ldd	r25, Y+8	; 0x08
    21b6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9a 87       	std	Y+10, r25	; 0x0a
    21c0:	89 87       	std	Y+9, r24	; 0x09
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	9e 87       	std	Y+14, r25	; 0x0e
    21c8:	8d 87       	std	Y+13, r24	; 0x0d
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <_ZN3lcd5CGRAMEv+0x128>
    21d2:	9e 87       	std	Y+14, r25	; 0x0e
    21d4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_START();
    21d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d8:	98 89       	ldd	r25, Y+16	; 0x10
    21da:	9d de       	rcall	.-710    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    21dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21de:	98 89       	ldd	r25, Y+16	; 0x10
    21e0:	48 e1       	ldi	r20, 0x18	; 24
    21e2:	6c e7       	ldi	r22, 0x7C	; 124
    21e4:	b8 de       	rcall	.-656    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    21e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e8:	98 89       	ldd	r25, Y+16	; 0x10
    21ea:	48 e2       	ldi	r20, 0x28	; 40
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	b3 de       	rcall	.-666    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//write to first CGRAM address
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	48 e2       	ldi	r20, 0x28	; 40
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	ae de       	rcall	.-676    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x1E,LCD_TW_MT_DATA_ACK);
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	98 89       	ldd	r25, Y+16	; 0x10
    21fe:	48 e2       	ldi	r20, 0x28	; 40
    2200:	6e e1       	ldi	r22, 0x1E	; 30
    2202:	a9 de       	rcall	.-686    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x18,LCD_TW_MT_DATA_ACK);
    2204:	8f 85       	ldd	r24, Y+15	; 0x0f
    2206:	98 89       	ldd	r25, Y+16	; 0x10
    2208:	48 e2       	ldi	r20, 0x28	; 40
    220a:	68 e1       	ldi	r22, 0x18	; 24
    220c:	a4 de       	rcall	.-696    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2210:	98 89       	ldd	r25, Y+16	; 0x10
    2212:	48 e2       	ldi	r20, 0x28	; 40
    2214:	64 e1       	ldi	r22, 0x14	; 20
    2216:	9f de       	rcall	.-706    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x12,LCD_TW_MT_DATA_ACK);
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	98 89       	ldd	r25, Y+16	; 0x10
    221c:	48 e2       	ldi	r20, 0x28	; 40
    221e:	62 e1       	ldi	r22, 0x12	; 18
    2220:	9a de       	rcall	.-716    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	48 e2       	ldi	r20, 0x28	; 40
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	95 de       	rcall	.-726    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	48 e2       	ldi	r20, 0x28	; 40
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	90 de       	rcall	.-736    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//8 bytes per character
    2236:	8f 85       	ldd	r24, Y+15	; 0x0f
    2238:	98 89       	ldd	r25, Y+16	; 0x10
    223a:	48 e2       	ldi	r20, 0x28	; 40
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	8b de       	rcall	.-746    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	98 89       	ldd	r25, Y+16	; 0x10
    2244:	57 de       	rcall	.-850    	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
}
    2246:	60 96       	adiw	r28, 0x10	; 16
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <_ZN3lcd4INITEv>:

void lcd::INIT()
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	ea 97       	sbiw	r28, 0x3a	; 58
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	9a af       	std	Y+58, r25	; 0x3a
    226e:	89 af       	std	Y+57, r24	; 0x39
	TWI_START();
    2270:	89 ad       	ldd	r24, Y+57	; 0x39
    2272:	9a ad       	ldd	r25, Y+58	; 0x3a
    2274:	50 de       	rcall	.-864    	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    2276:	89 ad       	ldd	r24, Y+57	; 0x39
    2278:	9a ad       	ldd	r25, Y+58	; 0x3a
    227a:	48 e1       	ldi	r20, 0x18	; 24
    227c:	6c e7       	ldi	r22, 0x7C	; 124
    227e:	6b de       	rcall	.-810    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    2280:	89 ad       	ldd	r24, Y+57	; 0x39
    2282:	9a ad       	ldd	r25, Y+58	; 0x3a
    2284:	48 e2       	ldi	r20, 0x28	; 40
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	66 de       	rcall	.-820    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    228a:	89 ad       	ldd	r24, Y+57	; 0x39
    228c:	9a ad       	ldd	r25, Y+58	; 0x3a
    228e:	48 e2       	ldi	r20, 0x28	; 40
    2290:	68 e3       	ldi	r22, 0x38	; 56
    2292:	61 de       	rcall	.-830    	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a8 ec       	ldi	r26, 0xC8	; 200
    229a:	b2 e4       	ldi	r27, 0x42	; 66
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	ab 83       	std	Y+3, r26	; 0x03
    22a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	53 e4       	ldi	r21, 0x43	; 67
    22ac:	69 81       	ldd	r22, Y+1	; 0x01
    22ae:	7a 81       	ldd	r23, Y+2	; 0x02
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	af 83       	std	Y+7, r26	; 0x07
    22c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	6d 81       	ldd	r22, Y+5	; 0x05
    22ce:	7e 81       	ldd	r23, Y+6	; 0x06
    22d0:	8f 81       	ldd	r24, Y+7	; 0x07
    22d2:	98 85       	ldd	r25, Y+8	; 0x08
    22d4:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <_ZN3lcd4INITEv+0x8e>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9a 87       	std	Y+10, r25	; 0x0a
    22e2:	89 87       	std	Y+9, r24	; 0x09
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <_ZN3lcd4INITEv+0x10c>
	else if (__tmp > 65535)
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	6d 81       	ldd	r22, Y+5	; 0x05
    22f0:	7e 81       	ldd	r23, Y+6	; 0x06
    22f2:	8f 81       	ldd	r24, Y+7	; 0x07
    22f4:	98 85       	ldd	r25, Y+8	; 0x08
    22f6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <_ZN3lcd4INITEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	69 81       	ldd	r22, Y+1	; 0x01
    2308:	7a 81       	ldd	r23, Y+2	; 0x02
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9a 87       	std	Y+10, r25	; 0x0a
    2324:	89 87       	std	Y+9, r24	; 0x09
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <_ZN3lcd4INITEv+0xee>
    2328:	89 e1       	ldi	r24, 0x19	; 25
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9c 87       	std	Y+12, r25	; 0x0c
    232e:	8b 87       	std	Y+11, r24	; 0x0b
    2330:	8b 85       	ldd	r24, Y+11	; 0x0b
    2332:	9c 85       	ldd	r25, Y+12	; 0x0c
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <_ZN3lcd4INITEv+0xdc>
    2338:	9c 87       	std	Y+12, r25	; 0x0c
    233a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9a 87       	std	Y+10, r25	; 0x0a
    2344:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	89 2b       	or	r24, r25
    234c:	69 f7       	brne	.-38     	; 0x2328 <_ZN3lcd4INITEv+0xd0>
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <_ZN3lcd4INITEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	6d 81       	ldd	r22, Y+5	; 0x05
    2352:	7e 81       	ldd	r23, Y+6	; 0x06
    2354:	8f 81       	ldd	r24, Y+7	; 0x07
    2356:	98 85       	ldd	r25, Y+8	; 0x08
    2358:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9a 87       	std	Y+10, r25	; 0x0a
    2362:	89 87       	std	Y+9, r24	; 0x09
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	9e 87       	std	Y+14, r25	; 0x0e
    236a:	8d 87       	std	Y+13, r24	; 0x0d
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <_ZN3lcd4INITEv+0x118>
    2374:	9e 87       	std	Y+14, r25	; 0x0e
    2376:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);						// Use Extended instruction set
    2378:	89 ad       	ldd	r24, Y+57	; 0x39
    237a:	9a ad       	ldd	r25, Y+58	; 0x3a
    237c:	48 e2       	ldi	r20, 0x28	; 40
    237e:	69 e3       	ldi	r22, 0x39	; 57
    2380:	ea dd       	rcall	.-1068   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 ec       	ldi	r26, 0xC8	; 200
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	a9 8b       	std	Y+17, r26	; 0x11
    2390:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	53 e4       	ldi	r21, 0x43	; 67
    239a:	6f 85       	ldd	r22, Y+15	; 0x0f
    239c:	78 89       	ldd	r23, Y+16	; 0x10
    239e:	89 89       	ldd	r24, Y+17	; 0x11
    23a0:	9a 89       	ldd	r25, Y+18	; 0x12
    23a2:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	ad 8b       	std	Y+21, r26	; 0x15
    23b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	6b 89       	ldd	r22, Y+19	; 0x13
    23bc:	7c 89       	ldd	r23, Y+20	; 0x14
    23be:	8d 89       	ldd	r24, Y+21	; 0x15
    23c0:	9e 89       	ldd	r25, Y+22	; 0x16
    23c2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <_ZN3lcd4INITEv+0x17c>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 8f       	std	Y+24, r25	; 0x18
    23d0:	8f 8b       	std	Y+23, r24	; 0x17
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <_ZN3lcd4INITEv+0x1fa>
	else if (__tmp > 65535)
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	6b 89       	ldd	r22, Y+19	; 0x13
    23de:	7c 89       	ldd	r23, Y+20	; 0x14
    23e0:	8d 89       	ldd	r24, Y+21	; 0x15
    23e2:	9e 89       	ldd	r25, Y+22	; 0x16
    23e4:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <_ZN3lcd4INITEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    23f6:	78 89       	ldd	r23, Y+16	; 0x10
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	9a 89       	ldd	r25, Y+18	; 0x12
    23fc:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	98 8f       	std	Y+24, r25	; 0x18
    2412:	8f 8b       	std	Y+23, r24	; 0x17
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <_ZN3lcd4INITEv+0x1dc>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9a 8f       	std	Y+26, r25	; 0x1a
    241c:	89 8f       	std	Y+25, r24	; 0x19
    241e:	89 8d       	ldd	r24, Y+25	; 0x19
    2420:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <_ZN3lcd4INITEv+0x1ca>
    2426:	9a 8f       	std	Y+26, r25	; 0x1a
    2428:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8f 89       	ldd	r24, Y+23	; 0x17
    242c:	98 8d       	ldd	r25, Y+24	; 0x18
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	98 8f       	std	Y+24, r25	; 0x18
    2432:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	89 2b       	or	r24, r25
    243a:	69 f7       	brne	.-38     	; 0x2416 <_ZN3lcd4INITEv+0x1be>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <_ZN3lcd4INITEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6b 89       	ldd	r22, Y+19	; 0x13
    2440:	7c 89       	ldd	r23, Y+20	; 0x14
    2442:	8d 89       	ldd	r24, Y+21	; 0x15
    2444:	9e 89       	ldd	r25, Y+22	; 0x16
    2446:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	98 8f       	std	Y+24, r25	; 0x18
    2450:	8f 8b       	std	Y+23, r24	; 0x17
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	9c 8f       	std	Y+28, r25	; 0x1c
    2458:	8b 8f       	std	Y+27, r24	; 0x1b
    245a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <_ZN3lcd4INITEv+0x206>
    2462:	9c 8f       	std	Y+28, r25	; 0x1c
    2464:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);						// Set Internal Osc Freq
    2466:	89 ad       	ldd	r24, Y+57	; 0x39
    2468:	9a ad       	ldd	r25, Y+58	; 0x3a
    246a:	48 e2       	ldi	r20, 0x28	; 40
    246c:	64 e1       	ldi	r22, 0x14	; 20
    246e:	73 dd       	rcall	.-1306   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x78,LCD_TW_MT_DATA_ACK);						// Contrast Set
    2470:	89 ad       	ldd	r24, Y+57	; 0x39
    2472:	9a ad       	ldd	r25, Y+58	; 0x3a
    2474:	48 e2       	ldi	r20, 0x28	; 40
    2476:	68 e7       	ldi	r22, 0x78	; 120
    2478:	6e dd       	rcall	.-1316   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x5D,LCD_TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    247a:	89 ad       	ldd	r24, Y+57	; 0x39
    247c:	9a ad       	ldd	r25, Y+58	; 0x3a
    247e:	48 e2       	ldi	r20, 0x28	; 40
    2480:	6d e5       	ldi	r22, 0x5D	; 93
    2482:	69 dd       	rcall	.-1326   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x6D,LCD_TW_MT_DATA_ACK);						// Follower Control
    2484:	89 ad       	ldd	r24, Y+57	; 0x39
    2486:	9a ad       	ldd	r25, Y+58	; 0x3a
    2488:	48 e2       	ldi	r20, 0x28	; 40
    248a:	6d e6       	ldi	r22, 0x6D	; 109
    248c:	64 dd       	rcall	.-1336   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x0C,LCD_TW_MT_DATA_ACK);						// Display On/Off
    248e:	89 ad       	ldd	r24, Y+57	; 0x39
    2490:	9a ad       	ldd	r25, Y+58	; 0x3a
    2492:	48 e2       	ldi	r20, 0x28	; 40
    2494:	6c e0       	ldi	r22, 0x0C	; 12
    2496:	5f dd       	rcall	.-1346   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);						// Clear Display
    2498:	89 ad       	ldd	r24, Y+57	; 0x39
    249a:	9a ad       	ldd	r25, Y+58	; 0x3a
    249c:	48 e2       	ldi	r20, 0x28	; 40
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	5a dd       	rcall	.-1356   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x06,LCD_TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    24a2:	89 ad       	ldd	r24, Y+57	; 0x39
    24a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    24a6:	48 e2       	ldi	r20, 0x28	; 40
    24a8:	66 e0       	ldi	r22, 0x06	; 6
    24aa:	55 dd       	rcall	.-1366   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a8 ec       	ldi	r26, 0xC8	; 200
    24b2:	b2 e4       	ldi	r27, 0x42	; 66
    24b4:	8d 8f       	std	Y+29, r24	; 0x1d
    24b6:	9e 8f       	std	Y+30, r25	; 0x1e
    24b8:	af 8f       	std	Y+31, r26	; 0x1f
    24ba:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    24c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ca:	98 a1       	ldd	r25, Y+32	; 0x20
    24cc:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	9a a3       	std	Y+34, r25	; 0x22
    24d8:	ab a3       	std	Y+35, r26	; 0x23
    24da:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	69 a1       	ldd	r22, Y+33	; 0x21
    24e6:	7a a1       	ldd	r23, Y+34	; 0x22
    24e8:	8b a1       	ldd	r24, Y+35	; 0x23
    24ea:	9c a1       	ldd	r25, Y+36	; 0x24
    24ec:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <_ZN3lcd4INITEv+0x2a6>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e a3       	std	Y+38, r25	; 0x26
    24fa:	8d a3       	std	Y+37, r24	; 0x25
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <_ZN3lcd4INITEv+0x324>
	else if (__tmp > 65535)
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	69 a1       	ldd	r22, Y+33	; 0x21
    2508:	7a a1       	ldd	r23, Y+34	; 0x22
    250a:	8b a1       	ldd	r24, Y+35	; 0x23
    250c:	9c a1       	ldd	r25, Y+36	; 0x24
    250e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <_ZN3lcd4INITEv+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2520:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2522:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2524:	98 a1       	ldd	r25, Y+32	; 0x20
    2526:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e a3       	std	Y+38, r25	; 0x26
    253c:	8d a3       	std	Y+37, r24	; 0x25
    253e:	0f c0       	rjmp	.+30     	; 0x255e <_ZN3lcd4INITEv+0x306>
    2540:	89 e1       	ldi	r24, 0x19	; 25
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	98 a7       	std	Y+40, r25	; 0x28
    2546:	8f a3       	std	Y+39, r24	; 0x27
    2548:	8f a1       	ldd	r24, Y+39	; 0x27
    254a:	98 a5       	ldd	r25, Y+40	; 0x28
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <_ZN3lcd4INITEv+0x2f4>
    2550:	98 a7       	std	Y+40, r25	; 0x28
    2552:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d a1       	ldd	r24, Y+37	; 0x25
    2556:	9e a1       	ldd	r25, Y+38	; 0x26
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e a3       	std	Y+38, r25	; 0x26
    255c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	89 2b       	or	r24, r25
    2564:	69 f7       	brne	.-38     	; 0x2540 <_ZN3lcd4INITEv+0x2e8>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <_ZN3lcd4INITEv+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	69 a1       	ldd	r22, Y+33	; 0x21
    256a:	7a a1       	ldd	r23, Y+34	; 0x22
    256c:	8b a1       	ldd	r24, Y+35	; 0x23
    256e:	9c a1       	ldd	r25, Y+36	; 0x24
    2570:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e a3       	std	Y+38, r25	; 0x26
    257a:	8d a3       	std	Y+37, r24	; 0x25
    257c:	8d a1       	ldd	r24, Y+37	; 0x25
    257e:	9e a1       	ldd	r25, Y+38	; 0x26
    2580:	9a a7       	std	Y+42, r25	; 0x2a
    2582:	89 a7       	std	Y+41, r24	; 0x29
    2584:	89 a5       	ldd	r24, Y+41	; 0x29
    2586:	9a a5       	ldd	r25, Y+42	; 0x2a
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <_ZN3lcd4INITEv+0x330>
    258c:	9a a7       	std	Y+42, r25	; 0x2a
    258e:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    2590:	89 ad       	ldd	r24, Y+57	; 0x39
    2592:	9a ad       	ldd	r25, Y+58	; 0x3a
    2594:	af dc       	rcall	.-1698   	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    2596:	89 ad       	ldd	r24, Y+57	; 0x39
    2598:	9a ad       	ldd	r25, Y+58	; 0x3a
    259a:	85 dd       	rcall	.-1270   	; 0x20a6 <_ZN3lcd5CGRAMEv>

	TWI_START();
    259c:	89 ad       	ldd	r24, Y+57	; 0x39
    259e:	9a ad       	ldd	r25, Y+58	; 0x3a
    25a0:	ba dc       	rcall	.-1676   	; 0x1f16 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    25a2:	89 ad       	ldd	r24, Y+57	; 0x39
    25a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25a6:	48 e1       	ldi	r20, 0x18	; 24
    25a8:	6c e7       	ldi	r22, 0x7C	; 124
    25aa:	d5 dc       	rcall	.-1622   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    25ac:	89 ad       	ldd	r24, Y+57	; 0x39
    25ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    25b0:	48 e2       	ldi	r20, 0x28	; 40
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	d0 dc       	rcall	.-1632   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);
    25b6:	89 ad       	ldd	r24, Y+57	; 0x39
    25b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    25ba:	48 e2       	ldi	r20, 0x28	; 40
    25bc:	69 e3       	ldi	r22, 0x39	; 57
    25be:	cb dc       	rcall	.-1642   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    25c0:	89 ad       	ldd	r24, Y+57	; 0x39
    25c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    25c4:	48 e2       	ldi	r20, 0x28	; 40
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	c6 dc       	rcall	.-1652   	; 0x1f56 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    25ca:	89 ad       	ldd	r24, Y+57	; 0x39
    25cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    25ce:	92 dc       	rcall	.-1756   	; 0x1ef4 <_ZN3lcd8TWI_STOPEv>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a8 ec       	ldi	r26, 0xC8	; 200
    25d6:	b2 e4       	ldi	r27, 0x42	; 66
    25d8:	8b a7       	std	Y+43, r24	; 0x2b
    25da:	9c a7       	std	Y+44, r25	; 0x2c
    25dc:	ad a7       	std	Y+45, r26	; 0x2d
    25de:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	6b a5       	ldd	r22, Y+43	; 0x2b
    25ea:	7c a5       	ldd	r23, Y+44	; 0x2c
    25ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    25f0:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f a7       	std	Y+47, r24	; 0x2f
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	a9 ab       	std	Y+49, r26	; 0x31
    25fe:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	6f a5       	ldd	r22, Y+47	; 0x2f
    260a:	78 a9       	ldd	r23, Y+48	; 0x30
    260c:	89 a9       	ldd	r24, Y+49	; 0x31
    260e:	9a a9       	ldd	r25, Y+50	; 0x32
    2610:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <_ZN3lcd4INITEv+0x3ca>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c ab       	std	Y+52, r25	; 0x34
    261e:	8b ab       	std	Y+51, r24	; 0x33
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <_ZN3lcd4INITEv+0x448>
	else if (__tmp > 65535)
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	6f a5       	ldd	r22, Y+47	; 0x2f
    262c:	78 a9       	ldd	r23, Y+48	; 0x30
    262e:	89 a9       	ldd	r24, Y+49	; 0x31
    2630:	9a a9       	ldd	r25, Y+50	; 0x32
    2632:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <_ZN3lcd4INITEv+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	6b a5       	ldd	r22, Y+43	; 0x2b
    2644:	7c a5       	ldd	r23, Y+44	; 0x2c
    2646:	8d a5       	ldd	r24, Y+45	; 0x2d
    2648:	9e a5       	ldd	r25, Y+46	; 0x2e
    264a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9c ab       	std	Y+52, r25	; 0x34
    2660:	8b ab       	std	Y+51, r24	; 0x33
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <_ZN3lcd4INITEv+0x42a>
    2664:	89 e1       	ldi	r24, 0x19	; 25
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9e ab       	std	Y+54, r25	; 0x36
    266a:	8d ab       	std	Y+53, r24	; 0x35
    266c:	8d a9       	ldd	r24, Y+53	; 0x35
    266e:	9e a9       	ldd	r25, Y+54	; 0x36
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <_ZN3lcd4INITEv+0x418>
    2674:	9e ab       	std	Y+54, r25	; 0x36
    2676:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8b a9       	ldd	r24, Y+51	; 0x33
    267a:	9c a9       	ldd	r25, Y+52	; 0x34
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9c ab       	std	Y+52, r25	; 0x34
    2680:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8b a9       	ldd	r24, Y+51	; 0x33
    2684:	9c a9       	ldd	r25, Y+52	; 0x34
    2686:	89 2b       	or	r24, r25
    2688:	69 f7       	brne	.-38     	; 0x2664 <_ZN3lcd4INITEv+0x40c>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <_ZN3lcd4INITEv+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f a5       	ldd	r22, Y+47	; 0x2f
    268e:	78 a9       	ldd	r23, Y+48	; 0x30
    2690:	89 a9       	ldd	r24, Y+49	; 0x31
    2692:	9a a9       	ldd	r25, Y+50	; 0x32
    2694:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9c ab       	std	Y+52, r25	; 0x34
    269e:	8b ab       	std	Y+51, r24	; 0x33
    26a0:	8b a9       	ldd	r24, Y+51	; 0x33
    26a2:	9c a9       	ldd	r25, Y+52	; 0x34
    26a4:	98 af       	std	Y+56, r25	; 0x38
    26a6:	8f ab       	std	Y+55, r24	; 0x37
    26a8:	8f a9       	ldd	r24, Y+55	; 0x37
    26aa:	98 ad       	ldd	r25, Y+56	; 0x38
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <_ZN3lcd4INITEv+0x454>
    26b0:	98 af       	std	Y+56, r25	; 0x38
    26b2:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    26b4:	ea 96       	adiw	r28, 0x3a	; 58
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <_ZN3lcd12SHOW_WELCOMEEv>:

void lcd::SHOW_WELCOME(){
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	e0 97       	sbiw	r28, 0x30	; 48
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	98 ab       	std	Y+48, r25	; 0x30
    26dc:	8f a7       	std	Y+47, r24	; 0x2f
	
	unsigned char cucWELCOME_TEXT_1[ LCD_LINE_SIZE ]{ ' ', '-', '-', ' ', 'H', 'e', 'a', 'd', 's', 'U', 'p', '!', ' ', '-', '-', ' ' };
    26de:	80 e1       	ldi	r24, 0x10	; 16
    26e0:	e6 e6       	ldi	r30, 0x66	; 102
    26e2:	f1 e0       	ldi	r31, 0x01	; 1
    26e4:	de 01       	movw	r26, r28
    26e6:	1f 96       	adiw	r26, 0x0f	; 15
    26e8:	01 90       	ld	r0, Z+
    26ea:	0d 92       	st	X+, r0
    26ec:	8a 95       	dec	r24
    26ee:	e1 f7       	brne	.-8      	; 0x26e8 <_ZN3lcd12SHOW_WELCOMEEv+0x22>
	unsigned char cucWELCOME_TEXT_2[ LCD_LINE_SIZE ]{ 'S', 'l', 'e', 'e', 'p', ' ', 'E', 'n', 'v', 'i', 'r', 'o', 'm', 'e', 'n', 't' };
    26f0:	80 e1       	ldi	r24, 0x10	; 16
    26f2:	e6 e7       	ldi	r30, 0x76	; 118
    26f4:	f1 e0       	ldi	r31, 0x01	; 1
    26f6:	de 01       	movw	r26, r28
    26f8:	5f 96       	adiw	r26, 0x1f	; 31
    26fa:	01 90       	ld	r0, Z+
    26fc:	0d 92       	st	X+, r0
    26fe:	8a 95       	dec	r24
    2700:	e1 f7       	brne	.-8      	; 0x26fa <_ZN3lcd12SHOW_WELCOMEEv+0x34>
	
		
	print( cucWELCOME_TEXT_1, LCD_LINE_TOP );
    2702:	9e 01       	movw	r18, r28
    2704:	21 5f       	subi	r18, 0xF1	; 241
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	83 d0       	rcall	.+262    	; 0x2818 <_ZN3lcd5printEPhh>
	print( cucWELCOME_TEXT_2, LCD_LINE_BOTTOM );
    2712:	9e 01       	movw	r18, r28
    2714:	21 5e       	subi	r18, 0xE1	; 225
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	8f a5       	ldd	r24, Y+47	; 0x2f
    271a:	98 a9       	ldd	r25, Y+48	; 0x30
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	b9 01       	movw	r22, r18
    2720:	7b d0       	rcall	.+246    	; 0x2818 <_ZN3lcd5printEPhh>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	aa e7       	ldi	r26, 0x7A	; 122
    2728:	b4 e4       	ldi	r27, 0x44	; 68
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	ab 83       	std	Y+3, r26	; 0x03
    2730:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a e7       	ldi	r20, 0x7A	; 122
    2738:	53 e4       	ldi	r21, 0x43	; 67
    273a:	69 81       	ldd	r22, Y+1	; 0x01
    273c:	7a 81       	ldd	r23, Y+2	; 0x02
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	af 83       	std	Y+7, r26	; 0x07
    2750:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	6d 81       	ldd	r22, Y+5	; 0x05
    275c:	7e 81       	ldd	r23, Y+6	; 0x06
    275e:	8f 81       	ldd	r24, Y+7	; 0x07
    2760:	98 85       	ldd	r25, Y+8	; 0x08
    2762:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <_ZN3lcd12SHOW_WELCOMEEv+0xae>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9a 87       	std	Y+10, r25	; 0x0a
    2770:	89 87       	std	Y+9, r24	; 0x09
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <_ZN3lcd12SHOW_WELCOMEEv+0x12c>
	else if (__tmp > 65535)
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	6d 81       	ldd	r22, Y+5	; 0x05
    277e:	7e 81       	ldd	r23, Y+6	; 0x06
    2780:	8f 81       	ldd	r24, Y+7	; 0x07
    2782:	98 85       	ldd	r25, Y+8	; 0x08
    2784:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <_ZN3lcd12SHOW_WELCOMEEv+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	69 81       	ldd	r22, Y+1	; 0x01
    2796:	7a 81       	ldd	r23, Y+2	; 0x02
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a 87       	std	Y+10, r25	; 0x0a
    27b2:	89 87       	std	Y+9, r24	; 0x09
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <_ZN3lcd12SHOW_WELCOMEEv+0x10e>
    27b6:	89 e1       	ldi	r24, 0x19	; 25
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9c 87       	std	Y+12, r25	; 0x0c
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <_ZN3lcd12SHOW_WELCOMEEv+0xfc>
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9a 87       	std	Y+10, r25	; 0x0a
    27d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	89 2b       	or	r24, r25
    27da:	69 f7       	brne	.-38     	; 0x27b6 <_ZN3lcd12SHOW_WELCOMEEv+0xf0>
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <_ZN3lcd12SHOW_WELCOMEEv+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	6d 81       	ldd	r22, Y+5	; 0x05
    27e0:	7e 81       	ldd	r23, Y+6	; 0x06
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
    27e4:	98 85       	ldd	r25, Y+8	; 0x08
    27e6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9a 87       	std	Y+10, r25	; 0x0a
    27f0:	89 87       	std	Y+9, r24	; 0x09
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	9e 87       	std	Y+14, r25	; 0x0e
    27f8:	8d 87       	std	Y+13, r24	; 0x0d
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <_ZN3lcd12SHOW_WELCOMEEv+0x138>
    2802:	9e 87       	std	Y+14, r25	; 0x0e
    2804:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms( 1000 );

}
    2806:	e0 96       	adiw	r28, 0x30	; 48
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	a1 97       	sbiw	r28, 0x21	; 33
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	9e 8f       	std	Y+30, r25	; 0x1e
    282e:	8d 8f       	std	Y+29, r24	; 0x1d
    2830:	78 a3       	std	Y+32, r23	; 0x20
    2832:	6f 8f       	std	Y+31, r22	; 0x1f
    2834:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LCD_LINE_TOP ){
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	88 23       	and	r24, r24
    283a:	09 f0       	breq	.+2      	; 0x283e <_ZN3lcd5printEPhh+0x26>
    283c:	7c c0       	rjmp	.+248    	; 0x2936 <_ZN3lcd5printEPhh+0x11e>
		SELECT_LCD_LINE_1();
    283e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2840:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2842:	ef db       	rcall	.-2082   	; 0x2022 <_ZN3lcd17SELECT_LCD_LINE_1Ev>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e2       	ldi	r26, 0x20	; 32
    284a:	b1 e4       	ldi	r27, 0x41	; 65
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	ab 83       	std	Y+3, r26	; 0x03
    2852:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a e7       	ldi	r20, 0x7A	; 122
    285a:	53 e4       	ldi	r21, 0x43	; 67
    285c:	69 81       	ldd	r22, Y+1	; 0x01
    285e:	7a 81       	ldd	r23, Y+2	; 0x02
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	af 83       	std	Y+7, r26	; 0x07
    2872:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	6d 81       	ldd	r22, Y+5	; 0x05
    287e:	7e 81       	ldd	r23, Y+6	; 0x06
    2880:	8f 81       	ldd	r24, Y+7	; 0x07
    2882:	98 85       	ldd	r25, Y+8	; 0x08
    2884:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <_ZN3lcd5printEPhh+0x7e>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9a 87       	std	Y+10, r25	; 0x0a
    2892:	89 87       	std	Y+9, r24	; 0x09
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <_ZN3lcd5printEPhh+0xfc>
	else if (__tmp > 65535)
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	6d 81       	ldd	r22, Y+5	; 0x05
    28a0:	7e 81       	ldd	r23, Y+6	; 0x06
    28a2:	8f 81       	ldd	r24, Y+7	; 0x07
    28a4:	98 85       	ldd	r25, Y+8	; 0x08
    28a6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <_ZN3lcd5printEPhh+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e2       	ldi	r20, 0x20	; 32
    28b4:	51 e4       	ldi	r21, 0x41	; 65
    28b6:	69 81       	ldd	r22, Y+1	; 0x01
    28b8:	7a 81       	ldd	r23, Y+2	; 0x02
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9a 87       	std	Y+10, r25	; 0x0a
    28d4:	89 87       	std	Y+9, r24	; 0x09
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <_ZN3lcd5printEPhh+0xde>
    28d8:	89 e1       	ldi	r24, 0x19	; 25
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9c 87       	std	Y+12, r25	; 0x0c
    28de:	8b 87       	std	Y+11, r24	; 0x0b
    28e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <_ZN3lcd5printEPhh+0xcc>
    28e8:	9c 87       	std	Y+12, r25	; 0x0c
    28ea:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	9a 87       	std	Y+10, r25	; 0x0a
    28f4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	89 2b       	or	r24, r25
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <_ZN3lcd5printEPhh+0xc0>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <_ZN3lcd5printEPhh+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	6d 81       	ldd	r22, Y+5	; 0x05
    2902:	7e 81       	ldd	r23, Y+6	; 0x06
    2904:	8f 81       	ldd	r24, Y+7	; 0x07
    2906:	98 85       	ldd	r25, Y+8	; 0x08
    2908:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9a 87       	std	Y+10, r25	; 0x0a
    2912:	89 87       	std	Y+9, r24	; 0x09
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	9e 87       	std	Y+14, r25	; 0x0e
    291a:	8d 87       	std	Y+13, r24	; 0x0d
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <_ZN3lcd5printEPhh+0x108>
    2924:	9e 87       	std	Y+14, r25	; 0x0e
    2926:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		SHOW(text);
    2928:	2f 8d       	ldd	r18, Y+31	; 0x1f
    292a:	38 a1       	ldd	r19, Y+32	; 0x20
    292c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    292e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2930:	b9 01       	movw	r22, r18
    2932:	39 db       	rcall	.-2446   	; 0x1fa6 <_ZN3lcd4SHOWEPh>
    2934:	7f c0       	rjmp	.+254    	; 0x2a34 <_ZN3lcd5printEPhh+0x21c>
	}else if( valLine == LCD_LINE_BOTTOM ){
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	09 f0       	breq	.+2      	; 0x293e <_ZN3lcd5printEPhh+0x126>
    293c:	7b c0       	rjmp	.+246    	; 0x2a34 <_ZN3lcd5printEPhh+0x21c>
		SELECT_LCD_LINE_2();
    293e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2942:	90 db       	rcall	.-2272   	; 0x2064 <_ZN3lcd17SELECT_LCD_LINE_2Ev>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a0 e2       	ldi	r26, 0x20	; 32
    294a:	b1 e4       	ldi	r27, 0x41	; 65
    294c:	8f 87       	std	Y+15, r24	; 0x0f
    294e:	98 8b       	std	Y+16, r25	; 0x10
    2950:	a9 8b       	std	Y+17, r26	; 0x11
    2952:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a e7       	ldi	r20, 0x7A	; 122
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	6f 85       	ldd	r22, Y+15	; 0x0f
    295e:	78 89       	ldd	r23, Y+16	; 0x10
    2960:	89 89       	ldd	r24, Y+17	; 0x11
    2962:	9a 89       	ldd	r25, Y+18	; 0x12
    2964:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8b 8b       	std	Y+19, r24	; 0x13
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	ad 8b       	std	Y+21, r26	; 0x15
    2972:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	6b 89       	ldd	r22, Y+19	; 0x13
    297e:	7c 89       	ldd	r23, Y+20	; 0x14
    2980:	8d 89       	ldd	r24, Y+21	; 0x15
    2982:	9e 89       	ldd	r25, Y+22	; 0x16
    2984:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <_ZN3lcd5printEPhh+0x17e>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	98 8f       	std	Y+24, r25	; 0x18
    2992:	8f 8b       	std	Y+23, r24	; 0x17
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <_ZN3lcd5printEPhh+0x1fc>
	else if (__tmp > 65535)
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	6b 89       	ldd	r22, Y+19	; 0x13
    29a0:	7c 89       	ldd	r23, Y+20	; 0x14
    29a2:	8d 89       	ldd	r24, Y+21	; 0x15
    29a4:	9e 89       	ldd	r25, Y+22	; 0x16
    29a6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__gesf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <_ZN3lcd5printEPhh+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b8:	78 89       	ldd	r23, Y+16	; 0x10
    29ba:	89 89       	ldd	r24, Y+17	; 0x11
    29bc:	9a 89       	ldd	r25, Y+18	; 0x12
    29be:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	98 8f       	std	Y+24, r25	; 0x18
    29d4:	8f 8b       	std	Y+23, r24	; 0x17
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <_ZN3lcd5printEPhh+0x1de>
    29d8:	89 e1       	ldi	r24, 0x19	; 25
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9a 8f       	std	Y+26, r25	; 0x1a
    29de:	89 8f       	std	Y+25, r24	; 0x19
    29e0:	89 8d       	ldd	r24, Y+25	; 0x19
    29e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <_ZN3lcd5printEPhh+0x1cc>
    29e8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ea:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	98 8d       	ldd	r25, Y+24	; 0x18
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	98 8f       	std	Y+24, r25	; 0x18
    29f4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8f 89       	ldd	r24, Y+23	; 0x17
    29f8:	98 8d       	ldd	r25, Y+24	; 0x18
    29fa:	89 2b       	or	r24, r25
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <_ZN3lcd5printEPhh+0x1c0>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <_ZN3lcd5printEPhh+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6b 89       	ldd	r22, Y+19	; 0x13
    2a02:	7c 89       	ldd	r23, Y+20	; 0x14
    2a04:	8d 89       	ldd	r24, Y+21	; 0x15
    2a06:	9e 89       	ldd	r25, Y+22	; 0x16
    2a08:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	98 8f       	std	Y+24, r25	; 0x18
    2a12:	8f 8b       	std	Y+23, r24	; 0x17
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	9c 8f       	std	Y+28, r25	; 0x1c
    2a1a:	8b 8f       	std	Y+27, r24	; 0x1b
    2a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <_ZN3lcd5printEPhh+0x208>
    2a24:	9c 8f       	std	Y+28, r25	; 0x1c
    2a26:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		SHOW(text);
    2a28:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2a2a:	38 a1       	ldd	r19, Y+32	; 0x20
    2a2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a30:	b9 01       	movw	r22, r18
    2a32:	b9 da       	rcall	.-2702   	; 0x1fa6 <_ZN3lcd4SHOWEPh>
	}
		
}
    2a34:	a1 96       	adiw	r28, 0x21	; 33
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <_ZN3ledC1Ev>:

void led::DISABLE(){
	
	set( 0 );

}
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <_ZN3ledC1Ev+0x6>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	80 eb       	ldi	r24, 0xB0	; 176
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	20 eb       	ldi	r18, 0xB0	; 176
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	20 81       	ld	r18, Z
    2a60:	29 6a       	ori	r18, 0xA9	; 169
    2a62:	fc 01       	movw	r30, r24
    2a64:	20 83       	st	Z, r18
    2a66:	80 e8       	ldi	r24, 0x80	; 128
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	20 e8       	ldi	r18, 0x80	; 128
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	f9 01       	movw	r30, r18
    2a70:	20 81       	ld	r18, Z
    2a72:	29 6a       	ori	r18, 0xA9	; 169
    2a74:	fc 01       	movw	r30, r24
    2a76:	20 83       	st	Z, r18
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	09 d0       	rcall	.+18     	; 0x2a90 <_ZN3led6ENABLEEv>
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	24 d0       	rcall	.+72     	; 0x2ace <_ZN3led3setEh>
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	08 95       	ret

00002a90 <_ZN3led6ENABLEEv>:
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <_ZN3led6ENABLEEv+0x6>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	8a e2       	ldi	r24, 0x2A	; 42
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	2a e2       	ldi	r18, 0x2A	; 42
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	f9 01       	movw	r30, r18
    2aa8:	20 81       	ld	r18, Z
    2aaa:	20 6f       	ori	r18, 0xF0	; 240
    2aac:	fc 01       	movw	r30, r24
    2aae:	20 83       	st	Z, r18
    2ab0:	81 e8       	ldi	r24, 0x81	; 129
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	21 e0       	ldi	r18, 0x01	; 1
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	20 83       	st	Z, r18
    2aba:	81 eb       	ldi	r24, 0xB1	; 177
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	21 e0       	ldi	r18, 0x01	; 1
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	20 83       	st	Z, r18
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	08 95       	ret

00002ace <_ZN3led3setEh>:

void led::set( uint8_t ledLevel ) {
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <_ZN3led3setEh+0xa>
    2ad8:	1f 92       	push	r1
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	6b 83       	std	Y+3, r22	; 0x03
	
	ledLevel = ( ledLevel < 100 ) ? ledLevel : 100;
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	85 36       	cpi	r24, 0x65	; 101
    2ae8:	08 f0       	brcs	.+2      	; 0x2aec <_ZN3led3setEh+0x1e>
    2aea:	84 e6       	ldi	r24, 0x64	; 100
    2aec:	8b 83       	std	Y+3, r24	; 0x03

	OCR1A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    2aee:	08 e8       	ldi	r16, 0x88	; 136
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a0 e0       	ldi	r26, 0x00	; 0
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__floatunsisf>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	48 ec       	ldi	r20, 0xC8	; 200
    2b0e:	52 e4       	ldi	r21, 0x42	; 66
    2b10:	bc 01       	movw	r22, r24
    2b12:	cd 01       	movw	r24, r26
    2b14:	7a d7       	rcall	.+3828   	; 0x3a0a <__divsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4f e7       	ldi	r20, 0x7F	; 127
    2b20:	53 e4       	ldi	r21, 0x43	; 67
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	d3 d7       	rcall	.+4006   	; 0x3ada <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
	OCR1B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    2b3e:	0a e8       	ldi	r16, 0x8A	; 138
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e0       	ldi	r26, 0x00	; 0
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	f0 d7       	rcall	.+4064   	; 0x3b32 <__floatunsisf>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	48 ec       	ldi	r20, 0xC8	; 200
    2b5c:	52 e4       	ldi	r21, 0x42	; 66
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	53 d7       	rcall	.+3750   	; 0x3a0a <__divsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	53 e4       	ldi	r21, 0x43	; 67
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	ac d7       	rcall	.+3928   	; 0x3ada <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	f8 01       	movw	r30, r16
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
	OCR2A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    2b8c:	03 eb       	ldi	r16, 0xB3	; 179
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e0       	ldi	r26, 0x00	; 0
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	c9 d7       	rcall	.+3986   	; 0x3b32 <__floatunsisf>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	48 ec       	ldi	r20, 0xC8	; 200
    2baa:	52 e4       	ldi	r21, 0x42	; 66
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	2c d7       	rcall	.+3672   	; 0x3a0a <__divsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	53 e4       	ldi	r21, 0x43	; 67
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	85 d7       	rcall	.+3850   	; 0x3ada <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	80 83       	st	Z, r24
	OCR2B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    2bd8:	04 eb       	ldi	r16, 0xB4	; 180
    2bda:	10 e0       	ldi	r17, 0x00	; 0
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	a3 d7       	rcall	.+3910   	; 0x3b32 <__floatunsisf>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	48 ec       	ldi	r20, 0xC8	; 200
    2bf6:	52 e4       	ldi	r21, 0x42	; 66
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	06 d7       	rcall	.+3596   	; 0x3a0a <__divsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	53 e4       	ldi	r21, 0x43	; 67
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	5f d7       	rcall	.+3774   	; 0x3ada <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 83       	st	Z, r24


    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <_ZN3rtcC1Ev>:
		almToReturn->ucHours &= 0xDF;
	}else{
		almToReturn->ucHours |= 0x20	;
	}
	
}
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	9e 87       	std	Y+14, r25	; 0x0e
    2c4a:	8d 87       	std	Y+13, r24	; 0x0d
    2c4c:	1b 82       	std	Y+3, r1	; 0x03
    2c4e:	84 e0       	ldi	r24, 0x04	; 4
    2c50:	8c 83       	std	Y+4, r24	; 0x04
    2c52:	1d 82       	std	Y+5, r1	; 0x05
    2c54:	87 e0       	ldi	r24, 0x07	; 7
    2c56:	e6 e8       	ldi	r30, 0x86	; 134
    2c58:	f1 e0       	ldi	r31, 0x01	; 1
    2c5a:	de 01       	movw	r26, r28
    2c5c:	16 96       	adiw	r26, 0x06	; 6
    2c5e:	01 90       	ld	r0, Z+
    2c60:	0d 92       	st	X+, r0
    2c62:	8a 95       	dec	r24
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <_ZN3rtcC1Ev+0x2a>
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6a:	6a d0       	rcall	.+212    	; 0x2d40 <_ZN3rtc8i2c_initEv>
    2c6c:	ae 01       	movw	r20, r28
    2c6e:	4d 5f       	subi	r20, 0xFD	; 253
    2c70:	5f 4f       	sbci	r21, 0xFF	; 255
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	21 e0       	ldi	r18, 0x01	; 1
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	6f e0       	ldi	r22, 0x0F	; 15
    2c7c:	eb d0       	rcall	.+470    	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    2c7e:	1a 82       	std	Y+2, r1	; 0x02
    2c80:	19 82       	std	Y+1, r1	; 0x01
    2c82:	0e c0       	rjmp	.+28     	; 0x2ca0 <_ZN3rtcC1Ev+0x6c>
    2c84:	69 81       	ldd	r22, Y+1	; 0x01
    2c86:	ae 01       	movw	r20, r28
    2c88:	4b 5f       	subi	r20, 0xFB	; 251
    2c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	21 e0       	ldi	r18, 0x01	; 1
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	df d0       	rcall	.+446    	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	41 97       	sbiw	r24, 0x11	; 17
    2ca6:	70 f3       	brcs	.-36     	; 0x2c84 <_ZN3rtcC1Ev+0x50>
    2ca8:	ae 01       	movw	r20, r28
    2caa:	4c 5f       	subi	r20, 0xFC	; 252
    2cac:	5f 4f       	sbci	r21, 0xFF	; 255
    2cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb2:	21 e0       	ldi	r18, 0x01	; 1
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	6f e0       	ldi	r22, 0x0F	; 15
    2cb8:	cd d0       	rcall	.+410    	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    2cba:	9e 01       	movw	r18, r28
    2cbc:	2a 5f       	subi	r18, 0xFA	; 250
    2cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc4:	b9 01       	movw	r22, r18
    2cc6:	aa d1       	rcall	.+852    	; 0x301c <_ZN3rtc8set_timeEP8rtc_time>
    2cc8:	2e 96       	adiw	r28, 0x0e	; 14
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <_ZN3rtc10spi_selectEv>:
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <_ZN3rtc10spi_selectEv+0x6>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	8c e4       	ldi	r24, 0x4C	; 76
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	2c e4       	ldi	r18, 0x4C	; 76
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	f9 01       	movw	r30, r18
    2cf2:	20 81       	ld	r18, Z
    2cf4:	24 60       	ori	r18, 0x04	; 4
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	20 83       	st	Z, r18
    2cfa:	85 e2       	ldi	r24, 0x25	; 37
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	25 e2       	ldi	r18, 0x25	; 37
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	f9 01       	movw	r30, r18
    2d04:	20 81       	ld	r18, Z
    2d06:	20 61       	ori	r18, 0x10	; 16
    2d08:	fc 01       	movw	r30, r24
    2d0a:	20 83       	st	Z, r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <_ZN3rtc12spi_deselectEv>:
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <_ZN3rtc12spi_deselectEv+0x6>
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	85 e2       	ldi	r24, 0x25	; 37
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	25 e2       	ldi	r18, 0x25	; 37
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	f9 01       	movw	r30, r18
    2d2e:	20 81       	ld	r18, Z
    2d30:	2f 7e       	andi	r18, 0xEF	; 239
    2d32:	fc 01       	movw	r30, r24
    2d34:	20 83       	st	Z, r18
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	08 95       	ret

00002d40 <_ZN3rtc8i2c_initEv>:
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <_ZN3rtc8i2c_initEv+0x6>
    2d46:	1f 92       	push	r1
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	9b 83       	std	Y+3, r25	; 0x03
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
    2d50:	84 e2       	ldi	r24, 0x24	; 36
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	20 eb       	ldi	r18, 0xB0	; 176
    2d56:	fc 01       	movw	r30, r24
    2d58:	20 83       	st	Z, r18
    2d5a:	8c e4       	ldi	r24, 0x4C	; 76
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	21 e5       	ldi	r18, 0x51	; 81
    2d60:	fc 01       	movw	r30, r24
    2d62:	20 83       	st	Z, r18
    2d64:	8d e4       	ldi	r24, 0x4D	; 77
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	fc 01       	movw	r30, r24
    2d6a:	80 81       	ld	r24, Z
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    2d6e:	8e e4       	ldi	r24, 0x4E	; 78
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	fc 01       	movw	r30, r24
    2d74:	80 81       	ld	r24, Z
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	cc df       	rcall	.-104    	; 0x2d16 <_ZN3rtc12spi_deselectEv>
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <_ZN3rtc19spi_master_transmitEh>:
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <_ZN3rtc19spi_master_transmitEh+0x6>
    2d90:	1f 92       	push	r1
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	6b 83       	std	Y+3, r22	; 0x03
    2d9c:	8e e4       	ldi	r24, 0x4E	; 78
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	2b 81       	ldd	r18, Y+3	; 0x03
    2da2:	fc 01       	movw	r30, r24
    2da4:	20 83       	st	Z, r18
    2da6:	00 00       	nop
    2da8:	8d e4       	ldi	r24, 0x4D	; 77
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	fc 01       	movw	r30, r24
    2dae:	80 81       	ld	r24, Z
    2db0:	80 95       	com	r24
    2db2:	88 1f       	adc	r24, r24
    2db4:	88 27       	eor	r24, r24
    2db6:	88 1f       	adc	r24, r24
    2db8:	88 23       	and	r24, r24
    2dba:	b1 f7       	brne	.-20     	; 0x2da8 <_ZN3rtc19spi_master_transmitEh+0x1e>
    2dbc:	8e e4       	ldi	r24, 0x4E	; 78
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	80 81       	ld	r24, Z
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	08 95       	ret

00002dd0 <_ZN3rtc10read_blockEhPhj>:
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	27 97       	sbiw	r28, 0x07	; 7
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	6b 83       	std	Y+3, r22	; 0x03
    2dee:	5d 83       	std	Y+5, r21	; 0x05
    2df0:	4c 83       	std	Y+4, r20	; 0x04
    2df2:	3f 83       	std	Y+7, r19	; 0x07
    2df4:	2e 83       	std	Y+6, r18	; 0x06
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	6f df       	rcall	.-290    	; 0x2cda <_ZN3rtc10spi_selectEv>
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	6b 81       	ldd	r22, Y+3	; 0x03
    2e02:	c3 df       	rcall	.-122    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2e04:	0c c0       	rjmp	.+24     	; 0x2e1e <_ZN3rtc10read_blockEhPhj+0x4e>
    2e06:	0c 81       	ldd	r16, Y+4	; 0x04
    2e08:	1d 81       	ldd	r17, Y+5	; 0x05
    2e0a:	c8 01       	movw	r24, r16
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	9d 83       	std	Y+5, r25	; 0x05
    2e10:	8c 83       	std	Y+4, r24	; 0x04
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	b8 df       	rcall	.-144    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2e1a:	f8 01       	movw	r30, r16
    2e1c:	80 83       	st	Z, r24
    2e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e20:	9f 81       	ldd	r25, Y+7	; 0x07
    2e22:	9c 01       	movw	r18, r24
    2e24:	21 50       	subi	r18, 0x01	; 1
    2e26:	31 09       	sbc	r19, r1
    2e28:	3f 83       	std	Y+7, r19	; 0x07
    2e2a:	2e 83       	std	Y+6, r18	; 0x06
    2e2c:	21 e0       	ldi	r18, 0x01	; 1
    2e2e:	89 2b       	or	r24, r25
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <_ZN3rtc10read_blockEhPhj+0x64>
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	22 23       	and	r18, r18
    2e36:	39 f7       	brne	.-50     	; 0x2e06 <_ZN3rtc10read_blockEhPhj+0x36>
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	6c df       	rcall	.-296    	; 0x2d16 <_ZN3rtc12spi_deselectEv>
    2e3e:	27 96       	adiw	r28, 0x07	; 7
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <_ZN3rtc11write_blockEhPhj>:
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	29 97       	sbiw	r28, 0x09	; 9
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
    2e6c:	6d 83       	std	Y+5, r22	; 0x05
    2e6e:	5f 83       	std	Y+7, r21	; 0x07
    2e70:	4e 83       	std	Y+6, r20	; 0x06
    2e72:	39 87       	std	Y+9, r19	; 0x09
    2e74:	28 87       	std	Y+8, r18	; 0x08
    2e76:	1a 82       	std	Y+2, r1	; 0x02
    2e78:	19 82       	std	Y+1, r1	; 0x01
    2e7a:	ae 01       	movw	r20, r28
    2e7c:	4e 5f       	subi	r20, 0xFE	; 254
    2e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	21 e0       	ldi	r18, 0x01	; 1
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	6f e0       	ldi	r22, 0x0F	; 15
    2e8a:	a2 df       	rcall	.-188    	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	83 70       	andi	r24, 0x03	; 3
    2e94:	99 27       	eor	r25, r25
    2e96:	89 2b       	or	r24, r25
    2e98:	89 f0       	breq	.+34     	; 0x2ebc <_ZN3rtc11write_blockEhPhj+0x68>
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	8c 7f       	andi	r24, 0xFC	; 252
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	1a df       	rcall	.-460    	; 0x2cda <_ZN3rtc10spi_selectEv>
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	6f e8       	ldi	r22, 0x8F	; 143
    2eac:	6e df       	rcall	.-292    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	69 81       	ldd	r22, Y+1	; 0x01
    2eb4:	6a df       	rcall	.-300    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	2d df       	rcall	.-422    	; 0x2d16 <_ZN3rtc12spi_deselectEv>
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	0c df       	rcall	.-488    	; 0x2cda <_ZN3rtc10spi_selectEv>
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	20 e8       	ldi	r18, 0x80	; 128
    2ec6:	28 0f       	add	r18, r24
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	62 2f       	mov	r22, r18
    2ece:	5d df       	rcall	.-326    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2ed0:	0d c0       	rjmp	.+26     	; 0x2eec <_ZN3rtc11write_blockEhPhj+0x98>
    2ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed6:	9c 01       	movw	r18, r24
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	3f 4f       	sbci	r19, 0xFF	; 255
    2edc:	3f 83       	std	Y+7, r19	; 0x07
    2ede:	2e 83       	std	Y+6, r18	; 0x06
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 81       	ld	r18, Z
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	62 2f       	mov	r22, r18
    2eea:	4f df       	rcall	.-354    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2eec:	88 85       	ldd	r24, Y+8	; 0x08
    2eee:	99 85       	ldd	r25, Y+9	; 0x09
    2ef0:	9c 01       	movw	r18, r24
    2ef2:	21 50       	subi	r18, 0x01	; 1
    2ef4:	31 09       	sbc	r19, r1
    2ef6:	39 87       	std	Y+9, r19	; 0x09
    2ef8:	28 87       	std	Y+8, r18	; 0x08
    2efa:	21 e0       	ldi	r18, 0x01	; 1
    2efc:	89 2b       	or	r24, r25
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <_ZN3rtc11write_blockEhPhj+0xae>
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	22 23       	and	r18, r18
    2f04:	31 f7       	brne	.-52     	; 0x2ed2 <_ZN3rtc11write_blockEhPhj+0x7e>
    2f06:	8b 81       	ldd	r24, Y+3	; 0x03
    2f08:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0a:	05 df       	rcall	.-502    	; 0x2d16 <_ZN3rtc12spi_deselectEv>
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	8f 30       	cpi	r24, 0x0F	; 15
    2f10:	79 f0       	breq	.+30     	; 0x2f30 <_ZN3rtc11write_blockEhPhj+0xdc>
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	e1 de       	rcall	.-574    	; 0x2cda <_ZN3rtc10spi_selectEv>
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	6f e8       	ldi	r22, 0x8F	; 143
    2f1e:	35 df       	rcall	.-406    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2f20:	2a 81       	ldd	r18, Y+2	; 0x02
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	62 2f       	mov	r22, r18
    2f28:	30 df       	rcall	.-416    	; 0x2d8a <_ZN3rtc19spi_master_transmitEh>
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	f3 de       	rcall	.-538    	; 0x2d16 <_ZN3rtc12spi_deselectEv>
    2f30:	29 96       	adiw	r28, 0x09	; 9
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	08 95       	ret

00002f42 <_ZN3rtc8get_timeEv>:
    2f42:	2f 92       	push	r2
    2f44:	3f 92       	push	r3
    2f46:	4f 92       	push	r4
    2f48:	5f 92       	push	r5
    2f4a:	6f 92       	push	r6
    2f4c:	7f 92       	push	r7
    2f4e:	8f 92       	push	r8
    2f50:	9f 92       	push	r9
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	60 97       	sbiw	r28, 0x10	; 16
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	98 8b       	std	Y+16, r25	; 0x10
    2f78:	8f 87       	std	Y+15, r24	; 0x0f
    2f7a:	ae 01       	movw	r20, r28
    2f7c:	48 5f       	subi	r20, 0xF8	; 248
    2f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f82:	98 89       	ldd	r25, Y+16	; 0x10
    2f84:	27 e0       	ldi	r18, 0x07	; 7
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	22 df       	rcall	.-444    	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    2f8c:	27 e0       	ldi	r18, 0x07	; 7
    2f8e:	fe 01       	movw	r30, r28
    2f90:	38 96       	adiw	r30, 0x08	; 8
    2f92:	ce 01       	movw	r24, r28
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	dc 01       	movw	r26, r24
    2f98:	01 90       	ld	r0, Z+
    2f9a:	0d 92       	st	X+, r0
    2f9c:	2a 95       	dec	r18
    2f9e:	e1 f7       	brne	.-8      	; 0x2f98 <_ZN3rtc8get_timeEv+0x56>
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	69 81       	ldd	r22, Y+1	; 0x01
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	5a 81       	ldd	r21, Y+2	; 0x02
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	4b 81       	ldd	r20, Y+3	; 0x03
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	3c 81       	ldd	r19, Y+4	; 0x04
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	2d 81       	ldd	r18, Y+5	; 0x05
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	8f 81       	ldd	r24, Y+7	; 0x07
    2fbc:	26 2e       	mov	r2, r22
    2fbe:	35 2e       	mov	r3, r21
    2fc0:	44 2e       	mov	r4, r20
    2fc2:	53 2e       	mov	r5, r19
    2fc4:	62 2e       	mov	r6, r18
    2fc6:	79 2e       	mov	r7, r25
    2fc8:	88 2e       	mov	r8, r24
    2fca:	a2 2c       	mov	r10, r2
    2fcc:	b3 2c       	mov	r11, r3
    2fce:	c4 2c       	mov	r12, r4
    2fd0:	d5 2c       	mov	r13, r5
    2fd2:	e6 2c       	mov	r14, r6
    2fd4:	f7 2c       	mov	r15, r7
    2fd6:	08 2d       	mov	r16, r8
    2fd8:	19 2d       	mov	r17, r9
    2fda:	2a 2d       	mov	r18, r10
    2fdc:	3b 2d       	mov	r19, r11
    2fde:	4c 2d       	mov	r20, r12
    2fe0:	5d 2d       	mov	r21, r13
    2fe2:	6e 2d       	mov	r22, r14
    2fe4:	7f 2d       	mov	r23, r15
    2fe6:	80 2f       	mov	r24, r16
    2fe8:	91 2f       	mov	r25, r17
    2fea:	60 96       	adiw	r28, 0x10	; 16
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	af 90       	pop	r10
    300a:	9f 90       	pop	r9
    300c:	8f 90       	pop	r8
    300e:	7f 90       	pop	r7
    3010:	6f 90       	pop	r6
    3012:	5f 90       	pop	r5
    3014:	4f 90       	pop	r4
    3016:	3f 90       	pop	r3
    3018:	2f 90       	pop	r2
    301a:	08 95       	ret

0000301c <_ZN3rtc8set_timeEP8rtc_time>:
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	00 d0       	rcall	.+0      	; 0x3022 <_ZN3rtc8set_timeEP8rtc_time+0x6>
    3022:	00 d0       	rcall	.+0      	; 0x3024 <_ZN3rtc8set_timeEP8rtc_time+0x8>
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	7c 83       	std	Y+4, r23	; 0x04
    302e:	6b 83       	std	Y+3, r22	; 0x03
    3030:	4b 81       	ldd	r20, Y+3	; 0x03
    3032:	5c 81       	ldd	r21, Y+4	; 0x04
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	27 e0       	ldi	r18, 0x07	; 7
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	0a df       	rcall	.-492    	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	08 95       	ret

0000304e <_ZN3rtc11rtm_to_charE8rtc_timePhj>:
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	a6 97       	sbiw	r28, 0x26	; 38
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	9b 8f       	std	Y+27, r25	; 0x1b
    3070:	8a 8f       	std	Y+26, r24	; 0x1a
    3072:	0c 8f       	std	Y+28, r16	; 0x1c
    3074:	1d 8f       	std	Y+29, r17	; 0x1d
    3076:	2e 8f       	std	Y+30, r18	; 0x1e
    3078:	3f 8f       	std	Y+31, r19	; 0x1f
    307a:	48 a3       	std	Y+32, r20	; 0x20
    307c:	59 a3       	std	Y+33, r21	; 0x21
    307e:	6a a3       	std	Y+34, r22	; 0x22
    3080:	fc a2       	std	Y+36, r15	; 0x24
    3082:	eb a2       	std	Y+35, r14	; 0x23
    3084:	de a2       	std	Y+38, r13	; 0x26
    3086:	cd a2       	std	Y+37, r12	; 0x25
    3088:	0d b7       	in	r16, 0x3d	; 61
    308a:	1e b7       	in	r17, 0x3e	; 62
    308c:	8d b7       	in	r24, 0x3d	; 61
    308e:	9e b7       	in	r25, 0x3e	; 62
    3090:	7c 01       	movw	r14, r24
    3092:	8d a1       	ldd	r24, Y+37	; 0x25
    3094:	9e a1       	ldd	r25, Y+38	; 0x26
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	9d 83       	std	Y+5, r25	; 0x05
    309a:	8c 83       	std	Y+4, r24	; 0x04
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	2d b7       	in	r18, 0x3d	; 61
    30a0:	3e b7       	in	r19, 0x3e	; 62
    30a2:	28 1b       	sub	r18, r24
    30a4:	39 0b       	sbc	r19, r25
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	3e bf       	out	0x3e, r19	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	2d bf       	out	0x3d, r18	; 61
    30b0:	8d b7       	in	r24, 0x3d	; 61
    30b2:	9e b7       	in	r25, 0x3e	; 62
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	9f 83       	std	Y+7, r25	; 0x07
    30b8:	8e 83       	std	Y+6, r24	; 0x06
    30ba:	80 e1       	ldi	r24, 0x10	; 16
    30bc:	88 87       	std	Y+8, r24	; 0x08
    30be:	88 85       	ldd	r24, Y+8	; 0x08
    30c0:	88 2f       	mov	r24, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	2d a1       	ldd	r18, Y+37	; 0x25
    30c6:	3e a1       	ldd	r19, Y+38	; 0x26
    30c8:	a9 01       	movw	r20, r18
    30ca:	48 1b       	sub	r20, r24
    30cc:	59 0b       	sbc	r21, r25
    30ce:	ca 01       	movw	r24, r20
    30d0:	96 95       	lsr	r25
    30d2:	87 95       	ror	r24
    30d4:	9a 87       	std	Y+10, r25	; 0x0a
    30d6:	89 87       	std	Y+9, r24	; 0x09
    30d8:	1b 82       	std	Y+3, r1	; 0x03
    30da:	1a 82       	std	Y+2, r1	; 0x02
    30dc:	0e c0       	rjmp	.+28     	; 0x30fa <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
    30de:	2e 81       	ldd	r18, Y+6	; 0x06
    30e0:	3f 81       	ldd	r19, Y+7	; 0x07
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	82 0f       	add	r24, r18
    30e8:	93 1f       	adc	r25, r19
    30ea:	20 e2       	ldi	r18, 0x20	; 32
    30ec:	fc 01       	movw	r30, r24
    30ee:	20 83       	st	Z, r18
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	01 96       	adiw	r24, 0x01	; 1
    30f6:	9b 83       	std	Y+3, r25	; 0x03
    30f8:	8a 83       	std	Y+2, r24	; 0x02
    30fa:	2a 81       	ldd	r18, Y+2	; 0x02
    30fc:	3b 81       	ldd	r19, Y+3	; 0x03
    30fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3100:	9e a1       	ldd	r25, Y+38	; 0x26
    3102:	28 17       	cp	r18, r24
    3104:	39 07       	cpc	r19, r25
    3106:	58 f3       	brcs	.-42     	; 0x30de <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
    3108:	1c 86       	std	Y+12, r1	; 0x0c
    310a:	1b 86       	std	Y+11, r1	; 0x0b
    310c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	80 7f       	andi	r24, 0xF0	; 240
    3114:	99 27       	eor	r25, r25
    3116:	9d 5f       	subi	r25, 0xFD	; 253
    3118:	82 95       	swap	r24
    311a:	92 95       	swap	r25
    311c:	90 7f       	andi	r25, 0xF0	; 240
    311e:	98 27       	eor	r25, r24
    3120:	80 7f       	andi	r24, 0xF0	; 240
    3122:	98 27       	eor	r25, r24
    3124:	9c 01       	movw	r18, r24
    3126:	8b 85       	ldd	r24, Y+11	; 0x0b
    3128:	9c 85       	ldd	r25, Y+12	; 0x0c
    312a:	82 2b       	or	r24, r18
    312c:	93 2b       	or	r25, r19
    312e:	9c 87       	std	Y+12, r25	; 0x0c
    3130:	8b 87       	std	Y+11, r24	; 0x0b
    3132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	8f 70       	andi	r24, 0x0F	; 15
    313a:	99 27       	eor	r25, r25
    313c:	c0 96       	adiw	r24, 0x30	; 48
    313e:	9c 01       	movw	r18, r24
    3140:	8b 85       	ldd	r24, Y+11	; 0x0b
    3142:	9c 85       	ldd	r25, Y+12	; 0x0c
    3144:	82 2b       	or	r24, r18
    3146:	93 2b       	or	r25, r19
    3148:	9c 87       	std	Y+12, r25	; 0x0c
    314a:	8b 87       	std	Y+11, r24	; 0x0b
    314c:	1e 86       	std	Y+14, r1	; 0x0e
    314e:	1d 86       	std	Y+13, r1	; 0x0d
    3150:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	80 71       	andi	r24, 0x10	; 16
    3158:	99 27       	eor	r25, r25
    315a:	9d 5f       	subi	r25, 0xFD	; 253
    315c:	82 95       	swap	r24
    315e:	92 95       	swap	r25
    3160:	90 7f       	andi	r25, 0xF0	; 240
    3162:	98 27       	eor	r25, r24
    3164:	80 7f       	andi	r24, 0xF0	; 240
    3166:	98 27       	eor	r25, r24
    3168:	9c 01       	movw	r18, r24
    316a:	8d 85       	ldd	r24, Y+13	; 0x0d
    316c:	9e 85       	ldd	r25, Y+14	; 0x0e
    316e:	82 2b       	or	r24, r18
    3170:	93 2b       	or	r25, r19
    3172:	9e 87       	std	Y+14, r25	; 0x0e
    3174:	8d 87       	std	Y+13, r24	; 0x0d
    3176:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	8f 70       	andi	r24, 0x0F	; 15
    317e:	99 27       	eor	r25, r25
    3180:	c0 96       	adiw	r24, 0x30	; 48
    3182:	9c 01       	movw	r18, r24
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	82 2b       	or	r24, r18
    318a:	93 2b       	or	r25, r19
    318c:	9e 87       	std	Y+14, r25	; 0x0e
    318e:	8d 87       	std	Y+13, r24	; 0x0d
    3190:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	80 76       	andi	r24, 0x60	; 96
    3198:	99 27       	eor	r25, r25
    319a:	80 34       	cpi	r24, 0x40	; 64
    319c:	91 05       	cpc	r25, r1
    319e:	19 f4       	brne	.+6      	; 0x31a6 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
    31a0:	81 e4       	ldi	r24, 0x41	; 65
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
    31a6:	80 e5       	ldi	r24, 0x50	; 80
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	1f 86       	std	Y+15, r1	; 0x0f
    31ac:	19 8a       	std	Y+17, r1	; 0x11
    31ae:	18 8a       	std	Y+16, r1	; 0x10
    31b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b2:	82 95       	swap	r24
    31b4:	8f 70       	andi	r24, 0x0F	; 15
    31b6:	88 0f       	add	r24, r24
    31b8:	98 2f       	mov	r25, r24
    31ba:	99 0f       	add	r25, r25
    31bc:	99 0f       	add	r25, r25
    31be:	98 0f       	add	r25, r24
    31c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c2:	8f 70       	andi	r24, 0x0F	; 15
    31c4:	89 0f       	add	r24, r25
    31c6:	8f 87       	std	Y+15, r24	; 0x0f
    31c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ca:	88 23       	and	r24, r24
    31cc:	39 f0       	breq	.+14     	; 0x31dc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    31ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d0:	88 2f       	mov	r24, r24
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	8f 54       	subi	r24, 0x4F	; 79
    31e2:	9e 4f       	sbci	r25, 0xFE	; 254
    31e4:	fc 01       	movw	r30, r24
    31e6:	80 81       	ld	r24, Z
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	99 8b       	std	Y+17, r25	; 0x11
    31ee:	88 8b       	std	Y+16, r24	; 0x10
    31f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f2:	88 23       	and	r24, r24
    31f4:	41 f0       	breq	.+16     	; 0x3206 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f8:	88 2f       	mov	r24, r24
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	02 c0       	rjmp	.+4      	; 0x320a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	8f 54       	subi	r24, 0x4F	; 79
    320c:	9e 4f       	sbci	r25, 0xFE	; 254
    320e:	fc 01       	movw	r30, r24
    3210:	80 81       	ld	r24, Z
    3212:	88 2f       	mov	r24, r24
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	98 2f       	mov	r25, r24
    3218:	88 27       	eor	r24, r24
    321a:	9c 01       	movw	r18, r24
    321c:	88 89       	ldd	r24, Y+16	; 0x10
    321e:	99 89       	ldd	r25, Y+17	; 0x11
    3220:	82 2b       	or	r24, r18
    3222:	93 2b       	or	r25, r19
    3224:	99 8b       	std	Y+17, r25	; 0x11
    3226:	88 8b       	std	Y+16, r24	; 0x10
    3228:	8f 85       	ldd	r24, Y+15	; 0x0f
    322a:	88 23       	and	r24, r24
    322c:	31 f0       	breq	.+12     	; 0x323a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    322e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	02 c0       	rjmp	.+4      	; 0x323e <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    323a:	82 e0       	ldi	r24, 0x02	; 2
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	8f 54       	subi	r24, 0x4F	; 79
    3240:	9e 4f       	sbci	r25, 0xFE	; 254
    3242:	fc 01       	movw	r30, r24
    3244:	80 81       	ld	r24, Z
    3246:	88 2f       	mov	r24, r24
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	99 27       	eor	r25, r25
    324c:	88 27       	eor	r24, r24
    324e:	28 89       	ldd	r18, Y+16	; 0x10
    3250:	39 89       	ldd	r19, Y+17	; 0x11
    3252:	82 2b       	or	r24, r18
    3254:	93 2b       	or	r25, r19
    3256:	99 8b       	std	Y+17, r25	; 0x11
    3258:	88 8b       	std	Y+16, r24	; 0x10
    325a:	1b 8a       	std	Y+19, r1	; 0x13
    325c:	1a 8a       	std	Y+18, r1	; 0x12
    325e:	1c 8a       	std	Y+20, r1	; 0x14
    3260:	1d 8a       	std	Y+21, r1	; 0x15
    3262:	1e 8a       	std	Y+22, r1	; 0x16
    3264:	1f 8a       	std	Y+23, r1	; 0x17
    3266:	89 a1       	ldd	r24, Y+33	; 0x21
    3268:	82 95       	swap	r24
    326a:	8f 70       	andi	r24, 0x0F	; 15
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	99 27       	eor	r25, r25
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	9c 01       	movw	r18, r24
    3278:	22 0f       	add	r18, r18
    327a:	33 1f       	adc	r19, r19
    327c:	22 0f       	add	r18, r18
    327e:	33 1f       	adc	r19, r19
    3280:	28 0f       	add	r18, r24
    3282:	39 1f       	adc	r19, r25
    3284:	89 a1       	ldd	r24, Y+33	; 0x21
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	8f 70       	andi	r24, 0x0F	; 15
    328c:	99 27       	eor	r25, r25
    328e:	82 0f       	add	r24, r18
    3290:	93 1f       	adc	r25, r19
    3292:	9b 8b       	std	Y+19, r25	; 0x13
    3294:	8a 8b       	std	Y+18, r24	; 0x12
    3296:	8a 89       	ldd	r24, Y+18	; 0x12
    3298:	9b 89       	ldd	r25, Y+19	; 0x13
    329a:	89 2b       	or	r24, r25
    329c:	49 f0       	breq	.+18     	; 0x32b0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x262>
    329e:	2a 89       	ldd	r18, Y+18	; 0x12
    32a0:	3b 89       	ldd	r19, Y+19	; 0x13
    32a2:	c9 01       	movw	r24, r18
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	03 97       	sbiw	r24, 0x03	; 3
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x266>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	83 57       	subi	r24, 0x73	; 115
    32b6:	9e 4f       	sbci	r25, 0xFE	; 254
    32b8:	fc 01       	movw	r30, r24
    32ba:	80 81       	ld	r24, Z
    32bc:	88 2f       	mov	r24, r24
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	8c 8b       	std	Y+20, r24	; 0x14
    32c6:	9d 8b       	std	Y+21, r25	; 0x15
    32c8:	ae 8b       	std	Y+22, r26	; 0x16
    32ca:	bf 8b       	std	Y+23, r27	; 0x17
    32cc:	8a 89       	ldd	r24, Y+18	; 0x12
    32ce:	9b 89       	ldd	r25, Y+19	; 0x13
    32d0:	89 2b       	or	r24, r25
    32d2:	49 f0       	breq	.+18     	; 0x32e6 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x298>
    32d4:	2a 89       	ldd	r18, Y+18	; 0x12
    32d6:	3b 89       	ldd	r19, Y+19	; 0x13
    32d8:	c9 01       	movw	r24, r18
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	02 97       	sbiw	r24, 0x02	; 2
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x29c>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	83 57       	subi	r24, 0x73	; 115
    32ec:	9e 4f       	sbci	r25, 0xFE	; 254
    32ee:	fc 01       	movw	r30, r24
    32f0:	80 81       	ld	r24, Z
    32f2:	88 2f       	mov	r24, r24
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	98 2f       	mov	r25, r24
    32f8:	88 27       	eor	r24, r24
    32fa:	09 2e       	mov	r0, r25
    32fc:	00 0c       	add	r0, r0
    32fe:	aa 0b       	sbc	r26, r26
    3300:	bb 0b       	sbc	r27, r27
    3302:	2c 89       	ldd	r18, Y+20	; 0x14
    3304:	3d 89       	ldd	r19, Y+21	; 0x15
    3306:	4e 89       	ldd	r20, Y+22	; 0x16
    3308:	5f 89       	ldd	r21, Y+23	; 0x17
    330a:	82 2b       	or	r24, r18
    330c:	93 2b       	or	r25, r19
    330e:	a4 2b       	or	r26, r20
    3310:	b5 2b       	or	r27, r21
    3312:	8c 8b       	std	Y+20, r24	; 0x14
    3314:	9d 8b       	std	Y+21, r25	; 0x15
    3316:	ae 8b       	std	Y+22, r26	; 0x16
    3318:	bf 8b       	std	Y+23, r27	; 0x17
    331a:	8a 89       	ldd	r24, Y+18	; 0x12
    331c:	9b 89       	ldd	r25, Y+19	; 0x13
    331e:	89 2b       	or	r24, r25
    3320:	49 f0       	breq	.+18     	; 0x3334 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e6>
    3322:	2a 89       	ldd	r18, Y+18	; 0x12
    3324:	3b 89       	ldd	r19, Y+19	; 0x13
    3326:	c9 01       	movw	r24, r18
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	82 0f       	add	r24, r18
    332e:	93 1f       	adc	r25, r19
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2ea>
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	83 57       	subi	r24, 0x73	; 115
    333a:	9e 4f       	sbci	r25, 0xFE	; 254
    333c:	fc 01       	movw	r30, r24
    333e:	80 81       	ld	r24, Z
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	a0 e0       	ldi	r26, 0x00	; 0
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	dc 01       	movw	r26, r24
    334a:	99 27       	eor	r25, r25
    334c:	88 27       	eor	r24, r24
    334e:	2c 89       	ldd	r18, Y+20	; 0x14
    3350:	3d 89       	ldd	r19, Y+21	; 0x15
    3352:	4e 89       	ldd	r20, Y+22	; 0x16
    3354:	5f 89       	ldd	r21, Y+23	; 0x17
    3356:	82 2b       	or	r24, r18
    3358:	93 2b       	or	r25, r19
    335a:	a4 2b       	or	r26, r20
    335c:	b5 2b       	or	r27, r21
    335e:	8c 8b       	std	Y+20, r24	; 0x14
    3360:	9d 8b       	std	Y+21, r25	; 0x15
    3362:	ae 8b       	std	Y+22, r26	; 0x16
    3364:	bf 8b       	std	Y+23, r27	; 0x17
    3366:	19 8e       	std	Y+25, r1	; 0x19
    3368:	18 8e       	std	Y+24, r1	; 0x18
    336a:	88 a1       	ldd	r24, Y+32	; 0x20
    336c:	88 2f       	mov	r24, r24
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	80 7f       	andi	r24, 0xF0	; 240
    3372:	99 27       	eor	r25, r25
    3374:	9d 5f       	subi	r25, 0xFD	; 253
    3376:	82 95       	swap	r24
    3378:	92 95       	swap	r25
    337a:	90 7f       	andi	r25, 0xF0	; 240
    337c:	98 27       	eor	r25, r24
    337e:	80 7f       	andi	r24, 0xF0	; 240
    3380:	98 27       	eor	r25, r24
    3382:	9c 01       	movw	r18, r24
    3384:	88 8d       	ldd	r24, Y+24	; 0x18
    3386:	99 8d       	ldd	r25, Y+25	; 0x19
    3388:	82 2b       	or	r24, r18
    338a:	93 2b       	or	r25, r19
    338c:	99 8f       	std	Y+25, r25	; 0x19
    338e:	88 8f       	std	Y+24, r24	; 0x18
    3390:	88 a1       	ldd	r24, Y+32	; 0x20
    3392:	88 2f       	mov	r24, r24
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	8f 70       	andi	r24, 0x0F	; 15
    3398:	99 27       	eor	r25, r25
    339a:	c0 96       	adiw	r24, 0x30	; 48
    339c:	9c 01       	movw	r18, r24
    339e:	88 8d       	ldd	r24, Y+24	; 0x18
    33a0:	99 8d       	ldd	r25, Y+25	; 0x19
    33a2:	82 2b       	or	r24, r18
    33a4:	93 2b       	or	r25, r19
    33a6:	99 8f       	std	Y+25, r25	; 0x19
    33a8:	88 8f       	std	Y+24, r24	; 0x18
    33aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ae:	89 2f       	mov	r24, r25
    33b0:	99 27       	eor	r25, r25
    33b2:	48 2f       	mov	r20, r24
    33b4:	2e 81       	ldd	r18, Y+6	; 0x06
    33b6:	3f 81       	ldd	r19, Y+7	; 0x07
    33b8:	89 85       	ldd	r24, Y+9	; 0x09
    33ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    33bc:	82 0f       	add	r24, r18
    33be:	93 1f       	adc	r25, r19
    33c0:	fc 01       	movw	r30, r24
    33c2:	40 83       	st	Z, r20
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	4d 85       	ldd	r20, Y+13	; 0x0d
    33cc:	2e 81       	ldd	r18, Y+6	; 0x06
    33ce:	3f 81       	ldd	r19, Y+7	; 0x07
    33d0:	82 0f       	add	r24, r18
    33d2:	93 1f       	adc	r25, r19
    33d4:	fc 01       	movw	r30, r24
    33d6:	40 83       	st	Z, r20
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	02 96       	adiw	r24, 0x02	; 2
    33de:	2e 81       	ldd	r18, Y+6	; 0x06
    33e0:	3f 81       	ldd	r19, Y+7	; 0x07
    33e2:	82 0f       	add	r24, r18
    33e4:	93 1f       	adc	r25, r19
    33e6:	2a e3       	ldi	r18, 0x3A	; 58
    33e8:	fc 01       	movw	r30, r24
    33ea:	20 83       	st	Z, r18
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f0:	03 96       	adiw	r24, 0x03	; 3
    33f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    33f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    33f6:	23 2f       	mov	r18, r19
    33f8:	33 27       	eor	r19, r19
    33fa:	42 2f       	mov	r20, r18
    33fc:	2e 81       	ldd	r18, Y+6	; 0x06
    33fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3400:	82 0f       	add	r24, r18
    3402:	93 1f       	adc	r25, r19
    3404:	fc 01       	movw	r30, r24
    3406:	40 83       	st	Z, r20
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	04 96       	adiw	r24, 0x04	; 4
    340e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3410:	2e 81       	ldd	r18, Y+6	; 0x06
    3412:	3f 81       	ldd	r19, Y+7	; 0x07
    3414:	82 0f       	add	r24, r18
    3416:	93 1f       	adc	r25, r19
    3418:	fc 01       	movw	r30, r24
    341a:	40 83       	st	Z, r20
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	05 96       	adiw	r24, 0x05	; 5
    3422:	2e 81       	ldd	r18, Y+6	; 0x06
    3424:	3f 81       	ldd	r19, Y+7	; 0x07
    3426:	82 0f       	add	r24, r18
    3428:	93 1f       	adc	r25, r19
    342a:	29 81       	ldd	r18, Y+1	; 0x01
    342c:	fc 01       	movw	r30, r24
    342e:	20 83       	st	Z, r18
    3430:	89 85       	ldd	r24, Y+9	; 0x09
    3432:	9a 85       	ldd	r25, Y+10	; 0x0a
    3434:	06 96       	adiw	r24, 0x06	; 6
    3436:	2e 81       	ldd	r18, Y+6	; 0x06
    3438:	3f 81       	ldd	r19, Y+7	; 0x07
    343a:	82 0f       	add	r24, r18
    343c:	93 1f       	adc	r25, r19
    343e:	2d e4       	ldi	r18, 0x4D	; 77
    3440:	fc 01       	movw	r30, r24
    3442:	20 83       	st	Z, r18
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	07 96       	adiw	r24, 0x07	; 7
    344a:	2e 81       	ldd	r18, Y+6	; 0x06
    344c:	3f 81       	ldd	r19, Y+7	; 0x07
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	20 e2       	ldi	r18, 0x20	; 32
    3454:	fc 01       	movw	r30, r24
    3456:	20 83       	st	Z, r18
    3458:	89 85       	ldd	r24, Y+9	; 0x09
    345a:	9a 85       	ldd	r25, Y+10	; 0x0a
    345c:	08 96       	adiw	r24, 0x08	; 8
    345e:	48 89       	ldd	r20, Y+16	; 0x10
    3460:	2e 81       	ldd	r18, Y+6	; 0x06
    3462:	3f 81       	ldd	r19, Y+7	; 0x07
    3464:	82 0f       	add	r24, r18
    3466:	93 1f       	adc	r25, r19
    3468:	fc 01       	movw	r30, r24
    346a:	40 83       	st	Z, r20
    346c:	89 85       	ldd	r24, Y+9	; 0x09
    346e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3470:	09 96       	adiw	r24, 0x09	; 9
    3472:	28 89       	ldd	r18, Y+16	; 0x10
    3474:	39 89       	ldd	r19, Y+17	; 0x11
    3476:	23 2f       	mov	r18, r19
    3478:	33 27       	eor	r19, r19
    347a:	42 2f       	mov	r20, r18
    347c:	2e 81       	ldd	r18, Y+6	; 0x06
    347e:	3f 81       	ldd	r19, Y+7	; 0x07
    3480:	82 0f       	add	r24, r18
    3482:	93 1f       	adc	r25, r19
    3484:	fc 01       	movw	r30, r24
    3486:	40 83       	st	Z, r20
    3488:	89 85       	ldd	r24, Y+9	; 0x09
    348a:	9a 85       	ldd	r25, Y+10	; 0x0a
    348c:	0a 96       	adiw	r24, 0x0a	; 10
    348e:	2e 81       	ldd	r18, Y+6	; 0x06
    3490:	3f 81       	ldd	r19, Y+7	; 0x07
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	2c e2       	ldi	r18, 0x2C	; 44
    3498:	fc 01       	movw	r30, r24
    349a:	20 83       	st	Z, r18
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	0b 96       	adiw	r24, 0x0b	; 11
    34a2:	4c 89       	ldd	r20, Y+20	; 0x14
    34a4:	2e 81       	ldd	r18, Y+6	; 0x06
    34a6:	3f 81       	ldd	r19, Y+7	; 0x07
    34a8:	82 0f       	add	r24, r18
    34aa:	93 1f       	adc	r25, r19
    34ac:	fc 01       	movw	r30, r24
    34ae:	40 83       	st	Z, r20
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	9c 01       	movw	r18, r24
    34b6:	24 5f       	subi	r18, 0xF4	; 244
    34b8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ba:	8c 89       	ldd	r24, Y+20	; 0x14
    34bc:	9d 89       	ldd	r25, Y+21	; 0x15
    34be:	ae 89       	ldd	r26, Y+22	; 0x16
    34c0:	bf 89       	ldd	r27, Y+23	; 0x17
    34c2:	89 2f       	mov	r24, r25
    34c4:	9a 2f       	mov	r25, r26
    34c6:	ab 2f       	mov	r26, r27
    34c8:	bb 27       	eor	r27, r27
    34ca:	48 2f       	mov	r20, r24
    34cc:	8e 81       	ldd	r24, Y+6	; 0x06
    34ce:	9f 81       	ldd	r25, Y+7	; 0x07
    34d0:	82 0f       	add	r24, r18
    34d2:	93 1f       	adc	r25, r19
    34d4:	fc 01       	movw	r30, r24
    34d6:	40 83       	st	Z, r20
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	9c 01       	movw	r18, r24
    34de:	23 5f       	subi	r18, 0xF3	; 243
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	8c 89       	ldd	r24, Y+20	; 0x14
    34e4:	9d 89       	ldd	r25, Y+21	; 0x15
    34e6:	ae 89       	ldd	r26, Y+22	; 0x16
    34e8:	bf 89       	ldd	r27, Y+23	; 0x17
    34ea:	cd 01       	movw	r24, r26
    34ec:	aa 27       	eor	r26, r26
    34ee:	bb 27       	eor	r27, r27
    34f0:	48 2f       	mov	r20, r24
    34f2:	8e 81       	ldd	r24, Y+6	; 0x06
    34f4:	9f 81       	ldd	r25, Y+7	; 0x07
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	fc 01       	movw	r30, r24
    34fc:	40 83       	st	Z, r20
    34fe:	89 85       	ldd	r24, Y+9	; 0x09
    3500:	9a 85       	ldd	r25, Y+10	; 0x0a
    3502:	0e 96       	adiw	r24, 0x0e	; 14
    3504:	28 8d       	ldd	r18, Y+24	; 0x18
    3506:	39 8d       	ldd	r19, Y+25	; 0x19
    3508:	23 2f       	mov	r18, r19
    350a:	33 27       	eor	r19, r19
    350c:	42 2f       	mov	r20, r18
    350e:	2e 81       	ldd	r18, Y+6	; 0x06
    3510:	3f 81       	ldd	r19, Y+7	; 0x07
    3512:	82 0f       	add	r24, r18
    3514:	93 1f       	adc	r25, r19
    3516:	fc 01       	movw	r30, r24
    3518:	40 83       	st	Z, r20
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	0f 96       	adiw	r24, 0x0f	; 15
    3520:	48 8d       	ldd	r20, Y+24	; 0x18
    3522:	2e 81       	ldd	r18, Y+6	; 0x06
    3524:	3f 81       	ldd	r19, Y+7	; 0x07
    3526:	82 0f       	add	r24, r18
    3528:	93 1f       	adc	r25, r19
    352a:	fc 01       	movw	r30, r24
    352c:	40 83       	st	Z, r20
    352e:	2e 81       	ldd	r18, Y+6	; 0x06
    3530:	3f 81       	ldd	r19, Y+7	; 0x07
    3532:	4d a1       	ldd	r20, Y+37	; 0x25
    3534:	5e a1       	ldd	r21, Y+38	; 0x26
    3536:	8b a1       	ldd	r24, Y+35	; 0x23
    3538:	9c a1       	ldd	r25, Y+36	; 0x24
    353a:	b9 01       	movw	r22, r18
    353c:	7e d4       	rcall	.+2300   	; 0x3e3a <memcpy>
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	fe be       	out	0x3e, r15	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	ed be       	out	0x3d, r14	; 61
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	1e bf       	out	0x3e, r17	; 62
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	0d bf       	out	0x3d, r16	; 61
    3552:	a6 96       	adiw	r28, 0x26	; 38
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	ef 90       	pop	r14
    356a:	df 90       	pop	r13
    356c:	cf 90       	pop	r12
    356e:	08 95       	ret

00003570 <_ZN3rtc8alarm_onEh>:
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	00 d0       	rcall	.+0      	; 0x3576 <_ZN3rtc8alarm_onEh+0x6>
    3576:	00 d0       	rcall	.+0      	; 0x3578 <_ZN3rtc8alarm_onEh+0x8>
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	9b 83       	std	Y+3, r25	; 0x03
    357e:	8a 83       	std	Y+2, r24	; 0x02
    3580:	6c 83       	std	Y+4, r22	; 0x04
    3582:	19 82       	std	Y+1, r1	; 0x01
    3584:	8c 81       	ldd	r24, Y+4	; 0x04
    3586:	82 30       	cpi	r24, 0x02	; 2
    3588:	b1 f4       	brne	.+44     	; 0x35b6 <_ZN3rtc8alarm_onEh+0x46>
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	9b 81       	ldd	r25, Y+3	; 0x03
    358e:	21 e0       	ldi	r18, 0x01	; 1
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	ae 01       	movw	r20, r28
    3594:	4f 5f       	subi	r20, 0xFF	; 255
    3596:	5f 4f       	sbci	r21, 0xFF	; 255
    3598:	6f e0       	ldi	r22, 0x0F	; 15
    359a:	1a dc       	rcall	.-1996   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	83 60       	ori	r24, 0x03	; 3
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	9b 81       	ldd	r25, Y+3	; 0x03
    35a6:	21 e0       	ldi	r18, 0x01	; 1
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	ae 01       	movw	r20, r28
    35ac:	4f 5f       	subi	r20, 0xFF	; 255
    35ae:	5f 4f       	sbci	r21, 0xFF	; 255
    35b0:	6f e0       	ldi	r22, 0x0F	; 15
    35b2:	50 dc       	rcall	.-1888   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    35b4:	31 c0       	rjmp	.+98     	; 0x3618 <_ZN3rtc8alarm_onEh+0xa8>
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	88 23       	and	r24, r24
    35ba:	b1 f4       	brne	.+44     	; 0x35e8 <_ZN3rtc8alarm_onEh+0x78>
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	21 e0       	ldi	r18, 0x01	; 1
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	ae 01       	movw	r20, r28
    35c6:	4f 5f       	subi	r20, 0xFF	; 255
    35c8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ca:	6f e0       	ldi	r22, 0x0F	; 15
    35cc:	01 dc       	rcall	.-2046   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	81 60       	ori	r24, 0x01	; 1
    35d2:	89 83       	std	Y+1, r24	; 0x01
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	21 e0       	ldi	r18, 0x01	; 1
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	ae 01       	movw	r20, r28
    35de:	4f 5f       	subi	r20, 0xFF	; 255
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    35e2:	6f e0       	ldi	r22, 0x0F	; 15
    35e4:	37 dc       	rcall	.-1938   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    35e6:	18 c0       	rjmp	.+48     	; 0x3618 <_ZN3rtc8alarm_onEh+0xa8>
    35e8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ea:	81 30       	cpi	r24, 0x01	; 1
    35ec:	a9 f4       	brne	.+42     	; 0x3618 <_ZN3rtc8alarm_onEh+0xa8>
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	21 e0       	ldi	r18, 0x01	; 1
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	ae 01       	movw	r20, r28
    35f8:	4f 5f       	subi	r20, 0xFF	; 255
    35fa:	5f 4f       	sbci	r21, 0xFF	; 255
    35fc:	6f e0       	ldi	r22, 0x0F	; 15
    35fe:	e8 db       	rcall	.-2096   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	82 60       	ori	r24, 0x02	; 2
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	21 e0       	ldi	r18, 0x01	; 1
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	ae 01       	movw	r20, r28
    3610:	4f 5f       	subi	r20, 0xFF	; 255
    3612:	5f 4f       	sbci	r21, 0xFF	; 255
    3614:	6f e0       	ldi	r22, 0x0F	; 15
    3616:	1e dc       	rcall	.-1988   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <_ZN3rtc9alarm_offEh>:
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	00 d0       	rcall	.+0      	; 0x362c <_ZN3rtc9alarm_offEh+0x6>
    362c:	00 d0       	rcall	.+0      	; 0x362e <_ZN3rtc9alarm_offEh+0x8>
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	9b 83       	std	Y+3, r25	; 0x03
    3634:	8a 83       	std	Y+2, r24	; 0x02
    3636:	6c 83       	std	Y+4, r22	; 0x04
    3638:	19 82       	std	Y+1, r1	; 0x01
    363a:	8c 81       	ldd	r24, Y+4	; 0x04
    363c:	82 30       	cpi	r24, 0x02	; 2
    363e:	b1 f4       	brne	.+44     	; 0x366c <_ZN3rtc9alarm_offEh+0x46>
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	21 e0       	ldi	r18, 0x01	; 1
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	ae 01       	movw	r20, r28
    364a:	4f 5f       	subi	r20, 0xFF	; 255
    364c:	5f 4f       	sbci	r21, 0xFF	; 255
    364e:	6f e0       	ldi	r22, 0x0F	; 15
    3650:	bf db       	rcall	.-2178   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	8c 7f       	andi	r24, 0xFC	; 252
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	21 e0       	ldi	r18, 0x01	; 1
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	ae 01       	movw	r20, r28
    3662:	4f 5f       	subi	r20, 0xFF	; 255
    3664:	5f 4f       	sbci	r21, 0xFF	; 255
    3666:	6f e0       	ldi	r22, 0x0F	; 15
    3668:	f5 db       	rcall	.-2070   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    366a:	31 c0       	rjmp	.+98     	; 0x36ce <_ZN3rtc9alarm_offEh+0xa8>
    366c:	8c 81       	ldd	r24, Y+4	; 0x04
    366e:	88 23       	and	r24, r24
    3670:	b1 f4       	brne	.+44     	; 0x369e <_ZN3rtc9alarm_offEh+0x78>
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	9b 81       	ldd	r25, Y+3	; 0x03
    3676:	21 e0       	ldi	r18, 0x01	; 1
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	ae 01       	movw	r20, r28
    367c:	4f 5f       	subi	r20, 0xFF	; 255
    367e:	5f 4f       	sbci	r21, 0xFF	; 255
    3680:	6f e0       	ldi	r22, 0x0F	; 15
    3682:	a6 db       	rcall	.-2228   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	8e 7f       	andi	r24, 0xFE	; 254
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	8a 81       	ldd	r24, Y+2	; 0x02
    368c:	9b 81       	ldd	r25, Y+3	; 0x03
    368e:	21 e0       	ldi	r18, 0x01	; 1
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	ae 01       	movw	r20, r28
    3694:	4f 5f       	subi	r20, 0xFF	; 255
    3696:	5f 4f       	sbci	r21, 0xFF	; 255
    3698:	6f e0       	ldi	r22, 0x0F	; 15
    369a:	dc db       	rcall	.-2120   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    369c:	18 c0       	rjmp	.+48     	; 0x36ce <_ZN3rtc9alarm_offEh+0xa8>
    369e:	8c 81       	ldd	r24, Y+4	; 0x04
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	a9 f4       	brne	.+42     	; 0x36ce <_ZN3rtc9alarm_offEh+0xa8>
    36a4:	8a 81       	ldd	r24, Y+2	; 0x02
    36a6:	9b 81       	ldd	r25, Y+3	; 0x03
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	ae 01       	movw	r20, r28
    36ae:	4f 5f       	subi	r20, 0xFF	; 255
    36b0:	5f 4f       	sbci	r21, 0xFF	; 255
    36b2:	6f e0       	ldi	r22, 0x0F	; 15
    36b4:	8d db       	rcall	.-2278   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	8d 7f       	andi	r24, 0xFD	; 253
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	21 e0       	ldi	r18, 0x01	; 1
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	ae 01       	movw	r20, r28
    36c6:	4f 5f       	subi	r20, 0xFF	; 255
    36c8:	5f 4f       	sbci	r21, 0xFF	; 255
    36ca:	6f e0       	ldi	r22, 0x0F	; 15
    36cc:	c3 db       	rcall	.-2170   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <_ZN3rtc14clear_interuptEh>:
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <_ZN3rtc14clear_interuptEh+0x6>
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <_ZN3rtc14clear_interuptEh+0x8>
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	9b 83       	std	Y+3, r25	; 0x03
    36ea:	8a 83       	std	Y+2, r24	; 0x02
    36ec:	6c 83       	std	Y+4, r22	; 0x04
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	88 23       	and	r24, r24
    36f2:	51 f4       	brne	.+20     	; 0x3708 <_ZN3rtc14clear_interuptEh+0x2c>
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	21 e0       	ldi	r18, 0x01	; 1
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	ae 01       	movw	r20, r28
    36fe:	4f 5f       	subi	r20, 0xFF	; 255
    3700:	5f 4f       	sbci	r21, 0xFF	; 255
    3702:	67 e0       	ldi	r22, 0x07	; 7
    3704:	65 db       	rcall	.-2358   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    3706:	22 c0       	rjmp	.+68     	; 0x374c <_ZN3rtc14clear_interuptEh+0x70>
    3708:	8c 81       	ldd	r24, Y+4	; 0x04
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	51 f4       	brne	.+20     	; 0x3722 <_ZN3rtc14clear_interuptEh+0x46>
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	9b 81       	ldd	r25, Y+3	; 0x03
    3712:	21 e0       	ldi	r18, 0x01	; 1
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	ae 01       	movw	r20, r28
    3718:	4f 5f       	subi	r20, 0xFF	; 255
    371a:	5f 4f       	sbci	r21, 0xFF	; 255
    371c:	6b e0       	ldi	r22, 0x0B	; 11
    371e:	58 db       	rcall	.-2384   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    3720:	15 c0       	rjmp	.+42     	; 0x374c <_ZN3rtc14clear_interuptEh+0x70>
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	91 f4       	brne	.+36     	; 0x374c <_ZN3rtc14clear_interuptEh+0x70>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	21 e0       	ldi	r18, 0x01	; 1
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	ae 01       	movw	r20, r28
    3732:	4f 5f       	subi	r20, 0xFF	; 255
    3734:	5f 4f       	sbci	r21, 0xFF	; 255
    3736:	67 e0       	ldi	r22, 0x07	; 7
    3738:	4b db       	rcall	.-2410   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	21 e0       	ldi	r18, 0x01	; 1
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	ae 01       	movw	r20, r28
    3744:	4f 5f       	subi	r20, 0xFF	; 255
    3746:	5f 4f       	sbci	r21, 0xFF	; 255
    3748:	6b e0       	ldi	r22, 0x0B	; 11
    374a:	42 db       	rcall	.-2428   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	08 95       	ret

0000375a <_ZN3rtc5alarmEhh9rtc_alarm>:
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	29 97       	sbiw	r28, 0x09	; 9
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	9d 83       	std	Y+5, r25	; 0x05
    3770:	8c 83       	std	Y+4, r24	; 0x04
    3772:	6e 83       	std	Y+6, r22	; 0x06
    3774:	4f 83       	std	Y+7, r20	; 0x07
    3776:	39 87       	std	Y+9, r19	; 0x09
    3778:	28 87       	std	Y+8, r18	; 0x08
    377a:	19 82       	std	Y+1, r1	; 0x01
    377c:	1a 82       	std	Y+2, r1	; 0x02
    377e:	80 e8       	ldi	r24, 0x80	; 128
    3780:	8b 83       	std	Y+3, r24	; 0x03
    3782:	8f 81       	ldd	r24, Y+7	; 0x07
    3784:	88 23       	and	r24, r24
    3786:	19 f4       	brne	.+6      	; 0x378e <_ZN3rtc5alarmEhh9rtc_alarm+0x34>
    3788:	87 e0       	ldi	r24, 0x07	; 7
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	05 c0       	rjmp	.+10     	; 0x3798 <_ZN3rtc5alarmEhh9rtc_alarm+0x3e>
    378e:	8f 81       	ldd	r24, Y+7	; 0x07
    3790:	88 23       	and	r24, r24
    3792:	11 f0       	breq	.+4      	; 0x3798 <_ZN3rtc5alarmEhh9rtc_alarm+0x3e>
    3794:	8b e0       	ldi	r24, 0x0B	; 11
    3796:	89 83       	std	Y+1, r24	; 0x01
    3798:	8e 81       	ldd	r24, Y+6	; 0x06
    379a:	88 23       	and	r24, r24
    379c:	69 f4       	brne	.+26     	; 0x37b8 <_ZN3rtc5alarmEhh9rtc_alarm+0x5e>
    379e:	91 e0       	ldi	r25, 0x01	; 1
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	69 2f       	mov	r22, r25
    37a4:	68 0f       	add	r22, r24
    37a6:	ae 01       	movw	r20, r28
    37a8:	48 5f       	subi	r20, 0xF8	; 248
    37aa:	5f 4f       	sbci	r21, 0xFF	; 255
    37ac:	8c 81       	ldd	r24, Y+4	; 0x04
    37ae:	9d 81       	ldd	r25, Y+5	; 0x05
    37b0:	22 e0       	ldi	r18, 0x02	; 2
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	0d db       	rcall	.-2534   	; 0x2dd0 <_ZN3rtc10read_blockEhPhj>
    37b6:	2e c0       	rjmp	.+92     	; 0x3814 <_ZN3rtc5alarmEhh9rtc_alarm+0xba>
    37b8:	8e 81       	ldd	r24, Y+6	; 0x06
    37ba:	88 23       	and	r24, r24
    37bc:	59 f1       	breq	.+86     	; 0x3814 <_ZN3rtc5alarmEhh9rtc_alarm+0xba>
    37be:	8c 81       	ldd	r24, Y+4	; 0x04
    37c0:	9d 81       	ldd	r25, Y+5	; 0x05
    37c2:	6f 81       	ldd	r22, Y+7	; 0x07
    37c4:	30 df       	rcall	.-416    	; 0x3626 <_ZN3rtc9alarm_offEh>
    37c6:	ae 01       	movw	r20, r28
    37c8:	4e 5f       	subi	r20, 0xFE	; 254
    37ca:	5f 4f       	sbci	r21, 0xFF	; 255
    37cc:	8c 81       	ldd	r24, Y+4	; 0x04
    37ce:	9d 81       	ldd	r25, Y+5	; 0x05
    37d0:	21 e0       	ldi	r18, 0x01	; 1
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	69 81       	ldd	r22, Y+1	; 0x01
    37d6:	3e db       	rcall	.-2436   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	69 2f       	mov	r22, r25
    37de:	68 0f       	add	r22, r24
    37e0:	ae 01       	movw	r20, r28
    37e2:	48 5f       	subi	r20, 0xF8	; 248
    37e4:	5f 4f       	sbci	r21, 0xFF	; 255
    37e6:	8c 81       	ldd	r24, Y+4	; 0x04
    37e8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ea:	22 e0       	ldi	r18, 0x02	; 2
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	32 db       	rcall	.-2460   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	98 0f       	add	r25, r24
    37f6:	82 e0       	ldi	r24, 0x02	; 2
    37f8:	69 2f       	mov	r22, r25
    37fa:	68 0f       	add	r22, r24
    37fc:	ae 01       	movw	r20, r28
    37fe:	4d 5f       	subi	r20, 0xFD	; 253
    3800:	5f 4f       	sbci	r21, 0xFF	; 255
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	9d 81       	ldd	r25, Y+5	; 0x05
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	24 db       	rcall	.-2488   	; 0x2e54 <_ZN3rtc11write_blockEhPhj>
    380c:	8c 81       	ldd	r24, Y+4	; 0x04
    380e:	9d 81       	ldd	r25, Y+5	; 0x05
    3810:	6f 81       	ldd	r22, Y+7	; 0x07
    3812:	ae de       	rcall	.-676    	; 0x3570 <_ZN3rtc8alarm_onEh>
    3814:	29 96       	adiw	r28, 0x09	; 9
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	08 95       	ret

00003826 <_ZN3rtc11char_to_rtmEPhP8rtc_time>:

/* HHMMPDDMMMDD */
void rtc::char_to_rtm( unsigned char* chrToConvert, rtc_time* tmeToReturn){
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	2f 97       	sbiw	r28, 0x0f	; 15
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	99 87       	std	Y+9, r25	; 0x09
    383c:	88 87       	std	Y+8, r24	; 0x08
    383e:	7b 87       	std	Y+11, r23	; 0x0b
    3840:	6a 87       	std	Y+10, r22	; 0x0a
    3842:	5d 87       	std	Y+13, r21	; 0x0d
    3844:	4c 87       	std	Y+12, r20	; 0x0c
	
	unsigned char chrDay[3]{"DD"};
    3846:	84 e4       	ldi	r24, 0x44	; 68
    3848:	94 e4       	ldi	r25, 0x44	; 68
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	ab 83       	std	Y+3, r26	; 0x03
	unsigned char chrMonth[4]{"MMM"};
    3852:	8d e4       	ldi	r24, 0x4D	; 77
    3854:	9d e4       	ldi	r25, 0x4D	; 77
    3856:	ad e4       	ldi	r26, 0x4D	; 77
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	8c 83       	std	Y+4, r24	; 0x04
    385c:	9d 83       	std	Y+5, r25	; 0x05
    385e:	ae 83       	std	Y+6, r26	; 0x06
    3860:	bf 83       	std	Y+7, r27	; 0x07
	char* chrStr;
	
	
	tmeToReturn->ucSeconds = 0x00;
    3862:	8c 85       	ldd	r24, Y+12	; 0x0c
    3864:	9d 85       	ldd	r25, Y+13	; 0x0d
    3866:	fc 01       	movw	r30, r24
    3868:	10 82       	st	Z, r1
	tmeToReturn->ucMinutes = (( chrToConvert[2] - 0x30 ) << 4 ) | ( chrToConvert[3] - 0x30 );
    386a:	8a 85       	ldd	r24, Y+10	; 0x0a
    386c:	9b 85       	ldd	r25, Y+11	; 0x0b
    386e:	02 96       	adiw	r24, 0x02	; 2
    3870:	fc 01       	movw	r30, r24
    3872:	80 81       	ld	r24, Z
    3874:	88 2f       	mov	r24, r24
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	c0 97       	sbiw	r24, 0x30	; 48
    387a:	82 95       	swap	r24
    387c:	92 95       	swap	r25
    387e:	90 7f       	andi	r25, 0xF0	; 240
    3880:	98 27       	eor	r25, r24
    3882:	80 7f       	andi	r24, 0xF0	; 240
    3884:	98 27       	eor	r25, r24
    3886:	28 2f       	mov	r18, r24
    3888:	8a 85       	ldd	r24, Y+10	; 0x0a
    388a:	9b 85       	ldd	r25, Y+11	; 0x0b
    388c:	03 96       	adiw	r24, 0x03	; 3
    388e:	fc 01       	movw	r30, r24
    3890:	80 81       	ld	r24, Z
    3892:	80 53       	subi	r24, 0x30	; 48
    3894:	82 2b       	or	r24, r18
    3896:	28 2f       	mov	r18, r24
    3898:	8c 85       	ldd	r24, Y+12	; 0x0c
    389a:	9d 85       	ldd	r25, Y+13	; 0x0d
    389c:	fc 01       	movw	r30, r24
    389e:	21 83       	std	Z+1, r18	; 0x01
	tmeToReturn->ucHours = (( chrToConvert[0] - 0x30 ) << 4 ) | ( chrToConvert[1] - 0x30 );
    38a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a4:	fc 01       	movw	r30, r24
    38a6:	80 81       	ld	r24, Z
    38a8:	88 2f       	mov	r24, r24
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	c0 97       	sbiw	r24, 0x30	; 48
    38ae:	82 95       	swap	r24
    38b0:	92 95       	swap	r25
    38b2:	90 7f       	andi	r25, 0xF0	; 240
    38b4:	98 27       	eor	r25, r24
    38b6:	80 7f       	andi	r24, 0xF0	; 240
    38b8:	98 27       	eor	r25, r24
    38ba:	28 2f       	mov	r18, r24
    38bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    38be:	9b 85       	ldd	r25, Y+11	; 0x0b
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	fc 01       	movw	r30, r24
    38c4:	80 81       	ld	r24, Z
    38c6:	80 53       	subi	r24, 0x30	; 48
    38c8:	82 2b       	or	r24, r18
    38ca:	28 2f       	mov	r18, r24
    38cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    38d0:	fc 01       	movw	r30, r24
    38d2:	22 83       	std	Z+2, r18	; 0x02
	tmeToReturn->ucHours |= 0x40;
    38d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    38d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    38d8:	fc 01       	movw	r30, r24
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	28 2f       	mov	r18, r24
    38de:	20 64       	ori	r18, 0x40	; 64
    38e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    38e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    38e4:	fc 01       	movw	r30, r24
    38e6:	22 83       	std	Z+2, r18	; 0x02
	if( chrToConvert[4] == 'A' ){
    38e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ec:	04 96       	adiw	r24, 0x04	; 4
    38ee:	fc 01       	movw	r30, r24
    38f0:	80 81       	ld	r24, Z
    38f2:	81 34       	cpi	r24, 0x41	; 65
    38f4:	59 f4       	brne	.+22     	; 0x390c <_ZN3rtc11char_to_rtmEPhP8rtc_time+0xe6>
		tmeToReturn->ucHours &= 0xDF;
    38f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    38f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    38fa:	fc 01       	movw	r30, r24
    38fc:	82 81       	ldd	r24, Z+2	; 0x02
    38fe:	28 2f       	mov	r18, r24
    3900:	2f 7d       	andi	r18, 0xDF	; 223
    3902:	8c 85       	ldd	r24, Y+12	; 0x0c
    3904:	9d 85       	ldd	r25, Y+13	; 0x0d
    3906:	fc 01       	movw	r30, r24
    3908:	22 83       	std	Z+2, r18	; 0x02
    390a:	0a c0       	rjmp	.+20     	; 0x3920 <_ZN3rtc11char_to_rtmEPhP8rtc_time+0xfa>
		}else{
		tmeToReturn->ucHours |= 0x20	;
    390c:	8c 85       	ldd	r24, Y+12	; 0x0c
    390e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3910:	fc 01       	movw	r30, r24
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	28 2f       	mov	r18, r24
    3916:	20 62       	ori	r18, 0x20	; 32
    3918:	8c 85       	ldd	r24, Y+12	; 0x0c
    391a:	9d 85       	ldd	r25, Y+13	; 0x0d
    391c:	fc 01       	movw	r30, r24
    391e:	22 83       	std	Z+2, r18	; 0x02
	}
	chrDay[0] = chrToConvert[5];
    3920:	8a 85       	ldd	r24, Y+10	; 0x0a
    3922:	9b 85       	ldd	r25, Y+11	; 0x0b
    3924:	fc 01       	movw	r30, r24
    3926:	85 81       	ldd	r24, Z+5	; 0x05
    3928:	89 83       	std	Y+1, r24	; 0x01
	chrDay[1] = chrToConvert[6];
    392a:	8a 85       	ldd	r24, Y+10	; 0x0a
    392c:	9b 85       	ldd	r25, Y+11	; 0x0b
    392e:	fc 01       	movw	r30, r24
    3930:	86 81       	ldd	r24, Z+6	; 0x06
    3932:	8a 83       	std	Y+2, r24	; 0x02
	tmeToReturn->ucDay = (( (int)( strstr( reinterpret_cast<const char*>(chrDays), reinterpret_cast<const char*>(chrDay) )) - (int)&chrDays[0] ) / 2 ) + 1;
    3934:	ce 01       	movw	r24, r28
    3936:	01 96       	adiw	r24, 0x01	; 1
    3938:	bc 01       	movw	r22, r24
    393a:	81 eb       	ldi	r24, 0xB1	; 177
    393c:	91 e0       	ldi	r25, 0x01	; 1
    393e:	8f d2       	rcall	.+1310   	; 0x3e5e <strstr>
    3940:	9c 01       	movw	r18, r24
    3942:	81 eb       	ldi	r24, 0xB1	; 177
    3944:	91 e0       	ldi	r25, 0x01	; 1
    3946:	a9 01       	movw	r20, r18
    3948:	48 1b       	sub	r20, r24
    394a:	59 0b       	sbc	r21, r25
    394c:	ca 01       	movw	r24, r20
    394e:	99 23       	and	r25, r25
    3950:	0c f4       	brge	.+2      	; 0x3954 <_ZN3rtc11char_to_rtmEPhP8rtc_time+0x12e>
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	95 95       	asr	r25
    3956:	87 95       	ror	r24
    3958:	21 e0       	ldi	r18, 0x01	; 1
    395a:	28 0f       	add	r18, r24
    395c:	8c 85       	ldd	r24, Y+12	; 0x0c
    395e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3960:	fc 01       	movw	r30, r24
    3962:	23 83       	std	Z+3, r18	; 0x03
	tmeToReturn->ucDate = (( chrToConvert[10] - 0x30 ) << 4 ) | ( chrToConvert[11] - 0x30 );
    3964:	8a 85       	ldd	r24, Y+10	; 0x0a
    3966:	9b 85       	ldd	r25, Y+11	; 0x0b
    3968:	0a 96       	adiw	r24, 0x0a	; 10
    396a:	fc 01       	movw	r30, r24
    396c:	80 81       	ld	r24, Z
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	c0 97       	sbiw	r24, 0x30	; 48
    3974:	82 95       	swap	r24
    3976:	92 95       	swap	r25
    3978:	90 7f       	andi	r25, 0xF0	; 240
    397a:	98 27       	eor	r25, r24
    397c:	80 7f       	andi	r24, 0xF0	; 240
    397e:	98 27       	eor	r25, r24
    3980:	28 2f       	mov	r18, r24
    3982:	8a 85       	ldd	r24, Y+10	; 0x0a
    3984:	9b 85       	ldd	r25, Y+11	; 0x0b
    3986:	0b 96       	adiw	r24, 0x0b	; 11
    3988:	fc 01       	movw	r30, r24
    398a:	80 81       	ld	r24, Z
    398c:	80 53       	subi	r24, 0x30	; 48
    398e:	82 2b       	or	r24, r18
    3990:	28 2f       	mov	r18, r24
    3992:	8c 85       	ldd	r24, Y+12	; 0x0c
    3994:	9d 85       	ldd	r25, Y+13	; 0x0d
    3996:	fc 01       	movw	r30, r24
    3998:	24 83       	std	Z+4, r18	; 0x04
	chrMonth[0] = chrToConvert[7];
    399a:	8a 85       	ldd	r24, Y+10	; 0x0a
    399c:	9b 85       	ldd	r25, Y+11	; 0x0b
    399e:	fc 01       	movw	r30, r24
    39a0:	87 81       	ldd	r24, Z+7	; 0x07
    39a2:	8c 83       	std	Y+4, r24	; 0x04
	chrMonth[1] = chrToConvert[8];
    39a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a8:	fc 01       	movw	r30, r24
    39aa:	80 85       	ldd	r24, Z+8	; 0x08
    39ac:	8d 83       	std	Y+5, r24	; 0x05
	chrMonth[2] = chrToConvert[9];
    39ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b2:	fc 01       	movw	r30, r24
    39b4:	81 85       	ldd	r24, Z+9	; 0x09
    39b6:	8e 83       	std	Y+6, r24	; 0x06
	tmeToReturn->ucMonth = (( (int)( strstr( reinterpret_cast<const char*>(chrMonths), reinterpret_cast<const char*>(&chrMonth[0]) )) - (int)&chrMonths[0] ) / 3 ) + 1;
    39b8:	ce 01       	movw	r24, r28
    39ba:	04 96       	adiw	r24, 0x04	; 4
    39bc:	bc 01       	movw	r22, r24
    39be:	8d e8       	ldi	r24, 0x8D	; 141
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	4d d2       	rcall	.+1178   	; 0x3e5e <strstr>
    39c4:	9c 01       	movw	r18, r24
    39c6:	8d e8       	ldi	r24, 0x8D	; 141
    39c8:	91 e0       	ldi	r25, 0x01	; 1
    39ca:	a9 01       	movw	r20, r18
    39cc:	48 1b       	sub	r20, r24
    39ce:	59 0b       	sbc	r21, r25
    39d0:	ca 01       	movw	r24, r20
    39d2:	23 e0       	ldi	r18, 0x03	; 3
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	b9 01       	movw	r22, r18
    39d8:	c5 d1       	rcall	.+906    	; 0x3d64 <__divmodhi4>
    39da:	cb 01       	movw	r24, r22
    39dc:	21 e0       	ldi	r18, 0x01	; 1
    39de:	28 0f       	add	r18, r24
    39e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    39e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    39e4:	fc 01       	movw	r30, r24
    39e6:	25 83       	std	Z+5, r18	; 0x05
	tmeToReturn->ucYear = 0x00;
    39e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ec:	fc 01       	movw	r30, r24
    39ee:	16 82       	std	Z+6, r1	; 0x06
	
}
    39f0:	2f 96       	adiw	r28, 0x0f	; 15
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	08 95       	ret

00003a02 <__cmpsf2>:
    3a02:	d4 d0       	rcall	.+424    	; 0x3bac <__fp_cmp>
    3a04:	08 f4       	brcc	.+2      	; 0x3a08 <__cmpsf2+0x6>
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	08 95       	ret

00003a0a <__divsf3>:
    3a0a:	0c d0       	rcall	.+24     	; 0x3a24 <__divsf3x>
    3a0c:	0a c1       	rjmp	.+532    	; 0x3c22 <__fp_round>
    3a0e:	02 d1       	rcall	.+516    	; 0x3c14 <__fp_pscB>
    3a10:	40 f0       	brcs	.+16     	; 0x3a22 <__divsf3+0x18>
    3a12:	f9 d0       	rcall	.+498    	; 0x3c06 <__fp_pscA>
    3a14:	30 f0       	brcs	.+12     	; 0x3a22 <__divsf3+0x18>
    3a16:	21 f4       	brne	.+8      	; 0x3a20 <__divsf3+0x16>
    3a18:	5f 3f       	cpi	r21, 0xFF	; 255
    3a1a:	19 f0       	breq	.+6      	; 0x3a22 <__divsf3+0x18>
    3a1c:	eb c0       	rjmp	.+470    	; 0x3bf4 <__fp_inf>
    3a1e:	51 11       	cpse	r21, r1
    3a20:	34 c1       	rjmp	.+616    	; 0x3c8a <__fp_szero>
    3a22:	ee c0       	rjmp	.+476    	; 0x3c00 <__fp_nan>

00003a24 <__divsf3x>:
    3a24:	0f d1       	rcall	.+542    	; 0x3c44 <__fp_split3>
    3a26:	98 f3       	brcs	.-26     	; 0x3a0e <__divsf3+0x4>

00003a28 <__divsf3_pse>:
    3a28:	99 23       	and	r25, r25
    3a2a:	c9 f3       	breq	.-14     	; 0x3a1e <__divsf3+0x14>
    3a2c:	55 23       	and	r21, r21
    3a2e:	b1 f3       	breq	.-20     	; 0x3a1c <__divsf3+0x12>
    3a30:	95 1b       	sub	r25, r21
    3a32:	55 0b       	sbc	r21, r21
    3a34:	bb 27       	eor	r27, r27
    3a36:	aa 27       	eor	r26, r26
    3a38:	62 17       	cp	r22, r18
    3a3a:	73 07       	cpc	r23, r19
    3a3c:	84 07       	cpc	r24, r20
    3a3e:	38 f0       	brcs	.+14     	; 0x3a4e <__divsf3_pse+0x26>
    3a40:	9f 5f       	subi	r25, 0xFF	; 255
    3a42:	5f 4f       	sbci	r21, 0xFF	; 255
    3a44:	22 0f       	add	r18, r18
    3a46:	33 1f       	adc	r19, r19
    3a48:	44 1f       	adc	r20, r20
    3a4a:	aa 1f       	adc	r26, r26
    3a4c:	a9 f3       	breq	.-22     	; 0x3a38 <__divsf3_pse+0x10>
    3a4e:	33 d0       	rcall	.+102    	; 0x3ab6 <__divsf3_pse+0x8e>
    3a50:	0e 2e       	mov	r0, r30
    3a52:	3a f0       	brmi	.+14     	; 0x3a62 <__divsf3_pse+0x3a>
    3a54:	e0 e8       	ldi	r30, 0x80	; 128
    3a56:	30 d0       	rcall	.+96     	; 0x3ab8 <__divsf3_pse+0x90>
    3a58:	91 50       	subi	r25, 0x01	; 1
    3a5a:	50 40       	sbci	r21, 0x00	; 0
    3a5c:	e6 95       	lsr	r30
    3a5e:	00 1c       	adc	r0, r0
    3a60:	ca f7       	brpl	.-14     	; 0x3a54 <__divsf3_pse+0x2c>
    3a62:	29 d0       	rcall	.+82     	; 0x3ab6 <__divsf3_pse+0x8e>
    3a64:	fe 2f       	mov	r31, r30
    3a66:	27 d0       	rcall	.+78     	; 0x3ab6 <__divsf3_pse+0x8e>
    3a68:	66 0f       	add	r22, r22
    3a6a:	77 1f       	adc	r23, r23
    3a6c:	88 1f       	adc	r24, r24
    3a6e:	bb 1f       	adc	r27, r27
    3a70:	26 17       	cp	r18, r22
    3a72:	37 07       	cpc	r19, r23
    3a74:	48 07       	cpc	r20, r24
    3a76:	ab 07       	cpc	r26, r27
    3a78:	b0 e8       	ldi	r27, 0x80	; 128
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <__divsf3_pse+0x56>
    3a7c:	bb 0b       	sbc	r27, r27
    3a7e:	80 2d       	mov	r24, r0
    3a80:	bf 01       	movw	r22, r30
    3a82:	ff 27       	eor	r31, r31
    3a84:	93 58       	subi	r25, 0x83	; 131
    3a86:	5f 4f       	sbci	r21, 0xFF	; 255
    3a88:	2a f0       	brmi	.+10     	; 0x3a94 <__divsf3_pse+0x6c>
    3a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a8c:	51 05       	cpc	r21, r1
    3a8e:	68 f0       	brcs	.+26     	; 0x3aaa <__divsf3_pse+0x82>
    3a90:	b1 c0       	rjmp	.+354    	; 0x3bf4 <__fp_inf>
    3a92:	fb c0       	rjmp	.+502    	; 0x3c8a <__fp_szero>
    3a94:	5f 3f       	cpi	r21, 0xFF	; 255
    3a96:	ec f3       	brlt	.-6      	; 0x3a92 <__divsf3_pse+0x6a>
    3a98:	98 3e       	cpi	r25, 0xE8	; 232
    3a9a:	dc f3       	brlt	.-10     	; 0x3a92 <__divsf3_pse+0x6a>
    3a9c:	86 95       	lsr	r24
    3a9e:	77 95       	ror	r23
    3aa0:	67 95       	ror	r22
    3aa2:	b7 95       	ror	r27
    3aa4:	f7 95       	ror	r31
    3aa6:	9f 5f       	subi	r25, 0xFF	; 255
    3aa8:	c9 f7       	brne	.-14     	; 0x3a9c <__divsf3_pse+0x74>
    3aaa:	88 0f       	add	r24, r24
    3aac:	91 1d       	adc	r25, r1
    3aae:	96 95       	lsr	r25
    3ab0:	87 95       	ror	r24
    3ab2:	97 f9       	bld	r25, 7
    3ab4:	08 95       	ret
    3ab6:	e1 e0       	ldi	r30, 0x01	; 1
    3ab8:	66 0f       	add	r22, r22
    3aba:	77 1f       	adc	r23, r23
    3abc:	88 1f       	adc	r24, r24
    3abe:	bb 1f       	adc	r27, r27
    3ac0:	62 17       	cp	r22, r18
    3ac2:	73 07       	cpc	r23, r19
    3ac4:	84 07       	cpc	r24, r20
    3ac6:	ba 07       	cpc	r27, r26
    3ac8:	20 f0       	brcs	.+8      	; 0x3ad2 <__divsf3_pse+0xaa>
    3aca:	62 1b       	sub	r22, r18
    3acc:	73 0b       	sbc	r23, r19
    3ace:	84 0b       	sbc	r24, r20
    3ad0:	ba 0b       	sbc	r27, r26
    3ad2:	ee 1f       	adc	r30, r30
    3ad4:	88 f7       	brcc	.-30     	; 0x3ab8 <__divsf3_pse+0x90>
    3ad6:	e0 95       	com	r30
    3ad8:	08 95       	ret

00003ada <__fixunssfsi>:
    3ada:	bc d0       	rcall	.+376    	; 0x3c54 <__fp_splitA>
    3adc:	88 f0       	brcs	.+34     	; 0x3b00 <__fixunssfsi+0x26>
    3ade:	9f 57       	subi	r25, 0x7F	; 127
    3ae0:	90 f0       	brcs	.+36     	; 0x3b06 <__fixunssfsi+0x2c>
    3ae2:	b9 2f       	mov	r27, r25
    3ae4:	99 27       	eor	r25, r25
    3ae6:	b7 51       	subi	r27, 0x17	; 23
    3ae8:	a0 f0       	brcs	.+40     	; 0x3b12 <__fixunssfsi+0x38>
    3aea:	d1 f0       	breq	.+52     	; 0x3b20 <__fixunssfsi+0x46>
    3aec:	66 0f       	add	r22, r22
    3aee:	77 1f       	adc	r23, r23
    3af0:	88 1f       	adc	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	1a f0       	brmi	.+6      	; 0x3afc <__fixunssfsi+0x22>
    3af6:	ba 95       	dec	r27
    3af8:	c9 f7       	brne	.-14     	; 0x3aec <__fixunssfsi+0x12>
    3afa:	12 c0       	rjmp	.+36     	; 0x3b20 <__fixunssfsi+0x46>
    3afc:	b1 30       	cpi	r27, 0x01	; 1
    3afe:	81 f0       	breq	.+32     	; 0x3b20 <__fixunssfsi+0x46>
    3b00:	c3 d0       	rcall	.+390    	; 0x3c88 <__fp_zero>
    3b02:	b1 e0       	ldi	r27, 0x01	; 1
    3b04:	08 95       	ret
    3b06:	c0 c0       	rjmp	.+384    	; 0x3c88 <__fp_zero>
    3b08:	67 2f       	mov	r22, r23
    3b0a:	78 2f       	mov	r23, r24
    3b0c:	88 27       	eor	r24, r24
    3b0e:	b8 5f       	subi	r27, 0xF8	; 248
    3b10:	39 f0       	breq	.+14     	; 0x3b20 <__fixunssfsi+0x46>
    3b12:	b9 3f       	cpi	r27, 0xF9	; 249
    3b14:	cc f3       	brlt	.-14     	; 0x3b08 <__fixunssfsi+0x2e>
    3b16:	86 95       	lsr	r24
    3b18:	77 95       	ror	r23
    3b1a:	67 95       	ror	r22
    3b1c:	b3 95       	inc	r27
    3b1e:	d9 f7       	brne	.-10     	; 0x3b16 <__fixunssfsi+0x3c>
    3b20:	3e f4       	brtc	.+14     	; 0x3b30 <__fixunssfsi+0x56>
    3b22:	90 95       	com	r25
    3b24:	80 95       	com	r24
    3b26:	70 95       	com	r23
    3b28:	61 95       	neg	r22
    3b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b30:	08 95       	ret

00003b32 <__floatunsisf>:
    3b32:	e8 94       	clt
    3b34:	09 c0       	rjmp	.+18     	; 0x3b48 <__floatsisf+0x12>

00003b36 <__floatsisf>:
    3b36:	97 fb       	bst	r25, 7
    3b38:	3e f4       	brtc	.+14     	; 0x3b48 <__floatsisf+0x12>
    3b3a:	90 95       	com	r25
    3b3c:	80 95       	com	r24
    3b3e:	70 95       	com	r23
    3b40:	61 95       	neg	r22
    3b42:	7f 4f       	sbci	r23, 0xFF	; 255
    3b44:	8f 4f       	sbci	r24, 0xFF	; 255
    3b46:	9f 4f       	sbci	r25, 0xFF	; 255
    3b48:	99 23       	and	r25, r25
    3b4a:	a9 f0       	breq	.+42     	; 0x3b76 <__floatsisf+0x40>
    3b4c:	f9 2f       	mov	r31, r25
    3b4e:	96 e9       	ldi	r25, 0x96	; 150
    3b50:	bb 27       	eor	r27, r27
    3b52:	93 95       	inc	r25
    3b54:	f6 95       	lsr	r31
    3b56:	87 95       	ror	r24
    3b58:	77 95       	ror	r23
    3b5a:	67 95       	ror	r22
    3b5c:	b7 95       	ror	r27
    3b5e:	f1 11       	cpse	r31, r1
    3b60:	f8 cf       	rjmp	.-16     	; 0x3b52 <__floatsisf+0x1c>
    3b62:	fa f4       	brpl	.+62     	; 0x3ba2 <__floatsisf+0x6c>
    3b64:	bb 0f       	add	r27, r27
    3b66:	11 f4       	brne	.+4      	; 0x3b6c <__floatsisf+0x36>
    3b68:	60 ff       	sbrs	r22, 0
    3b6a:	1b c0       	rjmp	.+54     	; 0x3ba2 <__floatsisf+0x6c>
    3b6c:	6f 5f       	subi	r22, 0xFF	; 255
    3b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b70:	8f 4f       	sbci	r24, 0xFF	; 255
    3b72:	9f 4f       	sbci	r25, 0xFF	; 255
    3b74:	16 c0       	rjmp	.+44     	; 0x3ba2 <__floatsisf+0x6c>
    3b76:	88 23       	and	r24, r24
    3b78:	11 f0       	breq	.+4      	; 0x3b7e <__floatsisf+0x48>
    3b7a:	96 e9       	ldi	r25, 0x96	; 150
    3b7c:	11 c0       	rjmp	.+34     	; 0x3ba0 <__floatsisf+0x6a>
    3b7e:	77 23       	and	r23, r23
    3b80:	21 f0       	breq	.+8      	; 0x3b8a <__floatsisf+0x54>
    3b82:	9e e8       	ldi	r25, 0x8E	; 142
    3b84:	87 2f       	mov	r24, r23
    3b86:	76 2f       	mov	r23, r22
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <__floatsisf+0x5e>
    3b8a:	66 23       	and	r22, r22
    3b8c:	71 f0       	breq	.+28     	; 0x3baa <__floatsisf+0x74>
    3b8e:	96 e8       	ldi	r25, 0x86	; 134
    3b90:	86 2f       	mov	r24, r22
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	2a f0       	brmi	.+10     	; 0x3ba2 <__floatsisf+0x6c>
    3b98:	9a 95       	dec	r25
    3b9a:	66 0f       	add	r22, r22
    3b9c:	77 1f       	adc	r23, r23
    3b9e:	88 1f       	adc	r24, r24
    3ba0:	da f7       	brpl	.-10     	; 0x3b98 <__floatsisf+0x62>
    3ba2:	88 0f       	add	r24, r24
    3ba4:	96 95       	lsr	r25
    3ba6:	87 95       	ror	r24
    3ba8:	97 f9       	bld	r25, 7
    3baa:	08 95       	ret

00003bac <__fp_cmp>:
    3bac:	99 0f       	add	r25, r25
    3bae:	00 08       	sbc	r0, r0
    3bb0:	55 0f       	add	r21, r21
    3bb2:	aa 0b       	sbc	r26, r26
    3bb4:	e0 e8       	ldi	r30, 0x80	; 128
    3bb6:	fe ef       	ldi	r31, 0xFE	; 254
    3bb8:	16 16       	cp	r1, r22
    3bba:	17 06       	cpc	r1, r23
    3bbc:	e8 07       	cpc	r30, r24
    3bbe:	f9 07       	cpc	r31, r25
    3bc0:	c0 f0       	brcs	.+48     	; 0x3bf2 <__fp_cmp+0x46>
    3bc2:	12 16       	cp	r1, r18
    3bc4:	13 06       	cpc	r1, r19
    3bc6:	e4 07       	cpc	r30, r20
    3bc8:	f5 07       	cpc	r31, r21
    3bca:	98 f0       	brcs	.+38     	; 0x3bf2 <__fp_cmp+0x46>
    3bcc:	62 1b       	sub	r22, r18
    3bce:	73 0b       	sbc	r23, r19
    3bd0:	84 0b       	sbc	r24, r20
    3bd2:	95 0b       	sbc	r25, r21
    3bd4:	39 f4       	brne	.+14     	; 0x3be4 <__fp_cmp+0x38>
    3bd6:	0a 26       	eor	r0, r26
    3bd8:	61 f0       	breq	.+24     	; 0x3bf2 <__fp_cmp+0x46>
    3bda:	23 2b       	or	r18, r19
    3bdc:	24 2b       	or	r18, r20
    3bde:	25 2b       	or	r18, r21
    3be0:	21 f4       	brne	.+8      	; 0x3bea <__fp_cmp+0x3e>
    3be2:	08 95       	ret
    3be4:	0a 26       	eor	r0, r26
    3be6:	09 f4       	brne	.+2      	; 0x3bea <__fp_cmp+0x3e>
    3be8:	a1 40       	sbci	r26, 0x01	; 1
    3bea:	a6 95       	lsr	r26
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	81 1d       	adc	r24, r1
    3bf0:	81 1d       	adc	r24, r1
    3bf2:	08 95       	ret

00003bf4 <__fp_inf>:
    3bf4:	97 f9       	bld	r25, 7
    3bf6:	9f 67       	ori	r25, 0x7F	; 127
    3bf8:	80 e8       	ldi	r24, 0x80	; 128
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	08 95       	ret

00003c00 <__fp_nan>:
    3c00:	9f ef       	ldi	r25, 0xFF	; 255
    3c02:	80 ec       	ldi	r24, 0xC0	; 192
    3c04:	08 95       	ret

00003c06 <__fp_pscA>:
    3c06:	00 24       	eor	r0, r0
    3c08:	0a 94       	dec	r0
    3c0a:	16 16       	cp	r1, r22
    3c0c:	17 06       	cpc	r1, r23
    3c0e:	18 06       	cpc	r1, r24
    3c10:	09 06       	cpc	r0, r25
    3c12:	08 95       	ret

00003c14 <__fp_pscB>:
    3c14:	00 24       	eor	r0, r0
    3c16:	0a 94       	dec	r0
    3c18:	12 16       	cp	r1, r18
    3c1a:	13 06       	cpc	r1, r19
    3c1c:	14 06       	cpc	r1, r20
    3c1e:	05 06       	cpc	r0, r21
    3c20:	08 95       	ret

00003c22 <__fp_round>:
    3c22:	09 2e       	mov	r0, r25
    3c24:	03 94       	inc	r0
    3c26:	00 0c       	add	r0, r0
    3c28:	11 f4       	brne	.+4      	; 0x3c2e <__fp_round+0xc>
    3c2a:	88 23       	and	r24, r24
    3c2c:	52 f0       	brmi	.+20     	; 0x3c42 <__fp_round+0x20>
    3c2e:	bb 0f       	add	r27, r27
    3c30:	40 f4       	brcc	.+16     	; 0x3c42 <__fp_round+0x20>
    3c32:	bf 2b       	or	r27, r31
    3c34:	11 f4       	brne	.+4      	; 0x3c3a <__fp_round+0x18>
    3c36:	60 ff       	sbrs	r22, 0
    3c38:	04 c0       	rjmp	.+8      	; 0x3c42 <__fp_round+0x20>
    3c3a:	6f 5f       	subi	r22, 0xFF	; 255
    3c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	08 95       	ret

00003c44 <__fp_split3>:
    3c44:	57 fd       	sbrc	r21, 7
    3c46:	90 58       	subi	r25, 0x80	; 128
    3c48:	44 0f       	add	r20, r20
    3c4a:	55 1f       	adc	r21, r21
    3c4c:	59 f0       	breq	.+22     	; 0x3c64 <__fp_splitA+0x10>
    3c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c50:	71 f0       	breq	.+28     	; 0x3c6e <__fp_splitA+0x1a>
    3c52:	47 95       	ror	r20

00003c54 <__fp_splitA>:
    3c54:	88 0f       	add	r24, r24
    3c56:	97 fb       	bst	r25, 7
    3c58:	99 1f       	adc	r25, r25
    3c5a:	61 f0       	breq	.+24     	; 0x3c74 <__fp_splitA+0x20>
    3c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c5e:	79 f0       	breq	.+30     	; 0x3c7e <__fp_splitA+0x2a>
    3c60:	87 95       	ror	r24
    3c62:	08 95       	ret
    3c64:	12 16       	cp	r1, r18
    3c66:	13 06       	cpc	r1, r19
    3c68:	14 06       	cpc	r1, r20
    3c6a:	55 1f       	adc	r21, r21
    3c6c:	f2 cf       	rjmp	.-28     	; 0x3c52 <__fp_split3+0xe>
    3c6e:	46 95       	lsr	r20
    3c70:	f1 df       	rcall	.-30     	; 0x3c54 <__fp_splitA>
    3c72:	08 c0       	rjmp	.+16     	; 0x3c84 <__fp_splitA+0x30>
    3c74:	16 16       	cp	r1, r22
    3c76:	17 06       	cpc	r1, r23
    3c78:	18 06       	cpc	r1, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	f1 cf       	rjmp	.-30     	; 0x3c60 <__fp_splitA+0xc>
    3c7e:	86 95       	lsr	r24
    3c80:	71 05       	cpc	r23, r1
    3c82:	61 05       	cpc	r22, r1
    3c84:	08 94       	sec
    3c86:	08 95       	ret

00003c88 <__fp_zero>:
    3c88:	e8 94       	clt

00003c8a <__fp_szero>:
    3c8a:	bb 27       	eor	r27, r27
    3c8c:	66 27       	eor	r22, r22
    3c8e:	77 27       	eor	r23, r23
    3c90:	cb 01       	movw	r24, r22
    3c92:	97 f9       	bld	r25, 7
    3c94:	08 95       	ret

00003c96 <__gesf2>:
    3c96:	8a df       	rcall	.-236    	; 0x3bac <__fp_cmp>
    3c98:	08 f4       	brcc	.+2      	; 0x3c9c <__gesf2+0x6>
    3c9a:	8f ef       	ldi	r24, 0xFF	; 255
    3c9c:	08 95       	ret

00003c9e <__mulsf3>:
    3c9e:	0b d0       	rcall	.+22     	; 0x3cb6 <__mulsf3x>
    3ca0:	c0 cf       	rjmp	.-128    	; 0x3c22 <__fp_round>
    3ca2:	b1 df       	rcall	.-158    	; 0x3c06 <__fp_pscA>
    3ca4:	28 f0       	brcs	.+10     	; 0x3cb0 <__mulsf3+0x12>
    3ca6:	b6 df       	rcall	.-148    	; 0x3c14 <__fp_pscB>
    3ca8:	18 f0       	brcs	.+6      	; 0x3cb0 <__mulsf3+0x12>
    3caa:	95 23       	and	r25, r21
    3cac:	09 f0       	breq	.+2      	; 0x3cb0 <__mulsf3+0x12>
    3cae:	a2 cf       	rjmp	.-188    	; 0x3bf4 <__fp_inf>
    3cb0:	a7 cf       	rjmp	.-178    	; 0x3c00 <__fp_nan>
    3cb2:	11 24       	eor	r1, r1
    3cb4:	ea cf       	rjmp	.-44     	; 0x3c8a <__fp_szero>

00003cb6 <__mulsf3x>:
    3cb6:	c6 df       	rcall	.-116    	; 0x3c44 <__fp_split3>
    3cb8:	a0 f3       	brcs	.-24     	; 0x3ca2 <__mulsf3+0x4>

00003cba <__mulsf3_pse>:
    3cba:	95 9f       	mul	r25, r21
    3cbc:	d1 f3       	breq	.-12     	; 0x3cb2 <__mulsf3+0x14>
    3cbe:	95 0f       	add	r25, r21
    3cc0:	50 e0       	ldi	r21, 0x00	; 0
    3cc2:	55 1f       	adc	r21, r21
    3cc4:	62 9f       	mul	r22, r18
    3cc6:	f0 01       	movw	r30, r0
    3cc8:	72 9f       	mul	r23, r18
    3cca:	bb 27       	eor	r27, r27
    3ccc:	f0 0d       	add	r31, r0
    3cce:	b1 1d       	adc	r27, r1
    3cd0:	63 9f       	mul	r22, r19
    3cd2:	aa 27       	eor	r26, r26
    3cd4:	f0 0d       	add	r31, r0
    3cd6:	b1 1d       	adc	r27, r1
    3cd8:	aa 1f       	adc	r26, r26
    3cda:	64 9f       	mul	r22, r20
    3cdc:	66 27       	eor	r22, r22
    3cde:	b0 0d       	add	r27, r0
    3ce0:	a1 1d       	adc	r26, r1
    3ce2:	66 1f       	adc	r22, r22
    3ce4:	82 9f       	mul	r24, r18
    3ce6:	22 27       	eor	r18, r18
    3ce8:	b0 0d       	add	r27, r0
    3cea:	a1 1d       	adc	r26, r1
    3cec:	62 1f       	adc	r22, r18
    3cee:	73 9f       	mul	r23, r19
    3cf0:	b0 0d       	add	r27, r0
    3cf2:	a1 1d       	adc	r26, r1
    3cf4:	62 1f       	adc	r22, r18
    3cf6:	83 9f       	mul	r24, r19
    3cf8:	a0 0d       	add	r26, r0
    3cfa:	61 1d       	adc	r22, r1
    3cfc:	22 1f       	adc	r18, r18
    3cfe:	74 9f       	mul	r23, r20
    3d00:	33 27       	eor	r19, r19
    3d02:	a0 0d       	add	r26, r0
    3d04:	61 1d       	adc	r22, r1
    3d06:	23 1f       	adc	r18, r19
    3d08:	84 9f       	mul	r24, r20
    3d0a:	60 0d       	add	r22, r0
    3d0c:	21 1d       	adc	r18, r1
    3d0e:	82 2f       	mov	r24, r18
    3d10:	76 2f       	mov	r23, r22
    3d12:	6a 2f       	mov	r22, r26
    3d14:	11 24       	eor	r1, r1
    3d16:	9f 57       	subi	r25, 0x7F	; 127
    3d18:	50 40       	sbci	r21, 0x00	; 0
    3d1a:	8a f0       	brmi	.+34     	; 0x3d3e <__mulsf3_pse+0x84>
    3d1c:	e1 f0       	breq	.+56     	; 0x3d56 <__mulsf3_pse+0x9c>
    3d1e:	88 23       	and	r24, r24
    3d20:	4a f0       	brmi	.+18     	; 0x3d34 <__mulsf3_pse+0x7a>
    3d22:	ee 0f       	add	r30, r30
    3d24:	ff 1f       	adc	r31, r31
    3d26:	bb 1f       	adc	r27, r27
    3d28:	66 1f       	adc	r22, r22
    3d2a:	77 1f       	adc	r23, r23
    3d2c:	88 1f       	adc	r24, r24
    3d2e:	91 50       	subi	r25, 0x01	; 1
    3d30:	50 40       	sbci	r21, 0x00	; 0
    3d32:	a9 f7       	brne	.-22     	; 0x3d1e <__mulsf3_pse+0x64>
    3d34:	9e 3f       	cpi	r25, 0xFE	; 254
    3d36:	51 05       	cpc	r21, r1
    3d38:	70 f0       	brcs	.+28     	; 0x3d56 <__mulsf3_pse+0x9c>
    3d3a:	5c cf       	rjmp	.-328    	; 0x3bf4 <__fp_inf>
    3d3c:	a6 cf       	rjmp	.-180    	; 0x3c8a <__fp_szero>
    3d3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3d40:	ec f3       	brlt	.-6      	; 0x3d3c <__mulsf3_pse+0x82>
    3d42:	98 3e       	cpi	r25, 0xE8	; 232
    3d44:	dc f3       	brlt	.-10     	; 0x3d3c <__mulsf3_pse+0x82>
    3d46:	86 95       	lsr	r24
    3d48:	77 95       	ror	r23
    3d4a:	67 95       	ror	r22
    3d4c:	b7 95       	ror	r27
    3d4e:	f7 95       	ror	r31
    3d50:	e7 95       	ror	r30
    3d52:	9f 5f       	subi	r25, 0xFF	; 255
    3d54:	c1 f7       	brne	.-16     	; 0x3d46 <__mulsf3_pse+0x8c>
    3d56:	fe 2b       	or	r31, r30
    3d58:	88 0f       	add	r24, r24
    3d5a:	91 1d       	adc	r25, r1
    3d5c:	96 95       	lsr	r25
    3d5e:	87 95       	ror	r24
    3d60:	97 f9       	bld	r25, 7
    3d62:	08 95       	ret

00003d64 <__divmodhi4>:
    3d64:	97 fb       	bst	r25, 7
    3d66:	07 2e       	mov	r0, r23
    3d68:	16 f4       	brtc	.+4      	; 0x3d6e <__divmodhi4+0xa>
    3d6a:	00 94       	com	r0
    3d6c:	06 d0       	rcall	.+12     	; 0x3d7a <__divmodhi4_neg1>
    3d6e:	77 fd       	sbrc	r23, 7
    3d70:	08 d0       	rcall	.+16     	; 0x3d82 <__divmodhi4_neg2>
    3d72:	46 d0       	rcall	.+140    	; 0x3e00 <__udivmodhi4>
    3d74:	07 fc       	sbrc	r0, 7
    3d76:	05 d0       	rcall	.+10     	; 0x3d82 <__divmodhi4_neg2>
    3d78:	3e f4       	brtc	.+14     	; 0x3d88 <__divmodhi4_exit>

00003d7a <__divmodhi4_neg1>:
    3d7a:	90 95       	com	r25
    3d7c:	81 95       	neg	r24
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	08 95       	ret

00003d82 <__divmodhi4_neg2>:
    3d82:	70 95       	com	r23
    3d84:	61 95       	neg	r22
    3d86:	7f 4f       	sbci	r23, 0xFF	; 255

00003d88 <__divmodhi4_exit>:
    3d88:	08 95       	ret

00003d8a <__udivmodsi4>:
    3d8a:	a1 e2       	ldi	r26, 0x21	; 33
    3d8c:	1a 2e       	mov	r1, r26
    3d8e:	aa 1b       	sub	r26, r26
    3d90:	bb 1b       	sub	r27, r27
    3d92:	fd 01       	movw	r30, r26
    3d94:	0d c0       	rjmp	.+26     	; 0x3db0 <__udivmodsi4_ep>

00003d96 <__udivmodsi4_loop>:
    3d96:	aa 1f       	adc	r26, r26
    3d98:	bb 1f       	adc	r27, r27
    3d9a:	ee 1f       	adc	r30, r30
    3d9c:	ff 1f       	adc	r31, r31
    3d9e:	a2 17       	cp	r26, r18
    3da0:	b3 07       	cpc	r27, r19
    3da2:	e4 07       	cpc	r30, r20
    3da4:	f5 07       	cpc	r31, r21
    3da6:	20 f0       	brcs	.+8      	; 0x3db0 <__udivmodsi4_ep>
    3da8:	a2 1b       	sub	r26, r18
    3daa:	b3 0b       	sbc	r27, r19
    3dac:	e4 0b       	sbc	r30, r20
    3dae:	f5 0b       	sbc	r31, r21

00003db0 <__udivmodsi4_ep>:
    3db0:	66 1f       	adc	r22, r22
    3db2:	77 1f       	adc	r23, r23
    3db4:	88 1f       	adc	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	1a 94       	dec	r1
    3dba:	69 f7       	brne	.-38     	; 0x3d96 <__udivmodsi4_loop>
    3dbc:	60 95       	com	r22
    3dbe:	70 95       	com	r23
    3dc0:	80 95       	com	r24
    3dc2:	90 95       	com	r25
    3dc4:	9b 01       	movw	r18, r22
    3dc6:	ac 01       	movw	r20, r24
    3dc8:	bd 01       	movw	r22, r26
    3dca:	cf 01       	movw	r24, r30
    3dcc:	08 95       	ret

00003dce <__umulhisi3>:
    3dce:	a2 9f       	mul	r26, r18
    3dd0:	b0 01       	movw	r22, r0
    3dd2:	b3 9f       	mul	r27, r19
    3dd4:	c0 01       	movw	r24, r0
    3dd6:	a3 9f       	mul	r26, r19
    3dd8:	70 0d       	add	r23, r0
    3dda:	81 1d       	adc	r24, r1
    3ddc:	11 24       	eor	r1, r1
    3dde:	91 1d       	adc	r25, r1
    3de0:	b2 9f       	mul	r27, r18
    3de2:	70 0d       	add	r23, r0
    3de4:	81 1d       	adc	r24, r1
    3de6:	11 24       	eor	r1, r1
    3de8:	91 1d       	adc	r25, r1
    3dea:	08 95       	ret

00003dec <__muluhisi3>:
    3dec:	f0 df       	rcall	.-32     	; 0x3dce <__umulhisi3>
    3dee:	a5 9f       	mul	r26, r21
    3df0:	90 0d       	add	r25, r0
    3df2:	b4 9f       	mul	r27, r20
    3df4:	90 0d       	add	r25, r0
    3df6:	a4 9f       	mul	r26, r20
    3df8:	80 0d       	add	r24, r0
    3dfa:	91 1d       	adc	r25, r1
    3dfc:	11 24       	eor	r1, r1
    3dfe:	08 95       	ret

00003e00 <__udivmodhi4>:
    3e00:	aa 1b       	sub	r26, r26
    3e02:	bb 1b       	sub	r27, r27
    3e04:	51 e1       	ldi	r21, 0x11	; 17
    3e06:	07 c0       	rjmp	.+14     	; 0x3e16 <__udivmodhi4_ep>

00003e08 <__udivmodhi4_loop>:
    3e08:	aa 1f       	adc	r26, r26
    3e0a:	bb 1f       	adc	r27, r27
    3e0c:	a6 17       	cp	r26, r22
    3e0e:	b7 07       	cpc	r27, r23
    3e10:	10 f0       	brcs	.+4      	; 0x3e16 <__udivmodhi4_ep>
    3e12:	a6 1b       	sub	r26, r22
    3e14:	b7 0b       	sbc	r27, r23

00003e16 <__udivmodhi4_ep>:
    3e16:	88 1f       	adc	r24, r24
    3e18:	99 1f       	adc	r25, r25
    3e1a:	5a 95       	dec	r21
    3e1c:	a9 f7       	brne	.-22     	; 0x3e08 <__udivmodhi4_loop>
    3e1e:	80 95       	com	r24
    3e20:	90 95       	com	r25
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	08 95       	ret

00003e28 <__tablejump2__>:
    3e28:	ee 0f       	add	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	00 24       	eor	r0, r0
    3e2e:	00 1c       	adc	r0, r0
    3e30:	0b be       	out	0x3b, r0	; 59
    3e32:	07 90       	elpm	r0, Z+
    3e34:	f6 91       	elpm	r31, Z
    3e36:	e0 2d       	mov	r30, r0
    3e38:	09 94       	ijmp

00003e3a <memcpy>:
    3e3a:	fb 01       	movw	r30, r22
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	02 c0       	rjmp	.+4      	; 0x3e44 <memcpy+0xa>
    3e40:	01 90       	ld	r0, Z+
    3e42:	0d 92       	st	X+, r0
    3e44:	41 50       	subi	r20, 0x01	; 1
    3e46:	50 40       	sbci	r21, 0x00	; 0
    3e48:	d8 f7       	brcc	.-10     	; 0x3e40 <memcpy+0x6>
    3e4a:	08 95       	ret

00003e4c <strlen>:
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	01 90       	ld	r0, Z+
    3e50:	00 20       	and	r0, r0
    3e52:	e9 f7       	brne	.-6      	; 0x3e4e <strlen+0x2>
    3e54:	80 95       	com	r24
    3e56:	90 95       	com	r25
    3e58:	8e 0f       	add	r24, r30
    3e5a:	9f 1f       	adc	r25, r31
    3e5c:	08 95       	ret

00003e5e <strstr>:
    3e5e:	fb 01       	movw	r30, r22
    3e60:	51 91       	ld	r21, Z+
    3e62:	55 23       	and	r21, r21
    3e64:	a9 f0       	breq	.+42     	; 0x3e90 <strstr+0x32>
    3e66:	bf 01       	movw	r22, r30
    3e68:	dc 01       	movw	r26, r24
    3e6a:	4d 91       	ld	r20, X+
    3e6c:	45 17       	cp	r20, r21
    3e6e:	41 11       	cpse	r20, r1
    3e70:	e1 f7       	brne	.-8      	; 0x3e6a <strstr+0xc>
    3e72:	59 f4       	brne	.+22     	; 0x3e8a <strstr+0x2c>
    3e74:	cd 01       	movw	r24, r26
    3e76:	01 90       	ld	r0, Z+
    3e78:	00 20       	and	r0, r0
    3e7a:	49 f0       	breq	.+18     	; 0x3e8e <strstr+0x30>
    3e7c:	4d 91       	ld	r20, X+
    3e7e:	40 15       	cp	r20, r0
    3e80:	41 11       	cpse	r20, r1
    3e82:	c9 f3       	breq	.-14     	; 0x3e76 <strstr+0x18>
    3e84:	fb 01       	movw	r30, r22
    3e86:	41 11       	cpse	r20, r1
    3e88:	ef cf       	rjmp	.-34     	; 0x3e68 <strstr+0xa>
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	08 95       	ret

00003e92 <_exit>:
    3e92:	f8 94       	cli

00003e94 <__stop_program>:
    3e94:	ff cf       	rjmp	.-2      	; 0x3e94 <__stop_program>
