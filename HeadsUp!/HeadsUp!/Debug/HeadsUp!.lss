
HeadsUp!.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  0000361c  000036b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000361c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800190  00800190  00003740  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000266c  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025e0  00000000  00000000  00006a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  00009064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b509  00000000  00000000  000098f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001294  00000000  00000000  00014dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00016091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003fef  00000000  00000000  00016249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c6       	rjmp	.+3306   	; 0xcfc <__vector_4>
      12:	00 00       	nop
      14:	40 c1       	rjmp	.+640    	; 0x296 <__vector_5>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	77 0b       	sbc	r23, r23

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d0 e4       	ldi	r29, 0x40	; 64
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ec e1       	ldi	r30, 0x1C	; 28
      a2:	f6 e3       	ldi	r31, 0x36	; 54
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0b bf       	out	0x3b, r16	; 59
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
      aa:	07 90       	elpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 39       	cpi	r26, 0x90	; 144
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 e9       	ldi	r26, 0x90	; 144
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a6 39       	cpi	r26, 0x96	; 150
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	c7 e4       	ldi	r28, 0x47	; 71
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
      cc:	21 97       	sbiw	r28, 0x01	; 1
      ce:	fe 01       	movw	r30, r28
      d0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__tablejump2__>
      d4:	c6 34       	cpi	r28, 0x46	; 70
      d6:	d1 07       	cpc	r29, r17
      d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
      da:	eb d2       	rcall	.+1494   	; 0x6b2 <main>
      dc:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <_ZN3batC1Ev>:
#include "bat.h"


bat::bat(){
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <_ZN3batC1Ev+0x6>
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	9a 83       	std	Y+2, r25	; 0x02
      ee:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX |= (1 << REFS1) | (1 << MUX0);	// MUX0 picks ADC1 Pin
      f0:	8c e7       	ldi	r24, 0x7C	; 124
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2c e7       	ldi	r18, 0x7C	; 124
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	21 68       	ori	r18, 0x81	; 129
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// Enable ADC prescaler  to 64 (125KHz @ 8 MHz)
     102:	8a e7       	ldi	r24, 0x7A	; 122
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2a e7       	ldi	r18, 0x7A	; 122
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	26 60       	ori	r18, 0x06	; 6
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
	DIDR0 |= (1 << ADC1D);	// Disable digital input buffer on ADC1 pin
     114:	8e e7       	ldi	r24, 0x7E	; 126
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	2e e7       	ldi	r18, 0x7E	; 126
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	22 60       	ori	r18, 0x02	; 2
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
	
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <_ZN3bat6ENABLEEv>:


void bat::ENABLE(){
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	00 d0       	rcall	.+0      	; 0x136 <_ZN3bat6ENABLEEv+0x6>
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= ( 1 << ADEN );
     13e:	8a e7       	ldi	r24, 0x7A	; 122
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	2a e7       	ldi	r18, 0x7A	; 122
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	20 68       	ori	r18, 0x80	; 128
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	//_delay_ms( 200 );
	ADCSRA |= ( 1 << ADSC );
     150:	8a e7       	ldi	r24, 0x7A	; 122
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2a e7       	ldi	r18, 0x7A	; 122
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	20 64       	ori	r18, 0x40	; 64
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18

}
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <_ZN3bat7DISABLEEv>:


void bat::DISABLE(){
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <_ZN3bat7DISABLEEv+0x6>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~( 1 << ADEN );
     17a:	8a e7       	ldi	r24, 0x7A	; 122
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	2a e7       	ldi	r18, 0x7A	; 122
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	2f 77       	andi	r18, 0x7F	; 127
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
	
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN3bat3getEv>:

unsigned char bat::get(){
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	2d 97       	sbiw	r28, 0x0d	; 13
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	99 87       	std	Y+9, r25	; 0x09
     1b4:	88 87       	std	Y+8, r24	; 0x08
	
	adc_out adoCurrent;
	uint8_t valBatteryLevel;
	uint16_t minADCpercent = 0x02DA;
     1b6:	8a ed       	ldi	r24, 0xDA	; 218
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
	uint16_t adcdifference = 0x0125;
     1be:	85 e2       	ldi	r24, 0x25	; 37
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9c 83       	std	Y+4, r25	; 0x04
     1c4:	8b 83       	std	Y+3, r24	; 0x03
	
	ENABLE();
     1c6:	88 85       	ldd	r24, Y+8	; 0x08
     1c8:	99 85       	ldd	r25, Y+9	; 0x09
     1ca:	b2 df       	rcall	.-156    	; 0x130 <_ZN3bat6ENABLEEv>
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1cc:	8a e7       	ldi	r24, 0x7A	; 122
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	80 74       	andi	r24, 0x40	; 64
     1da:	99 27       	eor	r25, r25
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	89 2b       	or	r24, r25
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <_ZN3bat3getEv+0x4e>
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	22 23       	and	r18, r18
     1e6:	91 f7       	brne	.-28     	; 0x1cc <_ZN3bat3getEv+0x36>
	adoCurrent = ADC - minADCpercent;
     1e8:	88 e7       	ldi	r24, 0x78	; 120
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	a9 01       	movw	r20, r18
     1f8:	48 1b       	sub	r20, r24
     1fa:	59 0b       	sbc	r21, r25
     1fc:	ca 01       	movw	r24, r20
     1fe:	9e 83       	std	Y+6, r25	; 0x06
     200:	8d 83       	std	Y+5, r24	; 0x05
	DISABLE();
     202:	88 85       	ldd	r24, Y+8	; 0x08
     204:	99 85       	ldd	r25, Y+9	; 0x09
     206:	b2 df       	rcall	.-156    	; 0x16c <_ZN3bat7DISABLEEv>
	
	valBatteryLevel = (( uint32_t )adoCurrent * 100 ) / adcdifference;
     208:	8d 81       	ldd	r24, Y+5	; 0x05
     20a:	9e 81       	ldd	r25, Y+6	; 0x06
     20c:	9c 01       	movw	r18, r24
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	84 e6       	ldi	r24, 0x64	; 100
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	dc 01       	movw	r26, r24
     218:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__muluhisi3>
     21c:	7b 01       	movw	r14, r22
     21e:	8c 01       	movw	r16, r24
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	9c 01       	movw	r18, r24
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	c8 01       	movw	r24, r16
     22c:	b7 01       	movw	r22, r14
     22e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__udivmodsi4>
     232:	da 01       	movw	r26, r20
     234:	c9 01       	movw	r24, r18
     236:	8f 83       	std	Y+7, r24	; 0x07
	return (( valBatteryLevel / 10 ) << 4 ) | ( valBatteryLevel % 10 );
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	8d ec       	ldi	r24, 0xCD	; 205
     23c:	98 9f       	mul	r25, r24
     23e:	81 2d       	mov	r24, r1
     240:	11 24       	eor	r1, r1
     242:	86 95       	lsr	r24
     244:	86 95       	lsr	r24
     246:	86 95       	lsr	r24
     248:	88 2f       	mov	r24, r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	82 95       	swap	r24
     24e:	92 95       	swap	r25
     250:	90 7f       	andi	r25, 0xF0	; 240
     252:	98 27       	eor	r25, r24
     254:	80 7f       	andi	r24, 0xF0	; 240
     256:	98 27       	eor	r25, r24
     258:	38 2f       	mov	r19, r24
     25a:	9f 81       	ldd	r25, Y+7	; 0x07
     25c:	8d ec       	ldi	r24, 0xCD	; 205
     25e:	98 9f       	mul	r25, r24
     260:	81 2d       	mov	r24, r1
     262:	11 24       	eor	r1, r1
     264:	86 95       	lsr	r24
     266:	86 95       	lsr	r24
     268:	86 95       	lsr	r24
     26a:	88 0f       	add	r24, r24
     26c:	28 2f       	mov	r18, r24
     26e:	22 0f       	add	r18, r18
     270:	22 0f       	add	r18, r18
     272:	82 0f       	add	r24, r18
     274:	59 2f       	mov	r21, r25
     276:	58 1b       	sub	r21, r24
     278:	85 2f       	mov	r24, r21
     27a:	83 2b       	or	r24, r19
	
     27c:	2d 96       	adiw	r28, 0x0d	; 13
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	08 95       	ret

00000296 <__vector_5>:
#include "but.h"


ISR( PCINT1_vect ){
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	00 90 5f 00 	lds	r0, 0x005F
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	00 90 5b 00 	lds	r0, 0x005B
     2a6:	0f 92       	push	r0
     2a8:	2f 93       	push	r18
     2aa:	3f 93       	push	r19
     2ac:	4f 93       	push	r20
     2ae:	5f 93       	push	r21
     2b0:	6f 93       	push	r22
     2b2:	7f 93       	push	r23
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	af 93       	push	r26
     2ba:	bf 93       	push	r27
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	6d 97       	sbiw	r28, 0x1d	; 29
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a0 ef       	ldi	r26, 0xF0	; 240
     2d4:	b1 e4       	ldi	r27, 0x41	; 65
     2d6:	89 83       	std	Y+1, r24	; 0x01
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	ab 83       	std	Y+3, r26	; 0x03
     2dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a e7       	ldi	r20, 0x7A	; 122
     2e4:	53 e4       	ldi	r21, 0x43	; 67
     2e6:	69 81       	ldd	r22, Y+1	; 0x01
     2e8:	7a 81       	ldd	r23, Y+2	; 0x02
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	8d 83       	std	Y+5, r24	; 0x05
     2f8:	9e 83       	std	Y+6, r25	; 0x06
     2fa:	af 83       	std	Y+7, r26	; 0x07
     2fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	6d 81       	ldd	r22, Y+5	; 0x05
     308:	7e 81       	ldd	r23, Y+6	; 0x06
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	2c f4       	brge	.+10     	; 0x320 <__vector_5+0x8a>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9a 87       	std	Y+10, r25	; 0x0a
     31c:	89 87       	std	Y+9, r24	; 0x09
     31e:	3f c0       	rjmp	.+126    	; 0x39e <__vector_5+0x108>
	else if (__tmp > 65535)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	6d 81       	ldd	r22, Y+5	; 0x05
     32a:	7e 81       	ldd	r23, Y+6	; 0x06
     32c:	8f 81       	ldd	r24, Y+7	; 0x07
     32e:	98 85       	ldd	r25, Y+8	; 0x08
     330:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	4c f5       	brge	.+82     	; 0x38a <__vector_5+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9a 87       	std	Y+10, r25	; 0x0a
     35e:	89 87       	std	Y+9, r24	; 0x09
     360:	0f c0       	rjmp	.+30     	; 0x380 <__vector_5+0xea>
     362:	89 e1       	ldi	r24, 0x19	; 25
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	9c 87       	std	Y+12, r25	; 0x0c
     368:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     36a:	8b 85       	ldd	r24, Y+11	; 0x0b
     36c:	9c 85       	ldd	r25, Y+12	; 0x0c
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <__vector_5+0xd8>
     372:	9c 87       	std	Y+12, r25	; 0x0c
     374:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	89 85       	ldd	r24, Y+9	; 0x09
     378:	9a 85       	ldd	r25, Y+10	; 0x0a
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9a 87       	std	Y+10, r25	; 0x0a
     37e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	89 85       	ldd	r24, Y+9	; 0x09
     382:	9a 85       	ldd	r25, Y+10	; 0x0a
     384:	89 2b       	or	r24, r25
     386:	69 f7       	brne	.-38     	; 0x362 <__vector_5+0xcc>
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <__vector_5+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38a:	6d 81       	ldd	r22, Y+5	; 0x05
     38c:	7e 81       	ldd	r23, Y+6	; 0x06
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	98 85       	ldd	r25, Y+8	; 0x08
     392:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	9a 87       	std	Y+10, r25	; 0x0a
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	89 85       	ldd	r24, Y+9	; 0x09
     3a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	8d 87       	std	Y+13, r24	; 0x0d
     3a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <__vector_5+0x114>
     3ae:	9e 87       	std	Y+14, r25	; 0x0e
     3b0:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char chrPinB;
	static uint8_t valPressed{ BUT_UP };


	_delay_ms(30);
	if( valPressed == BUT_UP ){
     3b2:	80 91 90 01 	lds	r24, 0x0190
     3b6:	88 23       	and	r24, r24
     3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_5+0x126>
     3ba:	cf c0       	rjmp	.+414    	; 0x55a <__vector_5+0x2c4>
		memcpy(( void* )&chrPinB, ( void* )0x23, 1 );
     3bc:	80 91 23 00 	lds	r24, 0x0023
     3c0:	8d 8f       	std	Y+29, r24	; 0x1d
		chrPinB = (((( chrPinB & 0x01 ) << 2 ) | ( chrPinB & 0x02 ) | (( chrPinB >> 2 ) & 0x01 )) + 1 ) % 0x08;
     3c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	81 70       	andi	r24, 0x01	; 1
     3ca:	99 27       	eor	r25, r25
     3cc:	9c 01       	movw	r18, r24
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	22 0f       	add	r18, r18
     3d4:	33 1f       	adc	r19, r19
     3d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	82 70       	andi	r24, 0x02	; 2
     3de:	99 27       	eor	r25, r25
     3e0:	28 2b       	or	r18, r24
     3e2:	39 2b       	or	r19, r25
     3e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	81 70       	andi	r24, 0x01	; 1
     3f4:	99 27       	eor	r25, r25
     3f6:	82 2b       	or	r24, r18
     3f8:	93 2b       	or	r25, r19
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	87 70       	andi	r24, 0x07	; 7
     3fe:	90 78       	andi	r25, 0x80	; 128
     400:	99 23       	and	r25, r25
     402:	24 f4       	brge	.+8      	; 0x40c <__vector_5+0x176>
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	88 6f       	ori	r24, 0xF8	; 248
     408:	9f 6f       	ori	r25, 0xFF	; 255
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	8d 8f       	std	Y+29, r24	; 0x1d
		if( valLastPress == BUT_UP ){
     40e:	90 91 95 01 	lds	r25, 0x0195
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	99 23       	and	r25, r25
     416:	09 f0       	breq	.+2      	; 0x41a <__vector_5+0x184>
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	88 23       	and	r24, r24
     41c:	19 f0       	breq	.+6      	; 0x424 <__vector_5+0x18e>
			valLastPress = chrPinB;
     41e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     420:	80 93 95 01 	sts	0x0195, r24
		}
		if( valLastPress = chrPinB ){
     424:	8d 8d       	ldd	r24, Y+29	; 0x1d
     426:	80 93 95 01 	sts	0x0195, r24
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	88 23       	and	r24, r24
     42e:	09 f4       	brne	.+2      	; 0x432 <__vector_5+0x19c>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	99 23       	and	r25, r25
     434:	09 f4       	brne	.+2      	; 0x438 <__vector_5+0x1a2>
     436:	93 c0       	rjmp	.+294    	; 0x55e <__vector_5+0x2c8>
			valPressed = BUT_DWN;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	80 93 90 01 	sts	0x0190, r24
			DDRA |= 1 << PORTA4;
     43e:	81 e2       	ldi	r24, 0x21	; 33
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	21 e2       	ldi	r18, 0x21	; 33
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	20 61       	ori	r18, 0x10	; 16
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
			PORTA |= ( 1 << PINA4);
     450:	82 e2       	ldi	r24, 0x22	; 34
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	22 e2       	ldi	r18, 0x22	; 34
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 61       	ori	r18, 0x10	; 16
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	a0 ef       	ldi	r26, 0xF0	; 240
     468:	b1 e4       	ldi	r27, 0x41	; 65
     46a:	8f 87       	std	Y+15, r24	; 0x0f
     46c:	98 8b       	std	Y+16, r25	; 0x10
     46e:	a9 8b       	std	Y+17, r26	; 0x11
     470:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	4a e7       	ldi	r20, 0x7A	; 122
     478:	53 e4       	ldi	r21, 0x43	; 67
     47a:	6f 85       	ldd	r22, Y+15	; 0x0f
     47c:	78 89       	ldd	r23, Y+16	; 0x10
     47e:	89 89       	ldd	r24, Y+17	; 0x11
     480:	9a 89       	ldd	r25, Y+18	; 0x12
     482:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	8b 8b       	std	Y+19, r24	; 0x13
     48c:	9c 8b       	std	Y+20, r25	; 0x14
     48e:	ad 8b       	std	Y+21, r26	; 0x15
     490:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	6b 89       	ldd	r22, Y+19	; 0x13
     49c:	7c 89       	ldd	r23, Y+20	; 0x14
     49e:	8d 89       	ldd	r24, Y+21	; 0x15
     4a0:	9e 89       	ldd	r25, Y+22	; 0x16
     4a2:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     4a6:	88 23       	and	r24, r24
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <__vector_5+0x21e>
		__ticks = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 8f       	std	Y+24, r25	; 0x18
     4b0:	8f 8b       	std	Y+23, r24	; 0x17
     4b2:	3f c0       	rjmp	.+126    	; 0x532 <__vector_5+0x29c>
	else if (__tmp > 65535)
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	3f ef       	ldi	r19, 0xFF	; 255
     4b8:	4f e7       	ldi	r20, 0x7F	; 127
     4ba:	57 e4       	ldi	r21, 0x47	; 71
     4bc:	6b 89       	ldd	r22, Y+19	; 0x13
     4be:	7c 89       	ldd	r23, Y+20	; 0x14
     4c0:	8d 89       	ldd	r24, Y+21	; 0x15
     4c2:	9e 89       	ldd	r25, Y+22	; 0x16
     4c4:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	4c f5       	brge	.+82     	; 0x51e <__vector_5+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	6f 85       	ldd	r22, Y+15	; 0x0f
     4d6:	78 89       	ldd	r23, Y+16	; 0x10
     4d8:	89 89       	ldd	r24, Y+17	; 0x11
     4da:	9a 89       	ldd	r25, Y+18	; 0x12
     4dc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	98 8f       	std	Y+24, r25	; 0x18
     4f2:	8f 8b       	std	Y+23, r24	; 0x17
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <__vector_5+0x27e>
     4f6:	89 e1       	ldi	r24, 0x19	; 25
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9a 8f       	std	Y+26, r25	; 0x1a
     4fc:	89 8f       	std	Y+25, r24	; 0x19
     4fe:	89 8d       	ldd	r24, Y+25	; 0x19
     500:	9a 8d       	ldd	r25, Y+26	; 0x1a
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <__vector_5+0x26c>
     506:	9a 8f       	std	Y+26, r25	; 0x1a
     508:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50a:	8f 89       	ldd	r24, Y+23	; 0x17
     50c:	98 8d       	ldd	r25, Y+24	; 0x18
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	98 8f       	std	Y+24, r25	; 0x18
     512:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     514:	8f 89       	ldd	r24, Y+23	; 0x17
     516:	98 8d       	ldd	r25, Y+24	; 0x18
     518:	89 2b       	or	r24, r25
     51a:	69 f7       	brne	.-38     	; 0x4f6 <__vector_5+0x260>
     51c:	14 c0       	rjmp	.+40     	; 0x546 <__vector_5+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     51e:	6b 89       	ldd	r22, Y+19	; 0x13
     520:	7c 89       	ldd	r23, Y+20	; 0x14
     522:	8d 89       	ldd	r24, Y+21	; 0x15
     524:	9e 89       	ldd	r25, Y+22	; 0x16
     526:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	98 8f       	std	Y+24, r25	; 0x18
     530:	8f 8b       	std	Y+23, r24	; 0x17
     532:	8f 89       	ldd	r24, Y+23	; 0x17
     534:	98 8d       	ldd	r25, Y+24	; 0x18
     536:	9c 8f       	std	Y+28, r25	; 0x1c
     538:	8b 8f       	std	Y+27, r24	; 0x1b
     53a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <__vector_5+0x2a8>
     542:	9c 8f       	std	Y+28, r25	; 0x1c
     544:	8b 8f       	std	Y+27, r24	; 0x1b
			_delay_ms(30);
			PORTA &= ~( 1 << PINA4);
     546:	82 e2       	ldi	r24, 0x22	; 34
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	22 e2       	ldi	r18, 0x22	; 34
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	2f 7e       	andi	r18, 0xEF	; 239
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
     558:	02 c0       	rjmp	.+4      	; 0x55e <__vector_5+0x2c8>
		}
	}else{
		valPressed = BUT_UP;
     55a:	10 92 90 01 	sts	0x0190, r1
	}
}
     55e:	6d 96       	adiw	r28, 0x1d	; 29
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	ff 91       	pop	r31
     570:	ef 91       	pop	r30
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	0f 90       	pop	r0
     588:	00 92 5b 00 	sts	0x005B, r0
     58c:	0f 90       	pop	r0
     58e:	00 92 5f 00 	sts	0x005F, r0
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     598:	2f 92       	push	r2
     59a:	3f 92       	push	r3
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	29 97       	sbiw	r28, 0x09	; 9
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	99 87       	std	Y+9, r25	; 0x09
     5ce:	88 87       	std	Y+8, r24	; 0x08
     5d0:	88 85       	ldd	r24, Y+8	; 0x08
     5d2:	99 85       	ldd	r25, Y+9	; 0x09
     5d4:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN3rtc8get_timeEv>
     5d8:	a2 2e       	mov	r10, r18
     5da:	b3 2e       	mov	r11, r19
     5dc:	c4 2e       	mov	r12, r20
     5de:	d5 2e       	mov	r13, r21
     5e0:	e6 2e       	mov	r14, r22
     5e2:	f7 2e       	mov	r15, r23
     5e4:	08 2f       	mov	r16, r24
     5e6:	19 2f       	mov	r17, r25
     5e8:	2a 2d       	mov	r18, r10
     5ea:	3b 2d       	mov	r19, r11
     5ec:	4c 2d       	mov	r20, r12
     5ee:	5d 2d       	mov	r21, r13
     5f0:	6e 2d       	mov	r22, r14
     5f2:	7f 2d       	mov	r23, r15
     5f4:	80 2f       	mov	r24, r16
     5f6:	91 2f       	mov	r25, r17
     5f8:	29 83       	std	Y+1, r18	; 0x01
     5fa:	3a 83       	std	Y+2, r19	; 0x02
     5fc:	4b 83       	std	Y+3, r20	; 0x03
     5fe:	5c 83       	std	Y+4, r21	; 0x04
     600:	6d 83       	std	Y+5, r22	; 0x05
     602:	7e 83       	std	Y+6, r23	; 0x06
     604:	8f 83       	std	Y+7, r24	; 0x07
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	5a 81       	ldd	r21, Y+2	; 0x02
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	4b 81       	ldd	r20, Y+3	; 0x03
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	3c 81       	ldd	r19, Y+4	; 0x04
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	2d 81       	ldd	r18, Y+5	; 0x05
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9e 81       	ldd	r25, Y+6	; 0x06
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	8f 81       	ldd	r24, Y+7	; 0x07
     622:	26 2e       	mov	r2, r22
     624:	35 2e       	mov	r3, r21
     626:	44 2e       	mov	r4, r20
     628:	53 2e       	mov	r5, r19
     62a:	62 2e       	mov	r6, r18
     62c:	79 2e       	mov	r7, r25
     62e:	88 2e       	mov	r8, r24
     630:	a2 2c       	mov	r10, r2
     632:	b3 2c       	mov	r11, r3
     634:	c4 2c       	mov	r12, r4
     636:	d5 2c       	mov	r13, r5
     638:	e6 2c       	mov	r14, r6
     63a:	f7 2c       	mov	r15, r7
     63c:	08 2d       	mov	r16, r8
     63e:	19 2d       	mov	r17, r9
     640:	2a 2d       	mov	r18, r10
     642:	3b 2d       	mov	r19, r11
     644:	4c 2d       	mov	r20, r12
     646:	5d 2d       	mov	r21, r13
     648:	6e 2d       	mov	r22, r14
     64a:	7f 2d       	mov	r23, r15
     64c:	80 2f       	mov	r24, r16
     64e:	91 2f       	mov	r25, r17
     650:	29 96       	adiw	r28, 0x09	; 9
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	7f 90       	pop	r7
     676:	6f 90       	pop	r6
     678:	5f 90       	pop	r5
     67a:	4f 90       	pop	r4
     67c:	3f 90       	pop	r3
     67e:	2f 90       	pop	r2
     680:	08 95       	ret

00000682 <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	00 d0       	rcall	.+0      	; 0x688 <_ZN3rtc3setEP8rtc_time+0x6>
     688:	00 d0       	rcall	.+0      	; 0x68a <_ZN3rtc3setEP8rtc_time+0x8>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	7c 83       	std	Y+4, r23	; 0x04
     694:	6b 83       	std	Y+3, r22	; 0x03
     696:	2b 81       	ldd	r18, Y+3	; 0x03
     698:	3c 81       	ldd	r19, Y+4	; 0x04
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	b9 01       	movw	r22, r18
     6a0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN3rtc8set_timeEP8rtc_time>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <main>:
led ledAlarm;
rtc_time rtmCurrent{0x50, 0x59, 0x72, 0x02, 0x11, 0x04, 0x16};
uint8_t valLastPress{ BUT_UP };


int main(){
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	28 97       	sbiw	r28, 0x08	; 8
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61

	rtc_alarm rtaAlarm0 { 0x00, 0x00, 0x80, 0x80 };
     6ca:	19 82       	std	Y+1, r1	; 0x01
     6cc:	1a 82       	std	Y+2, r1	; 0x02
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	8b 83       	std	Y+3, r24	; 0x03
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	8c 83       	std	Y+4, r24	; 0x04
	rtc_alarm rtaAlarm1 { 0x00, 0x80, 0x80, 0x80 };
     6d6:	1d 82       	std	Y+5, r1	; 0x05
     6d8:	80 e8       	ldi	r24, 0x80	; 128
     6da:	8e 83       	std	Y+6, r24	; 0x06
     6dc:	80 e8       	ldi	r24, 0x80	; 128
     6de:	8f 83       	std	Y+7, r24	; 0x07
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	88 87       	std	Y+8, r24	; 0x08

	
	HeadsUp_Init();
     6e4:	26 d0       	rcall	.+76     	; 0x732 <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	ab 81       	ldd	r26, Y+3	; 0x03
     6ec:	bc 81       	ldd	r27, Y+4	; 0x04
     6ee:	8c 01       	movw	r16, r24
     6f0:	9d 01       	movw	r18, r26
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	81 e9       	ldi	r24, 0x91	; 145
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	af 81       	ldd	r26, Y+7	; 0x07
     704:	b8 85       	ldd	r27, Y+8	; 0x08
     706:	8c 01       	movw	r16, r24
     708:	9d 01       	movw	r18, r26
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	81 e9       	ldi	r24, 0x91	; 145
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN3rtc5alarmEhh9rtc_alarm>

	Menu_Main();
     716:	9c d4       	rcall	.+2360   	; 0x1050 <_Z9Menu_Mainv>
	
	return 0;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0

}
     71c:	28 96       	adiw	r28, 0x08	; 8
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <_Z12HeadsUp_Initv>:


void HeadsUp_Init(){
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	60 97       	sbiw	r28, 0x10	; 16
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char uchCurrentTime[ LCD_LINE_SIZE ] ;
	
	
	Test_On_PortA0();
     752:	b9 d1       	rcall	.+882    	; 0xac6 <_Z14Test_On_PortA0v>
	
	rtcDS.set(&rtmCurrent);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	81 e9       	ldi	r24, 0x91	; 145
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	92 df       	rcall	.-220    	; 0x682 <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT( 2 );
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	39 d0       	rcall	.+114    	; 0x7d4 <_Z12Enable_PCINTh>
	Enable_PCINT( 3 );
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	37 d0       	rcall	.+110    	; 0x7d4 <_Z12Enable_PCINTh>
	Enable_PCINT( 8 );
     766:	88 e0       	ldi	r24, 0x08	; 8
     768:	35 d0       	rcall	.+106    	; 0x7d4 <_Z12Enable_PCINTh>
	Enable_PCINT( 9 );
     76a:	89 e0       	ldi	r24, 0x09	; 9
     76c:	33 d0       	rcall	.+102    	; 0x7d4 <_Z12Enable_PCINTh>
	Enable_PCINT( 10 );
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	31 d0       	rcall	.+98     	; 0x7d4 <_Z12Enable_PCINTh>
	sei();
     772:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmCurrent, uchCurrentTime, LCD_LINE_SIZE );
     774:	68 94       	set
     776:	cc 24       	eor	r12, r12
     778:	c4 f8       	bld	r12, 4
     77a:	d1 2c       	mov	r13, r1
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	7c 01       	movw	r14, r24
     782:	00 91 00 01 	lds	r16, 0x0100
     786:	10 91 01 01 	lds	r17, 0x0101
     78a:	20 91 02 01 	lds	r18, 0x0102
     78e:	30 91 03 01 	lds	r19, 0x0103
     792:	40 91 04 01 	lds	r20, 0x0104
     796:	50 91 05 01 	lds	r21, 0x0105
     79a:	60 91 06 01 	lds	r22, 0x0106
     79e:	81 e9       	ldi	r24, 0x91	; 145
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( uchCurrentTime , LCD_LINE_TOP );
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	bc 01       	movw	r22, r24
     7ae:	82 e9       	ldi	r24, 0x92	; 146
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN3lcd5printEPhh>

}
     7b6:	60 96       	adiw	r28, 0x10	; 16
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <_Z12Enable_PCINTh>:


void Enable_PCINT( uint8_t valPC ){
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	89 83       	std	Y+1, r24	; 0x01
	
	if( valPC < 8 ){
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <_Z12Enable_PCINTh+0x14>
     7e6:	59 c0       	rjmp	.+178    	; 0x89a <_Z12Enable_PCINTh+0xc6>
		DDRA &= ~( 1 << ( valPC % 8 ));
     7e8:	81 e2       	ldi	r24, 0x21	; 33
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	21 e2       	ldi	r18, 0x21	; 33
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	62 2f       	mov	r22, r18
     7f6:	29 81       	ldd	r18, Y+1	; 0x01
     7f8:	22 2f       	mov	r18, r18
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	47 70       	andi	r20, 0x07	; 7
     800:	55 27       	eor	r21, r21
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <_Z12Enable_PCINTh+0x38>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	4a 95       	dec	r20
     80e:	e2 f7       	brpl	.-8      	; 0x808 <_Z12Enable_PCINTh+0x34>
     810:	20 95       	com	r18
     812:	26 23       	and	r18, r22
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
		PORTA |= 1 << ( valPC % 8 );
     818:	82 e2       	ldi	r24, 0x22	; 34
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	22 e2       	ldi	r18, 0x22	; 34
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	62 2f       	mov	r22, r18
     826:	29 81       	ldd	r18, Y+1	; 0x01
     828:	22 2f       	mov	r18, r18
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	47 70       	andi	r20, 0x07	; 7
     830:	55 27       	eor	r21, r21
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	02 c0       	rjmp	.+4      	; 0x83c <_Z12Enable_PCINTh+0x68>
     838:	22 0f       	add	r18, r18
     83a:	33 1f       	adc	r19, r19
     83c:	4a 95       	dec	r20
     83e:	e2 f7       	brpl	.-8      	; 0x838 <_Z12Enable_PCINTh+0x64>
     840:	26 2b       	or	r18, r22
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE0;
     846:	88 e6       	ldi	r24, 0x68	; 104
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	28 e6       	ldi	r18, 0x68	; 104
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	20 81       	ld	r18, Z
     852:	21 60       	ori	r18, 0x01	; 1
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
		PCMSK0 |= 1 << ( valPC % 8 );
     858:	8b e6       	ldi	r24, 0x6B	; 107
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2b e6       	ldi	r18, 0x6B	; 107
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	f9 01       	movw	r30, r18
     862:	20 81       	ld	r18, Z
     864:	62 2f       	mov	r22, r18
     866:	29 81       	ldd	r18, Y+1	; 0x01
     868:	22 2f       	mov	r18, r18
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	a9 01       	movw	r20, r18
     86e:	47 70       	andi	r20, 0x07	; 7
     870:	55 27       	eor	r21, r21
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	02 c0       	rjmp	.+4      	; 0x87c <_Z12Enable_PCINTh+0xa8>
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	4a 95       	dec	r20
     87e:	e2 f7       	brpl	.-8      	; 0x878 <_Z12Enable_PCINTh+0xa4>
     880:	26 2b       	or	r18, r22
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF0;
     886:	8b e3       	ldi	r24, 0x3B	; 59
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2b e3       	ldi	r18, 0x3B	; 59
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	21 60       	ori	r18, 0x01	; 1
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	12 c1       	rjmp	.+548    	; 0xabe <_Z12Enable_PCINTh+0x2ea>
	}else if( valPC < 16 ){
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	80 31       	cpi	r24, 0x10	; 16
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <_Z12Enable_PCINTh+0xce>
     8a0:	59 c0       	rjmp	.+178    	; 0x954 <_Z12Enable_PCINTh+0x180>
		DDRB &= ~( 1 << ( valPC % 8 ));
     8a2:	84 e2       	ldi	r24, 0x24	; 36
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	24 e2       	ldi	r18, 0x24	; 36
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	62 2f       	mov	r22, r18
     8b0:	29 81       	ldd	r18, Y+1	; 0x01
     8b2:	22 2f       	mov	r18, r18
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	a9 01       	movw	r20, r18
     8b8:	47 70       	andi	r20, 0x07	; 7
     8ba:	55 27       	eor	r21, r21
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <_Z12Enable_PCINTh+0xf2>
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	4a 95       	dec	r20
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <_Z12Enable_PCINTh+0xee>
     8ca:	20 95       	com	r18
     8cc:	26 23       	and	r18, r22
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
		PORTB |= 1 << ( valPC % 8 );
     8d2:	85 e2       	ldi	r24, 0x25	; 37
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	25 e2       	ldi	r18, 0x25	; 37
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	62 2f       	mov	r22, r18
     8e0:	29 81       	ldd	r18, Y+1	; 0x01
     8e2:	22 2f       	mov	r18, r18
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	a9 01       	movw	r20, r18
     8e8:	47 70       	andi	r20, 0x07	; 7
     8ea:	55 27       	eor	r21, r21
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_Z12Enable_PCINTh+0x122>
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	4a 95       	dec	r20
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <_Z12Enable_PCINTh+0x11e>
     8fa:	26 2b       	or	r18, r22
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE1;
     900:	88 e6       	ldi	r24, 0x68	; 104
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	28 e6       	ldi	r18, 0x68	; 104
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	22 60       	ori	r18, 0x02	; 2
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
		PCMSK1 |= 1 << ( valPC % 8 );
     912:	8c e6       	ldi	r24, 0x6C	; 108
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	2c e6       	ldi	r18, 0x6C	; 108
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	62 2f       	mov	r22, r18
     920:	29 81       	ldd	r18, Y+1	; 0x01
     922:	22 2f       	mov	r18, r18
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	a9 01       	movw	r20, r18
     928:	47 70       	andi	r20, 0x07	; 7
     92a:	55 27       	eor	r21, r21
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <_Z12Enable_PCINTh+0x162>
     932:	22 0f       	add	r18, r18
     934:	33 1f       	adc	r19, r19
     936:	4a 95       	dec	r20
     938:	e2 f7       	brpl	.-8      	; 0x932 <_Z12Enable_PCINTh+0x15e>
     93a:	26 2b       	or	r18, r22
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF1;
     940:	8b e3       	ldi	r24, 0x3B	; 59
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	2b e3       	ldi	r18, 0x3B	; 59
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	22 60       	ori	r18, 0x02	; 2
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
     952:	b5 c0       	rjmp	.+362    	; 0xabe <_Z12Enable_PCINTh+0x2ea>
	}else if( valPC < 24 ){
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	88 31       	cpi	r24, 0x18	; 24
     958:	08 f0       	brcs	.+2      	; 0x95c <_Z12Enable_PCINTh+0x188>
     95a:	59 c0       	rjmp	.+178    	; 0xa0e <_Z12Enable_PCINTh+0x23a>
		DDRC &= ~( 1 << ( valPC % 8 ));
     95c:	87 e2       	ldi	r24, 0x27	; 39
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	27 e2       	ldi	r18, 0x27	; 39
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	62 2f       	mov	r22, r18
     96a:	29 81       	ldd	r18, Y+1	; 0x01
     96c:	22 2f       	mov	r18, r18
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	a9 01       	movw	r20, r18
     972:	47 70       	andi	r20, 0x07	; 7
     974:	55 27       	eor	r21, r21
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <_Z12Enable_PCINTh+0x1ac>
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	4a 95       	dec	r20
     982:	e2 f7       	brpl	.-8      	; 0x97c <_Z12Enable_PCINTh+0x1a8>
     984:	20 95       	com	r18
     986:	26 23       	and	r18, r22
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
		PORTC |= 1 << ( valPC % 8 );
     98c:	88 e2       	ldi	r24, 0x28	; 40
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	28 e2       	ldi	r18, 0x28	; 40
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	62 2f       	mov	r22, r18
     99a:	29 81       	ldd	r18, Y+1	; 0x01
     99c:	22 2f       	mov	r18, r18
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	47 70       	andi	r20, 0x07	; 7
     9a4:	55 27       	eor	r21, r21
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <_Z12Enable_PCINTh+0x1dc>
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	4a 95       	dec	r20
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <_Z12Enable_PCINTh+0x1d8>
     9b4:	26 2b       	or	r18, r22
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE2;
     9ba:	88 e6       	ldi	r24, 0x68	; 104
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	28 e6       	ldi	r18, 0x68	; 104
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	24 60       	ori	r18, 0x04	; 4
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
		PCMSK2 |= 1 << ( valPC % 8 );
     9cc:	8d e6       	ldi	r24, 0x6D	; 109
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	2d e6       	ldi	r18, 0x6D	; 109
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	62 2f       	mov	r22, r18
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	22 2f       	mov	r18, r18
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a9 01       	movw	r20, r18
     9e2:	47 70       	andi	r20, 0x07	; 7
     9e4:	55 27       	eor	r21, r21
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <_Z12Enable_PCINTh+0x21c>
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	4a 95       	dec	r20
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <_Z12Enable_PCINTh+0x218>
     9f4:	26 2b       	or	r18, r22
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF2;
     9fa:	8b e3       	ldi	r24, 0x3B	; 59
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	2b e3       	ldi	r18, 0x3B	; 59
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	f9 01       	movw	r30, r18
     a04:	20 81       	ld	r18, Z
     a06:	24 60       	ori	r18, 0x04	; 4
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	58 c0       	rjmp	.+176    	; 0xabe <_Z12Enable_PCINTh+0x2ea>
	}else{
		DDRD &= ~( 1 << ( valPC % 8 ));
     a0e:	8a e2       	ldi	r24, 0x2A	; 42
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	2a e2       	ldi	r18, 0x2A	; 42
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	62 2f       	mov	r22, r18
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	22 2f       	mov	r18, r18
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	47 70       	andi	r20, 0x07	; 7
     a26:	55 27       	eor	r21, r21
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <_Z12Enable_PCINTh+0x25e>
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	4a 95       	dec	r20
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <_Z12Enable_PCINTh+0x25a>
     a36:	20 95       	com	r18
     a38:	26 23       	and	r18, r22
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
		PORTD |= 1 << ( valPC % 8 );
     a3e:	8b e2       	ldi	r24, 0x2B	; 43
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	2b e2       	ldi	r18, 0x2B	; 43
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	f9 01       	movw	r30, r18
     a48:	20 81       	ld	r18, Z
     a4a:	62 2f       	mov	r22, r18
     a4c:	29 81       	ldd	r18, Y+1	; 0x01
     a4e:	22 2f       	mov	r18, r18
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	a9 01       	movw	r20, r18
     a54:	47 70       	andi	r20, 0x07	; 7
     a56:	55 27       	eor	r21, r21
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <_Z12Enable_PCINTh+0x28e>
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	4a 95       	dec	r20
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <_Z12Enable_PCINTh+0x28a>
     a66:	26 2b       	or	r18, r22
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
		PCICR |= 1 << PCIE3;
     a6c:	88 e6       	ldi	r24, 0x68	; 104
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	28 e6       	ldi	r18, 0x68	; 104
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	28 60       	ori	r18, 0x08	; 8
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
		PCMSK3 |= 1 << ( valPC % 8 );
     a7e:	83 e7       	ldi	r24, 0x73	; 115
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	23 e7       	ldi	r18, 0x73	; 115
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	62 2f       	mov	r22, r18
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	22 2f       	mov	r18, r18
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	a9 01       	movw	r20, r18
     a94:	47 70       	andi	r20, 0x07	; 7
     a96:	55 27       	eor	r21, r21
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <_Z12Enable_PCINTh+0x2ce>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	4a 95       	dec	r20
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <_Z12Enable_PCINTh+0x2ca>
     aa6:	26 2b       	or	r18, r22
     aa8:	fc 01       	movw	r30, r24
     aaa:	20 83       	st	Z, r18
		PCIFR |= 1 << PCIF3;
     aac:	8b e3       	ldi	r24, 0x3B	; 59
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	2b e3       	ldi	r18, 0x3B	; 59
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	f9 01       	movw	r30, r18
     ab6:	20 81       	ld	r18, Z
     ab8:	28 60       	ori	r18, 0x08	; 8
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
	}

}
     abe:	0f 90       	pop	r0
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	6c 97       	sbiw	r28, 0x1c	; 28
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     ada:	81 e2       	ldi	r24, 0x21	; 33
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	21 e2       	ldi	r18, 0x21	; 33
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	21 60       	ori	r18, 0x01	; 1
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     aec:	82 e2       	ldi	r24, 0x22	; 34
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	22 e2       	ldi	r18, 0x22	; 34
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	21 60       	ori	r18, 0x01	; 1
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	aa e7       	ldi	r26, 0x7A	; 122
     b04:	b3 e4       	ldi	r27, 0x43	; 67
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	ab 83       	std	Y+3, r26	; 0x03
     b0c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	4a e7       	ldi	r20, 0x7A	; 122
     b14:	53 e4       	ldi	r21, 0x43	; 67
     b16:	69 81       	ldd	r22, Y+1	; 0x01
     b18:	7a 81       	ldd	r23, Y+2	; 0x02
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	8d 83       	std	Y+5, r24	; 0x05
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	af 83       	std	Y+7, r26	; 0x07
     b2c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e8       	ldi	r20, 0x80	; 128
     b34:	5f e3       	ldi	r21, 0x3F	; 63
     b36:	6d 81       	ldd	r22, Y+5	; 0x05
     b38:	7e 81       	ldd	r23, Y+6	; 0x06
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
     b3c:	98 85       	ldd	r25, Y+8	; 0x08
     b3e:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     b42:	88 23       	and	r24, r24
     b44:	2c f4       	brge	.+10     	; 0xb50 <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9a 87       	std	Y+10, r25	; 0x0a
     b4c:	89 87       	std	Y+9, r24	; 0x09
     b4e:	3f c0       	rjmp	.+126    	; 0xbce <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	3f ef       	ldi	r19, 0xFF	; 255
     b54:	4f e7       	ldi	r20, 0x7F	; 127
     b56:	57 e4       	ldi	r21, 0x47	; 71
     b58:	6d 81       	ldd	r22, Y+5	; 0x05
     b5a:	7e 81       	ldd	r23, Y+6	; 0x06
     b5c:	8f 81       	ldd	r24, Y+7	; 0x07
     b5e:	98 85       	ldd	r25, Y+8	; 0x08
     b60:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     b64:	18 16       	cp	r1, r24
     b66:	4c f5       	brge	.+82     	; 0xbba <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e2       	ldi	r20, 0x20	; 32
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	69 81       	ldd	r22, Y+1	; 0x01
     b72:	7a 81       	ldd	r23, Y+2	; 0x02
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	9a 87       	std	Y+10, r25	; 0x0a
     b8e:	89 87       	std	Y+9, r24	; 0x09
     b90:	0f c0       	rjmp	.+30     	; 0xbb0 <_Z14Test_On_PortA0v+0xea>
     b92:	89 e1       	ldi	r24, 0x19	; 25
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <_Z14Test_On_PortA0v+0xd8>
     ba2:	9c 87       	std	Y+12, r25	; 0x0c
     ba4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9a 87       	std	Y+10, r25	; 0x0a
     bae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	89 2b       	or	r24, r25
     bb6:	69 f7       	brne	.-38     	; 0xb92 <_Z14Test_On_PortA0v+0xcc>
     bb8:	14 c0       	rjmp	.+40     	; 0xbe2 <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bba:	6d 81       	ldd	r22, Y+5	; 0x05
     bbc:	7e 81       	ldd	r23, Y+6	; 0x06
     bbe:	8f 81       	ldd	r24, Y+7	; 0x07
     bc0:	98 85       	ldd	r25, Y+8	; 0x08
     bc2:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9a 87       	std	Y+10, r25	; 0x0a
     bcc:	89 87       	std	Y+9, r24	; 0x09
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	9e 87       	std	Y+14, r25	; 0x0e
     bd4:	8d 87       	std	Y+13, r24	; 0x0d
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <_Z14Test_On_PortA0v+0x114>
     bde:	9e 87       	std	Y+14, r25	; 0x0e
     be0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     be2:	82 e2       	ldi	r24, 0x22	; 34
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	22 e2       	ldi	r18, 0x22	; 34
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	2e 7f       	andi	r18, 0xFE	; 254
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	aa e7       	ldi	r26, 0x7A	; 122
     bfa:	b3 e4       	ldi	r27, 0x43	; 67
     bfc:	8f 87       	std	Y+15, r24	; 0x0f
     bfe:	98 8b       	std	Y+16, r25	; 0x10
     c00:	a9 8b       	std	Y+17, r26	; 0x11
     c02:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a e7       	ldi	r20, 0x7A	; 122
     c0a:	53 e4       	ldi	r21, 0x43	; 67
     c0c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c0e:	78 89       	ldd	r23, Y+16	; 0x10
     c10:	89 89       	ldd	r24, Y+17	; 0x11
     c12:	9a 89       	ldd	r25, Y+18	; 0x12
     c14:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	8b 8b       	std	Y+19, r24	; 0x13
     c1e:	9c 8b       	std	Y+20, r25	; 0x14
     c20:	ad 8b       	std	Y+21, r26	; 0x15
     c22:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	6b 89       	ldd	r22, Y+19	; 0x13
     c2e:	7c 89       	ldd	r23, Y+20	; 0x14
     c30:	8d 89       	ldd	r24, Y+21	; 0x15
     c32:	9e 89       	ldd	r25, Y+22	; 0x16
     c34:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     c38:	88 23       	and	r24, r24
     c3a:	2c f4       	brge	.+10     	; 0xc46 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	98 8f       	std	Y+24, r25	; 0x18
     c42:	8f 8b       	std	Y+23, r24	; 0x17
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	6b 89       	ldd	r22, Y+19	; 0x13
     c50:	7c 89       	ldd	r23, Y+20	; 0x14
     c52:	8d 89       	ldd	r24, Y+21	; 0x15
     c54:	9e 89       	ldd	r25, Y+22	; 0x16
     c56:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     c5a:	18 16       	cp	r1, r24
     c5c:	4c f5       	brge	.+82     	; 0xcb0 <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	6f 85       	ldd	r22, Y+15	; 0x0f
     c68:	78 89       	ldd	r23, Y+16	; 0x10
     c6a:	89 89       	ldd	r24, Y+17	; 0x11
     c6c:	9a 89       	ldd	r25, Y+18	; 0x12
     c6e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	98 8f       	std	Y+24, r25	; 0x18
     c84:	8f 8b       	std	Y+23, r24	; 0x17
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <_Z14Test_On_PortA0v+0x1e0>
     c88:	89 e1       	ldi	r24, 0x19	; 25
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9a 8f       	std	Y+26, r25	; 0x1a
     c8e:	89 8f       	std	Y+25, r24	; 0x19
     c90:	89 8d       	ldd	r24, Y+25	; 0x19
     c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <_Z14Test_On_PortA0v+0x1ce>
     c98:	9a 8f       	std	Y+26, r25	; 0x1a
     c9a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9c:	8f 89       	ldd	r24, Y+23	; 0x17
     c9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	98 8f       	std	Y+24, r25	; 0x18
     ca4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	8f 89       	ldd	r24, Y+23	; 0x17
     ca8:	98 8d       	ldd	r25, Y+24	; 0x18
     caa:	89 2b       	or	r24, r25
     cac:	69 f7       	brne	.-38     	; 0xc88 <_Z14Test_On_PortA0v+0x1c2>
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb0:	6b 89       	ldd	r22, Y+19	; 0x13
     cb2:	7c 89       	ldd	r23, Y+20	; 0x14
     cb4:	8d 89       	ldd	r24, Y+21	; 0x15
     cb6:	9e 89       	ldd	r25, Y+22	; 0x16
     cb8:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	98 8f       	std	Y+24, r25	; 0x18
     cc2:	8f 8b       	std	Y+23, r24	; 0x17
     cc4:	8f 89       	ldd	r24, Y+23	; 0x17
     cc6:	98 8d       	ldd	r25, Y+24	; 0x18
     cc8:	9c 8f       	std	Y+28, r25	; 0x1c
     cca:	8b 8f       	std	Y+27, r24	; 0x1b
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <_Z14Test_On_PortA0v+0x20a>
     cd4:	9c 8f       	std	Y+28, r25	; 0x1c
     cd6:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     cd8:	82 e2       	ldi	r24, 0x22	; 34
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	22 e2       	ldi	r18, 0x22	; 34
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	f9 01       	movw	r30, r18
     ce2:	20 81       	ld	r18, Z
     ce4:	21 60       	ori	r18, 0x01	; 1
     ce6:	fc 01       	movw	r30, r24
     ce8:	20 83       	st	Z, r18
	
}
     cea:	6c 96       	adiw	r28, 0x1c	; 28
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <__vector_4>:


ISR( PCINT0_vect ){
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	00 90 5f 00 	lds	r0, 0x005F
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	00 90 5b 00 	lds	r0, 0x005B
     d0c:	0f 92       	push	r0
     d0e:	af 92       	push	r10
     d10:	bf 92       	push	r11
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	a0 97       	sbiw	r28, 0x20	; 32
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	uint8_t valCounter{ 100 };
     d44:	84 e6       	ldi	r24, 0x64	; 100
     d46:	89 83       	std	Y+1, r24	; 0x01
	uint8_t valIDelta{ valCounter / 100 };
     d48:	99 81       	ldd	r25, Y+1	; 0x01
     d4a:	89 e2       	ldi	r24, 0x29	; 41
     d4c:	98 9f       	mul	r25, r24
     d4e:	81 2d       	mov	r24, r1
     d50:	11 24       	eor	r1, r1
     d52:	82 95       	swap	r24
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t valI{ 0 };
     d58:	1a 82       	std	Y+2, r1	; 0x02

	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     d5a:	80 91 20 00 	lds	r24, 0x0020
     d5e:	88 a3       	std	Y+32, r24	; 0x20
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     d60:	88 a1       	ldd	r24, Y+32	; 0x20
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 70       	andi	r24, 0x08	; 8
     d68:	99 27       	eor	r25, r25
     d6a:	89 2b       	or	r24, r25
     d6c:	09 f0       	breq	.+2      	; 0xd70 <__vector_4+0x74>
     d6e:	1e c1       	rjmp	.+572    	; 0xfac <__vector_4+0x2b0>
		DDRA |= 1 << PORTA4;
     d70:	81 e2       	ldi	r24, 0x21	; 33
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	21 e2       	ldi	r18, 0x21	; 33
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	20 61       	ori	r18, 0x10	; 16
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     d82:	82 e2       	ldi	r24, 0x22	; 34
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	22 e2       	ldi	r18, 0x22	; 34
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	20 61       	ori	r18, 0x10	; 16
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	aa e7       	ldi	r26, 0x7A	; 122
     d9a:	b3 e4       	ldi	r27, 0x43	; 67
     d9c:	8c 83       	std	Y+4, r24	; 0x04
     d9e:	9d 83       	std	Y+5, r25	; 0x05
     da0:	ae 83       	std	Y+6, r26	; 0x06
     da2:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	53 e4       	ldi	r21, 0x43	; 67
     dac:	6c 81       	ldd	r22, Y+4	; 0x04
     dae:	7d 81       	ldd	r23, Y+5	; 0x05
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	9f 81       	ldd	r25, Y+7	; 0x07
     db4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	88 87       	std	Y+8, r24	; 0x08
     dbe:	99 87       	std	Y+9, r25	; 0x09
     dc0:	aa 87       	std	Y+10, r26	; 0x0a
     dc2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	68 85       	ldd	r22, Y+8	; 0x08
     dce:	79 85       	ldd	r23, Y+9	; 0x09
     dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd4:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     dd8:	88 23       	and	r24, r24
     dda:	2c f4       	brge	.+10     	; 0xde6 <__vector_4+0xea>
		__ticks = 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9d 87       	std	Y+13, r25	; 0x0d
     de2:	8c 87       	std	Y+12, r24	; 0x0c
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <__vector_4+0x168>
	else if (__tmp > 65535)
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	68 85       	ldd	r22, Y+8	; 0x08
     df0:	79 85       	ldd	r23, Y+9	; 0x09
     df2:	8a 85       	ldd	r24, Y+10	; 0x0a
     df4:	9b 85       	ldd	r25, Y+11	; 0x0b
     df6:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     dfa:	18 16       	cp	r1, r24
     dfc:	4c f5       	brge	.+82     	; 0xe50 <__vector_4+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	6c 81       	ldd	r22, Y+4	; 0x04
     e08:	7d 81       	ldd	r23, Y+5	; 0x05
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	9f 81       	ldd	r25, Y+7	; 0x07
     e0e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9d 87       	std	Y+13, r25	; 0x0d
     e24:	8c 87       	std	Y+12, r24	; 0x0c
     e26:	0f c0       	rjmp	.+30     	; 0xe46 <__vector_4+0x14a>
     e28:	89 e1       	ldi	r24, 0x19	; 25
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9f 87       	std	Y+15, r25	; 0x0f
     e2e:	8e 87       	std	Y+14, r24	; 0x0e
     e30:	8e 85       	ldd	r24, Y+14	; 0x0e
     e32:	9f 85       	ldd	r25, Y+15	; 0x0f
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <__vector_4+0x138>
     e38:	9f 87       	std	Y+15, r25	; 0x0f
     e3a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	9d 87       	std	Y+13, r25	; 0x0d
     e44:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e46:	8c 85       	ldd	r24, Y+12	; 0x0c
     e48:	9d 85       	ldd	r25, Y+13	; 0x0d
     e4a:	89 2b       	or	r24, r25
     e4c:	69 f7       	brne	.-38     	; 0xe28 <__vector_4+0x12c>
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <__vector_4+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e50:	68 85       	ldd	r22, Y+8	; 0x08
     e52:	79 85       	ldd	r23, Y+9	; 0x09
     e54:	8a 85       	ldd	r24, Y+10	; 0x0a
     e56:	9b 85       	ldd	r25, Y+11	; 0x0b
     e58:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9d 87       	std	Y+13, r25	; 0x0d
     e62:	8c 87       	std	Y+12, r24	; 0x0c
     e64:	8c 85       	ldd	r24, Y+12	; 0x0c
     e66:	9d 85       	ldd	r25, Y+13	; 0x0d
     e68:	99 8b       	std	Y+17, r25	; 0x11
     e6a:	88 8b       	std	Y+16, r24	; 0x10
     e6c:	88 89       	ldd	r24, Y+16	; 0x10
     e6e:	99 89       	ldd	r25, Y+17	; 0x11
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <__vector_4+0x174>
     e74:	99 8b       	std	Y+17, r25	; 0x11
     e76:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
     e78:	82 e2       	ldi	r24, 0x22	; 34
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	22 e2       	ldi	r18, 0x22	; 34
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	2f 7e       	andi	r18, 0xEF	; 239
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
		do{
			ledAlarm.set( valI );
     e8a:	6a 81       	ldd	r22, Y+2	; 0x02
     e8c:	84 e9       	ldi	r24, 0x94	; 148
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN3led3setEh>
			valI = valI + valIDelta;
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	89 0f       	add	r24, r25
     e9a:	8a 83       	std	Y+2, r24	; 0x02
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a8 ec       	ldi	r26, 0xC8	; 200
     ea2:	b2 e4       	ldi	r27, 0x42	; 66
     ea4:	8a 8b       	std	Y+18, r24	; 0x12
     ea6:	9b 8b       	std	Y+19, r25	; 0x13
     ea8:	ac 8b       	std	Y+20, r26	; 0x14
     eaa:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a e7       	ldi	r20, 0x7A	; 122
     eb2:	53 e4       	ldi	r21, 0x43	; 67
     eb4:	6a 89       	ldd	r22, Y+18	; 0x12
     eb6:	7b 89       	ldd	r23, Y+19	; 0x13
     eb8:	8c 89       	ldd	r24, Y+20	; 0x14
     eba:	9d 89       	ldd	r25, Y+21	; 0x15
     ebc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8e 8b       	std	Y+22, r24	; 0x16
     ec6:	9f 8b       	std	Y+23, r25	; 0x17
     ec8:	a8 8f       	std	Y+24, r26	; 0x18
     eca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	6e 89       	ldd	r22, Y+22	; 0x16
     ed6:	7f 89       	ldd	r23, Y+23	; 0x17
     ed8:	88 8d       	ldd	r24, Y+24	; 0x18
     eda:	99 8d       	ldd	r25, Y+25	; 0x19
     edc:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <__vector_4+0x1f2>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9b 8f       	std	Y+27, r25	; 0x1b
     eea:	8a 8f       	std	Y+26, r24	; 0x1a
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <__vector_4+0x270>
	else if (__tmp > 65535)
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	6e 89       	ldd	r22, Y+22	; 0x16
     ef8:	7f 89       	ldd	r23, Y+23	; 0x17
     efa:	88 8d       	ldd	r24, Y+24	; 0x18
     efc:	99 8d       	ldd	r25, Y+25	; 0x19
     efe:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <__vector_4+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	51 e4       	ldi	r21, 0x41	; 65
     f0e:	6a 89       	ldd	r22, Y+18	; 0x12
     f10:	7b 89       	ldd	r23, Y+19	; 0x13
     f12:	8c 89       	ldd	r24, Y+20	; 0x14
     f14:	9d 89       	ldd	r25, Y+21	; 0x15
     f16:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9b 8f       	std	Y+27, r25	; 0x1b
     f2c:	8a 8f       	std	Y+26, r24	; 0x1a
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <__vector_4+0x252>
     f30:	89 e1       	ldi	r24, 0x19	; 25
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9d 8f       	std	Y+29, r25	; 0x1d
     f36:	8c 8f       	std	Y+28, r24	; 0x1c
     f38:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <__vector_4+0x240>
     f40:	9d 8f       	std	Y+29, r25	; 0x1d
     f42:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f46:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9b 8f       	std	Y+27, r25	; 0x1b
     f4c:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f50:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f52:	89 2b       	or	r24, r25
     f54:	69 f7       	brne	.-38     	; 0xf30 <__vector_4+0x234>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <__vector_4+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6e 89       	ldd	r22, Y+22	; 0x16
     f5a:	7f 89       	ldd	r23, Y+23	; 0x17
     f5c:	88 8d       	ldd	r24, Y+24	; 0x18
     f5e:	99 8d       	ldd	r25, Y+25	; 0x19
     f60:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9b 8f       	std	Y+27, r25	; 0x1b
     f6a:	8a 8f       	std	Y+26, r24	; 0x1a
     f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f70:	9f 8f       	std	Y+31, r25	; 0x1f
     f72:	8e 8f       	std	Y+30, r24	; 0x1e
     f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f76:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <__vector_4+0x27c>
     f7c:	9f 8f       	std	Y+31, r25	; 0x1f
     f7e:	8e 8f       	std	Y+30, r24	; 0x1e
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
		DDRA |= 1 << PORTA4;
		PORTA |= ( 1 << PINA4);
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
		do{
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	99 81       	ldd	r25, Y+1	; 0x01
     f8a:	99 23       	and	r25, r25
     f8c:	09 f4       	brne	.+2      	; 0xf90 <__vector_4+0x294>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	88 23       	and	r24, r24
     f92:	09 f0       	breq	.+2      	; 0xf96 <__vector_4+0x29a>
     f94:	7a cf       	rjmp	.-268    	; 0xe8a <__vector_4+0x18e>
			ledAlarm.set( valI );
			valI = valI + valIDelta;
			_delay_ms( 100 );
		}while( --valCounter );
		ledAlarm.set( 0 );
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	84 e9       	ldi	r24, 0x94	; 148
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN3led3setEh>
		rtcDS.clear_interupt( RTC_ALARM_0 );
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	81 e9       	ldi	r24, 0x91	; 145
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3rtc14clear_interuptEh>
     faa:	2d c0       	rjmp	.+90     	; 0x1006 <__vector_4+0x30a>
	}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
     fac:	88 a1       	ldd	r24, Y+32	; 0x20
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	84 70       	andi	r24, 0x04	; 4
     fb4:	99 27       	eor	r25, r25
     fb6:	89 2b       	or	r24, r25
     fb8:	31 f5       	brne	.+76     	; 0x1006 <__vector_4+0x30a>
		rtmCurrent = rtcDS.get();
     fba:	81 e9       	ldi	r24, 0x91	; 145
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	ec da       	rcall	.-2600   	; 0x598 <_ZN3rtc3getEv>
     fc0:	a2 2e       	mov	r10, r18
     fc2:	b3 2e       	mov	r11, r19
     fc4:	c4 2e       	mov	r12, r20
     fc6:	d5 2e       	mov	r13, r21
     fc8:	e6 2e       	mov	r14, r22
     fca:	f7 2e       	mov	r15, r23
     fcc:	08 2f       	mov	r16, r24
     fce:	19 2f       	mov	r17, r25
     fd0:	2a 2d       	mov	r18, r10
     fd2:	3b 2d       	mov	r19, r11
     fd4:	4c 2d       	mov	r20, r12
     fd6:	5d 2d       	mov	r21, r13
     fd8:	6e 2d       	mov	r22, r14
     fda:	7f 2d       	mov	r23, r15
     fdc:	80 2f       	mov	r24, r16
     fde:	91 2f       	mov	r25, r17
     fe0:	20 93 00 01 	sts	0x0100, r18
     fe4:	30 93 01 01 	sts	0x0101, r19
     fe8:	40 93 02 01 	sts	0x0102, r20
     fec:	50 93 03 01 	sts	0x0103, r21
     ff0:	60 93 04 01 	sts	0x0104, r22
     ff4:	70 93 05 01 	sts	0x0105, r23
     ff8:	80 93 06 01 	sts	0x0106, r24
		rtcDS.clear_interupt( RTC_ALARM_1 );
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	81 e9       	ldi	r24, 0x91	; 145
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3rtc14clear_interuptEh>
	}
	
}
    1006:	a0 96       	adiw	r28, 0x20	; 32
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	0f 90       	pop	r0
    1040:	00 92 5b 00 	sts	0x005B, r0
    1044:	0f 90       	pop	r0
    1046:	00 92 5f 00 	sts	0x005F, r0
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <_Z9Menu_Mainv>:


void Menu_Main(){
    1050:	ef 92       	push	r14
    1052:	0f 93       	push	r16
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	c7 52       	subi	r28, 0x27	; 39
    105e:	d1 40       	sbci	r29, 0x01	; 1
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	
	const char chrMenu[ MENU_LEN_MAX ][ MENU_WID_MAX ]{ "ALRM", "BAT  %", "OPTS" };
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	31 e0       	ldi	r19, 0x01	; 1
    106e:	ce 01       	movw	r24, r28
    1070:	86 96       	adiw	r24, 0x26	; 38
    1072:	fc 01       	movw	r30, r24
    1074:	a9 01       	movw	r20, r18
    1076:	11 92       	st	Z+, r1
    1078:	41 50       	subi	r20, 0x01	; 1
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	e1 f7       	brne	.-8      	; 0x1076 <_Z9Menu_Mainv+0x26>
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	e7 e0       	ldi	r30, 0x07	; 7
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	de 01       	movw	r26, r28
    1086:	96 96       	adiw	r26, 0x26	; 38
    1088:	01 90       	ld	r0, Z+
    108a:	0d 92       	st	X+, r0
    108c:	8a 95       	dec	r24
    108e:	e1 f7       	brne	.-8      	; 0x1088 <_Z9Menu_Mainv+0x38>
    1090:	2b e0       	ldi	r18, 0x0B	; 11
    1092:	ce 01       	movw	r24, r28
    1094:	8b 96       	adiw	r24, 0x2b	; 43
    1096:	fc 01       	movw	r30, r24
    1098:	32 2f       	mov	r19, r18
    109a:	11 92       	st	Z+, r1
    109c:	3a 95       	dec	r19
    109e:	e9 f7       	brne	.-6      	; 0x109a <_Z9Menu_Mainv+0x4a>
    10a0:	87 e0       	ldi	r24, 0x07	; 7
    10a2:	e7 e1       	ldi	r30, 0x17	; 23
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	de 01       	movw	r26, r28
    10a8:	d6 96       	adiw	r26, 0x36	; 54
    10aa:	01 90       	ld	r0, Z+
    10ac:	0d 92       	st	X+, r0
    10ae:	8a 95       	dec	r24
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <_Z9Menu_Mainv+0x5a>
    10b2:	29 e0       	ldi	r18, 0x09	; 9
    10b4:	ce 01       	movw	r24, r28
    10b6:	cd 96       	adiw	r24, 0x3d	; 61
    10b8:	fc 01       	movw	r30, r24
    10ba:	32 2f       	mov	r19, r18
    10bc:	11 92       	st	Z+, r1
    10be:	3a 95       	dec	r19
    10c0:	e9 f7       	brne	.-6      	; 0x10bc <_Z9Menu_Mainv+0x6c>
    10c2:	ce 01       	movw	r24, r28
    10c4:	8a 5b       	subi	r24, 0xBA	; 186
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	25 e0       	ldi	r18, 0x05	; 5
    10ca:	e7 e2       	ldi	r30, 0x27	; 39
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	dc 01       	movw	r26, r24
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	2a 95       	dec	r18
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <_Z9Menu_Mainv+0x80>
    10d8:	2b e0       	ldi	r18, 0x0B	; 11
    10da:	05 96       	adiw	r24, 0x05	; 5
    10dc:	fc 01       	movw	r30, r24
    10de:	32 2f       	mov	r19, r18
    10e0:	11 92       	st	Z+, r1
    10e2:	3a 95       	dec	r19
    10e4:	e9 f7       	brne	.-6      	; 0x10e0 <_Z9Menu_Mainv+0x90>
	unsigned char chrBat[2]{'0','0'};
    10e6:	80 e3       	ldi	r24, 0x30	; 48
    10e8:	8c 8b       	std	Y+20, r24	; 0x14
    10ea:	80 e3       	ldi	r24, 0x30	; 48
    10ec:	8d 8b       	std	Y+21, r24	; 0x15
	unsigned char chrMenuOut[ LCD_LINE_SIZE ];
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t valCursorState{ CURSOR_OFF };
    10f2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valCursorDivider{ 0 };
    10f4:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t valBatUpdate{ 0 };
    10f6:	1d 82       	std	Y+5, r1	; 0x05
    10f8:	1c 82       	std	Y+4, r1	; 0x04

	extern uint8_t valLastPress;
	
	for(;;){	
		build_menu_main( chrMenu, chrMenuOut, valCursorState, MAIN_PAD_OFF, MAIN_LENGTH, MAIN_MAX );
    10fa:	be 01       	movw	r22, r28
    10fc:	6a 5e       	subi	r22, 0xEA	; 234
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	ce 01       	movw	r24, r28
    1102:	86 96       	adiw	r24, 0x26	; 38
    1104:	0f 2e       	mov	r0, r31
    1106:	f7 e0       	ldi	r31, 0x07	; 7
    1108:	ef 2e       	mov	r14, r31
    110a:	f0 2d       	mov	r31, r0
    110c:	03 e0       	ldi	r16, 0x03	; 3
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	4a 81       	ldd	r20, Y+2	; 0x02
    1112:	f0 d0       	rcall	.+480    	; 0x12f4 <_Z15build_menu_mainPA16_KcPhhhhh>
		if( valBatUpdate == 0 ){
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	89 2b       	or	r24, r25
    111a:	a9 f4       	brne	.+42     	; 0x1146 <_Z9Menu_Mainv+0xf6>
			chrBat[0] = ( batLiPo.get() >> 4 ) + 0x30;
    111c:	83 e9       	ldi	r24, 0x93	; 147
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	3a d8       	rcall	.-3980   	; 0x196 <_ZN3bat3getEv>
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	95 95       	asr	r25
    1128:	87 95       	ror	r24
    112a:	95 95       	asr	r25
    112c:	87 95       	ror	r24
    112e:	95 95       	asr	r25
    1130:	87 95       	ror	r24
    1132:	95 95       	asr	r25
    1134:	87 95       	ror	r24
    1136:	80 5d       	subi	r24, 0xD0	; 208
    1138:	8c 8b       	std	Y+20, r24	; 0x14
			chrBat[1] = ( batLiPo.get() & 0x0F ) + 0x30;
    113a:	83 e9       	ldi	r24, 0x93	; 147
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	2b d8       	rcall	.-4010   	; 0x196 <_ZN3bat3getEv>
    1140:	8f 70       	andi	r24, 0x0F	; 15
    1142:	80 5d       	subi	r24, 0xD0	; 208
    1144:	8d 8b       	std	Y+21, r24	; 0x15
		}
		memcpy( ( void* )( &chrMenuOut + 8 ), ( void* )&chrBat, sizeof( chrBat ));
    1146:	ce 01       	movw	r24, r28
    1148:	46 96       	adiw	r24, 0x16	; 22
    114a:	80 58       	subi	r24, 0x80	; 128
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	2c 89       	ldd	r18, Y+20	; 0x14
    1150:	3d 89       	ldd	r19, Y+21	; 0x15
    1152:	fc 01       	movw	r30, r24
    1154:	31 83       	std	Z+1, r19	; 0x01
    1156:	20 83       	st	Z, r18
		valBatUpdate = ( valBatUpdate + 1 ) % 100;
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	ac 01       	movw	r20, r24
    115e:	4f 5f       	subi	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	ca 01       	movw	r24, r20
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	9c 01       	movw	r18, r24
    116e:	ab e7       	ldi	r26, 0x7B	; 123
    1170:	b4 e1       	ldi	r27, 0x14	; 20
    1172:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__umulhisi3>
    1176:	9c 01       	movw	r18, r24
    1178:	36 95       	lsr	r19
    117a:	27 95       	ror	r18
    117c:	64 e6       	ldi	r22, 0x64	; 100
    117e:	62 9f       	mul	r22, r18
    1180:	c0 01       	movw	r24, r0
    1182:	63 9f       	mul	r22, r19
    1184:	90 0d       	add	r25, r0
    1186:	11 24       	eor	r1, r1
    1188:	9a 01       	movw	r18, r20
    118a:	28 1b       	sub	r18, r24
    118c:	39 0b       	sbc	r19, r25
    118e:	c9 01       	movw	r24, r18
    1190:	9d 83       	std	Y+5, r25	; 0x05
    1192:	8c 83       	std	Y+4, r24	; 0x04
		lcdNHD.print( chrMenuOut, LCD_LINE_BOTTOM );
    1194:	ce 01       	movw	r24, r28
    1196:	46 96       	adiw	r24, 0x16	; 22
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	bc 01       	movw	r22, r24
    119c:	82 e9       	ldi	r24, 0x92	; 146
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN3lcd5printEPhh>
	
		if( valLastPress == 0x03 ){
    11a4:	80 91 95 01 	lds	r24, 0x0195
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	71 f4       	brne	.+28     	; 0x11c8 <_Z9Menu_Mainv+0x178>
			valMenuState = ( valMenuState + 0x03 ) % 0x02;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	03 96       	adiw	r24, 0x03	; 3
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	90 78       	andi	r25, 0x80	; 128
    11b8:	99 23       	and	r25, r25
    11ba:	24 f4       	brge	.+8      	; 0x11c4 <_Z9Menu_Mainv+0x174>
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	8e 6f       	ori	r24, 0xFE	; 254
    11c0:	9f 6f       	ori	r25, 0xFF	; 255
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <_Z9Menu_Mainv+0x19a>
		}else if( valLastPress == 0x02 ){
    11c8:	80 91 95 01 	lds	r24, 0x0195
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	69 f4       	brne	.+26     	; 0x11ea <_Z9Menu_Mainv+0x19a>
			valMenuState = ( valMenuState + 0x01 ) % 0x02;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	90 78       	andi	r25, 0x80	; 128
    11dc:	99 23       	and	r25, r25
    11de:	24 f4       	brge	.+8      	; 0x11e8 <_Z9Menu_Mainv+0x198>
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	8e 6f       	ori	r24, 0xFE	; 254
    11e4:	9f 6f       	ori	r25, 0xFF	; 255
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
		}
		valLastPress = 0;
    11ea:	10 92 95 01 	sts	0x0195, r1
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	21 e1       	ldi	r18, 0x11	; 17
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	b9 01       	movw	r22, r18
    11fc:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divmodhi4>
    1200:	8b 83       	std	Y+3, r24	; 0x03
		if( valCursorDivider == 0 ){
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 23       	and	r24, r24
    1206:	19 f4       	brne	.+6      	; 0x120e <_Z9Menu_Mainv+0x1be>
					valCursorState = ~valCursorState;
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 95       	com	r24
    120c:	8a 83       	std	Y+2, r24	; 0x02
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 ef       	ldi	r26, 0xF0	; 240
    1214:	b1 e4       	ldi	r27, 0x41	; 65
    1216:	8e 83       	std	Y+6, r24	; 0x06
    1218:	9f 83       	std	Y+7, r25	; 0x07
    121a:	a8 87       	std	Y+8, r26	; 0x08
    121c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a e7       	ldi	r20, 0x7A	; 122
    1224:	53 e4       	ldi	r21, 0x43	; 67
    1226:	6e 81       	ldd	r22, Y+6	; 0x06
    1228:	7f 81       	ldd	r23, Y+7	; 0x07
    122a:	88 85       	ldd	r24, Y+8	; 0x08
    122c:	99 85       	ldd	r25, Y+9	; 0x09
    122e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8a 87       	std	Y+10, r24	; 0x0a
    1238:	9b 87       	std	Y+11, r25	; 0x0b
    123a:	ac 87       	std	Y+12, r26	; 0x0c
    123c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	6a 85       	ldd	r22, Y+10	; 0x0a
    1248:	7b 85       	ldd	r23, Y+11	; 0x0b
    124a:	8c 85       	ldd	r24, Y+12	; 0x0c
    124c:	9d 85       	ldd	r25, Y+13	; 0x0d
    124e:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <_Z9Menu_Mainv+0x210>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9f 87       	std	Y+15, r25	; 0x0f
    125c:	8e 87       	std	Y+14, r24	; 0x0e
    125e:	3f c0       	rjmp	.+126    	; 0x12de <_Z9Menu_Mainv+0x28e>
	else if (__tmp > 65535)
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	4f e7       	ldi	r20, 0x7F	; 127
    1266:	57 e4       	ldi	r21, 0x47	; 71
    1268:	6a 85       	ldd	r22, Y+10	; 0x0a
    126a:	7b 85       	ldd	r23, Y+11	; 0x0b
    126c:	8c 85       	ldd	r24, Y+12	; 0x0c
    126e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1270:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <_Z9Menu_Mainv+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e2       	ldi	r20, 0x20	; 32
    127e:	51 e4       	ldi	r21, 0x41	; 65
    1280:	6e 81       	ldd	r22, Y+6	; 0x06
    1282:	7f 81       	ldd	r23, Y+7	; 0x07
    1284:	88 85       	ldd	r24, Y+8	; 0x08
    1286:	99 85       	ldd	r25, Y+9	; 0x09
    1288:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9f 87       	std	Y+15, r25	; 0x0f
    129e:	8e 87       	std	Y+14, r24	; 0x0e
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <_Z9Menu_Mainv+0x270>
    12a2:	89 e1       	ldi	r24, 0x19	; 25
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	99 8b       	std	Y+17, r25	; 0x11
    12a8:	88 8b       	std	Y+16, r24	; 0x10
    12aa:	88 89       	ldd	r24, Y+16	; 0x10
    12ac:	99 89       	ldd	r25, Y+17	; 0x11
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <_Z9Menu_Mainv+0x25e>
    12b2:	99 8b       	std	Y+17, r25	; 0x11
    12b4:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9f 87       	std	Y+15, r25	; 0x0f
    12be:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12c4:	89 2b       	or	r24, r25
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <_Z9Menu_Mainv+0x252>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <_Z9Menu_Mainv+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    12cc:	7b 85       	ldd	r23, Y+11	; 0x0b
    12ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d2:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9f 87       	std	Y+15, r25	; 0x0f
    12dc:	8e 87       	std	Y+14, r24	; 0x0e
    12de:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e2:	9b 8b       	std	Y+19, r25	; 0x13
    12e4:	8a 8b       	std	Y+18, r24	; 0x12
    12e6:	8a 89       	ldd	r24, Y+18	; 0x12
    12e8:	9b 89       	ldd	r25, Y+19	; 0x13
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <_Z9Menu_Mainv+0x29a>
    12ee:	9b 8b       	std	Y+19, r25	; 0x13
    12f0:	8a 8b       	std	Y+18, r24	; 0x12
		}
		_delay_ms(30);
	}
    12f2:	03 cf       	rjmp	.-506    	; 0x10fa <_Z9Menu_Mainv+0xaa>

000012f4 <_Z15build_menu_mainPA16_KcPhhhhh>:
	
}


void build_menu_main( const char chpStates[MENU_LEN_MAX][MENU_WID_MAX], unsigned char* chrReturn, uint8_t valCursPos, uint8_t valPad, uint8_t valLen, uint8_t valWid ){
    12f4:	ef 92       	push	r14
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	6f 97       	sbiw	r28, 0x1f	; 31
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	99 8f       	std	Y+25, r25	; 0x19
    1310:	88 8f       	std	Y+24, r24	; 0x18
    1312:	7b 8f       	std	Y+27, r23	; 0x1b
    1314:	6a 8f       	std	Y+26, r22	; 0x1a
    1316:	4c 8f       	std	Y+28, r20	; 0x1c
    1318:	2d 8f       	std	Y+29, r18	; 0x1d
    131a:	0e 8f       	std	Y+30, r16	; 0x1e
    131c:	ef 8e       	std	Y+31, r14	; 0x1f
	
	unsigned char chrOutput[ LCD_LINE_SIZE ];
	uint8_t valDivPos{ 0 };
    131e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursStart{ 0 };
    1320:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t valCursEnd{ 0 };
    1322:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valN{ 1 };
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8c 83       	std	Y+4, r24	; 0x04
	
	
	valDivPos = (( strlen( chpStates[0] ) < 2 ) | ( sizeof( chrOutput ) <= strlen( chpStates[0] )) ? 0 : strlen( chpStates[0] ) + 1 );	
    1328:	88 8d       	ldd	r24, Y+24	; 0x18
    132a:	99 8d       	ldd	r25, Y+25	; 0x19
    132c:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    1330:	11 e0       	ldi	r17, 0x01	; 1
    1332:	02 97       	sbiw	r24, 0x02	; 2
    1334:	08 f4       	brcc	.+2      	; 0x1338 <_Z15build_menu_mainPA16_KcPhhhhh+0x44>
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	88 8d       	ldd	r24, Y+24	; 0x18
    133a:	99 8d       	ldd	r25, Y+25	; 0x19
    133c:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	40 97       	sbiw	r24, 0x10	; 16
    1344:	08 f0       	brcs	.+2      	; 0x1348 <_Z15build_menu_mainPA16_KcPhhhhh+0x54>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	81 2f       	mov	r24, r17
    134a:	82 23       	and	r24, r18
    134c:	88 23       	and	r24, r24
    134e:	31 f0       	breq	.+12     	; 0x135c <_Z15build_menu_mainPA16_KcPhhhhh+0x68>
    1350:	88 8d       	ldd	r24, Y+24	; 0x18
    1352:	99 8d       	ldd	r25, Y+25	; 0x19
    1354:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	01 c0       	rjmp	.+2      	; 0x135e <_Z15build_menu_mainPA16_KcPhhhhh+0x6a>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	89 83       	std	Y+1, r24	; 0x01
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    1360:	1d 82       	std	Y+5, r1	; 0x05
    1362:	34 c0       	rjmp	.+104    	; 0x13cc <_Z15build_menu_mainPA16_KcPhhhhh+0xd8>
		if( valR == 0 ){
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	88 23       	and	r24, r24
    1368:	11 f4       	brne	.+4      	; 0x136e <_Z15build_menu_mainPA16_KcPhhhhh+0x7a>
			valCursStart = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8a 83       	std	Y+2, r24	; 0x02
		}
		valCursStart += strlen( chpStates[valR] );
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	82 95       	swap	r24
    1376:	92 95       	swap	r25
    1378:	90 7f       	andi	r25, 0xF0	; 240
    137a:	98 27       	eor	r25, r24
    137c:	80 7f       	andi	r24, 0xF0	; 240
    137e:	98 27       	eor	r25, r24
    1380:	28 8d       	ldd	r18, Y+24	; 0x18
    1382:	39 8d       	ldd	r19, Y+25	; 0x19
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    138c:	98 2f       	mov	r25, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	89 0f       	add	r24, r25
    1392:	8a 83       	std	Y+2, r24	; 0x02
		valCursEnd += strlen( chpStates[valR] );
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 95       	swap	r24
    139c:	92 95       	swap	r25
    139e:	90 7f       	andi	r25, 0xF0	; 240
    13a0:	98 27       	eor	r25, r24
    13a2:	80 7f       	andi	r24, 0xF0	; 240
    13a4:	98 27       	eor	r25, r24
    13a6:	28 8d       	ldd	r18, Y+24	; 0x18
    13a8:	39 8d       	ldd	r19, Y+25	; 0x19
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    13b2:	98 2f       	mov	r25, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	89 0f       	add	r24, r25
    13b8:	8b 83       	std	Y+3, r24	; 0x03
		valCursStart++;
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	8a 83       	std	Y+2, r24	; 0x02
		valCursEnd++;
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t valCursEnd{ 0 };
	uint8_t valN{ 1 };
	
	
	valDivPos = (( strlen( chpStates[0] ) < 2 ) | ( sizeof( chrOutput ) <= strlen( chpStates[0] )) ? 0 : strlen( chpStates[0] ) + 1 );	
	for( uint8_t valR = 0; valR < valCursPos; valR++ ){
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13d0:	98 17       	cp	r25, r24
    13d2:	40 f2       	brcs	.-112    	; 0x1364 <_Z15build_menu_mainPA16_KcPhhhhh+0x70>
		valCursStart += strlen( chpStates[valR] );
		valCursEnd += strlen( chpStates[valR] );
		valCursStart++;
		valCursEnd++;
	}
	valCursEnd += strlen( chpStates[valCursPos] );
    13d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	82 95       	swap	r24
    13dc:	92 95       	swap	r25
    13de:	90 7f       	andi	r25, 0xF0	; 240
    13e0:	98 27       	eor	r25, r24
    13e2:	80 7f       	andi	r24, 0xF0	; 240
    13e4:	98 27       	eor	r25, r24
    13e6:	28 8d       	ldd	r18, Y+24	; 0x18
    13e8:	39 8d       	ldd	r19, Y+25	; 0x19
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    13f2:	98 2f       	mov	r25, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	89 0f       	add	r24, r25
    13f8:	8b 83       	std	Y+3, r24	; 0x03
	valCursEnd++;
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	8b 83       	std	Y+3, r24	; 0x03
	valCursStart = ( valCursStart > sizeof( chrOutput ) ? 0 : valCursStart );
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	41 97       	sbiw	r24, 0x11	; 17
    1408:	10 f4       	brcc	.+4      	; 0x140e <_Z15build_menu_mainPA16_KcPhhhhh+0x11a>
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_Z15build_menu_mainPA16_KcPhhhhh+0x11c>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	8a 83       	std	Y+2, r24	; 0x02
	valCursEnd = ( valCursStart == 0 ) ? 0 : ( valCursEnd >= sizeof( chrOutput )) ? sizeof( chrOutput ) : valCursEnd;
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	88 23       	and	r24, r24
    1416:	49 f0       	breq	.+18     	; 0x142a <_Z15build_menu_mainPA16_KcPhhhhh+0x136>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	40 97       	sbiw	r24, 0x10	; 16
    1420:	10 f0       	brcs	.+4      	; 0x1426 <_Z15build_menu_mainPA16_KcPhhhhh+0x132>
    1422:	80 e1       	ldi	r24, 0x10	; 16
    1424:	03 c0       	rjmp	.+6      	; 0x142c <_Z15build_menu_mainPA16_KcPhhhhh+0x138>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	01 c0       	rjmp	.+2      	; 0x142c <_Z15build_menu_mainPA16_KcPhhhhh+0x138>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	8b 83       	std	Y+3, r24	; 0x03
	
	valDivPos = ( valPad != MAIN_PAD_ON ) ? valDivPos : ( valDivPos >= ( sizeof( chrOutput ) - 1 )) ? 0 : ( valDivPos + 1 );
    142e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1430:	8f 3f       	cpi	r24, 0xFF	; 255
    1432:	69 f4       	brne	.+26     	; 0x144e <_Z15build_menu_mainPA16_KcPhhhhh+0x15a>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8f e0       	ldi	r24, 0x0F	; 15
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	18 f4       	brcc	.+6      	; 0x144a <_Z15build_menu_mainPA16_KcPhhhhh+0x156>
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <_Z15build_menu_mainPA16_KcPhhhhh+0x15c>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <_Z15build_menu_mainPA16_KcPhhhhh+0x15c>
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	89 83       	std	Y+1, r24	; 0x01
	valCursStart = ( valPad != MAIN_PAD_ON ) ? valCursStart : ( valCursStart + 1 );
    1452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1454:	8f 3f       	cpi	r24, 0xFF	; 255
    1456:	19 f4       	brne	.+6      	; 0x145e <_Z15build_menu_mainPA16_KcPhhhhh+0x16a>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <_Z15build_menu_mainPA16_KcPhhhhh+0x16c>
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	8a 83       	std	Y+2, r24	; 0x02
	valCursEnd = ( valPad != MAIN_PAD_ON ) ? valCursEnd : ( valCursEnd - 1 );
    1462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	19 f4       	brne	.+6      	; 0x146e <_Z15build_menu_mainPA16_KcPhhhhh+0x17a>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <_Z15build_menu_mainPA16_KcPhhhhh+0x17c>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	8b 83       	std	Y+3, r24	; 0x03
	
	if( valPad == MAIN_PAD_ON ){
    1472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1474:	8f 3f       	cpi	r24, 0xFF	; 255
    1476:	71 f4       	brne	.+28     	; 0x1494 <_Z15build_menu_mainPA16_KcPhhhhh+0x1a0>
		chrOutput[ valN ] = ' ';
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9e 01       	movw	r18, r28
    1480:	28 5f       	subi	r18, 0xF8	; 248
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	20 e2       	ldi	r18, 0x20	; 32
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
		valN++;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	8e 83       	std	Y+6, r24	; 0x06
    1498:	f3 c0       	rjmp	.+486    	; 0x1680 <_Z15build_menu_mainPA16_KcPhhhhh+0x38c>
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	8f 83       	std	Y+7, r24	; 0x07
    149e:	e8 c0       	rjmp	.+464    	; 0x1670 <_Z15build_menu_mainPA16_KcPhhhhh+0x37c>
			if( valN == valDivPos ){
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	98 17       	cp	r25, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <_Z15build_menu_mainPA16_KcPhhhhh+0x1b6>
    14a8:	53 c0       	rjmp	.+166    	; 0x1550 <_Z15build_menu_mainPA16_KcPhhhhh+0x25c>
				chrOutput[ valN - 1 ] = '|';
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9e 01       	movw	r18, r28
    14b4:	28 5f       	subi	r18, 0xF8	; 248
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	82 0f       	add	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	2c e7       	ldi	r18, 0x7C	; 124
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
				valDivPos = (( sizeof( chrOutput ) - ( valDivPos + 1  )) < strlen( chpStates[valQ] )) ? 0 : ( valDivPos + strlen( chpStates[valQ] )) + 1;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	20 e1       	ldi	r18, 0x10	; 16
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	48 1b       	sub	r20, r24
    14d0:	59 0b       	sbc	r21, r25
    14d2:	ca 01       	movw	r24, r20
    14d4:	8c 01       	movw	r16, r24
    14d6:	01 50       	subi	r16, 0x01	; 1
    14d8:	11 09       	sbc	r17, r1
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	82 95       	swap	r24
    14e2:	92 95       	swap	r25
    14e4:	90 7f       	andi	r25, 0xF0	; 240
    14e6:	98 27       	eor	r25, r24
    14e8:	80 7f       	andi	r24, 0xF0	; 240
    14ea:	98 27       	eor	r25, r24
    14ec:	28 8d       	ldd	r18, Y+24	; 0x18
    14ee:	39 8d       	ldd	r19, Y+25	; 0x19
    14f0:	82 0f       	add	r24, r18
    14f2:	93 1f       	adc	r25, r19
    14f4:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    14f8:	08 17       	cp	r16, r24
    14fa:	19 07       	cpc	r17, r25
    14fc:	a0 f0       	brcs	.+40     	; 0x1526 <_Z15build_menu_mainPA16_KcPhhhhh+0x232>
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	82 95       	swap	r24
    1506:	92 95       	swap	r25
    1508:	90 7f       	andi	r25, 0xF0	; 240
    150a:	98 27       	eor	r25, r24
    150c:	80 7f       	andi	r24, 0xF0	; 240
    150e:	98 27       	eor	r25, r24
    1510:	28 8d       	ldd	r18, Y+24	; 0x18
    1512:	39 8d       	ldd	r19, Y+25	; 0x19
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	0e 94 03 1b 	call	0x3606	; 0x3606 <strlen>
    151c:	98 2f       	mov	r25, r24
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	89 0f       	add	r24, r25
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <_Z15build_menu_mainPA16_KcPhhhhh+0x234>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	89 83       	std	Y+1, r24	; 0x01
				valDivPos = ( valPad != MAIN_PAD_ON ) ? valDivPos : ( valDivPos >= ( sizeof( chrOutput ) - 1 )) ? 0 : ( valDivPos + 1 );
    152a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    152c:	8f 3f       	cpi	r24, 0xFF	; 255
    152e:	69 f4       	brne	.+26     	; 0x154a <_Z15build_menu_mainPA16_KcPhhhhh+0x256>
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8f e0       	ldi	r24, 0x0F	; 15
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	28 17       	cp	r18, r24
    153c:	39 07       	cpc	r19, r25
    153e:	18 f4       	brcc	.+6      	; 0x1546 <_Z15build_menu_mainPA16_KcPhhhhh+0x252>
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	03 c0       	rjmp	.+6      	; 0x154c <_Z15build_menu_mainPA16_KcPhhhhh+0x258>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	01 c0       	rjmp	.+2      	; 0x154c <_Z15build_menu_mainPA16_KcPhhhhh+0x258>
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	79 c0       	rjmp	.+242    	; 0x1642 <_Z15build_menu_mainPA16_KcPhhhhh+0x34e>
			}else if(( valN >= valCursStart ) & ( valN <= valCursEnd )){
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 17       	cp	r18, r24
    1558:	08 f4       	brcc	.+2      	; 0x155c <_Z15build_menu_mainPA16_KcPhhhhh+0x268>
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	3c 81       	ldd	r19, Y+4	; 0x04
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	23 17       	cp	r18, r19
    1564:	08 f4       	brcc	.+2      	; 0x1568 <_Z15build_menu_mainPA16_KcPhhhhh+0x274>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	89 23       	and	r24, r25
    156a:	88 23       	and	r24, r24
    156c:	69 f0       	breq	.+26     	; 0x1588 <_Z15build_menu_mainPA16_KcPhhhhh+0x294>
				chrOutput[ valN - 1 ] = '_';
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	9e 01       	movw	r18, r28
    1578:	28 5f       	subi	r18, 0xF8	; 248
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	82 0f       	add	r24, r18
    157e:	93 1f       	adc	r25, r19
    1580:	2f e5       	ldi	r18, 0x5F	; 95
    1582:	fc 01       	movw	r30, r24
    1584:	20 83       	st	Z, r18
    1586:	5d c0       	rjmp	.+186    	; 0x1642 <_Z15build_menu_mainPA16_KcPhhhhh+0x34e>
			}else if(( valPad == MAIN_PAD_ON ) & ( valN == sizeof( chrOutput ))){
    1588:	31 e0       	ldi	r19, 0x01	; 1
    158a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158c:	8f 3f       	cpi	r24, 0xFF	; 255
    158e:	09 f0       	breq	.+2      	; 0x1592 <_Z15build_menu_mainPA16_KcPhhhhh+0x29e>
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	40 97       	sbiw	r24, 0x10	; 16
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_Z15build_menu_mainPA16_KcPhhhhh+0x2ac>
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	83 2f       	mov	r24, r19
    15a2:	82 23       	and	r24, r18
    15a4:	88 23       	and	r24, r24
    15a6:	69 f0       	breq	.+26     	; 0x15c2 <_Z15build_menu_mainPA16_KcPhhhhh+0x2ce>
				chrOutput[ valN - 1 ] = ' ';
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9e 01       	movw	r18, r28
    15b2:	28 5f       	subi	r18, 0xF8	; 248
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	82 0f       	add	r24, r18
    15b8:	93 1f       	adc	r25, r19
    15ba:	20 e2       	ldi	r18, 0x20	; 32
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
    15c0:	40 c0       	rjmp	.+128    	; 0x1642 <_Z15build_menu_mainPA16_KcPhhhhh+0x34e>
			}else{
				if( strlen( &chpStates[ valQ - 1 ][ valJ - 1 ] ) != 0 ){
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	90 4f       	sbci	r25, 0xF0	; 240
    15cc:	82 95       	swap	r24
    15ce:	92 95       	swap	r25
    15d0:	90 7f       	andi	r25, 0xF0	; 240
    15d2:	98 27       	eor	r25, r24
    15d4:	80 7f       	andi	r24, 0xF0	; 240
    15d6:	98 27       	eor	r25, r24
    15d8:	28 8d       	ldd	r18, Y+24	; 0x18
    15da:	39 8d       	ldd	r19, Y+25	; 0x19
    15dc:	28 0f       	add	r18, r24
    15de:	39 1f       	adc	r19, r25
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	82 0f       	add	r24, r18
    15ea:	93 1f       	adc	r25, r19
    15ec:	fc 01       	movw	r30, r24
    15ee:	80 81       	ld	r24, Z
    15f0:	88 23       	and	r24, r24
    15f2:	21 f1       	breq	.+72     	; 0x163c <_Z15build_menu_mainPA16_KcPhhhhh+0x348>
					memcpy( ( void* )&chrOutput[ valN - 1 ], ( void* )&chpStates[ valQ - 1 ][ valJ - 1 ], 1);
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9e 01       	movw	r18, r28
    15fe:	28 5f       	subi	r18, 0xF8	; 248
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	82 0f       	add	r24, r18
    1604:	93 1f       	adc	r25, r19
    1606:	2e 81       	ldd	r18, Y+6	; 0x06
    1608:	22 2f       	mov	r18, r18
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	21 50       	subi	r18, 0x01	; 1
    160e:	30 4f       	sbci	r19, 0xF0	; 240
    1610:	22 95       	swap	r18
    1612:	32 95       	swap	r19
    1614:	30 7f       	andi	r19, 0xF0	; 240
    1616:	32 27       	eor	r19, r18
    1618:	20 7f       	andi	r18, 0xF0	; 240
    161a:	32 27       	eor	r19, r18
    161c:	48 8d       	ldd	r20, Y+24	; 0x18
    161e:	59 8d       	ldd	r21, Y+25	; 0x19
    1620:	42 0f       	add	r20, r18
    1622:	53 1f       	adc	r21, r19
    1624:	2f 81       	ldd	r18, Y+7	; 0x07
    1626:	22 2f       	mov	r18, r18
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	21 50       	subi	r18, 0x01	; 1
    162c:	31 09       	sbc	r19, r1
    162e:	24 0f       	add	r18, r20
    1630:	35 1f       	adc	r19, r21
    1632:	f9 01       	movw	r30, r18
    1634:	20 81       	ld	r18, Z
    1636:	fc 01       	movw	r30, r24
    1638:	20 83       	st	Z, r18
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <_Z15build_menu_mainPA16_KcPhhhhh+0x34e>
				}else{
					valN--;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	8c 83       	std	Y+4, r24	; 0x04
				}
			}
			if( valN < sizeof(chrOutput) ){
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	40 97       	sbiw	r24, 0x10	; 16
    164a:	20 f4       	brcc	.+8      	; 0x1654 <_Z15build_menu_mainPA16_KcPhhhhh+0x360>
				valN++;
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	8c 83       	std	Y+4, r24	; 0x04
    1652:	0b c0       	rjmp	.+22     	; 0x166a <_Z15build_menu_mainPA16_KcPhhhhh+0x376>
			}else{
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
    1654:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1656:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1658:	20 e1       	ldi	r18, 0x10	; 16
    165a:	fe 01       	movw	r30, r28
    165c:	38 96       	adiw	r30, 0x08	; 8
    165e:	dc 01       	movw	r26, r24
    1660:	01 90       	ld	r0, Z+
    1662:	0d 92       	st	X+, r0
    1664:	2a 95       	dec	r18
    1666:	e1 f7       	brne	.-8      	; 0x1660 <_Z15build_menu_mainPA16_KcPhhhhh+0x36c>
				return;
    1668:	10 c0       	rjmp	.+32     	; 0x168a <_Z15build_menu_mainPA16_KcPhhhhh+0x396>
		chrOutput[ valN ] = ' ';
		valN++;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
		for( uint8_t valJ = 1; valJ <= valWid; valJ++ ){
    166a:	8f 81       	ldd	r24, Y+7	; 0x07
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	8f 83       	std	Y+7, r24	; 0x07
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1674:	89 17       	cp	r24, r25
    1676:	08 f0       	brcs	.+2      	; 0x167a <_Z15build_menu_mainPA16_KcPhhhhh+0x386>
    1678:	13 cf       	rjmp	.-474    	; 0x14a0 <_Z15build_menu_mainPA16_KcPhhhhh+0x1ac>
	if( valPad == MAIN_PAD_ON ){
		chrOutput[ valN ] = ' ';
		valN++;
	}
	
	for( uint8_t valQ = 1; valQ <= valLen; valQ++ ){
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	8e 83       	std	Y+6, r24	; 0x06
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1684:	89 17       	cp	r24, r25
    1686:	08 f0       	brcs	.+2      	; 0x168a <_Z15build_menu_mainPA16_KcPhhhhh+0x396>
    1688:	08 cf       	rjmp	.-496    	; 0x149a <_Z15build_menu_mainPA16_KcPhhhhh+0x1a6>
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
				return;
			}	
		}
	}
    168a:	6f 96       	adiw	r28, 0x1f	; 31
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ef 90       	pop	r14
    16a0:	08 95       	ret

000016a2 <_Z41__static_initialization_and_destruction_0ii>:
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <_Z41__static_initialization_and_destruction_0ii+0x8>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	7c 83       	std	Y+4, r23	; 0x04
    16b4:	6b 83       	std	Y+3, r22	; 0x03
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	89 f4       	brne	.+34     	; 0x16e0 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	69 f4       	brne	.+26     	; 0x16e0 <_Z41__static_initialization_and_destruction_0ii+0x3e>

 
#include "headsup.h"


rtc rtcDS;
    16c6:	81 e9       	ldi	r24, 0x91	; 145
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	99 d7       	rcall	.+3890   	; 0x25fe <_ZN3rtcC1Ev>
lcd lcdNHD;
    16cc:	82 e9       	ldi	r24, 0x92	; 146
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	1a d0       	rcall	.+52     	; 0x1706 <_ZN3lcdC1Ev>
bat batLiPo;
    16d2:	83 e9       	ldi	r24, 0x93	; 147
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN3batC1Ev>
led ledAlarm;
    16da:	84 e9       	ldi	r24, 0x94	; 148
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	9d d6       	rcall	.+3386   	; 0x241a <_ZN3ledC1Ev>
				memcpy( chrReturn, chrOutput, sizeof( chrOutput ));
				return;
			}	
		}
	}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	08 95       	ret

000016ee <_GLOBAL__sub_I_rtcDS>:
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	7f ef       	ldi	r23, 0xFF	; 255
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	d1 df       	rcall	.-94     	; 0x16a2 <_Z41__static_initialization_and_destruction_0ii>
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <_ZN3lcdC1Ev>:
}

void lcd::TWI_CLEAR_ENABLE_ACK()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	60 97       	sbiw	r28, 0x10	; 16
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	98 8b       	std	Y+16, r25	; 0x10
    171c:	8f 87       	std	Y+15, r24	; 0x0f
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	98 89       	ldd	r25, Y+16	; 0x10
    1722:	81 d0       	rcall	.+258    	; 0x1826 <_ZN3lcd8TWI_INITEv>
    1724:	8f 85       	ldd	r24, Y+15	; 0x0f
    1726:	98 89       	ldd	r25, Y+16	; 0x10
    1728:	87 d2       	rcall	.+1294   	; 0x1c38 <_ZN3lcd4INITEv>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 ea       	ldi	r26, 0xA0	; 160
    1730:	b1 e4       	ldi	r27, 0x41	; 65
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	ab 83       	std	Y+3, r26	; 0x03
    1738:	bc 83       	std	Y+4, r27	; 0x04
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a e7       	ldi	r20, 0x7A	; 122
    1740:	53 e4       	ldi	r21, 0x43	; 67
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	7a 81       	ldd	r23, Y+2	; 0x02
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	af 83       	std	Y+7, r26	; 0x07
    1758:	b8 87       	std	Y+8, r27	; 0x08
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	6d 81       	ldd	r22, Y+5	; 0x05
    1764:	7e 81       	ldd	r23, Y+6	; 0x06
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	98 85       	ldd	r25, Y+8	; 0x08
    176a:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <_ZN3lcdC1Ev+0x76>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9a 87       	std	Y+10, r25	; 0x0a
    1778:	89 87       	std	Y+9, r24	; 0x09
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <_ZN3lcdC1Ev+0xf4>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	6d 81       	ldd	r22, Y+5	; 0x05
    1786:	7e 81       	ldd	r23, Y+6	; 0x06
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <_ZN3lcdC1Ev+0xe0>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	69 81       	ldd	r22, Y+1	; 0x01
    179e:	7a 81       	ldd	r23, Y+2	; 0x02
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9a 87       	std	Y+10, r25	; 0x0a
    17ba:	89 87       	std	Y+9, r24	; 0x09
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <_ZN3lcdC1Ev+0xd6>
    17be:	89 e1       	ldi	r24, 0x19	; 25
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	8b 87       	std	Y+11, r24	; 0x0b
    17c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <_ZN3lcdC1Ev+0xc4>
    17ce:	9c 87       	std	Y+12, r25	; 0x0c
    17d0:	8b 87       	std	Y+11, r24	; 0x0b
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9a 87       	std	Y+10, r25	; 0x0a
    17da:	89 87       	std	Y+9, r24	; 0x09
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	89 2b       	or	r24, r25
    17e2:	69 f7       	brne	.-38     	; 0x17be <_ZN3lcdC1Ev+0xb8>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <_ZN3lcdC1Ev+0x108>
    17e6:	6d 81       	ldd	r22, Y+5	; 0x05
    17e8:	7e 81       	ldd	r23, Y+6	; 0x06
    17ea:	8f 81       	ldd	r24, Y+7	; 0x07
    17ec:	98 85       	ldd	r25, Y+8	; 0x08
    17ee:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9a 87       	std	Y+10, r25	; 0x0a
    17f8:	89 87       	std	Y+9, r24	; 0x09
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	9e 87       	std	Y+14, r25	; 0x0e
    1800:	8d 87       	std	Y+13, r24	; 0x0d
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <_ZN3lcdC1Ev+0x100>
    180a:	9e 87       	std	Y+14, r25	; 0x0e
    180c:	8d 87       	std	Y+13, r24	; 0x0d
    180e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1810:	98 89       	ldd	r25, Y+16	; 0x10
    1812:	49 d4       	rcall	.+2194   	; 0x20a6 <_ZN3lcd12SHOW_WELCOMEEv>
    1814:	60 96       	adiw	r28, 0x10	; 16
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <_ZN3lcd8TWI_INITEv>:
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <_ZN3lcd8TWI_INITEv+0x6>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	84 e6       	ldi	r24, 0x64	; 100
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	24 e6       	ldi	r18, 0x64	; 100
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	f9 01       	movw	r30, r18
    183e:	20 81       	ld	r18, Z
    1840:	2f 77       	andi	r18, 0x7F	; 127
    1842:	fc 01       	movw	r30, r24
    1844:	20 83       	st	Z, r18
    1846:	8c eb       	ldi	r24, 0xBC	; 188
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	2c eb       	ldi	r18, 0xBC	; 188
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	f9 01       	movw	r30, r18
    1850:	20 81       	ld	r18, Z
    1852:	2e 7f       	andi	r18, 0xFE	; 254
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
    1858:	88 eb       	ldi	r24, 0xB8	; 184
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	22 e0       	ldi	r18, 0x02	; 2
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
    1862:	89 eb       	ldi	r24, 0xB9	; 185
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	29 eb       	ldi	r18, 0xB9	; 185
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	2d 7f       	andi	r18, 0xFD	; 253
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <_ZN3lcd16TWI_CHECK_STATUSEh>:
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	2a 97       	sbiw	r28, 0x0a	; 10
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	6b 83       	std	Y+3, r22	; 0x03
    1898:	89 eb       	ldi	r24, 0xB9	; 185
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	2a 96       	adiw	r28, 0x0a	; 10
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <_ZN3lcd16TWI_CLEAR_ENABLEEv>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <_ZN3lcd16TWI_CLEAR_ENABLEEv+0x6>
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	8c eb       	ldi	r24, 0xBC	; 188
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	24 e8       	ldi	r18, 0x84	; 132
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	00 d0       	rcall	.+0      	; 0x18da <_ZN3lcd8TWI_STOPEv+0x6>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    18e2:	8c eb       	ldi	r24, 0xBC	; 188
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	24 e9       	ldi	r18, 0x94	; 148
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
	
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <_ZN3lcd9TWI_STARTEv>:

void lcd::TWI_START(){
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <_ZN3lcd9TWI_STARTEv+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1904:	8c eb       	ldi	r24, 0xBC	; 188
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	24 ea       	ldi	r18, 0xA4	; 164
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
    190e:	00 00       	nop
    1910:	8c eb       	ldi	r24, 0xBC	; 188
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	80 95       	com	r24
    191a:	88 1f       	adc	r24, r24
    191c:	88 27       	eor	r24, r24
    191e:	88 1f       	adc	r24, r24
    1920:	88 23       	and	r24, r24
    1922:	b1 f7       	brne	.-20     	; 0x1910 <_ZN3lcd9TWI_STARTEv+0x1a>
	TWI_CHECK_STATUS(LCD_TW_START);
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	68 e0       	ldi	r22, 0x08	; 8
    192a:	a9 df       	rcall	.-174    	; 0x187e <_ZN3lcd16TWI_CHECK_STATUSEh>
	
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <_ZN3lcd12TWI_TRANSMITEhh>:

void lcd::TWI_TRANSMIT(uint8_t TwiData, uint8_t StatusCode){
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	00 d0       	rcall	.+0      	; 0x193c <_ZN3lcd12TWI_TRANSMITEhh+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <_ZN3lcd12TWI_TRANSMITEhh+0x8>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6b 83       	std	Y+3, r22	; 0x03
    1948:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
    194a:	8b eb       	ldi	r24, 0xBB	; 187
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	fc 01       	movw	r30, r24
    1952:	20 83       	st	Z, r18
	/*After TWDR is loaded with LCD_SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the LCD_SLA+W present in TWDR*/
	TWI_CLEAR_ENABLE();
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	ac df       	rcall	.-168    	; 0x18b2 <_ZN3lcd16TWI_CLEAR_ENABLEEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
    195a:	00 00       	nop
    195c:	8c eb       	ldi	r24, 0xBC	; 188
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	80 81       	ld	r24, Z
    1964:	80 95       	com	r24
    1966:	88 1f       	adc	r24, r24
    1968:	88 27       	eor	r24, r24
    196a:	88 1f       	adc	r24, r24
    196c:	88 23       	and	r24, r24
    196e:	b1 f7       	brne	.-20     	; 0x195c <_ZN3lcd12TWI_TRANSMITEhh+0x26>
	TWI_CHECK_STATUS(StatusCode);	// works!!
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	6c 81       	ldd	r22, Y+4	; 0x04
    1976:	83 df       	rcall	.-250    	; 0x187e <_ZN3lcd16TWI_CHECK_STATUSEh>

}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <_ZN3lcd4SHOWEPh>:


void lcd::SHOW(unsigned char* text){
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	00 d0       	rcall	.+0      	; 0x198c <_ZN3lcd4SHOWEPh+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <_ZN3lcd4SHOWEPh+0x8>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <_ZN3lcd4SHOWEPh+0xa>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	7e 83       	std	Y+6, r23	; 0x06
    199a:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_START();
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	aa df       	rcall	.-172    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	48 e1       	ldi	r20, 0x18	; 24
    19a8:	6c e7       	ldi	r22, 0x7C	; 124
    19aa:	c5 df       	rcall	.-118    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	48 e2       	ldi	r20, 0x28	; 40
    19b2:	60 e4       	ldi	r22, 0x40	; 64
    19b4:	c0 df       	rcall	.-128    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    19b6:	1a 82       	std	Y+2, r1	; 0x02
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <_ZN3lcd4SHOWEPh+0x5c>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	fc 01       	movw	r30, r24
    19c2:	20 81       	ld	r18, Z
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	48 e2       	ldi	r20, 0x28	; 40
    19ca:	62 2f       	mov	r22, r18
    19cc:	b4 df       	rcall	.-152    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
		++text;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_START();
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	40 97       	sbiw	r24, 0x10	; 16
    19e8:	4c f3       	brlt	.-46     	; 0x19bc <_ZN3lcd4SHOWEPh+0x36>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	72 df       	rcall	.-284    	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
	
}
    19f0:	26 96       	adiw	r28, 0x06	; 6
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_ZN3lcd17SELECT_LCD_LINE_1Ev>:


void lcd::SELECT_LCD_LINE_1(){
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <_ZN3lcd17SELECT_LCD_LINE_1Ev+0x6>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	70 df       	rcall	.-288    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	48 e1       	ldi	r20, 0x18	; 24
    1a1c:	6c e7       	ldi	r22, 0x7C	; 124
    1a1e:	8b df       	rcall	.-234    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	48 e2       	ldi	r20, 0x28	; 40
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	86 df       	rcall	.-244    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_1,LCD_TW_MT_DATA_ACK);
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	48 e2       	ldi	r20, 0x28	; 40
    1a30:	60 e8       	ldi	r22, 0x80	; 128
    1a32:	81 df       	rcall	.-254    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	4d df       	rcall	.-358    	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <_ZN3lcd17SELECT_LCD_LINE_2Ev>:


void lcd::SELECT_LCD_LINE_2(){
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <_ZN3lcd17SELECT_LCD_LINE_2Ev+0x6>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	4f df       	rcall	.-354    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	48 e1       	ldi	r20, 0x18	; 24
    1a5e:	6c e7       	ldi	r22, 0x7C	; 124
    1a60:	6a df       	rcall	.-300    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	48 e2       	ldi	r20, 0x28	; 40
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	65 df       	rcall	.-310    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_2,LCD_TW_MT_DATA_ACK);
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	48 e2       	ldi	r20, 0x28	; 40
    1a72:	60 ec       	ldi	r22, 0xC0	; 192
    1a74:	60 df       	rcall	.-320    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	2c df       	rcall	.-424    	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	60 97       	sbiw	r28, 0x10	; 16
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_START();
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	98 89       	ldd	r25, Y+16	; 0x10
    1aa2:	29 df       	rcall	.-430    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	98 89       	ldd	r25, Y+16	; 0x10
    1aa8:	48 e1       	ldi	r20, 0x18	; 24
    1aaa:	6c e7       	ldi	r22, 0x7C	; 124
    1aac:	44 df       	rcall	.-376    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);;
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	98 89       	ldd	r25, Y+16	; 0x10
    1ab2:	48 e2       	ldi	r20, 0x28	; 40
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	3f df       	rcall	.-386    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);		//go to instructino table 0
    1ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aba:	98 89       	ldd	r25, Y+16	; 0x10
    1abc:	48 e2       	ldi	r20, 0x28	; 40
    1abe:	68 e3       	ldi	r22, 0x38	; 56
    1ac0:	3a df       	rcall	.-396    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x40,LCD_TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
    1ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac4:	98 89       	ldd	r25, Y+16	; 0x10
    1ac6:	48 e2       	ldi	r20, 0x28	; 40
    1ac8:	60 e4       	ldi	r22, 0x40	; 64
    1aca:	35 df       	rcall	.-406    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    1acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ace:	98 89       	ldd	r25, Y+16	; 0x10
    1ad0:	01 df       	rcall	.-510    	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e2       	ldi	r26, 0x20	; 32
    1ad8:	b1 e4       	ldi	r27, 0x41	; 65
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	ab 83       	std	Y+3, r26	; 0x03
    1ae0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	53 e4       	ldi	r21, 0x43	; 67
    1aea:	69 81       	ldd	r22, Y+1	; 0x01
    1aec:	7a 81       	ldd	r23, Y+2	; 0x02
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	af 83       	std	Y+7, r26	; 0x07
    1b00:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b0c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	98 85       	ldd	r25, Y+8	; 0x08
    1b12:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 87       	std	Y+10, r25	; 0x0a
    1b20:	89 87       	std	Y+9, r24	; 0x09
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b30:	8f 81       	ldd	r24, Y+7	; 0x07
    1b32:	98 85       	ldd	r25, Y+8	; 0x08
    1b34:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	69 81       	ldd	r22, Y+1	; 0x01
    1b46:	7a 81       	ldd	r23, Y+2	; 0x02
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9a 87       	std	Y+10, r25	; 0x0a
    1b62:	89 87       	std	Y+9, r24	; 0x09
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <_ZN3lcd5CGRAMEv+0xfe>
    1b66:	89 e1       	ldi	r24, 0x19	; 25
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	8b 87       	std	Y+11, r24	; 0x0b
    1b6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <_ZN3lcd5CGRAMEv+0xec>
    1b76:	9c 87       	std	Y+12, r25	; 0x0c
    1b78:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9a 87       	std	Y+10, r25	; 0x0a
    1b82:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	89 2b       	or	r24, r25
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <_ZN3lcd5CGRAMEv+0xe0>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b90:	7e 81       	ldd	r23, Y+6	; 0x06
    1b92:	8f 81       	ldd	r24, Y+7	; 0x07
    1b94:	98 85       	ldd	r25, Y+8	; 0x08
    1b96:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9a 87       	std	Y+10, r25	; 0x0a
    1ba0:	89 87       	std	Y+9, r24	; 0x09
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	9e 87       	std	Y+14, r25	; 0x0e
    1ba8:	8d 87       	std	Y+13, r24	; 0x0d
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <_ZN3lcd5CGRAMEv+0x128>
    1bb2:	9e 87       	std	Y+14, r25	; 0x0e
    1bb4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_START();
    1bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb8:	98 89       	ldd	r25, Y+16	; 0x10
    1bba:	9d de       	rcall	.-710    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	48 e1       	ldi	r20, 0x18	; 24
    1bc2:	6c e7       	ldi	r22, 0x7C	; 124
    1bc4:	b8 de       	rcall	.-656    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc8:	98 89       	ldd	r25, Y+16	; 0x10
    1bca:	48 e2       	ldi	r20, 0x28	; 40
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	b3 de       	rcall	.-666    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//write to first CGRAM address
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	98 89       	ldd	r25, Y+16	; 0x10
    1bd4:	48 e2       	ldi	r20, 0x28	; 40
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	ae de       	rcall	.-676    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x1E,LCD_TW_MT_DATA_ACK);
    1bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bdc:	98 89       	ldd	r25, Y+16	; 0x10
    1bde:	48 e2       	ldi	r20, 0x28	; 40
    1be0:	6e e1       	ldi	r22, 0x1E	; 30
    1be2:	a9 de       	rcall	.-686    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x18,LCD_TW_MT_DATA_ACK);
    1be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be6:	98 89       	ldd	r25, Y+16	; 0x10
    1be8:	48 e2       	ldi	r20, 0x28	; 40
    1bea:	68 e1       	ldi	r22, 0x18	; 24
    1bec:	a4 de       	rcall	.-696    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	48 e2       	ldi	r20, 0x28	; 40
    1bf4:	64 e1       	ldi	r22, 0x14	; 20
    1bf6:	9f de       	rcall	.-706    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x12,LCD_TW_MT_DATA_ACK);
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	98 89       	ldd	r25, Y+16	; 0x10
    1bfc:	48 e2       	ldi	r20, 0x28	; 40
    1bfe:	62 e1       	ldi	r22, 0x12	; 18
    1c00:	9a de       	rcall	.-716    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    1c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c04:	98 89       	ldd	r25, Y+16	; 0x10
    1c06:	48 e2       	ldi	r20, 0x28	; 40
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	95 de       	rcall	.-726    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	98 89       	ldd	r25, Y+16	; 0x10
    1c10:	48 e2       	ldi	r20, 0x28	; 40
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	90 de       	rcall	.-736    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//8 bytes per character
    1c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c18:	98 89       	ldd	r25, Y+16	; 0x10
    1c1a:	48 e2       	ldi	r20, 0x28	; 40
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	8b de       	rcall	.-746    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	57 de       	rcall	.-850    	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
}
    1c26:	60 96       	adiw	r28, 0x10	; 16
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_ZN3lcd4INITEv>:

void lcd::INIT()
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	ea 97       	sbiw	r28, 0x3a	; 58
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	9a af       	std	Y+58, r25	; 0x3a
    1c4e:	89 af       	std	Y+57, r24	; 0x39
	TWI_START();
    1c50:	89 ad       	ldd	r24, Y+57	; 0x39
    1c52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c54:	50 de       	rcall	.-864    	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1c56:	89 ad       	ldd	r24, Y+57	; 0x39
    1c58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c5a:	48 e1       	ldi	r20, 0x18	; 24
    1c5c:	6c e7       	ldi	r22, 0x7C	; 124
    1c5e:	6b de       	rcall	.-810    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1c60:	89 ad       	ldd	r24, Y+57	; 0x39
    1c62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c64:	48 e2       	ldi	r20, 0x28	; 40
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	66 de       	rcall	.-820    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1c6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6e:	48 e2       	ldi	r20, 0x28	; 40
    1c70:	68 e3       	ldi	r22, 0x38	; 56
    1c72:	61 de       	rcall	.-830    	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a8 ec       	ldi	r26, 0xC8	; 200
    1c7a:	b2 e4       	ldi	r27, 0x42	; 66
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	ab 83       	std	Y+3, r26	; 0x03
    1c82:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a e7       	ldi	r20, 0x7A	; 122
    1c8a:	53 e4       	ldi	r21, 0x43	; 67
    1c8c:	69 81       	ldd	r22, Y+1	; 0x01
    1c8e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	af 83       	std	Y+7, r26	; 0x07
    1ca2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	6d 81       	ldd	r22, Y+5	; 0x05
    1cae:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb2:	98 85       	ldd	r25, Y+8	; 0x08
    1cb4:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1cb8:	88 23       	and	r24, r24
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <_ZN3lcd4INITEv+0x8e>
		__ticks = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9a 87       	std	Y+10, r25	; 0x0a
    1cc2:	89 87       	std	Y+9, r24	; 0x09
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <_ZN3lcd4INITEv+0x10c>
	else if (__tmp > 65535)
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd0:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd4:	98 85       	ldd	r25, Y+8	; 0x08
    1cd6:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	4c f5       	brge	.+82     	; 0x1d30 <_ZN3lcd4INITEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	69 81       	ldd	r22, Y+1	; 0x01
    1ce8:	7a 81       	ldd	r23, Y+2	; 0x02
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9a 87       	std	Y+10, r25	; 0x0a
    1d04:	89 87       	std	Y+9, r24	; 0x09
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <_ZN3lcd4INITEv+0xee>
    1d08:	89 e1       	ldi	r24, 0x19	; 25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 87       	std	Y+12, r25	; 0x0c
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <_ZN3lcd4INITEv+0xdc>
    1d18:	9c 87       	std	Y+12, r25	; 0x0c
    1d1a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	9a 87       	std	Y+10, r25	; 0x0a
    1d24:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	89 2b       	or	r24, r25
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <_ZN3lcd4INITEv+0xd0>
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <_ZN3lcd4INITEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	6d 81       	ldd	r22, Y+5	; 0x05
    1d32:	7e 81       	ldd	r23, Y+6	; 0x06
    1d34:	8f 81       	ldd	r24, Y+7	; 0x07
    1d36:	98 85       	ldd	r25, Y+8	; 0x08
    1d38:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9a 87       	std	Y+10, r25	; 0x0a
    1d42:	89 87       	std	Y+9, r24	; 0x09
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	9e 87       	std	Y+14, r25	; 0x0e
    1d4a:	8d 87       	std	Y+13, r24	; 0x0d
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <_ZN3lcd4INITEv+0x118>
    1d54:	9e 87       	std	Y+14, r25	; 0x0e
    1d56:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);						// Use Extended instruction set
    1d58:	89 ad       	ldd	r24, Y+57	; 0x39
    1d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d5c:	48 e2       	ldi	r20, 0x28	; 40
    1d5e:	69 e3       	ldi	r22, 0x39	; 57
    1d60:	ea dd       	rcall	.-1068   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a8 ec       	ldi	r26, 0xC8	; 200
    1d68:	b2 e4       	ldi	r27, 0x42	; 66
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    1d6c:	98 8b       	std	Y+16, r25	; 0x10
    1d6e:	a9 8b       	std	Y+17, r26	; 0x11
    1d70:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a e7       	ldi	r20, 0x7A	; 122
    1d78:	53 e4       	ldi	r21, 0x43	; 67
    1d7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d7c:	78 89       	ldd	r23, Y+16	; 0x10
    1d7e:	89 89       	ldd	r24, Y+17	; 0x11
    1d80:	9a 89       	ldd	r25, Y+18	; 0x12
    1d82:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	ad 8b       	std	Y+21, r26	; 0x15
    1d90:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	6b 89       	ldd	r22, Y+19	; 0x13
    1d9c:	7c 89       	ldd	r23, Y+20	; 0x14
    1d9e:	8d 89       	ldd	r24, Y+21	; 0x15
    1da0:	9e 89       	ldd	r25, Y+22	; 0x16
    1da2:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <_ZN3lcd4INITEv+0x17c>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 8f       	std	Y+24, r25	; 0x18
    1db0:	8f 8b       	std	Y+23, r24	; 0x17
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <_ZN3lcd4INITEv+0x1fa>
	else if (__tmp > 65535)
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	6b 89       	ldd	r22, Y+19	; 0x13
    1dbe:	7c 89       	ldd	r23, Y+20	; 0x14
    1dc0:	8d 89       	ldd	r24, Y+21	; 0x15
    1dc2:	9e 89       	ldd	r25, Y+22	; 0x16
    1dc4:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <_ZN3lcd4INITEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dd6:	78 89       	ldd	r23, Y+16	; 0x10
    1dd8:	89 89       	ldd	r24, Y+17	; 0x11
    1dda:	9a 89       	ldd	r25, Y+18	; 0x12
    1ddc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 8f       	std	Y+24, r25	; 0x18
    1df2:	8f 8b       	std	Y+23, r24	; 0x17
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <_ZN3lcd4INITEv+0x1dc>
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dfc:	89 8f       	std	Y+25, r24	; 0x19
    1dfe:	89 8d       	ldd	r24, Y+25	; 0x19
    1e00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <_ZN3lcd4INITEv+0x1ca>
    1e06:	9a 8f       	std	Y+26, r25	; 0x1a
    1e08:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	98 8f       	std	Y+24, r25	; 0x18
    1e12:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	89 2b       	or	r24, r25
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <_ZN3lcd4INITEv+0x1be>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <_ZN3lcd4INITEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6b 89       	ldd	r22, Y+19	; 0x13
    1e20:	7c 89       	ldd	r23, Y+20	; 0x14
    1e22:	8d 89       	ldd	r24, Y+21	; 0x15
    1e24:	9e 89       	ldd	r25, Y+22	; 0x16
    1e26:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	98 8f       	std	Y+24, r25	; 0x18
    1e30:	8f 8b       	std	Y+23, r24	; 0x17
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	9c 8f       	std	Y+28, r25	; 0x1c
    1e38:	8b 8f       	std	Y+27, r24	; 0x1b
    1e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <_ZN3lcd4INITEv+0x206>
    1e42:	9c 8f       	std	Y+28, r25	; 0x1c
    1e44:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);						// Set Internal Osc Freq
    1e46:	89 ad       	ldd	r24, Y+57	; 0x39
    1e48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e4a:	48 e2       	ldi	r20, 0x28	; 40
    1e4c:	64 e1       	ldi	r22, 0x14	; 20
    1e4e:	73 dd       	rcall	.-1306   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x78,LCD_TW_MT_DATA_ACK);						// Contrast Set
    1e50:	89 ad       	ldd	r24, Y+57	; 0x39
    1e52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e54:	48 e2       	ldi	r20, 0x28	; 40
    1e56:	68 e7       	ldi	r22, 0x78	; 120
    1e58:	6e dd       	rcall	.-1316   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x5D,LCD_TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1e5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e5e:	48 e2       	ldi	r20, 0x28	; 40
    1e60:	6d e5       	ldi	r22, 0x5D	; 93
    1e62:	69 dd       	rcall	.-1326   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x6D,LCD_TW_MT_DATA_ACK);						// Follower Control
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e68:	48 e2       	ldi	r20, 0x28	; 40
    1e6a:	6d e6       	ldi	r22, 0x6D	; 109
    1e6c:	64 dd       	rcall	.-1336   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x0C,LCD_TW_MT_DATA_ACK);						// Display On/Off
    1e6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e72:	48 e2       	ldi	r20, 0x28	; 40
    1e74:	6c e0       	ldi	r22, 0x0C	; 12
    1e76:	5f dd       	rcall	.-1346   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);						// Clear Display
    1e78:	89 ad       	ldd	r24, Y+57	; 0x39
    1e7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e7c:	48 e2       	ldi	r20, 0x28	; 40
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	5a dd       	rcall	.-1356   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x06,LCD_TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    1e82:	89 ad       	ldd	r24, Y+57	; 0x39
    1e84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e86:	48 e2       	ldi	r20, 0x28	; 40
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	55 dd       	rcall	.-1366   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a8 ec       	ldi	r26, 0xC8	; 200
    1e92:	b2 e4       	ldi	r27, 0x42	; 66
    1e94:	8d 8f       	std	Y+29, r24	; 0x1d
    1e96:	9e 8f       	std	Y+30, r25	; 0x1e
    1e98:	af 8f       	std	Y+31, r26	; 0x1f
    1e9a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	53 e4       	ldi	r21, 0x43	; 67
    1ea4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ea6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ea8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eaa:	98 a1       	ldd	r25, Y+32	; 0x20
    1eac:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	89 a3       	std	Y+33, r24	; 0x21
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	ab a3       	std	Y+35, r26	; 0x23
    1eba:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	69 a1       	ldd	r22, Y+33	; 0x21
    1ec6:	7a a1       	ldd	r23, Y+34	; 0x22
    1ec8:	8b a1       	ldd	r24, Y+35	; 0x23
    1eca:	9c a1       	ldd	r25, Y+36	; 0x24
    1ecc:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <_ZN3lcd4INITEv+0x2a6>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e a3       	std	Y+38, r25	; 0x26
    1eda:	8d a3       	std	Y+37, r24	; 0x25
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <_ZN3lcd4INITEv+0x324>
	else if (__tmp > 65535)
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	69 a1       	ldd	r22, Y+33	; 0x21
    1ee8:	7a a1       	ldd	r23, Y+34	; 0x22
    1eea:	8b a1       	ldd	r24, Y+35	; 0x23
    1eec:	9c a1       	ldd	r25, Y+36	; 0x24
    1eee:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <_ZN3lcd4INITEv+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f00:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f04:	98 a1       	ldd	r25, Y+32	; 0x20
    1f06:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e a3       	std	Y+38, r25	; 0x26
    1f1c:	8d a3       	std	Y+37, r24	; 0x25
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <_ZN3lcd4INITEv+0x306>
    1f20:	89 e1       	ldi	r24, 0x19	; 25
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	98 a7       	std	Y+40, r25	; 0x28
    1f26:	8f a3       	std	Y+39, r24	; 0x27
    1f28:	8f a1       	ldd	r24, Y+39	; 0x27
    1f2a:	98 a5       	ldd	r25, Y+40	; 0x28
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <_ZN3lcd4INITEv+0x2f4>
    1f30:	98 a7       	std	Y+40, r25	; 0x28
    1f32:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	9e a1       	ldd	r25, Y+38	; 0x26
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9e a3       	std	Y+38, r25	; 0x26
    1f3c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f40:	9e a1       	ldd	r25, Y+38	; 0x26
    1f42:	89 2b       	or	r24, r25
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <_ZN3lcd4INITEv+0x2e8>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <_ZN3lcd4INITEv+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	69 a1       	ldd	r22, Y+33	; 0x21
    1f4a:	7a a1       	ldd	r23, Y+34	; 0x22
    1f4c:	8b a1       	ldd	r24, Y+35	; 0x23
    1f4e:	9c a1       	ldd	r25, Y+36	; 0x24
    1f50:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9e a3       	std	Y+38, r25	; 0x26
    1f5a:	8d a3       	std	Y+37, r24	; 0x25
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	9a a7       	std	Y+42, r25	; 0x2a
    1f62:	89 a7       	std	Y+41, r24	; 0x29
    1f64:	89 a5       	ldd	r24, Y+41	; 0x29
    1f66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <_ZN3lcd4INITEv+0x330>
    1f6c:	9a a7       	std	Y+42, r25	; 0x2a
    1f6e:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    1f70:	89 ad       	ldd	r24, Y+57	; 0x39
    1f72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f74:	af dc       	rcall	.-1698   	; 0x18d4 <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    1f76:	89 ad       	ldd	r24, Y+57	; 0x39
    1f78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f7a:	85 dd       	rcall	.-1270   	; 0x1a86 <_ZN3lcd5CGRAMEv>

	TWI_START();
    1f7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f80:	ba dc       	rcall	.-1676   	; 0x18f6 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1f82:	89 ad       	ldd	r24, Y+57	; 0x39
    1f84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f86:	48 e1       	ldi	r20, 0x18	; 24
    1f88:	6c e7       	ldi	r22, 0x7C	; 124
    1f8a:	d5 dc       	rcall	.-1622   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1f8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f90:	48 e2       	ldi	r20, 0x28	; 40
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	d0 dc       	rcall	.-1632   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);
    1f96:	89 ad       	ldd	r24, Y+57	; 0x39
    1f98:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f9a:	48 e2       	ldi	r20, 0x28	; 40
    1f9c:	69 e3       	ldi	r22, 0x39	; 57
    1f9e:	cb dc       	rcall	.-1642   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    1fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa4:	48 e2       	ldi	r20, 0x28	; 40
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	c6 dc       	rcall	.-1652   	; 0x1936 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    1faa:	89 ad       	ldd	r24, Y+57	; 0x39
    1fac:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fae:	92 dc       	rcall	.-1756   	; 0x18d4 <_ZN3lcd8TWI_STOPEv>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a8 ec       	ldi	r26, 0xC8	; 200
    1fb6:	b2 e4       	ldi	r27, 0x42	; 66
    1fb8:	8b a7       	std	Y+43, r24	; 0x2b
    1fba:	9c a7       	std	Y+44, r25	; 0x2c
    1fbc:	ad a7       	std	Y+45, r26	; 0x2d
    1fbe:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	53 e4       	ldi	r21, 0x43	; 67
    1fc8:	6b a5       	ldd	r22, Y+43	; 0x2b
    1fca:	7c a5       	ldd	r23, Y+44	; 0x2c
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	a9 ab       	std	Y+49, r26	; 0x31
    1fde:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1fea:	78 a9       	ldd	r23, Y+48	; 0x30
    1fec:	89 a9       	ldd	r24, Y+49	; 0x31
    1fee:	9a a9       	ldd	r25, Y+50	; 0x32
    1ff0:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <_ZN3lcd4INITEv+0x3ca>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c ab       	std	Y+52, r25	; 0x34
    1ffe:	8b ab       	std	Y+51, r24	; 0x33
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <_ZN3lcd4INITEv+0x448>
	else if (__tmp > 65535)
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	6f a5       	ldd	r22, Y+47	; 0x2f
    200c:	78 a9       	ldd	r23, Y+48	; 0x30
    200e:	89 a9       	ldd	r24, Y+49	; 0x31
    2010:	9a a9       	ldd	r25, Y+50	; 0x32
    2012:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <_ZN3lcd4INITEv+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	6b a5       	ldd	r22, Y+43	; 0x2b
    2024:	7c a5       	ldd	r23, Y+44	; 0x2c
    2026:	8d a5       	ldd	r24, Y+45	; 0x2d
    2028:	9e a5       	ldd	r25, Y+46	; 0x2e
    202a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9c ab       	std	Y+52, r25	; 0x34
    2040:	8b ab       	std	Y+51, r24	; 0x33
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <_ZN3lcd4INITEv+0x42a>
    2044:	89 e1       	ldi	r24, 0x19	; 25
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e ab       	std	Y+54, r25	; 0x36
    204a:	8d ab       	std	Y+53, r24	; 0x35
    204c:	8d a9       	ldd	r24, Y+53	; 0x35
    204e:	9e a9       	ldd	r25, Y+54	; 0x36
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <_ZN3lcd4INITEv+0x418>
    2054:	9e ab       	std	Y+54, r25	; 0x36
    2056:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8b a9       	ldd	r24, Y+51	; 0x33
    205a:	9c a9       	ldd	r25, Y+52	; 0x34
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9c ab       	std	Y+52, r25	; 0x34
    2060:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	89 2b       	or	r24, r25
    2068:	69 f7       	brne	.-38     	; 0x2044 <_ZN3lcd4INITEv+0x40c>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <_ZN3lcd4INITEv+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6f a5       	ldd	r22, Y+47	; 0x2f
    206e:	78 a9       	ldd	r23, Y+48	; 0x30
    2070:	89 a9       	ldd	r24, Y+49	; 0x31
    2072:	9a a9       	ldd	r25, Y+50	; 0x32
    2074:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c ab       	std	Y+52, r25	; 0x34
    207e:	8b ab       	std	Y+51, r24	; 0x33
    2080:	8b a9       	ldd	r24, Y+51	; 0x33
    2082:	9c a9       	ldd	r25, Y+52	; 0x34
    2084:	98 af       	std	Y+56, r25	; 0x38
    2086:	8f ab       	std	Y+55, r24	; 0x37
    2088:	8f a9       	ldd	r24, Y+55	; 0x37
    208a:	98 ad       	ldd	r25, Y+56	; 0x38
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <_ZN3lcd4INITEv+0x454>
    2090:	98 af       	std	Y+56, r25	; 0x38
    2092:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    2094:	ea 96       	adiw	r28, 0x3a	; 58
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <_ZN3lcd12SHOW_WELCOMEEv>:

void lcd::SHOW_WELCOME(){
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	e0 97       	sbiw	r28, 0x30	; 48
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
	
	unsigned char cucWELCOME_TEXT_1[ LCD_LINE_SIZE ]{ ' ', '-', '-', ' ', 'H', 'e', 'a', 'd', 's', 'U', 'p', '!', ' ', '-', '-', ' ' };
    20be:	80 e1       	ldi	r24, 0x10	; 16
    20c0:	e7 e3       	ldi	r30, 0x37	; 55
    20c2:	f1 e0       	ldi	r31, 0x01	; 1
    20c4:	de 01       	movw	r26, r28
    20c6:	1f 96       	adiw	r26, 0x0f	; 15
    20c8:	01 90       	ld	r0, Z+
    20ca:	0d 92       	st	X+, r0
    20cc:	8a 95       	dec	r24
    20ce:	e1 f7       	brne	.-8      	; 0x20c8 <_ZN3lcd12SHOW_WELCOMEEv+0x22>
	unsigned char cucWELCOME_TEXT_2[ LCD_LINE_SIZE ]{ 'S', 'l', 'e', 'e', 'p', ' ', 'E', 'n', 'v', 'i', 'r', 'o', 'm', 'e', 'n', 't' };
    20d0:	80 e1       	ldi	r24, 0x10	; 16
    20d2:	e7 e4       	ldi	r30, 0x47	; 71
    20d4:	f1 e0       	ldi	r31, 0x01	; 1
    20d6:	de 01       	movw	r26, r28
    20d8:	5f 96       	adiw	r26, 0x1f	; 31
    20da:	01 90       	ld	r0, Z+
    20dc:	0d 92       	st	X+, r0
    20de:	8a 95       	dec	r24
    20e0:	e1 f7       	brne	.-8      	; 0x20da <_ZN3lcd12SHOW_WELCOMEEv+0x34>
	
		
	print( cucWELCOME_TEXT_1, LCD_LINE_TOP );
    20e2:	9e 01       	movw	r18, r28
    20e4:	21 5f       	subi	r18, 0xF1	; 241
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ea:	98 a9       	ldd	r25, Y+48	; 0x30
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	b9 01       	movw	r22, r18
    20f0:	83 d0       	rcall	.+262    	; 0x21f8 <_ZN3lcd5printEPhh>
	print( cucWELCOME_TEXT_2, LCD_LINE_BOTTOM );
    20f2:	9e 01       	movw	r18, r28
    20f4:	21 5e       	subi	r18, 0xE1	; 225
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fa:	98 a9       	ldd	r25, Y+48	; 0x30
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	b9 01       	movw	r22, r18
    2100:	7b d0       	rcall	.+246    	; 0x21f8 <_ZN3lcd5printEPhh>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	aa e7       	ldi	r26, 0x7A	; 122
    2108:	b4 e4       	ldi	r27, 0x44	; 68
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	ab 83       	std	Y+3, r26	; 0x03
    2110:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a e7       	ldi	r20, 0x7A	; 122
    2118:	53 e4       	ldi	r21, 0x43	; 67
    211a:	69 81       	ldd	r22, Y+1	; 0x01
    211c:	7a 81       	ldd	r23, Y+2	; 0x02
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	af 83       	std	Y+7, r26	; 0x07
    2130:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	6d 81       	ldd	r22, Y+5	; 0x05
    213c:	7e 81       	ldd	r23, Y+6	; 0x06
    213e:	8f 81       	ldd	r24, Y+7	; 0x07
    2140:	98 85       	ldd	r25, Y+8	; 0x08
    2142:	0e 94 de 18 	call	0x31bc	; 0x31bc <__cmpsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <_ZN3lcd12SHOW_WELCOMEEv+0xae>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9a 87       	std	Y+10, r25	; 0x0a
    2150:	89 87       	std	Y+9, r24	; 0x09
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <_ZN3lcd12SHOW_WELCOMEEv+0x12c>
	else if (__tmp > 65535)
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	6d 81       	ldd	r22, Y+5	; 0x05
    215e:	7e 81       	ldd	r23, Y+6	; 0x06
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <_ZN3lcd12SHOW_WELCOMEEv+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	69 81       	ldd	r22, Y+1	; 0x01
    2176:	7a 81       	ldd	r23, Y+2	; 0x02
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9a 87       	std	Y+10, r25	; 0x0a
    2192:	89 87       	std	Y+9, r24	; 0x09
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <_ZN3lcd12SHOW_WELCOMEEv+0x10e>
    2196:	89 e1       	ldi	r24, 0x19	; 25
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9c 87       	std	Y+12, r25	; 0x0c
    219c:	8b 87       	std	Y+11, r24	; 0x0b
    219e:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <_ZN3lcd12SHOW_WELCOMEEv+0xfc>
    21a6:	9c 87       	std	Y+12, r25	; 0x0c
    21a8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9a 87       	std	Y+10, r25	; 0x0a
    21b2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	89 2b       	or	r24, r25
    21ba:	69 f7       	brne	.-38     	; 0x2196 <_ZN3lcd12SHOW_WELCOMEEv+0xf0>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <_ZN3lcd12SHOW_WELCOMEEv+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6d 81       	ldd	r22, Y+5	; 0x05
    21c0:	7e 81       	ldd	r23, Y+6	; 0x06
    21c2:	8f 81       	ldd	r24, Y+7	; 0x07
    21c4:	98 85       	ldd	r25, Y+8	; 0x08
    21c6:	0e 94 4a 19 	call	0x3294	; 0x3294 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9a 87       	std	Y+10, r25	; 0x0a
    21d0:	89 87       	std	Y+9, r24	; 0x09
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	9e 87       	std	Y+14, r25	; 0x0e
    21d8:	8d 87       	std	Y+13, r24	; 0x0d
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <_ZN3lcd12SHOW_WELCOMEEv+0x138>
    21e2:	9e 87       	std	Y+14, r25	; 0x0e
    21e4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms( 1000 );

}
    21e6:	e0 96       	adiw	r28, 0x30	; 48
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	a1 97       	sbiw	r28, 0x21	; 33
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	9e 8f       	std	Y+30, r25	; 0x1e
    220e:	8d 8f       	std	Y+29, r24	; 0x1d
    2210:	78 a3       	std	Y+32, r23	; 0x20
    2212:	6f 8f       	std	Y+31, r22	; 0x1f
    2214:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LCD_LINE_TOP ){
    2216:	89 a1       	ldd	r24, Y+33	; 0x21
    2218:	88 23       	and	r24, r24
    221a:	09 f0       	breq	.+2      	; 0x221e <_ZN3lcd5printEPhh+0x26>
    221c:	79 c0       	rjmp	.+242    	; 0x2310 <_ZN3lcd5printEPhh+0x118>
		SELECT_LCD_LINE_1();
    221e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2220:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2222:	ef db       	rcall	.-2082   	; 0x1a02 <_ZN3lcd17SELECT_LCD_LINE_1Ev>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e2       	ldi	r26, 0x20	; 32
    222a:	b1 e4       	ldi	r27, 0x41	; 65
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	ab 83       	std	Y+3, r26	; 0x03
    2232:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	69 81       	ldd	r22, Y+1	; 0x01
    223e:	7a 81       	ldd	r23, Y+2	; 0x02
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	af 83       	std	Y+7, r26	; 0x07
    2252:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	6d 81       	ldd	r22, Y+5	; 0x05
    225e:	7e 81       	ldd	r23, Y+6	; 0x06
    2260:	8f 81       	ldd	r24, Y+7	; 0x07
    2262:	98 85       	ldd	r25, Y+8	; 0x08
    2264:	ab d7       	rcall	.+3926   	; 0x31bc <__cmpsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <_ZN3lcd5printEPhh+0x7c>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9a 87       	std	Y+10, r25	; 0x0a
    2270:	89 87       	std	Y+9, r24	; 0x09
    2272:	3d c0       	rjmp	.+122    	; 0x22ee <_ZN3lcd5printEPhh+0xf6>
	else if (__tmp > 65535)
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	6d 81       	ldd	r22, Y+5	; 0x05
    227e:	7e 81       	ldd	r23, Y+6	; 0x06
    2280:	8f 81       	ldd	r24, Y+7	; 0x07
    2282:	98 85       	ldd	r25, Y+8	; 0x08
    2284:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    2288:	18 16       	cp	r1, r24
    228a:	44 f5       	brge	.+80     	; 0x22dc <_ZN3lcd5printEPhh+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	69 81       	ldd	r22, Y+1	; 0x01
    2296:	7a 81       	ldd	r23, Y+2	; 0x02
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	f5 d7       	rcall	.+4074   	; 0x3294 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9a 87       	std	Y+10, r25	; 0x0a
    22b0:	89 87       	std	Y+9, r24	; 0x09
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <_ZN3lcd5printEPhh+0xda>
    22b4:	89 e1       	ldi	r24, 0x19	; 25
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	8b 87       	std	Y+11, r24	; 0x0b
    22bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    22be:	9c 85       	ldd	r25, Y+12	; 0x0c
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <_ZN3lcd5printEPhh+0xc8>
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9a 87       	std	Y+10, r25	; 0x0a
    22d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	89 2b       	or	r24, r25
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <_ZN3lcd5printEPhh+0xbc>
    22da:	13 c0       	rjmp	.+38     	; 0x2302 <_ZN3lcd5printEPhh+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6d 81       	ldd	r22, Y+5	; 0x05
    22de:	7e 81       	ldd	r23, Y+6	; 0x06
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	98 85       	ldd	r25, Y+8	; 0x08
    22e4:	d7 d7       	rcall	.+4014   	; 0x3294 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9a 87       	std	Y+10, r25	; 0x0a
    22ec:	89 87       	std	Y+9, r24	; 0x09
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	9e 87       	std	Y+14, r25	; 0x0e
    22f4:	8d 87       	std	Y+13, r24	; 0x0d
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <_ZN3lcd5printEPhh+0x102>
    22fe:	9e 87       	std	Y+14, r25	; 0x0e
    2300:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		SHOW(text);
    2302:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2304:	38 a1       	ldd	r19, Y+32	; 0x20
    2306:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2308:	9e 8d       	ldd	r25, Y+30	; 0x1e
    230a:	b9 01       	movw	r22, r18
    230c:	3c db       	rcall	.-2440   	; 0x1986 <_ZN3lcd4SHOWEPh>
    230e:	7c c0       	rjmp	.+248    	; 0x2408 <_ZN3lcd5printEPhh+0x210>
	}else if( valLine == LCD_LINE_BOTTOM ){
    2310:	89 a1       	ldd	r24, Y+33	; 0x21
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	09 f0       	breq	.+2      	; 0x2318 <_ZN3lcd5printEPhh+0x120>
    2316:	78 c0       	rjmp	.+240    	; 0x2408 <_ZN3lcd5printEPhh+0x210>
		SELECT_LCD_LINE_2();
    2318:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    231c:	93 db       	rcall	.-2266   	; 0x1a44 <_ZN3lcd17SELECT_LCD_LINE_2Ev>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e2       	ldi	r26, 0x20	; 32
    2324:	b1 e4       	ldi	r27, 0x41	; 65
    2326:	8f 87       	std	Y+15, r24	; 0x0f
    2328:	98 8b       	std	Y+16, r25	; 0x10
    232a:	a9 8b       	std	Y+17, r26	; 0x11
    232c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	53 e4       	ldi	r21, 0x43	; 67
    2336:	6f 85       	ldd	r22, Y+15	; 0x0f
    2338:	78 89       	ldd	r23, Y+16	; 0x10
    233a:	89 89       	ldd	r24, Y+17	; 0x11
    233c:	9a 89       	ldd	r25, Y+18	; 0x12
    233e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8b 8b       	std	Y+19, r24	; 0x13
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	ad 8b       	std	Y+21, r26	; 0x15
    234c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	6b 89       	ldd	r22, Y+19	; 0x13
    2358:	7c 89       	ldd	r23, Y+20	; 0x14
    235a:	8d 89       	ldd	r24, Y+21	; 0x15
    235c:	9e 89       	ldd	r25, Y+22	; 0x16
    235e:	2e d7       	rcall	.+3676   	; 0x31bc <__cmpsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <_ZN3lcd5printEPhh+0x176>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	98 8f       	std	Y+24, r25	; 0x18
    236a:	8f 8b       	std	Y+23, r24	; 0x17
    236c:	3d c0       	rjmp	.+122    	; 0x23e8 <_ZN3lcd5printEPhh+0x1f0>
	else if (__tmp > 65535)
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	6b 89       	ldd	r22, Y+19	; 0x13
    2378:	7c 89       	ldd	r23, Y+20	; 0x14
    237a:	8d 89       	ldd	r24, Y+21	; 0x15
    237c:	9e 89       	ldd	r25, Y+22	; 0x16
    237e:	0e 94 28 1a 	call	0x3450	; 0x3450 <__gesf2>
    2382:	18 16       	cp	r1, r24
    2384:	44 f5       	brge	.+80     	; 0x23d6 <_ZN3lcd5printEPhh+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2390:	78 89       	ldd	r23, Y+16	; 0x10
    2392:	89 89       	ldd	r24, Y+17	; 0x11
    2394:	9a 89       	ldd	r25, Y+18	; 0x12
    2396:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	78 d7       	rcall	.+3824   	; 0x3294 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	98 8f       	std	Y+24, r25	; 0x18
    23aa:	8f 8b       	std	Y+23, r24	; 0x17
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <_ZN3lcd5printEPhh+0x1d4>
    23ae:	89 e1       	ldi	r24, 0x19	; 25
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9a 8f       	std	Y+26, r25	; 0x1a
    23b4:	89 8f       	std	Y+25, r24	; 0x19
    23b6:	89 8d       	ldd	r24, Y+25	; 0x19
    23b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <_ZN3lcd5printEPhh+0x1c2>
    23be:	9a 8f       	std	Y+26, r25	; 0x1a
    23c0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	98 8f       	std	Y+24, r25	; 0x18
    23ca:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23cc:	8f 89       	ldd	r24, Y+23	; 0x17
    23ce:	98 8d       	ldd	r25, Y+24	; 0x18
    23d0:	89 2b       	or	r24, r25
    23d2:	69 f7       	brne	.-38     	; 0x23ae <_ZN3lcd5printEPhh+0x1b6>
    23d4:	13 c0       	rjmp	.+38     	; 0x23fc <_ZN3lcd5printEPhh+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d6:	6b 89       	ldd	r22, Y+19	; 0x13
    23d8:	7c 89       	ldd	r23, Y+20	; 0x14
    23da:	8d 89       	ldd	r24, Y+21	; 0x15
    23dc:	9e 89       	ldd	r25, Y+22	; 0x16
    23de:	5a d7       	rcall	.+3764   	; 0x3294 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	98 8f       	std	Y+24, r25	; 0x18
    23e6:	8f 8b       	std	Y+23, r24	; 0x17
    23e8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ea:	98 8d       	ldd	r25, Y+24	; 0x18
    23ec:	9c 8f       	std	Y+28, r25	; 0x1c
    23ee:	8b 8f       	std	Y+27, r24	; 0x1b
    23f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <_ZN3lcd5printEPhh+0x1fc>
    23f8:	9c 8f       	std	Y+28, r25	; 0x1c
    23fa:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		SHOW(text);
    23fc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    23fe:	38 a1       	ldd	r19, Y+32	; 0x20
    2400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2404:	b9 01       	movw	r22, r18
    2406:	bf da       	rcall	.-2690   	; 0x1986 <_ZN3lcd4SHOWEPh>
	}
		
}
    2408:	a1 96       	adiw	r28, 0x21	; 33
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	08 95       	ret

0000241a <_ZN3ledC1Ev>:

void led::DISABLE(){
	
	set( 0 );

}
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	00 d0       	rcall	.+0      	; 0x2420 <_ZN3ledC1Ev+0x6>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	80 eb       	ldi	r24, 0xB0	; 176
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	20 eb       	ldi	r18, 0xB0	; 176
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	29 6a       	ori	r18, 0xA9	; 169
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
    243a:	80 e8       	ldi	r24, 0x80	; 128
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	20 e8       	ldi	r18, 0x80	; 128
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	f9 01       	movw	r30, r18
    2444:	20 81       	ld	r18, Z
    2446:	29 6a       	ori	r18, 0xA9	; 169
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	09 d0       	rcall	.+18     	; 0x2464 <_ZN3led6ENABLEEv>
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	24 d0       	rcall	.+72     	; 0x24a2 <_ZN3led3setEh>
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <_ZN3led6ENABLEEv>:
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	00 d0       	rcall	.+0      	; 0x246a <_ZN3led6ENABLEEv+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	8a e2       	ldi	r24, 0x2A	; 42
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	2a e2       	ldi	r18, 0x2A	; 42
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	f9 01       	movw	r30, r18
    247c:	20 81       	ld	r18, Z
    247e:	20 6f       	ori	r18, 0xF0	; 240
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
    2484:	81 e8       	ldi	r24, 0x81	; 129
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	21 e0       	ldi	r18, 0x01	; 1
    248a:	fc 01       	movw	r30, r24
    248c:	20 83       	st	Z, r18
    248e:	81 eb       	ldi	r24, 0xB1	; 177
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	21 e0       	ldi	r18, 0x01	; 1
    2494:	fc 01       	movw	r30, r24
    2496:	20 83       	st	Z, r18
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	08 95       	ret

000024a2 <_ZN3led3setEh>:

void led::set( uint8_t ledLevel ) {
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <_ZN3led3setEh+0xa>
    24ac:	1f 92       	push	r1
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	6b 83       	std	Y+3, r22	; 0x03
	
	ledLevel = ( ledLevel < 100 ) ? ledLevel : 100;
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	85 36       	cpi	r24, 0x65	; 101
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <_ZN3led3setEh+0x1e>
    24be:	84 e6       	ldi	r24, 0x64	; 100
    24c0:	8b 83       	std	Y+3, r24	; 0x03

	OCR1A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    24c2:	08 e8       	ldi	r16, 0x88	; 136
    24c4:	10 e0       	ldi	r17, 0x00	; 0
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0b d7       	rcall	.+3606   	; 0x32ec <__floatunsisf>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	48 ec       	ldi	r20, 0xC8	; 200
    24e0:	52 e4       	ldi	r21, 0x42	; 66
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	6e d6       	rcall	.+3292   	; 0x31c4 <__divsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	53 e4       	ldi	r21, 0x43	; 67
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	af d7       	rcall	.+3934   	; 0x3458 <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	c8 d6       	rcall	.+3472   	; 0x3294 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	f8 01       	movw	r30, r16
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
	OCR1B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    250e:	0a e8       	ldi	r16, 0x8A	; 138
    2510:	10 e0       	ldi	r17, 0x00	; 0
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a0 e0       	ldi	r26, 0x00	; 0
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	e5 d6       	rcall	.+3530   	; 0x32ec <__floatunsisf>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	48 ec       	ldi	r20, 0xC8	; 200
    252c:	52 e4       	ldi	r21, 0x42	; 66
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	48 d6       	rcall	.+3216   	; 0x31c4 <__divsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	53 e4       	ldi	r21, 0x43	; 67
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	89 d7       	rcall	.+3858   	; 0x3458 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	a2 d6       	rcall	.+3396   	; 0x3294 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
	OCR2A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    255a:	03 eb       	ldi	r16, 0xB3	; 179
    255c:	10 e0       	ldi	r17, 0x00	; 0
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	bf d6       	rcall	.+3454   	; 0x32ec <__floatunsisf>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	48 ec       	ldi	r20, 0xC8	; 200
    2578:	52 e4       	ldi	r21, 0x42	; 66
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	22 d6       	rcall	.+3140   	; 0x31c4 <__divsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	53 e4       	ldi	r21, 0x43	; 67
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	63 d7       	rcall	.+3782   	; 0x3458 <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	7c d6       	rcall	.+3320   	; 0x3294 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 83       	st	Z, r24
	OCR2B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    25a4:	04 eb       	ldi	r16, 0xB4	; 180
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e0       	ldi	r26, 0x00	; 0
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	9a d6       	rcall	.+3380   	; 0x32ec <__floatunsisf>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	48 ec       	ldi	r20, 0xC8	; 200
    25c2:	52 e4       	ldi	r21, 0x42	; 66
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	fd d5       	rcall	.+3066   	; 0x31c4 <__divsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	53 e4       	ldi	r21, 0x43	; 67
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	3e d7       	rcall	.+3708   	; 0x3458 <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	57 d6       	rcall	.+3246   	; 0x3294 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	f8 01       	movw	r30, r16
    25ec:	80 83       	st	Z, r24


    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <_ZN3rtcC1Ev>:
#include "rtc.h"


rtc::rtc(){
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	2e 97       	sbiw	r28, 0x0e	; 14
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	9e 87       	std	Y+14, r25	; 0x0e
    2614:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t valCmd_Enable_W { 0x00 };
    2616:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCmd_Init_Control { 0x04 };
    2618:	84 e0       	ldi	r24, 0x04	; 4
    261a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t valCmd_Zero { 0x00 };
    261c:	1d 82       	std	Y+5, r1	; 0x05
	rtc_time rtmInital { 0x00, 0x00, 0x52, 0x01, 0x01, 0x01, 0x00 };
    261e:	87 e0       	ldi	r24, 0x07	; 7
    2620:	e7 e5       	ldi	r30, 0x57	; 87
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	de 01       	movw	r26, r28
    2626:	16 96       	adiw	r26, 0x06	; 6
    2628:	01 90       	ld	r0, Z+
    262a:	0d 92       	st	X+, r0
    262c:	8a 95       	dec	r24
    262e:	e1 f7       	brne	.-8      	; 0x2628 <_ZN3rtcC1Ev+0x2a>


	i2c_init();    // Establish I2C connection
    2630:	8d 85       	ldd	r24, Y+13	; 0x0d
    2632:	9e 85       	ldd	r25, Y+14	; 0x0e
    2634:	6a d0       	rcall	.+212    	; 0x270a <_ZN3rtc8i2c_initEv>
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
    2636:	ae 01       	movw	r20, r28
    2638:	4d 5f       	subi	r20, 0xFD	; 253
    263a:	5f 4f       	sbci	r21, 0xFF	; 255
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	21 e0       	ldi	r18, 0x01	; 1
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	6f e0       	ldi	r22, 0x0F	; 15
    2646:	eb d0       	rcall	.+470    	; 0x281e <_ZN3rtc11write_blockEhPhj>
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    2648:	1a 82       	std	Y+2, r1	; 0x02
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	0e c0       	rjmp	.+28     	; 0x266a <_ZN3rtcC1Ev+0x6c>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
    264e:	69 81       	ldd	r22, Y+1	; 0x01
    2650:	ae 01       	movw	r20, r28
    2652:	4b 5f       	subi	r20, 0xFB	; 251
    2654:	5f 4f       	sbci	r21, 0xFF	; 255
    2656:	8d 85       	ldd	r24, Y+13	; 0x0d
    2658:	9e 85       	ldd	r25, Y+14	; 0x0e
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	df d0       	rcall	.+446    	; 0x281e <_ZN3rtc11write_blockEhPhj>

	i2c_init();    // Establish I2C connection
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	41 97       	sbiw	r24, 0x11	; 17
    2670:	70 f3       	brcs	.-36     	; 0x264e <_ZN3rtcC1Ev+0x50>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
	}
	
	write_block( RTC_ADDR_CON, &valCmd_Init_Control, 1 );	// Set exclusive interrupt behavior
    2672:	ae 01       	movw	r20, r28
    2674:	4c 5f       	subi	r20, 0xFC	; 252
    2676:	5f 4f       	sbci	r21, 0xFF	; 255
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	21 e0       	ldi	r18, 0x01	; 1
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	6f e0       	ldi	r22, 0x0F	; 15
    2682:	cd d0       	rcall	.+410    	; 0x281e <_ZN3rtc11write_blockEhPhj>
	
	set_time(&rtmInital);    	// Initialize the time
    2684:	9e 01       	movw	r18, r28
    2686:	2a 5f       	subi	r18, 0xFA	; 250
    2688:	3f 4f       	sbci	r19, 0xFF	; 255
    268a:	8d 85       	ldd	r24, Y+13	; 0x0d
    268c:	9e 85       	ldd	r25, Y+14	; 0x0e
    268e:	b9 01       	movw	r22, r18
    2690:	aa d1       	rcall	.+852    	; 0x29e6 <_ZN3rtc8set_timeEP8rtc_time>
	
}
    2692:	2e 96       	adiw	r28, 0x0e	; 14
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <_ZN3rtc10spi_selectEv>:


void rtc::spi_select( ) {
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <_ZN3rtc10spi_selectEv+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= ( 1 << CPHA );
    26b2:	8c e4       	ldi	r24, 0x4C	; 76
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	2c e4       	ldi	r18, 0x4C	; 76
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	f9 01       	movw	r30, r18
    26bc:	20 81       	ld	r18, Z
    26be:	24 60       	ori	r18, 0x04	; 4
    26c0:	fc 01       	movw	r30, r24
    26c2:	20 83       	st	Z, r18
	PORTB |= ( 1 << SS_PIN );
    26c4:	85 e2       	ldi	r24, 0x25	; 37
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	25 e2       	ldi	r18, 0x25	; 37
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	f9 01       	movw	r30, r18
    26ce:	20 81       	ld	r18, Z
    26d0:	20 61       	ori	r18, 0x10	; 16
    26d2:	fc 01       	movw	r30, r24
    26d4:	20 83       	st	Z, r18

}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <_ZN3rtc12spi_deselectEv>:

/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void rtc::spi_deselect( ){
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <_ZN3rtc12spi_deselectEv+0x6>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= ~( 1 << SS_PIN );
    26ee:	85 e2       	ldi	r24, 0x25	; 37
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	25 e2       	ldi	r18, 0x25	; 37
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	f9 01       	movw	r30, r18
    26f8:	20 81       	ld	r18, Z
    26fa:	2f 7e       	andi	r18, 0xEF	; 239
    26fc:	fc 01       	movw	r30, r24
    26fe:	20 83       	st	Z, r18

}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <_ZN3rtc8i2c_initEv>:


void rtc::i2c_init( ){
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	00 d0       	rcall	.+0      	; 0x2710 <_ZN3rtc8i2c_initEv+0x6>
    2710:	1f 92       	push	r1
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	9b 83       	std	Y+3, r25	; 0x03
    2718:	8a 83       	std	Y+2, r24	; 0x02

	char IOReg;

	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    271a:	84 e2       	ldi	r24, 0x24	; 36
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	20 eb       	ldi	r18, 0xB0	; 176
    2720:	fc 01       	movw	r30, r24
    2722:	20 83       	st	Z, r18
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );	// POSSIBLE ERROR: PULLING DATA HIGH
    2724:	8c e4       	ldi	r24, 0x4C	; 76
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	21 e5       	ldi	r18, 0x51	; 81
    272a:	fc 01       	movw	r30, r24
    272c:	20 83       	st	Z, r18
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
    272e:	8d e4       	ldi	r24, 0x4D	; 77
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
    2738:	8e e4       	ldi	r24, 0x4E	; 78
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	fc 01       	movw	r30, r24
    273e:	80 81       	ld	r24, Z
    2740:	89 83       	std	Y+1, r24	; 0x01

	spi_deselect( );
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	cc df       	rcall	.-104    	; 0x26e0 <_ZN3rtc12spi_deselectEv>
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <_ZN3rtc19spi_master_transmitEh>:


// This routine exchanges 1 byte with the SPI port. 
unsigned char rtc::spi_master_transmit( unsigned char cData )
{
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	00 d0       	rcall	.+0      	; 0x275a <_ZN3rtc19spi_master_transmitEh+0x6>
    275a:	1f 92       	push	r1
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	6b 83       	std	Y+3, r22	; 0x03

	SPDR  = cData;	// Set Pointer to beginning of String
    2766:	8e e4       	ldi	r24, 0x4E	; 78
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	2b 81       	ldd	r18, Y+3	; 0x03
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
	/* wait until Char is sent */
	while ( ! (SPSR & ( 1 << SPIF ))){
    2770:	00 00       	nop
    2772:	8d e4       	ldi	r24, 0x4D	; 77
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	fc 01       	movw	r30, r24
    2778:	80 81       	ld	r24, Z
    277a:	80 95       	com	r24
    277c:	88 1f       	adc	r24, r24
    277e:	88 27       	eor	r24, r24
    2780:	88 1f       	adc	r24, r24
    2782:	88 23       	and	r24, r24
    2784:	b1 f7       	brne	.-20     	; 0x2772 <_ZN3rtc19spi_master_transmitEh+0x1e>
		;	
	}

	return SPDR;
    2786:	8e e4       	ldi	r24, 0x4E	; 78
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	fc 01       	movw	r30, r24
    278c:	80 81       	ld	r24, Z
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <_ZN3rtc10read_blockEhPhj>:

/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	27 97       	sbiw	r28, 0x07	; 7
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	6b 83       	std	Y+3, r22	; 0x03
    27b8:	5d 83       	std	Y+5, r21	; 0x05
    27ba:	4c 83       	std	Y+4, r20	; 0x04
    27bc:	3f 83       	std	Y+7, r19	; 0x07
    27be:	2e 83       	std	Y+6, r18	; 0x06
	
	spi_select( );
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	6f df       	rcall	.-290    	; 0x26a4 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( cAddr );
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	6b 81       	ldd	r22, Y+3	; 0x03
    27cc:	c3 df       	rcall	.-122    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    27ce:	0c c0       	rjmp	.+24     	; 0x27e8 <_ZN3rtc10read_blockEhPhj+0x4e>
		*pBuffer++ = spi_master_transmit( 0 );
    27d0:	0c 81       	ldd	r16, Y+4	; 0x04
    27d2:	1d 81       	ldd	r17, Y+5	; 0x05
    27d4:	c8 01       	movw	r24, r16
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9d 83       	std	Y+5, r25	; 0x05
    27da:	8c 83       	std	Y+4, r24	; 0x04
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	b8 df       	rcall	.-144    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
    27e4:	f8 01       	movw	r30, r16
    27e6:	80 83       	st	Z, r24
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
	
	spi_select( );

	spi_master_transmit( cAddr );
	while( iCount-- ){
    27e8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ea:	9f 81       	ldd	r25, Y+7	; 0x07
    27ec:	9c 01       	movw	r18, r24
    27ee:	21 50       	subi	r18, 0x01	; 1
    27f0:	31 09       	sbc	r19, r1
    27f2:	3f 83       	std	Y+7, r19	; 0x07
    27f4:	2e 83       	std	Y+6, r18	; 0x06
    27f6:	21 e0       	ldi	r18, 0x01	; 1
    27f8:	89 2b       	or	r24, r25
    27fa:	09 f4       	brne	.+2      	; 0x27fe <_ZN3rtc10read_blockEhPhj+0x64>
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	22 23       	and	r18, r18
    2800:	39 f7       	brne	.-50     	; 0x27d0 <_ZN3rtc10read_blockEhPhj+0x36>
		*pBuffer++ = spi_master_transmit( 0 );
	}

	spi_deselect();
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	6c df       	rcall	.-296    	; 0x26e0 <_ZN3rtc12spi_deselectEv>

}
    2808:	27 96       	adiw	r28, 0x07	; 7
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	08 95       	ret

0000281e <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	29 97       	sbiw	r28, 0x09	; 9
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	6d 83       	std	Y+5, r22	; 0x05
    2838:	5f 83       	std	Y+7, r21	; 0x07
    283a:	4e 83       	std	Y+6, r20	; 0x06
    283c:	39 87       	std	Y+9, r19	; 0x09
    283e:	28 87       	std	Y+8, r18	; 0x08
	
	unsigned char uchTempControlA { 0x00 };
    2840:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char uchTempControlB { 0x00 };
    2842:	19 82       	std	Y+1, r1	; 0x01
	
	
	read_block( RTC_ADDR_CON, &uchTempControlA, 1 );
    2844:	ae 01       	movw	r20, r28
    2846:	4e 5f       	subi	r20, 0xFE	; 254
    2848:	5f 4f       	sbci	r21, 0xFF	; 255
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	6f e0       	ldi	r22, 0x0F	; 15
    2854:	a2 df       	rcall	.-188    	; 0x279a <_ZN3rtc10read_blockEhPhj>
	if( ! (( uchTempControlA & 0x03 ) == 0x00 )){
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	88 2f       	mov	r24, r24
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	83 70       	andi	r24, 0x03	; 3
    285e:	99 27       	eor	r25, r25
    2860:	89 2b       	or	r24, r25
    2862:	89 f0       	breq	.+34     	; 0x2886 <_ZN3rtc11write_blockEhPhj+0x68>
		uchTempControlB = uchTempControlA & 0xFC;
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	8c 7f       	andi	r24, 0xFC	; 252
    2868:	89 83       	std	Y+1, r24	; 0x01
		spi_select( );
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	1a df       	rcall	.-460    	; 0x26a4 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	6f e8       	ldi	r22, 0x8F	; 143
    2876:	6e df       	rcall	.-292    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlB );
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	69 81       	ldd	r22, Y+1	; 0x01
    287e:	6a df       	rcall	.-300    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	2d df       	rcall	.-422    	; 0x26e0 <_ZN3rtc12spi_deselectEv>
	}
	
	spi_select( );
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	0c df       	rcall	.-488    	; 0x26a4 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	20 e8       	ldi	r18, 0x80	; 128
    2890:	28 0f       	add	r18, r24
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	62 2f       	mov	r22, r18
    2898:	5d df       	rcall	.-326    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    289a:	0d c0       	rjmp	.+26     	; 0x28b6 <_ZN3rtc11write_blockEhPhj+0x98>
		spi_master_transmit( *pBuffer++ );
    289c:	8e 81       	ldd	r24, Y+6	; 0x06
    289e:	9f 81       	ldd	r25, Y+7	; 0x07
    28a0:	9c 01       	movw	r18, r24
    28a2:	2f 5f       	subi	r18, 0xFF	; 255
    28a4:	3f 4f       	sbci	r19, 0xFF	; 255
    28a6:	3f 83       	std	Y+7, r19	; 0x07
    28a8:	2e 83       	std	Y+6, r18	; 0x06
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 81       	ld	r18, Z
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	62 2f       	mov	r22, r18
    28b4:	4f df       	rcall	.-354    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
	}
	
	spi_select( );

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
	while( iCount-- ){
    28b6:	88 85       	ldd	r24, Y+8	; 0x08
    28b8:	99 85       	ldd	r25, Y+9	; 0x09
    28ba:	9c 01       	movw	r18, r24
    28bc:	21 50       	subi	r18, 0x01	; 1
    28be:	31 09       	sbc	r19, r1
    28c0:	39 87       	std	Y+9, r19	; 0x09
    28c2:	28 87       	std	Y+8, r18	; 0x08
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	89 2b       	or	r24, r25
    28c8:	09 f4       	brne	.+2      	; 0x28cc <_ZN3rtc11write_blockEhPhj+0xae>
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	22 23       	and	r18, r18
    28ce:	31 f7       	brne	.-52     	; 0x289c <_ZN3rtc11write_blockEhPhj+0x7e>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	05 df       	rcall	.-502    	; 0x26e0 <_ZN3rtc12spi_deselectEv>
	
	if( ! ( iAddr == RTC_ADDR_CON )){
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	8f 30       	cpi	r24, 0x0F	; 15
    28da:	79 f0       	breq	.+30     	; 0x28fa <_ZN3rtc11write_blockEhPhj+0xdc>
		spi_select( );
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	e1 de       	rcall	.-574    	; 0x26a4 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	6f e8       	ldi	r22, 0x8F	; 143
    28e8:	35 df       	rcall	.-406    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlA );
    28ea:	2a 81       	ldd	r18, Y+2	; 0x02
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	62 2f       	mov	r22, r18
    28f2:	30 df       	rcall	.-416    	; 0x2754 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	f3 de       	rcall	.-538    	; 0x26e0 <_ZN3rtc12spi_deselectEv>
	}
}
    28fa:	29 96       	adiw	r28, 0x09	; 9
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <_ZN3rtc8get_timeEv>:


rtc_time rtc::get_time( ){
    290c:	2f 92       	push	r2
    290e:	3f 92       	push	r3
    2910:	4f 92       	push	r4
    2912:	5f 92       	push	r5
    2914:	6f 92       	push	r6
    2916:	7f 92       	push	r7
    2918:	8f 92       	push	r8
    291a:	9f 92       	push	r9
    291c:	af 92       	push	r10
    291e:	bf 92       	push	r11
    2920:	cf 92       	push	r12
    2922:	df 92       	push	r13
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	60 97       	sbiw	r28, 0x10	; 16
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	8f 87       	std	Y+15, r24	; 0x0f

	rtc_time rtmToConvert;


	read_block( RTC_ADDR_START, ( unsigned char * )&rtmToConvert, sizeof( rtc_time ));
    2944:	ae 01       	movw	r20, r28
    2946:	48 5f       	subi	r20, 0xF8	; 248
    2948:	5f 4f       	sbci	r21, 0xFF	; 255
    294a:	8f 85       	ldd	r24, Y+15	; 0x0f
    294c:	98 89       	ldd	r25, Y+16	; 0x10
    294e:	27 e0       	ldi	r18, 0x07	; 7
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	22 df       	rcall	.-444    	; 0x279a <_ZN3rtc10read_blockEhPhj>

	return rtmToConvert;
    2956:	27 e0       	ldi	r18, 0x07	; 7
    2958:	fe 01       	movw	r30, r28
    295a:	38 96       	adiw	r30, 0x08	; 8
    295c:	ce 01       	movw	r24, r28
    295e:	01 96       	adiw	r24, 0x01	; 1
    2960:	dc 01       	movw	r26, r24
    2962:	01 90       	ld	r0, Z+
    2964:	0d 92       	st	X+, r0
    2966:	2a 95       	dec	r18
    2968:	e1 f7       	brne	.-8      	; 0x2962 <_ZN3rtc8get_timeEv+0x56>
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	69 81       	ldd	r22, Y+1	; 0x01
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	5a 81       	ldd	r21, Y+2	; 0x02
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	4b 81       	ldd	r20, Y+3	; 0x03
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	2d 81       	ldd	r18, Y+5	; 0x05
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	8f 81       	ldd	r24, Y+7	; 0x07
    2986:	26 2e       	mov	r2, r22
    2988:	35 2e       	mov	r3, r21
    298a:	44 2e       	mov	r4, r20
    298c:	53 2e       	mov	r5, r19
    298e:	62 2e       	mov	r6, r18
    2990:	79 2e       	mov	r7, r25
    2992:	88 2e       	mov	r8, r24
    2994:	a2 2c       	mov	r10, r2
    2996:	b3 2c       	mov	r11, r3
    2998:	c4 2c       	mov	r12, r4
    299a:	d5 2c       	mov	r13, r5
    299c:	e6 2c       	mov	r14, r6
    299e:	f7 2c       	mov	r15, r7
    29a0:	08 2d       	mov	r16, r8
    29a2:	19 2d       	mov	r17, r9
}
    29a4:	2a 2d       	mov	r18, r10
    29a6:	3b 2d       	mov	r19, r11
    29a8:	4c 2d       	mov	r20, r12
    29aa:	5d 2d       	mov	r21, r13
    29ac:	6e 2d       	mov	r22, r14
    29ae:	7f 2d       	mov	r23, r15
    29b0:	80 2f       	mov	r24, r16
    29b2:	91 2f       	mov	r25, r17
    29b4:	60 96       	adiw	r28, 0x10	; 16
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	bf 90       	pop	r11
    29d2:	af 90       	pop	r10
    29d4:	9f 90       	pop	r9
    29d6:	8f 90       	pop	r8
    29d8:	7f 90       	pop	r7
    29da:	6f 90       	pop	r6
    29dc:	5f 90       	pop	r5
    29de:	4f 90       	pop	r4
    29e0:	3f 90       	pop	r3
    29e2:	2f 90       	pop	r2
    29e4:	08 95       	ret

000029e6 <_ZN3rtc8set_timeEP8rtc_time>:


void rtc::set_time( rtc_time* rtmSetTime ){
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <_ZN3rtc8set_timeEP8rtc_time+0x6>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <_ZN3rtc8set_timeEP8rtc_time+0x8>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	7c 83       	std	Y+4, r23	; 0x04
    29f8:	6b 83       	std	Y+3, r22	; 0x03

	write_block( RTC_ADDR_START, ( unsigned char * )rtmSetTime, sizeof(rtc_time));
    29fa:	4b 81       	ldd	r20, Y+3	; 0x03
    29fc:	5c 81       	ldd	r21, Y+4	; 0x04
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	27 e0       	ldi	r18, 0x07	; 7
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	0a df       	rcall	.-492    	; 0x281e <_ZN3rtc11write_blockEhPhj>
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <_ZN3rtc11rtm_to_charE8rtc_timePhj>:


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	a6 97       	sbiw	r28, 0x26	; 38
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	9b 8f       	std	Y+27, r25	; 0x1b
    2a3a:	8a 8f       	std	Y+26, r24	; 0x1a
    2a3c:	0c 8f       	std	Y+28, r16	; 0x1c
    2a3e:	1d 8f       	std	Y+29, r17	; 0x1d
    2a40:	2e 8f       	std	Y+30, r18	; 0x1e
    2a42:	3f 8f       	std	Y+31, r19	; 0x1f
    2a44:	48 a3       	std	Y+32, r20	; 0x20
    2a46:	59 a3       	std	Y+33, r21	; 0x21
    2a48:	6a a3       	std	Y+34, r22	; 0x22
    2a4a:	fc a2       	std	Y+36, r15	; 0x24
    2a4c:	eb a2       	std	Y+35, r14	; 0x23
    2a4e:	de a2       	std	Y+38, r13	; 0x26
    2a50:	cd a2       	std	Y+37, r12	; 0x25
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
	uchTimeOut[valTextOffset + 15] = valDates >> 8;

	memcpy( uchToReturn, uchTimeOut, valCharLen );

}
    2a52:	0d b7       	in	r16, 0x3d	; 61
    2a54:	1e b7       	in	r17, 0x3e	; 62
    2a56:	8d b7       	in	r24, 0x3d	; 61
    2a58:	9e b7       	in	r25, 0x3e	; 62
    2a5a:	7c 01       	movw	r14, r24
}


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
	
	unsigned char uchTimeOut[ valCharLen ];
    2a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9d 83       	std	Y+5, r25	; 0x05
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	2d b7       	in	r18, 0x3d	; 61
    2a6a:	3e b7       	in	r19, 0x3e	; 62
    2a6c:	28 1b       	sub	r18, r24
    2a6e:	39 0b       	sbc	r19, r25
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	3e bf       	out	0x3e, r19	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	2d bf       	out	0x3d, r18	; 61
    2a7a:	8d b7       	in	r24, 0x3d	; 61
    2a7c:	9e b7       	in	r25, 0x3e	; 62
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	9f 83       	std	Y+7, r25	; 0x07
    2a82:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t valTimeLength = RTC_DISP_LEN;
    2a84:	80 e1       	ldi	r24, 0x10	; 16
    2a86:	88 87       	std	Y+8, r24	; 0x08
	unsigned int valTextOffset = ( valCharLen - valTimeLength ) / 2;
    2a88:	88 85       	ldd	r24, Y+8	; 0x08
    2a8a:	88 2f       	mov	r24, r24
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	2d a1       	ldd	r18, Y+37	; 0x25
    2a90:	3e a1       	ldd	r19, Y+38	; 0x26
    2a92:	a9 01       	movw	r20, r18
    2a94:	48 1b       	sub	r20, r24
    2a96:	59 0b       	sbc	r21, r25
    2a98:	ca 01       	movw	r24, r20
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	9a 87       	std	Y+10, r25	; 0x0a
    2aa0:	89 87       	std	Y+9, r24	; 0x09
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    2aa2:	1b 82       	std	Y+3, r1	; 0x03
    2aa4:	1a 82       	std	Y+2, r1	; 0x02
    2aa6:	0e c0       	rjmp	.+28     	; 0x2ac4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
		uchTimeOut[valN] = ' ';
    2aa8:	2e 81       	ldd	r18, Y+6	; 0x06
    2aaa:	3f 81       	ldd	r19, Y+7	; 0x07
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	20 e2       	ldi	r18, 0x20	; 32
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	20 83       	st	Z, r18
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	9b 83       	std	Y+3, r25	; 0x03
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ac6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aca:	9e a1       	ldd	r25, Y+38	; 0x26
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	58 f3       	brcs	.-42     	; 0x2aa8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
		uchTimeOut[valN] = ' ';
	}

	valMins &= 0x0000;
    2ad2:	1c 86       	std	Y+12, r1	; 0x0c
    2ad4:	1b 86       	std	Y+11, r1	; 0x0b
	valMins |= (( rtmToConvert.ucMinutes & 0xF0 ) + 0x0300 ) << 4;
    2ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	80 7f       	andi	r24, 0xF0	; 240
    2ade:	99 27       	eor	r25, r25
    2ae0:	9d 5f       	subi	r25, 0xFD	; 253
    2ae2:	82 95       	swap	r24
    2ae4:	92 95       	swap	r25
    2ae6:	90 7f       	andi	r25, 0xF0	; 240
    2ae8:	98 27       	eor	r25, r24
    2aea:	80 7f       	andi	r24, 0xF0	; 240
    2aec:	98 27       	eor	r25, r24
    2aee:	9c 01       	movw	r18, r24
    2af0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2af2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2af4:	82 2b       	or	r24, r18
    2af6:	93 2b       	or	r25, r19
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	8b 87       	std	Y+11, r24	; 0x0b
	valMins |= ( rtmToConvert.ucMinutes & 0x0F) + 0x0030;
    2afc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	8f 70       	andi	r24, 0x0F	; 15
    2b04:	99 27       	eor	r25, r25
    2b06:	c0 96       	adiw	r24, 0x30	; 48
    2b08:	9c 01       	movw	r18, r24
    2b0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b0e:	82 2b       	or	r24, r18
    2b10:	93 2b       	or	r25, r19
    2b12:	9c 87       	std	Y+12, r25	; 0x0c
    2b14:	8b 87       	std	Y+11, r24	; 0x0b
	valHours &= 0x0000;
    2b16:	1e 86       	std	Y+14, r1	; 0x0e
    2b18:	1d 86       	std	Y+13, r1	; 0x0d
	valHours |= (( rtmToConvert.ucHours & 0x10 ) + 0x0300 ) << 4;
    2b1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	80 71       	andi	r24, 0x10	; 16
    2b22:	99 27       	eor	r25, r25
    2b24:	9d 5f       	subi	r25, 0xFD	; 253
    2b26:	82 95       	swap	r24
    2b28:	92 95       	swap	r25
    2b2a:	90 7f       	andi	r25, 0xF0	; 240
    2b2c:	98 27       	eor	r25, r24
    2b2e:	80 7f       	andi	r24, 0xF0	; 240
    2b30:	98 27       	eor	r25, r24
    2b32:	9c 01       	movw	r18, r24
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	82 2b       	or	r24, r18
    2b3a:	93 2b       	or	r25, r19
    2b3c:	9e 87       	std	Y+14, r25	; 0x0e
    2b3e:	8d 87       	std	Y+13, r24	; 0x0d
	valHours |= ( rtmToConvert.ucHours & 0x0F) + 0x0030;
    2b40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	8f 70       	andi	r24, 0x0F	; 15
    2b48:	99 27       	eor	r25, r25
    2b4a:	c0 96       	adiw	r24, 0x30	; 48
    2b4c:	9c 01       	movw	r18, r24
    2b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b52:	82 2b       	or	r24, r18
    2b54:	93 2b       	or	r25, r19
    2b56:	9e 87       	std	Y+14, r25	; 0x0e
    2b58:	8d 87       	std	Y+13, r24	; 0x0d
	if(( rtmToConvert.ucHours & RTC_12PM ) == RTC_12AM ){
    2b5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b5c:	88 2f       	mov	r24, r24
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	80 76       	andi	r24, 0x60	; 96
    2b62:	99 27       	eor	r25, r25
    2b64:	80 34       	cpi	r24, 0x40	; 64
    2b66:	91 05       	cpc	r25, r1
    2b68:	19 f4       	brne	.+6      	; 0x2b70 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
		valAMPM = 'A';
    2b6a:	81 e4       	ldi	r24, 0x41	; 65
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
	}else{
		valAMPM = 'P';
    2b70:	80 e5       	ldi	r24, 0x50	; 80
    2b72:	89 83       	std	Y+1, r24	; 0x01
	}
	valDay &= 0x00;
    2b74:	1f 86       	std	Y+15, r1	; 0x0f
	valDays &= 0x00000000;
    2b76:	19 8a       	std	Y+17, r1	; 0x11
    2b78:	18 8a       	std	Y+16, r1	; 0x10
	valDay = ((( rtmToConvert.ucDay >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucDay ) & 0x0F );
    2b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7c:	82 95       	swap	r24
    2b7e:	8f 70       	andi	r24, 0x0F	; 15
    2b80:	88 0f       	add	r24, r24
    2b82:	98 2f       	mov	r25, r24
    2b84:	99 0f       	add	r25, r25
    2b86:	99 0f       	add	r25, r25
    2b88:	98 0f       	add	r25, r24
    2b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b8c:	8f 70       	andi	r24, 0x0F	; 15
    2b8e:	89 0f       	add	r24, r25
    2b90:	8f 87       	std	Y+15, r24	; 0x0f
	valDays = chrDays[(( valDay == 0 ) ? 0 : valDay - 1 ) * 2];
    2b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b94:	88 23       	and	r24, r24
    2b96:	39 f0       	breq	.+14     	; 0x2ba6 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    2b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	8e 57       	subi	r24, 0x7E	; 126
    2bac:	9e 4f       	sbci	r25, 0xFE	; 254
    2bae:	fc 01       	movw	r30, r24
    2bb0:	80 81       	ld	r24, Z
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	99 8b       	std	Y+17, r25	; 0x11
    2bb8:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 1] << 8;
    2bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bbc:	88 23       	and	r24, r24
    2bbe:	41 f0       	breq	.+16     	; 0x2bd0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    2bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc2:	88 2f       	mov	r24, r24
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	8e 57       	subi	r24, 0x7E	; 126
    2bd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2bd8:	fc 01       	movw	r30, r24
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 2f       	mov	r25, r24
    2be2:	88 27       	eor	r24, r24
    2be4:	9c 01       	movw	r18, r24
    2be6:	88 89       	ldd	r24, Y+16	; 0x10
    2be8:	99 89       	ldd	r25, Y+17	; 0x11
    2bea:	82 2b       	or	r24, r18
    2bec:	93 2b       	or	r25, r19
    2bee:	99 8b       	std	Y+17, r25	; 0x11
    2bf0:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= ( static_cast<uint16_t>( chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 2])) << 16;
    2bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf4:	88 23       	and	r24, r24
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    2bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfa:	88 2f       	mov	r24, r24
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	8e 57       	subi	r24, 0x7E	; 126
    2c0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	99 27       	eor	r25, r25
    2c16:	88 27       	eor	r24, r24
    2c18:	28 89       	ldd	r18, Y+16	; 0x10
    2c1a:	39 89       	ldd	r19, Y+17	; 0x11
    2c1c:	82 2b       	or	r24, r18
    2c1e:	93 2b       	or	r25, r19
    2c20:	99 8b       	std	Y+17, r25	; 0x11
    2c22:	88 8b       	std	Y+16, r24	; 0x10
	valMonth &= 0x00;
    2c24:	1b 8a       	std	Y+19, r1	; 0x13
    2c26:	1a 8a       	std	Y+18, r1	; 0x12
	valMonths &= 0x00000000;
    2c28:	1c 8a       	std	Y+20, r1	; 0x14
    2c2a:	1d 8a       	std	Y+21, r1	; 0x15
    2c2c:	1e 8a       	std	Y+22, r1	; 0x16
    2c2e:	1f 8a       	std	Y+23, r1	; 0x17
	valMonth = ((( rtmToConvert.ucMonth >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucMonth ) & 0x0F );
    2c30:	89 a1       	ldd	r24, Y+33	; 0x21
    2c32:	82 95       	swap	r24
    2c34:	8f 70       	andi	r24, 0x0F	; 15
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	99 27       	eor	r25, r25
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	9c 01       	movw	r18, r24
    2c42:	22 0f       	add	r18, r18
    2c44:	33 1f       	adc	r19, r19
    2c46:	22 0f       	add	r18, r18
    2c48:	33 1f       	adc	r19, r19
    2c4a:	28 0f       	add	r18, r24
    2c4c:	39 1f       	adc	r19, r25
    2c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c50:	88 2f       	mov	r24, r24
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	8f 70       	andi	r24, 0x0F	; 15
    2c56:	99 27       	eor	r25, r25
    2c58:	82 0f       	add	r24, r18
    2c5a:	93 1f       	adc	r25, r19
    2c5c:	9b 8b       	std	Y+19, r25	; 0x13
    2c5e:	8a 8b       	std	Y+18, r24	; 0x12
	valMonths = chrMonths[(( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3];
    2c60:	8a 89       	ldd	r24, Y+18	; 0x12
    2c62:	9b 89       	ldd	r25, Y+19	; 0x13
    2c64:	89 2b       	or	r24, r25
    2c66:	49 f0       	breq	.+18     	; 0x2c7a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x262>
    2c68:	2a 89       	ldd	r18, Y+18	; 0x12
    2c6a:	3b 89       	ldd	r19, Y+19	; 0x13
    2c6c:	c9 01       	movw	r24, r18
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	82 0f       	add	r24, r18
    2c74:	93 1f       	adc	r25, r19
    2c76:	03 97       	sbiw	r24, 0x03	; 3
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x266>
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	82 5a       	subi	r24, 0xA2	; 162
    2c80:	9e 4f       	sbci	r25, 0xFE	; 254
    2c82:	fc 01       	movw	r30, r24
    2c84:	80 81       	ld	r24, Z
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e0       	ldi	r26, 0x00	; 0
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	8c 8b       	std	Y+20, r24	; 0x14
    2c90:	9d 8b       	std	Y+21, r25	; 0x15
    2c92:	ae 8b       	std	Y+22, r26	; 0x16
    2c94:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 1] << 8;
    2c96:	8a 89       	ldd	r24, Y+18	; 0x12
    2c98:	9b 89       	ldd	r25, Y+19	; 0x13
    2c9a:	89 2b       	or	r24, r25
    2c9c:	49 f0       	breq	.+18     	; 0x2cb0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x298>
    2c9e:	2a 89       	ldd	r18, Y+18	; 0x12
    2ca0:	3b 89       	ldd	r19, Y+19	; 0x13
    2ca2:	c9 01       	movw	r24, r18
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	82 0f       	add	r24, r18
    2caa:	93 1f       	adc	r25, r19
    2cac:	02 97       	sbiw	r24, 0x02	; 2
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x29c>
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	82 5a       	subi	r24, 0xA2	; 162
    2cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb8:	fc 01       	movw	r30, r24
    2cba:	80 81       	ld	r24, Z
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	88 27       	eor	r24, r24
    2cc4:	09 2e       	mov	r0, r25
    2cc6:	00 0c       	add	r0, r0
    2cc8:	aa 0b       	sbc	r26, r26
    2cca:	bb 0b       	sbc	r27, r27
    2ccc:	2c 89       	ldd	r18, Y+20	; 0x14
    2cce:	3d 89       	ldd	r19, Y+21	; 0x15
    2cd0:	4e 89       	ldd	r20, Y+22	; 0x16
    2cd2:	5f 89       	ldd	r21, Y+23	; 0x17
    2cd4:	82 2b       	or	r24, r18
    2cd6:	93 2b       	or	r25, r19
    2cd8:	a4 2b       	or	r26, r20
    2cda:	b5 2b       	or	r27, r21
    2cdc:	8c 8b       	std	Y+20, r24	; 0x14
    2cde:	9d 8b       	std	Y+21, r25	; 0x15
    2ce0:	ae 8b       	std	Y+22, r26	; 0x16
    2ce2:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= ( static_cast<uint32_t>( chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 2])) << 16;
    2ce4:	8a 89       	ldd	r24, Y+18	; 0x12
    2ce6:	9b 89       	ldd	r25, Y+19	; 0x13
    2ce8:	89 2b       	or	r24, r25
    2cea:	49 f0       	breq	.+18     	; 0x2cfe <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e6>
    2cec:	2a 89       	ldd	r18, Y+18	; 0x12
    2cee:	3b 89       	ldd	r19, Y+19	; 0x13
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	82 0f       	add	r24, r18
    2cf8:	93 1f       	adc	r25, r19
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2ea>
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	82 5a       	subi	r24, 0xA2	; 162
    2d04:	9e 4f       	sbci	r25, 0xFE	; 254
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	dc 01       	movw	r26, r24
    2d14:	99 27       	eor	r25, r25
    2d16:	88 27       	eor	r24, r24
    2d18:	2c 89       	ldd	r18, Y+20	; 0x14
    2d1a:	3d 89       	ldd	r19, Y+21	; 0x15
    2d1c:	4e 89       	ldd	r20, Y+22	; 0x16
    2d1e:	5f 89       	ldd	r21, Y+23	; 0x17
    2d20:	82 2b       	or	r24, r18
    2d22:	93 2b       	or	r25, r19
    2d24:	a4 2b       	or	r26, r20
    2d26:	b5 2b       	or	r27, r21
    2d28:	8c 8b       	std	Y+20, r24	; 0x14
    2d2a:	9d 8b       	std	Y+21, r25	; 0x15
    2d2c:	ae 8b       	std	Y+22, r26	; 0x16
    2d2e:	bf 8b       	std	Y+23, r27	; 0x17
	valDates &= 0x0000;
    2d30:	19 8e       	std	Y+25, r1	; 0x19
    2d32:	18 8e       	std	Y+24, r1	; 0x18
	valDates |= (( rtmToConvert.ucDate & 0xF0 ) + 0x0300 ) << 4;
    2d34:	88 a1       	ldd	r24, Y+32	; 0x20
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	80 7f       	andi	r24, 0xF0	; 240
    2d3c:	99 27       	eor	r25, r25
    2d3e:	9d 5f       	subi	r25, 0xFD	; 253
    2d40:	82 95       	swap	r24
    2d42:	92 95       	swap	r25
    2d44:	90 7f       	andi	r25, 0xF0	; 240
    2d46:	98 27       	eor	r25, r24
    2d48:	80 7f       	andi	r24, 0xF0	; 240
    2d4a:	98 27       	eor	r25, r24
    2d4c:	9c 01       	movw	r18, r24
    2d4e:	88 8d       	ldd	r24, Y+24	; 0x18
    2d50:	99 8d       	ldd	r25, Y+25	; 0x19
    2d52:	82 2b       	or	r24, r18
    2d54:	93 2b       	or	r25, r19
    2d56:	99 8f       	std	Y+25, r25	; 0x19
    2d58:	88 8f       	std	Y+24, r24	; 0x18
	valDates |= ( rtmToConvert.ucDate & 0x0F) + 0x0030;
    2d5a:	88 a1       	ldd	r24, Y+32	; 0x20
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	8f 70       	andi	r24, 0x0F	; 15
    2d62:	99 27       	eor	r25, r25
    2d64:	c0 96       	adiw	r24, 0x30	; 48
    2d66:	9c 01       	movw	r18, r24
    2d68:	88 8d       	ldd	r24, Y+24	; 0x18
    2d6a:	99 8d       	ldd	r25, Y+25	; 0x19
    2d6c:	82 2b       	or	r24, r18
    2d6e:	93 2b       	or	r25, r19
    2d70:	99 8f       	std	Y+25, r25	; 0x19
    2d72:	88 8f       	std	Y+24, r24	; 0x18
	
	uchTimeOut[valTextOffset] = valHours >> 8;
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	89 2f       	mov	r24, r25
    2d7a:	99 27       	eor	r25, r25
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d80:	3f 81       	ldd	r19, Y+7	; 0x07
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 1] = valHours & 0x00FF;
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d96:	2e 81       	ldd	r18, Y+6	; 0x06
    2d98:	3f 81       	ldd	r19, Y+7	; 0x07
    2d9a:	82 0f       	add	r24, r18
    2d9c:	93 1f       	adc	r25, r19
    2d9e:	fc 01       	movw	r30, r24
    2da0:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 2] = ':';
    2da2:	89 85       	ldd	r24, Y+9	; 0x09
    2da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da6:	02 96       	adiw	r24, 0x02	; 2
    2da8:	2e 81       	ldd	r18, Y+6	; 0x06
    2daa:	3f 81       	ldd	r19, Y+7	; 0x07
    2dac:	82 0f       	add	r24, r18
    2dae:	93 1f       	adc	r25, r19
    2db0:	2a e3       	ldi	r18, 0x3A	; 58
    2db2:	fc 01       	movw	r30, r24
    2db4:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 3] = valMins >> 8;
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	03 96       	adiw	r24, 0x03	; 3
    2dbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dc0:	23 2f       	mov	r18, r19
    2dc2:	33 27       	eor	r19, r19
    2dc4:	42 2f       	mov	r20, r18
    2dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    2dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dca:	82 0f       	add	r24, r18
    2dcc:	93 1f       	adc	r25, r19
    2dce:	fc 01       	movw	r30, r24
    2dd0:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 4] = valMins & 0x00FF;
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	04 96       	adiw	r24, 0x04	; 4
    2dd8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2dda:	2e 81       	ldd	r18, Y+6	; 0x06
    2ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    2dde:	82 0f       	add	r24, r18
    2de0:	93 1f       	adc	r25, r19
    2de2:	fc 01       	movw	r30, r24
    2de4:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 5] = valAMPM;
    2de6:	89 85       	ldd	r24, Y+9	; 0x09
    2de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dea:	05 96       	adiw	r24, 0x05	; 5
    2dec:	2e 81       	ldd	r18, Y+6	; 0x06
    2dee:	3f 81       	ldd	r19, Y+7	; 0x07
    2df0:	82 0f       	add	r24, r18
    2df2:	93 1f       	adc	r25, r19
    2df4:	29 81       	ldd	r18, Y+1	; 0x01
    2df6:	fc 01       	movw	r30, r24
    2df8:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 6] = 'M';
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfe:	06 96       	adiw	r24, 0x06	; 6
    2e00:	2e 81       	ldd	r18, Y+6	; 0x06
    2e02:	3f 81       	ldd	r19, Y+7	; 0x07
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	2d e4       	ldi	r18, 0x4D	; 77
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 7] = ' ';
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	07 96       	adiw	r24, 0x07	; 7
    2e14:	2e 81       	ldd	r18, Y+6	; 0x06
    2e16:	3f 81       	ldd	r19, Y+7	; 0x07
    2e18:	82 0f       	add	r24, r18
    2e1a:	93 1f       	adc	r25, r19
    2e1c:	20 e2       	ldi	r18, 0x20	; 32
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 8] = valDays & 0xFF;
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	08 96       	adiw	r24, 0x08	; 8
    2e28:	48 89       	ldd	r20, Y+16	; 0x10
    2e2a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e2c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e2e:	82 0f       	add	r24, r18
    2e30:	93 1f       	adc	r25, r19
    2e32:	fc 01       	movw	r30, r24
    2e34:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 9] = ( valDays >> 8 ) & 0xFF;
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	09 96       	adiw	r24, 0x09	; 9
    2e3c:	28 89       	ldd	r18, Y+16	; 0x10
    2e3e:	39 89       	ldd	r19, Y+17	; 0x11
    2e40:	23 2f       	mov	r18, r19
    2e42:	33 27       	eor	r19, r19
    2e44:	42 2f       	mov	r20, r18
    2e46:	2e 81       	ldd	r18, Y+6	; 0x06
    2e48:	3f 81       	ldd	r19, Y+7	; 0x07
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
    2e4e:	fc 01       	movw	r30, r24
    2e50:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 10] = ',';
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e56:	0a 96       	adiw	r24, 0x0a	; 10
    2e58:	2e 81       	ldd	r18, Y+6	; 0x06
    2e5a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e5c:	82 0f       	add	r24, r18
    2e5e:	93 1f       	adc	r25, r19
    2e60:	2c e2       	ldi	r18, 0x2C	; 44
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 11] = valMonths & 0xFF;
    2e66:	89 85       	ldd	r24, Y+9	; 0x09
    2e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6a:	0b 96       	adiw	r24, 0x0b	; 11
    2e6c:	4c 89       	ldd	r20, Y+20	; 0x14
    2e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e70:	3f 81       	ldd	r19, Y+7	; 0x07
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	fc 01       	movw	r30, r24
    2e78:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 12] = ( valMonths >> 8 ) & 0xFF;
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	9c 01       	movw	r18, r24
    2e80:	24 5f       	subi	r18, 0xF4	; 244
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	8c 89       	ldd	r24, Y+20	; 0x14
    2e86:	9d 89       	ldd	r25, Y+21	; 0x15
    2e88:	ae 89       	ldd	r26, Y+22	; 0x16
    2e8a:	bf 89       	ldd	r27, Y+23	; 0x17
    2e8c:	89 2f       	mov	r24, r25
    2e8e:	9a 2f       	mov	r25, r26
    2e90:	ab 2f       	mov	r26, r27
    2e92:	bb 27       	eor	r27, r27
    2e94:	48 2f       	mov	r20, r24
    2e96:	8e 81       	ldd	r24, Y+6	; 0x06
    2e98:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9a:	82 0f       	add	r24, r18
    2e9c:	93 1f       	adc	r25, r19
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 13] = ( valMonths >> 16 ) & 0xFF;
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	9c 01       	movw	r18, r24
    2ea8:	23 5f       	subi	r18, 0xF3	; 243
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2eac:	8c 89       	ldd	r24, Y+20	; 0x14
    2eae:	9d 89       	ldd	r25, Y+21	; 0x15
    2eb0:	ae 89       	ldd	r26, Y+22	; 0x16
    2eb2:	bf 89       	ldd	r27, Y+23	; 0x17
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	aa 27       	eor	r26, r26
    2eb8:	bb 27       	eor	r27, r27
    2eba:	48 2f       	mov	r20, r24
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec0:	82 0f       	add	r24, r18
    2ec2:	93 1f       	adc	r25, r19
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	0e 96       	adiw	r24, 0x0e	; 14
    2ece:	48 8d       	ldd	r20, Y+24	; 0x18
    2ed0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ed2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ed4:	82 0f       	add	r24, r18
    2ed6:	93 1f       	adc	r25, r19
    2ed8:	fc 01       	movw	r30, r24
    2eda:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 15] = valDates >> 8;
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	0f 96       	adiw	r24, 0x0f	; 15
    2ee2:	28 8d       	ldd	r18, Y+24	; 0x18
    2ee4:	39 8d       	ldd	r19, Y+25	; 0x19
    2ee6:	23 2f       	mov	r18, r19
    2ee8:	33 27       	eor	r19, r19
    2eea:	42 2f       	mov	r20, r18
    2eec:	2e 81       	ldd	r18, Y+6	; 0x06
    2eee:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	40 83       	st	Z, r20

	memcpy( uchToReturn, uchTimeOut, valCharLen );
    2ef8:	2e 81       	ldd	r18, Y+6	; 0x06
    2efa:	3f 81       	ldd	r19, Y+7	; 0x07
    2efc:	4d a1       	ldd	r20, Y+37	; 0x25
    2efe:	5e a1       	ldd	r21, Y+38	; 0x26
    2f00:	8b a1       	ldd	r24, Y+35	; 0x23
    2f02:	9c a1       	ldd	r25, Y+36	; 0x24
    2f04:	b9 01       	movw	r22, r18
    2f06:	76 d3       	rcall	.+1772   	; 0x35f4 <memcpy>
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	fe be       	out	0x3e, r15	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	ed be       	out	0x3d, r14	; 61

}
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	1e bf       	out	0x3e, r17	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	0d bf       	out	0x3d, r16	; 61
    2f1c:	a6 96       	adiw	r28, 0x26	; 38
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	08 95       	ret

00002f3a <_ZN3rtc8alarm_onEh>:

void rtc::alarm_on( uint8_t valAlarm01 ){
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <_ZN3rtc8alarm_onEh+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <_ZN3rtc8alarm_onEh+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	9b 83       	std	Y+3, r25	; 0x03
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    2f4c:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    2f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	b1 f4       	brne	.+44     	; 0x2f80 <_ZN3rtc8alarm_onEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	9b 81       	ldd	r25, Y+3	; 0x03
    2f58:	21 e0       	ldi	r18, 0x01	; 1
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	ae 01       	movw	r20, r28
    2f5e:	4f 5f       	subi	r20, 0xFF	; 255
    2f60:	5f 4f       	sbci	r21, 0xFF	; 255
    2f62:	6f e0       	ldi	r22, 0x0F	; 15
    2f64:	1a dc       	rcall	.-1996   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x03;
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	83 60       	ori	r24, 0x03	; 3
    2f6a:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	21 e0       	ldi	r18, 0x01	; 1
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	ae 01       	movw	r20, r28
    2f76:	4f 5f       	subi	r20, 0xFF	; 255
    2f78:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7a:	6f e0       	ldi	r22, 0x0F	; 15
    2f7c:	50 dc       	rcall	.-1888   	; 0x281e <_ZN3rtc11write_blockEhPhj>
    2f7e:	31 c0       	rjmp	.+98     	; 0x2fe2 <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	88 23       	and	r24, r24
    2f84:	b1 f4       	brne	.+44     	; 0x2fb2 <_ZN3rtc8alarm_onEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8a:	21 e0       	ldi	r18, 0x01	; 1
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	ae 01       	movw	r20, r28
    2f90:	4f 5f       	subi	r20, 0xFF	; 255
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    2f94:	6f e0       	ldi	r22, 0x0F	; 15
    2f96:	01 dc       	rcall	.-2046   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x01;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	81 60       	ori	r24, 0x01	; 1
    2f9c:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	ae 01       	movw	r20, r28
    2fa8:	4f 5f       	subi	r20, 0xFF	; 255
    2faa:	5f 4f       	sbci	r21, 0xFF	; 255
    2fac:	6f e0       	ldi	r22, 0x0F	; 15
    2fae:	37 dc       	rcall	.-1938   	; 0x281e <_ZN3rtc11write_blockEhPhj>
    2fb0:	18 c0       	rjmp	.+48     	; 0x2fe2 <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	a9 f4       	brne	.+42     	; 0x2fe2 <_ZN3rtc8alarm_onEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	21 e0       	ldi	r18, 0x01	; 1
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	ae 01       	movw	r20, r28
    2fc2:	4f 5f       	subi	r20, 0xFF	; 255
    2fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc6:	6f e0       	ldi	r22, 0x0F	; 15
    2fc8:	e8 db       	rcall	.-2096   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x02;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	82 60       	ori	r24, 0x02	; 2
    2fce:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	21 e0       	ldi	r18, 0x01	; 1
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	ae 01       	movw	r20, r28
    2fda:	4f 5f       	subi	r20, 0xFF	; 255
    2fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fde:	6f e0       	ldi	r22, 0x0F	; 15
    2fe0:	1e dc       	rcall	.-1988   	; 0x281e <_ZN3rtc11write_blockEhPhj>
	}
	
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <_ZN3rtc9alarm_offEh>:


void rtc::alarm_off( uint8_t valAlarm01 ){
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <_ZN3rtc9alarm_offEh+0x6>
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <_ZN3rtc9alarm_offEh+0x8>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	9b 83       	std	Y+3, r25	; 0x03
    2ffe:	8a 83       	std	Y+2, r24	; 0x02
    3000:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    3002:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    3004:	8c 81       	ldd	r24, Y+4	; 0x04
    3006:	82 30       	cpi	r24, 0x02	; 2
    3008:	b1 f4       	brne	.+44     	; 0x3036 <_ZN3rtc9alarm_offEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	ae 01       	movw	r20, r28
    3014:	4f 5f       	subi	r20, 0xFF	; 255
    3016:	5f 4f       	sbci	r21, 0xFF	; 255
    3018:	6f e0       	ldi	r22, 0x0F	; 15
    301a:	bf db       	rcall	.-2178   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFC;
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8c 7f       	andi	r24, 0xFC	; 252
    3020:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	9b 81       	ldd	r25, Y+3	; 0x03
    3026:	21 e0       	ldi	r18, 0x01	; 1
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	ae 01       	movw	r20, r28
    302c:	4f 5f       	subi	r20, 0xFF	; 255
    302e:	5f 4f       	sbci	r21, 0xFF	; 255
    3030:	6f e0       	ldi	r22, 0x0F	; 15
    3032:	f5 db       	rcall	.-2070   	; 0x281e <_ZN3rtc11write_blockEhPhj>
    3034:	31 c0       	rjmp	.+98     	; 0x3098 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    3036:	8c 81       	ldd	r24, Y+4	; 0x04
    3038:	88 23       	and	r24, r24
    303a:	b1 f4       	brne	.+44     	; 0x3068 <_ZN3rtc9alarm_offEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	21 e0       	ldi	r18, 0x01	; 1
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	ae 01       	movw	r20, r28
    3046:	4f 5f       	subi	r20, 0xFF	; 255
    3048:	5f 4f       	sbci	r21, 0xFF	; 255
    304a:	6f e0       	ldi	r22, 0x0F	; 15
    304c:	a6 db       	rcall	.-2228   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFE;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	8e 7f       	andi	r24, 0xFE	; 254
    3052:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	21 e0       	ldi	r18, 0x01	; 1
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	ae 01       	movw	r20, r28
    305e:	4f 5f       	subi	r20, 0xFF	; 255
    3060:	5f 4f       	sbci	r21, 0xFF	; 255
    3062:	6f e0       	ldi	r22, 0x0F	; 15
    3064:	dc db       	rcall	.-2120   	; 0x281e <_ZN3rtc11write_blockEhPhj>
    3066:	18 c0       	rjmp	.+48     	; 0x3098 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	a9 f4       	brne	.+42     	; 0x3098 <_ZN3rtc9alarm_offEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	9b 81       	ldd	r25, Y+3	; 0x03
    3072:	21 e0       	ldi	r18, 0x01	; 1
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	ae 01       	movw	r20, r28
    3078:	4f 5f       	subi	r20, 0xFF	; 255
    307a:	5f 4f       	sbci	r21, 0xFF	; 255
    307c:	6f e0       	ldi	r22, 0x0F	; 15
    307e:	8d db       	rcall	.-2278   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFD;
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	8d 7f       	andi	r24, 0xFD	; 253
    3084:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	21 e0       	ldi	r18, 0x01	; 1
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	ae 01       	movw	r20, r28
    3090:	4f 5f       	subi	r20, 0xFF	; 255
    3092:	5f 4f       	sbci	r21, 0xFF	; 255
    3094:	6f e0       	ldi	r22, 0x0F	; 15
    3096:	c3 db       	rcall	.-2170   	; 0x281e <_ZN3rtc11write_blockEhPhj>
	}

}
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret

000030a6 <_ZN3rtc14clear_interuptEh>:


void rtc::clear_interupt( uint8_t valAlarm01 ){
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <_ZN3rtc14clear_interuptEh+0x6>
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <_ZN3rtc14clear_interuptEh+0x8>
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	9b 83       	std	Y+3, r25	; 0x03
    30b4:	8a 83       	std	Y+2, r24	; 0x02
    30b6:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char chrNull;
	
	
	if( valAlarm01 == RTC_ALARM_0 ){
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	88 23       	and	r24, r24
    30bc:	51 f4       	brne	.+20     	; 0x30d2 <_ZN3rtc14clear_interuptEh+0x2c>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	21 e0       	ldi	r18, 0x01	; 1
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	ae 01       	movw	r20, r28
    30c8:	4f 5f       	subi	r20, 0xFF	; 255
    30ca:	5f 4f       	sbci	r21, 0xFF	; 255
    30cc:	67 e0       	ldi	r22, 0x07	; 7
    30ce:	65 db       	rcall	.-2358   	; 0x279a <_ZN3rtc10read_blockEhPhj>
    30d0:	22 c0       	rjmp	.+68     	; 0x3116 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	51 f4       	brne	.+20     	; 0x30ec <_ZN3rtc14clear_interuptEh+0x46>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	21 e0       	ldi	r18, 0x01	; 1
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	ae 01       	movw	r20, r28
    30e2:	4f 5f       	subi	r20, 0xFF	; 255
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	6b e0       	ldi	r22, 0x0B	; 11
    30e8:	58 db       	rcall	.-2384   	; 0x279a <_ZN3rtc10read_blockEhPhj>
    30ea:	15 c0       	rjmp	.+42     	; 0x3116 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_BOTH ){
    30ec:	8c 81       	ldd	r24, Y+4	; 0x04
    30ee:	82 30       	cpi	r24, 0x02	; 2
    30f0:	91 f4       	brne	.+36     	; 0x3116 <_ZN3rtc14clear_interuptEh+0x70>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	21 e0       	ldi	r18, 0x01	; 1
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	ae 01       	movw	r20, r28
    30fc:	4f 5f       	subi	r20, 0xFF	; 255
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	67 e0       	ldi	r22, 0x07	; 7
    3102:	4b db       	rcall	.-2410   	; 0x279a <_ZN3rtc10read_blockEhPhj>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	9b 81       	ldd	r25, Y+3	; 0x03
    3108:	21 e0       	ldi	r18, 0x01	; 1
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	ae 01       	movw	r20, r28
    310e:	4f 5f       	subi	r20, 0xFF	; 255
    3110:	5f 4f       	sbci	r21, 0xFF	; 255
    3112:	6b e0       	ldi	r22, 0x0B	; 11
    3114:	42 db       	rcall	.-2428   	; 0x279a <_ZN3rtc10read_blockEhPhj>
	}
	
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <_ZN3rtc5alarmEhh9rtc_alarm>:


void rtc::alarm( uint8_t valGetSet, uint8_t valAlarm01, rtc_alarm rtaToSetOrGet ){
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	29 97       	sbiw	r28, 0x09	; 9
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	9b 83       	std	Y+3, r25	; 0x03
    313e:	8a 83       	std	Y+2, r24	; 0x02
    3140:	6c 83       	std	Y+4, r22	; 0x04
    3142:	4d 83       	std	Y+5, r20	; 0x05
    3144:	0e 83       	std	Y+6, r16	; 0x06
    3146:	1f 83       	std	Y+7, r17	; 0x07
    3148:	28 87       	std	Y+8, r18	; 0x08
    314a:	39 87       	std	Y+9, r19	; 0x09
	
	unsigned char valAlarmAddress { 0x00 };
    314c:	19 82       	std	Y+1, r1	; 0x01


	if( !valAlarm01 ){
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	88 23       	and	r24, r24
    3152:	19 f4       	brne	.+6      	; 0x315a <_ZN3rtc5alarmEhh9rtc_alarm+0x36>
			valAlarmAddress = RTC_ADDR_A0S;
    3154:	87 e0       	ldi	r24, 0x07	; 7
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <_ZN3rtc5alarmEhh9rtc_alarm+0x40>
	}else if( valAlarm01 ){
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	88 23       	and	r24, r24
    315e:	11 f0       	breq	.+4      	; 0x3164 <_ZN3rtc5alarmEhh9rtc_alarm+0x40>
		valAlarmAddress = RTC_ADDR_A1S;
    3160:	8b e0       	ldi	r24, 0x0B	; 11
    3162:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( !valGetSet ){
    3164:	8c 81       	ldd	r24, Y+4	; 0x04
    3166:	88 23       	and	r24, r24
    3168:	51 f4       	brne	.+20     	; 0x317e <_ZN3rtc5alarmEhh9rtc_alarm+0x5a>
		read_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    316a:	ae 01       	movw	r20, r28
    316c:	4a 5f       	subi	r20, 0xFA	; 250
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	9b 81       	ldd	r25, Y+3	; 0x03
    3174:	24 e0       	ldi	r18, 0x04	; 4
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	69 81       	ldd	r22, Y+1	; 0x01
    317a:	0f db       	rcall	.-2530   	; 0x279a <_ZN3rtc10read_blockEhPhj>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <_ZN3rtc5alarmEhh9rtc_alarm+0x82>
	}else if( valGetSet ){
    317e:	8c 81       	ldd	r24, Y+4	; 0x04
    3180:	88 23       	and	r24, r24
    3182:	89 f0       	breq	.+34     	; 0x31a6 <_ZN3rtc5alarmEhh9rtc_alarm+0x82>
		alarm_off( valAlarm01 );
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	9b 81       	ldd	r25, Y+3	; 0x03
    3188:	6d 81       	ldd	r22, Y+5	; 0x05
    318a:	32 df       	rcall	.-412    	; 0x2ff0 <_ZN3rtc9alarm_offEh>
		write_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    318c:	ae 01       	movw	r20, r28
    318e:	4a 5f       	subi	r20, 0xFA	; 250
    3190:	5f 4f       	sbci	r21, 0xFF	; 255
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	9b 81       	ldd	r25, Y+3	; 0x03
    3196:	24 e0       	ldi	r18, 0x04	; 4
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	69 81       	ldd	r22, Y+1	; 0x01
    319c:	40 db       	rcall	.-2432   	; 0x281e <_ZN3rtc11write_blockEhPhj>
		alarm_on( valAlarm01 );
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	6d 81       	ldd	r22, Y+5	; 0x05
    31a4:	ca de       	rcall	.-620    	; 0x2f3a <_ZN3rtc8alarm_onEh>
	}
}
    31a6:	29 96       	adiw	r28, 0x09	; 9
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <__cmpsf2>:
    31bc:	d4 d0       	rcall	.+424    	; 0x3366 <__fp_cmp>
    31be:	08 f4       	brcc	.+2      	; 0x31c2 <__cmpsf2+0x6>
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	08 95       	ret

000031c4 <__divsf3>:
    31c4:	0c d0       	rcall	.+24     	; 0x31de <__divsf3x>
    31c6:	0a c1       	rjmp	.+532    	; 0x33dc <__fp_round>
    31c8:	02 d1       	rcall	.+516    	; 0x33ce <__fp_pscB>
    31ca:	40 f0       	brcs	.+16     	; 0x31dc <__divsf3+0x18>
    31cc:	f9 d0       	rcall	.+498    	; 0x33c0 <__fp_pscA>
    31ce:	30 f0       	brcs	.+12     	; 0x31dc <__divsf3+0x18>
    31d0:	21 f4       	brne	.+8      	; 0x31da <__divsf3+0x16>
    31d2:	5f 3f       	cpi	r21, 0xFF	; 255
    31d4:	19 f0       	breq	.+6      	; 0x31dc <__divsf3+0x18>
    31d6:	eb c0       	rjmp	.+470    	; 0x33ae <__fp_inf>
    31d8:	51 11       	cpse	r21, r1
    31da:	34 c1       	rjmp	.+616    	; 0x3444 <__fp_szero>
    31dc:	ee c0       	rjmp	.+476    	; 0x33ba <__fp_nan>

000031de <__divsf3x>:
    31de:	0f d1       	rcall	.+542    	; 0x33fe <__fp_split3>
    31e0:	98 f3       	brcs	.-26     	; 0x31c8 <__divsf3+0x4>

000031e2 <__divsf3_pse>:
    31e2:	99 23       	and	r25, r25
    31e4:	c9 f3       	breq	.-14     	; 0x31d8 <__divsf3+0x14>
    31e6:	55 23       	and	r21, r21
    31e8:	b1 f3       	breq	.-20     	; 0x31d6 <__divsf3+0x12>
    31ea:	95 1b       	sub	r25, r21
    31ec:	55 0b       	sbc	r21, r21
    31ee:	bb 27       	eor	r27, r27
    31f0:	aa 27       	eor	r26, r26
    31f2:	62 17       	cp	r22, r18
    31f4:	73 07       	cpc	r23, r19
    31f6:	84 07       	cpc	r24, r20
    31f8:	38 f0       	brcs	.+14     	; 0x3208 <__divsf3_pse+0x26>
    31fa:	9f 5f       	subi	r25, 0xFF	; 255
    31fc:	5f 4f       	sbci	r21, 0xFF	; 255
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	44 1f       	adc	r20, r20
    3204:	aa 1f       	adc	r26, r26
    3206:	a9 f3       	breq	.-22     	; 0x31f2 <__divsf3_pse+0x10>
    3208:	33 d0       	rcall	.+102    	; 0x3270 <__divsf3_pse+0x8e>
    320a:	0e 2e       	mov	r0, r30
    320c:	3a f0       	brmi	.+14     	; 0x321c <__divsf3_pse+0x3a>
    320e:	e0 e8       	ldi	r30, 0x80	; 128
    3210:	30 d0       	rcall	.+96     	; 0x3272 <__divsf3_pse+0x90>
    3212:	91 50       	subi	r25, 0x01	; 1
    3214:	50 40       	sbci	r21, 0x00	; 0
    3216:	e6 95       	lsr	r30
    3218:	00 1c       	adc	r0, r0
    321a:	ca f7       	brpl	.-14     	; 0x320e <__divsf3_pse+0x2c>
    321c:	29 d0       	rcall	.+82     	; 0x3270 <__divsf3_pse+0x8e>
    321e:	fe 2f       	mov	r31, r30
    3220:	27 d0       	rcall	.+78     	; 0x3270 <__divsf3_pse+0x8e>
    3222:	66 0f       	add	r22, r22
    3224:	77 1f       	adc	r23, r23
    3226:	88 1f       	adc	r24, r24
    3228:	bb 1f       	adc	r27, r27
    322a:	26 17       	cp	r18, r22
    322c:	37 07       	cpc	r19, r23
    322e:	48 07       	cpc	r20, r24
    3230:	ab 07       	cpc	r26, r27
    3232:	b0 e8       	ldi	r27, 0x80	; 128
    3234:	09 f0       	breq	.+2      	; 0x3238 <__divsf3_pse+0x56>
    3236:	bb 0b       	sbc	r27, r27
    3238:	80 2d       	mov	r24, r0
    323a:	bf 01       	movw	r22, r30
    323c:	ff 27       	eor	r31, r31
    323e:	93 58       	subi	r25, 0x83	; 131
    3240:	5f 4f       	sbci	r21, 0xFF	; 255
    3242:	2a f0       	brmi	.+10     	; 0x324e <__divsf3_pse+0x6c>
    3244:	9e 3f       	cpi	r25, 0xFE	; 254
    3246:	51 05       	cpc	r21, r1
    3248:	68 f0       	brcs	.+26     	; 0x3264 <__divsf3_pse+0x82>
    324a:	b1 c0       	rjmp	.+354    	; 0x33ae <__fp_inf>
    324c:	fb c0       	rjmp	.+502    	; 0x3444 <__fp_szero>
    324e:	5f 3f       	cpi	r21, 0xFF	; 255
    3250:	ec f3       	brlt	.-6      	; 0x324c <__divsf3_pse+0x6a>
    3252:	98 3e       	cpi	r25, 0xE8	; 232
    3254:	dc f3       	brlt	.-10     	; 0x324c <__divsf3_pse+0x6a>
    3256:	86 95       	lsr	r24
    3258:	77 95       	ror	r23
    325a:	67 95       	ror	r22
    325c:	b7 95       	ror	r27
    325e:	f7 95       	ror	r31
    3260:	9f 5f       	subi	r25, 0xFF	; 255
    3262:	c9 f7       	brne	.-14     	; 0x3256 <__divsf3_pse+0x74>
    3264:	88 0f       	add	r24, r24
    3266:	91 1d       	adc	r25, r1
    3268:	96 95       	lsr	r25
    326a:	87 95       	ror	r24
    326c:	97 f9       	bld	r25, 7
    326e:	08 95       	ret
    3270:	e1 e0       	ldi	r30, 0x01	; 1
    3272:	66 0f       	add	r22, r22
    3274:	77 1f       	adc	r23, r23
    3276:	88 1f       	adc	r24, r24
    3278:	bb 1f       	adc	r27, r27
    327a:	62 17       	cp	r22, r18
    327c:	73 07       	cpc	r23, r19
    327e:	84 07       	cpc	r24, r20
    3280:	ba 07       	cpc	r27, r26
    3282:	20 f0       	brcs	.+8      	; 0x328c <__divsf3_pse+0xaa>
    3284:	62 1b       	sub	r22, r18
    3286:	73 0b       	sbc	r23, r19
    3288:	84 0b       	sbc	r24, r20
    328a:	ba 0b       	sbc	r27, r26
    328c:	ee 1f       	adc	r30, r30
    328e:	88 f7       	brcc	.-30     	; 0x3272 <__divsf3_pse+0x90>
    3290:	e0 95       	com	r30
    3292:	08 95       	ret

00003294 <__fixunssfsi>:
    3294:	bc d0       	rcall	.+376    	; 0x340e <__fp_splitA>
    3296:	88 f0       	brcs	.+34     	; 0x32ba <__fixunssfsi+0x26>
    3298:	9f 57       	subi	r25, 0x7F	; 127
    329a:	90 f0       	brcs	.+36     	; 0x32c0 <__fixunssfsi+0x2c>
    329c:	b9 2f       	mov	r27, r25
    329e:	99 27       	eor	r25, r25
    32a0:	b7 51       	subi	r27, 0x17	; 23
    32a2:	a0 f0       	brcs	.+40     	; 0x32cc <__fixunssfsi+0x38>
    32a4:	d1 f0       	breq	.+52     	; 0x32da <__fixunssfsi+0x46>
    32a6:	66 0f       	add	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	1a f0       	brmi	.+6      	; 0x32b6 <__fixunssfsi+0x22>
    32b0:	ba 95       	dec	r27
    32b2:	c9 f7       	brne	.-14     	; 0x32a6 <__fixunssfsi+0x12>
    32b4:	12 c0       	rjmp	.+36     	; 0x32da <__fixunssfsi+0x46>
    32b6:	b1 30       	cpi	r27, 0x01	; 1
    32b8:	81 f0       	breq	.+32     	; 0x32da <__fixunssfsi+0x46>
    32ba:	c3 d0       	rcall	.+390    	; 0x3442 <__fp_zero>
    32bc:	b1 e0       	ldi	r27, 0x01	; 1
    32be:	08 95       	ret
    32c0:	c0 c0       	rjmp	.+384    	; 0x3442 <__fp_zero>
    32c2:	67 2f       	mov	r22, r23
    32c4:	78 2f       	mov	r23, r24
    32c6:	88 27       	eor	r24, r24
    32c8:	b8 5f       	subi	r27, 0xF8	; 248
    32ca:	39 f0       	breq	.+14     	; 0x32da <__fixunssfsi+0x46>
    32cc:	b9 3f       	cpi	r27, 0xF9	; 249
    32ce:	cc f3       	brlt	.-14     	; 0x32c2 <__fixunssfsi+0x2e>
    32d0:	86 95       	lsr	r24
    32d2:	77 95       	ror	r23
    32d4:	67 95       	ror	r22
    32d6:	b3 95       	inc	r27
    32d8:	d9 f7       	brne	.-10     	; 0x32d0 <__fixunssfsi+0x3c>
    32da:	3e f4       	brtc	.+14     	; 0x32ea <__fixunssfsi+0x56>
    32dc:	90 95       	com	r25
    32de:	80 95       	com	r24
    32e0:	70 95       	com	r23
    32e2:	61 95       	neg	r22
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	8f 4f       	sbci	r24, 0xFF	; 255
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	08 95       	ret

000032ec <__floatunsisf>:
    32ec:	e8 94       	clt
    32ee:	09 c0       	rjmp	.+18     	; 0x3302 <__floatsisf+0x12>

000032f0 <__floatsisf>:
    32f0:	97 fb       	bst	r25, 7
    32f2:	3e f4       	brtc	.+14     	; 0x3302 <__floatsisf+0x12>
    32f4:	90 95       	com	r25
    32f6:	80 95       	com	r24
    32f8:	70 95       	com	r23
    32fa:	61 95       	neg	r22
    32fc:	7f 4f       	sbci	r23, 0xFF	; 255
    32fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3300:	9f 4f       	sbci	r25, 0xFF	; 255
    3302:	99 23       	and	r25, r25
    3304:	a9 f0       	breq	.+42     	; 0x3330 <__floatsisf+0x40>
    3306:	f9 2f       	mov	r31, r25
    3308:	96 e9       	ldi	r25, 0x96	; 150
    330a:	bb 27       	eor	r27, r27
    330c:	93 95       	inc	r25
    330e:	f6 95       	lsr	r31
    3310:	87 95       	ror	r24
    3312:	77 95       	ror	r23
    3314:	67 95       	ror	r22
    3316:	b7 95       	ror	r27
    3318:	f1 11       	cpse	r31, r1
    331a:	f8 cf       	rjmp	.-16     	; 0x330c <__floatsisf+0x1c>
    331c:	fa f4       	brpl	.+62     	; 0x335c <__floatsisf+0x6c>
    331e:	bb 0f       	add	r27, r27
    3320:	11 f4       	brne	.+4      	; 0x3326 <__floatsisf+0x36>
    3322:	60 ff       	sbrs	r22, 0
    3324:	1b c0       	rjmp	.+54     	; 0x335c <__floatsisf+0x6c>
    3326:	6f 5f       	subi	r22, 0xFF	; 255
    3328:	7f 4f       	sbci	r23, 0xFF	; 255
    332a:	8f 4f       	sbci	r24, 0xFF	; 255
    332c:	9f 4f       	sbci	r25, 0xFF	; 255
    332e:	16 c0       	rjmp	.+44     	; 0x335c <__floatsisf+0x6c>
    3330:	88 23       	and	r24, r24
    3332:	11 f0       	breq	.+4      	; 0x3338 <__floatsisf+0x48>
    3334:	96 e9       	ldi	r25, 0x96	; 150
    3336:	11 c0       	rjmp	.+34     	; 0x335a <__floatsisf+0x6a>
    3338:	77 23       	and	r23, r23
    333a:	21 f0       	breq	.+8      	; 0x3344 <__floatsisf+0x54>
    333c:	9e e8       	ldi	r25, 0x8E	; 142
    333e:	87 2f       	mov	r24, r23
    3340:	76 2f       	mov	r23, r22
    3342:	05 c0       	rjmp	.+10     	; 0x334e <__floatsisf+0x5e>
    3344:	66 23       	and	r22, r22
    3346:	71 f0       	breq	.+28     	; 0x3364 <__floatsisf+0x74>
    3348:	96 e8       	ldi	r25, 0x86	; 134
    334a:	86 2f       	mov	r24, r22
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	60 e0       	ldi	r22, 0x00	; 0
    3350:	2a f0       	brmi	.+10     	; 0x335c <__floatsisf+0x6c>
    3352:	9a 95       	dec	r25
    3354:	66 0f       	add	r22, r22
    3356:	77 1f       	adc	r23, r23
    3358:	88 1f       	adc	r24, r24
    335a:	da f7       	brpl	.-10     	; 0x3352 <__floatsisf+0x62>
    335c:	88 0f       	add	r24, r24
    335e:	96 95       	lsr	r25
    3360:	87 95       	ror	r24
    3362:	97 f9       	bld	r25, 7
    3364:	08 95       	ret

00003366 <__fp_cmp>:
    3366:	99 0f       	add	r25, r25
    3368:	00 08       	sbc	r0, r0
    336a:	55 0f       	add	r21, r21
    336c:	aa 0b       	sbc	r26, r26
    336e:	e0 e8       	ldi	r30, 0x80	; 128
    3370:	fe ef       	ldi	r31, 0xFE	; 254
    3372:	16 16       	cp	r1, r22
    3374:	17 06       	cpc	r1, r23
    3376:	e8 07       	cpc	r30, r24
    3378:	f9 07       	cpc	r31, r25
    337a:	c0 f0       	brcs	.+48     	; 0x33ac <__fp_cmp+0x46>
    337c:	12 16       	cp	r1, r18
    337e:	13 06       	cpc	r1, r19
    3380:	e4 07       	cpc	r30, r20
    3382:	f5 07       	cpc	r31, r21
    3384:	98 f0       	brcs	.+38     	; 0x33ac <__fp_cmp+0x46>
    3386:	62 1b       	sub	r22, r18
    3388:	73 0b       	sbc	r23, r19
    338a:	84 0b       	sbc	r24, r20
    338c:	95 0b       	sbc	r25, r21
    338e:	39 f4       	brne	.+14     	; 0x339e <__fp_cmp+0x38>
    3390:	0a 26       	eor	r0, r26
    3392:	61 f0       	breq	.+24     	; 0x33ac <__fp_cmp+0x46>
    3394:	23 2b       	or	r18, r19
    3396:	24 2b       	or	r18, r20
    3398:	25 2b       	or	r18, r21
    339a:	21 f4       	brne	.+8      	; 0x33a4 <__fp_cmp+0x3e>
    339c:	08 95       	ret
    339e:	0a 26       	eor	r0, r26
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <__fp_cmp+0x3e>
    33a2:	a1 40       	sbci	r26, 0x01	; 1
    33a4:	a6 95       	lsr	r26
    33a6:	8f ef       	ldi	r24, 0xFF	; 255
    33a8:	81 1d       	adc	r24, r1
    33aa:	81 1d       	adc	r24, r1
    33ac:	08 95       	ret

000033ae <__fp_inf>:
    33ae:	97 f9       	bld	r25, 7
    33b0:	9f 67       	ori	r25, 0x7F	; 127
    33b2:	80 e8       	ldi	r24, 0x80	; 128
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	08 95       	ret

000033ba <__fp_nan>:
    33ba:	9f ef       	ldi	r25, 0xFF	; 255
    33bc:	80 ec       	ldi	r24, 0xC0	; 192
    33be:	08 95       	ret

000033c0 <__fp_pscA>:
    33c0:	00 24       	eor	r0, r0
    33c2:	0a 94       	dec	r0
    33c4:	16 16       	cp	r1, r22
    33c6:	17 06       	cpc	r1, r23
    33c8:	18 06       	cpc	r1, r24
    33ca:	09 06       	cpc	r0, r25
    33cc:	08 95       	ret

000033ce <__fp_pscB>:
    33ce:	00 24       	eor	r0, r0
    33d0:	0a 94       	dec	r0
    33d2:	12 16       	cp	r1, r18
    33d4:	13 06       	cpc	r1, r19
    33d6:	14 06       	cpc	r1, r20
    33d8:	05 06       	cpc	r0, r21
    33da:	08 95       	ret

000033dc <__fp_round>:
    33dc:	09 2e       	mov	r0, r25
    33de:	03 94       	inc	r0
    33e0:	00 0c       	add	r0, r0
    33e2:	11 f4       	brne	.+4      	; 0x33e8 <__fp_round+0xc>
    33e4:	88 23       	and	r24, r24
    33e6:	52 f0       	brmi	.+20     	; 0x33fc <__fp_round+0x20>
    33e8:	bb 0f       	add	r27, r27
    33ea:	40 f4       	brcc	.+16     	; 0x33fc <__fp_round+0x20>
    33ec:	bf 2b       	or	r27, r31
    33ee:	11 f4       	brne	.+4      	; 0x33f4 <__fp_round+0x18>
    33f0:	60 ff       	sbrs	r22, 0
    33f2:	04 c0       	rjmp	.+8      	; 0x33fc <__fp_round+0x20>
    33f4:	6f 5f       	subi	r22, 0xFF	; 255
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8f 4f       	sbci	r24, 0xFF	; 255
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	08 95       	ret

000033fe <__fp_split3>:
    33fe:	57 fd       	sbrc	r21, 7
    3400:	90 58       	subi	r25, 0x80	; 128
    3402:	44 0f       	add	r20, r20
    3404:	55 1f       	adc	r21, r21
    3406:	59 f0       	breq	.+22     	; 0x341e <__fp_splitA+0x10>
    3408:	5f 3f       	cpi	r21, 0xFF	; 255
    340a:	71 f0       	breq	.+28     	; 0x3428 <__fp_splitA+0x1a>
    340c:	47 95       	ror	r20

0000340e <__fp_splitA>:
    340e:	88 0f       	add	r24, r24
    3410:	97 fb       	bst	r25, 7
    3412:	99 1f       	adc	r25, r25
    3414:	61 f0       	breq	.+24     	; 0x342e <__fp_splitA+0x20>
    3416:	9f 3f       	cpi	r25, 0xFF	; 255
    3418:	79 f0       	breq	.+30     	; 0x3438 <__fp_splitA+0x2a>
    341a:	87 95       	ror	r24
    341c:	08 95       	ret
    341e:	12 16       	cp	r1, r18
    3420:	13 06       	cpc	r1, r19
    3422:	14 06       	cpc	r1, r20
    3424:	55 1f       	adc	r21, r21
    3426:	f2 cf       	rjmp	.-28     	; 0x340c <__fp_split3+0xe>
    3428:	46 95       	lsr	r20
    342a:	f1 df       	rcall	.-30     	; 0x340e <__fp_splitA>
    342c:	08 c0       	rjmp	.+16     	; 0x343e <__fp_splitA+0x30>
    342e:	16 16       	cp	r1, r22
    3430:	17 06       	cpc	r1, r23
    3432:	18 06       	cpc	r1, r24
    3434:	99 1f       	adc	r25, r25
    3436:	f1 cf       	rjmp	.-30     	; 0x341a <__fp_splitA+0xc>
    3438:	86 95       	lsr	r24
    343a:	71 05       	cpc	r23, r1
    343c:	61 05       	cpc	r22, r1
    343e:	08 94       	sec
    3440:	08 95       	ret

00003442 <__fp_zero>:
    3442:	e8 94       	clt

00003444 <__fp_szero>:
    3444:	bb 27       	eor	r27, r27
    3446:	66 27       	eor	r22, r22
    3448:	77 27       	eor	r23, r23
    344a:	cb 01       	movw	r24, r22
    344c:	97 f9       	bld	r25, 7
    344e:	08 95       	ret

00003450 <__gesf2>:
    3450:	8a df       	rcall	.-236    	; 0x3366 <__fp_cmp>
    3452:	08 f4       	brcc	.+2      	; 0x3456 <__gesf2+0x6>
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	08 95       	ret

00003458 <__mulsf3>:
    3458:	0b d0       	rcall	.+22     	; 0x3470 <__mulsf3x>
    345a:	c0 cf       	rjmp	.-128    	; 0x33dc <__fp_round>
    345c:	b1 df       	rcall	.-158    	; 0x33c0 <__fp_pscA>
    345e:	28 f0       	brcs	.+10     	; 0x346a <__mulsf3+0x12>
    3460:	b6 df       	rcall	.-148    	; 0x33ce <__fp_pscB>
    3462:	18 f0       	brcs	.+6      	; 0x346a <__mulsf3+0x12>
    3464:	95 23       	and	r25, r21
    3466:	09 f0       	breq	.+2      	; 0x346a <__mulsf3+0x12>
    3468:	a2 cf       	rjmp	.-188    	; 0x33ae <__fp_inf>
    346a:	a7 cf       	rjmp	.-178    	; 0x33ba <__fp_nan>
    346c:	11 24       	eor	r1, r1
    346e:	ea cf       	rjmp	.-44     	; 0x3444 <__fp_szero>

00003470 <__mulsf3x>:
    3470:	c6 df       	rcall	.-116    	; 0x33fe <__fp_split3>
    3472:	a0 f3       	brcs	.-24     	; 0x345c <__mulsf3+0x4>

00003474 <__mulsf3_pse>:
    3474:	95 9f       	mul	r25, r21
    3476:	d1 f3       	breq	.-12     	; 0x346c <__mulsf3+0x14>
    3478:	95 0f       	add	r25, r21
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	55 1f       	adc	r21, r21
    347e:	62 9f       	mul	r22, r18
    3480:	f0 01       	movw	r30, r0
    3482:	72 9f       	mul	r23, r18
    3484:	bb 27       	eor	r27, r27
    3486:	f0 0d       	add	r31, r0
    3488:	b1 1d       	adc	r27, r1
    348a:	63 9f       	mul	r22, r19
    348c:	aa 27       	eor	r26, r26
    348e:	f0 0d       	add	r31, r0
    3490:	b1 1d       	adc	r27, r1
    3492:	aa 1f       	adc	r26, r26
    3494:	64 9f       	mul	r22, r20
    3496:	66 27       	eor	r22, r22
    3498:	b0 0d       	add	r27, r0
    349a:	a1 1d       	adc	r26, r1
    349c:	66 1f       	adc	r22, r22
    349e:	82 9f       	mul	r24, r18
    34a0:	22 27       	eor	r18, r18
    34a2:	b0 0d       	add	r27, r0
    34a4:	a1 1d       	adc	r26, r1
    34a6:	62 1f       	adc	r22, r18
    34a8:	73 9f       	mul	r23, r19
    34aa:	b0 0d       	add	r27, r0
    34ac:	a1 1d       	adc	r26, r1
    34ae:	62 1f       	adc	r22, r18
    34b0:	83 9f       	mul	r24, r19
    34b2:	a0 0d       	add	r26, r0
    34b4:	61 1d       	adc	r22, r1
    34b6:	22 1f       	adc	r18, r18
    34b8:	74 9f       	mul	r23, r20
    34ba:	33 27       	eor	r19, r19
    34bc:	a0 0d       	add	r26, r0
    34be:	61 1d       	adc	r22, r1
    34c0:	23 1f       	adc	r18, r19
    34c2:	84 9f       	mul	r24, r20
    34c4:	60 0d       	add	r22, r0
    34c6:	21 1d       	adc	r18, r1
    34c8:	82 2f       	mov	r24, r18
    34ca:	76 2f       	mov	r23, r22
    34cc:	6a 2f       	mov	r22, r26
    34ce:	11 24       	eor	r1, r1
    34d0:	9f 57       	subi	r25, 0x7F	; 127
    34d2:	50 40       	sbci	r21, 0x00	; 0
    34d4:	8a f0       	brmi	.+34     	; 0x34f8 <__mulsf3_pse+0x84>
    34d6:	e1 f0       	breq	.+56     	; 0x3510 <__mulsf3_pse+0x9c>
    34d8:	88 23       	and	r24, r24
    34da:	4a f0       	brmi	.+18     	; 0x34ee <__mulsf3_pse+0x7a>
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	bb 1f       	adc	r27, r27
    34e2:	66 1f       	adc	r22, r22
    34e4:	77 1f       	adc	r23, r23
    34e6:	88 1f       	adc	r24, r24
    34e8:	91 50       	subi	r25, 0x01	; 1
    34ea:	50 40       	sbci	r21, 0x00	; 0
    34ec:	a9 f7       	brne	.-22     	; 0x34d8 <__mulsf3_pse+0x64>
    34ee:	9e 3f       	cpi	r25, 0xFE	; 254
    34f0:	51 05       	cpc	r21, r1
    34f2:	70 f0       	brcs	.+28     	; 0x3510 <__mulsf3_pse+0x9c>
    34f4:	5c cf       	rjmp	.-328    	; 0x33ae <__fp_inf>
    34f6:	a6 cf       	rjmp	.-180    	; 0x3444 <__fp_szero>
    34f8:	5f 3f       	cpi	r21, 0xFF	; 255
    34fa:	ec f3       	brlt	.-6      	; 0x34f6 <__mulsf3_pse+0x82>
    34fc:	98 3e       	cpi	r25, 0xE8	; 232
    34fe:	dc f3       	brlt	.-10     	; 0x34f6 <__mulsf3_pse+0x82>
    3500:	86 95       	lsr	r24
    3502:	77 95       	ror	r23
    3504:	67 95       	ror	r22
    3506:	b7 95       	ror	r27
    3508:	f7 95       	ror	r31
    350a:	e7 95       	ror	r30
    350c:	9f 5f       	subi	r25, 0xFF	; 255
    350e:	c1 f7       	brne	.-16     	; 0x3500 <__mulsf3_pse+0x8c>
    3510:	fe 2b       	or	r31, r30
    3512:	88 0f       	add	r24, r24
    3514:	91 1d       	adc	r25, r1
    3516:	96 95       	lsr	r25
    3518:	87 95       	ror	r24
    351a:	97 f9       	bld	r25, 7
    351c:	08 95       	ret

0000351e <__divmodhi4>:
    351e:	97 fb       	bst	r25, 7
    3520:	07 2e       	mov	r0, r23
    3522:	16 f4       	brtc	.+4      	; 0x3528 <__divmodhi4+0xa>
    3524:	00 94       	com	r0
    3526:	06 d0       	rcall	.+12     	; 0x3534 <__divmodhi4_neg1>
    3528:	77 fd       	sbrc	r23, 7
    352a:	08 d0       	rcall	.+16     	; 0x353c <__divmodhi4_neg2>
    352c:	46 d0       	rcall	.+140    	; 0x35ba <__udivmodhi4>
    352e:	07 fc       	sbrc	r0, 7
    3530:	05 d0       	rcall	.+10     	; 0x353c <__divmodhi4_neg2>
    3532:	3e f4       	brtc	.+14     	; 0x3542 <__divmodhi4_exit>

00003534 <__divmodhi4_neg1>:
    3534:	90 95       	com	r25
    3536:	81 95       	neg	r24
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	08 95       	ret

0000353c <__divmodhi4_neg2>:
    353c:	70 95       	com	r23
    353e:	61 95       	neg	r22
    3540:	7f 4f       	sbci	r23, 0xFF	; 255

00003542 <__divmodhi4_exit>:
    3542:	08 95       	ret

00003544 <__udivmodsi4>:
    3544:	a1 e2       	ldi	r26, 0x21	; 33
    3546:	1a 2e       	mov	r1, r26
    3548:	aa 1b       	sub	r26, r26
    354a:	bb 1b       	sub	r27, r27
    354c:	fd 01       	movw	r30, r26
    354e:	0d c0       	rjmp	.+26     	; 0x356a <__udivmodsi4_ep>

00003550 <__udivmodsi4_loop>:
    3550:	aa 1f       	adc	r26, r26
    3552:	bb 1f       	adc	r27, r27
    3554:	ee 1f       	adc	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	a2 17       	cp	r26, r18
    355a:	b3 07       	cpc	r27, r19
    355c:	e4 07       	cpc	r30, r20
    355e:	f5 07       	cpc	r31, r21
    3560:	20 f0       	brcs	.+8      	; 0x356a <__udivmodsi4_ep>
    3562:	a2 1b       	sub	r26, r18
    3564:	b3 0b       	sbc	r27, r19
    3566:	e4 0b       	sbc	r30, r20
    3568:	f5 0b       	sbc	r31, r21

0000356a <__udivmodsi4_ep>:
    356a:	66 1f       	adc	r22, r22
    356c:	77 1f       	adc	r23, r23
    356e:	88 1f       	adc	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	1a 94       	dec	r1
    3574:	69 f7       	brne	.-38     	; 0x3550 <__udivmodsi4_loop>
    3576:	60 95       	com	r22
    3578:	70 95       	com	r23
    357a:	80 95       	com	r24
    357c:	90 95       	com	r25
    357e:	9b 01       	movw	r18, r22
    3580:	ac 01       	movw	r20, r24
    3582:	bd 01       	movw	r22, r26
    3584:	cf 01       	movw	r24, r30
    3586:	08 95       	ret

00003588 <__umulhisi3>:
    3588:	a2 9f       	mul	r26, r18
    358a:	b0 01       	movw	r22, r0
    358c:	b3 9f       	mul	r27, r19
    358e:	c0 01       	movw	r24, r0
    3590:	a3 9f       	mul	r26, r19
    3592:	70 0d       	add	r23, r0
    3594:	81 1d       	adc	r24, r1
    3596:	11 24       	eor	r1, r1
    3598:	91 1d       	adc	r25, r1
    359a:	b2 9f       	mul	r27, r18
    359c:	70 0d       	add	r23, r0
    359e:	81 1d       	adc	r24, r1
    35a0:	11 24       	eor	r1, r1
    35a2:	91 1d       	adc	r25, r1
    35a4:	08 95       	ret

000035a6 <__muluhisi3>:
    35a6:	f0 df       	rcall	.-32     	; 0x3588 <__umulhisi3>
    35a8:	a5 9f       	mul	r26, r21
    35aa:	90 0d       	add	r25, r0
    35ac:	b4 9f       	mul	r27, r20
    35ae:	90 0d       	add	r25, r0
    35b0:	a4 9f       	mul	r26, r20
    35b2:	80 0d       	add	r24, r0
    35b4:	91 1d       	adc	r25, r1
    35b6:	11 24       	eor	r1, r1
    35b8:	08 95       	ret

000035ba <__udivmodhi4>:
    35ba:	aa 1b       	sub	r26, r26
    35bc:	bb 1b       	sub	r27, r27
    35be:	51 e1       	ldi	r21, 0x11	; 17
    35c0:	07 c0       	rjmp	.+14     	; 0x35d0 <__udivmodhi4_ep>

000035c2 <__udivmodhi4_loop>:
    35c2:	aa 1f       	adc	r26, r26
    35c4:	bb 1f       	adc	r27, r27
    35c6:	a6 17       	cp	r26, r22
    35c8:	b7 07       	cpc	r27, r23
    35ca:	10 f0       	brcs	.+4      	; 0x35d0 <__udivmodhi4_ep>
    35cc:	a6 1b       	sub	r26, r22
    35ce:	b7 0b       	sbc	r27, r23

000035d0 <__udivmodhi4_ep>:
    35d0:	88 1f       	adc	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	5a 95       	dec	r21
    35d6:	a9 f7       	brne	.-22     	; 0x35c2 <__udivmodhi4_loop>
    35d8:	80 95       	com	r24
    35da:	90 95       	com	r25
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	08 95       	ret

000035e2 <__tablejump2__>:
    35e2:	ee 0f       	add	r30, r30
    35e4:	ff 1f       	adc	r31, r31
    35e6:	00 24       	eor	r0, r0
    35e8:	00 1c       	adc	r0, r0
    35ea:	0b be       	out	0x3b, r0	; 59
    35ec:	07 90       	elpm	r0, Z+
    35ee:	f6 91       	elpm	r31, Z
    35f0:	e0 2d       	mov	r30, r0
    35f2:	09 94       	ijmp

000035f4 <memcpy>:
    35f4:	fb 01       	movw	r30, r22
    35f6:	dc 01       	movw	r26, r24
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <memcpy+0xa>
    35fa:	01 90       	ld	r0, Z+
    35fc:	0d 92       	st	X+, r0
    35fe:	41 50       	subi	r20, 0x01	; 1
    3600:	50 40       	sbci	r21, 0x00	; 0
    3602:	d8 f7       	brcc	.-10     	; 0x35fa <memcpy+0x6>
    3604:	08 95       	ret

00003606 <strlen>:
    3606:	fc 01       	movw	r30, r24
    3608:	01 90       	ld	r0, Z+
    360a:	00 20       	and	r0, r0
    360c:	e9 f7       	brne	.-6      	; 0x3608 <strlen+0x2>
    360e:	80 95       	com	r24
    3610:	90 95       	com	r25
    3612:	8e 0f       	add	r24, r30
    3614:	9f 1f       	adc	r25, r31
    3616:	08 95       	ret

00003618 <_exit>:
    3618:	f8 94       	cli

0000361a <__stop_program>:
    361a:	ff cf       	rjmp	.-2      	; 0x361a <__stop_program>
