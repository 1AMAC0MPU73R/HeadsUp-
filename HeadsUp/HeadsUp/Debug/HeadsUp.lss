
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000296a  00002a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000296a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000617  00800136  00800136  00002a54  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00002a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002a57  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004568  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001327  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002cc1  00000000  00000000  0000866b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000948  00000000  00000000  0000b32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008e67  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030f1  00000000  00000000  00014adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000280  00000000  00000000  00017bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003b79  00000000  00000000  00017e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	d2 c0       	rjmp	.+420    	; 0x1ca <__bad_interrupt>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ce c0       	rjmp	.+412    	; 0x1ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2177>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e4       	ldi	r29, 0x40	; 64
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	ea e6       	ldi	r30, 0x6A	; 106
     1a2:	f9 e2       	ldi	r31, 0x29	; 41
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a6 33       	cpi	r26, 0x36	; 54
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	27 e0       	ldi	r18, 0x07	; 7
     1b6:	a6 e3       	ldi	r26, 0x36	; 54
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	ad 34       	cpi	r26, 0x4D	; 77
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	f5 d4       	rcall	.+2538   	; 0xbb0 <main>
     1c6:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <_Z11read_sectorhmjPc>:
//              Data buffer
// Returns: Number of bytes read
//
// Description: Read one data or FAT sector
//*****************************************************************************
uint16_t read_sector (const uint8_t fat, const uint32_t sector, const uint16_t num_of_bytes, char * data_buffer){
     1cc:	8f 92       	push	r8
     1ce:	9f 92       	push	r9
     1d0:	af 92       	push	r10
     1d2:	bf 92       	push	r11
     1d4:	cf 92       	push	r12
     1d6:	df 92       	push	r13
     1d8:	ef 92       	push	r14
     1da:	ff 92       	push	r15
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	6a 01       	movw	r12, r20
     1e2:	7b 01       	movw	r14, r22
     1e4:	42 2f       	mov	r20, r18
     1e6:	53 2f       	mov	r21, r19

    if (fat) {
     1e8:	88 23       	and	r24, r24
     1ea:	d9 f0       	breq	.+54     	; 0x222 <_Z11read_sectorhmjPc+0x56>
        /* Read only sector from card if last sector in buffer */
        /* is not the same as requested */
        if(current_fat_sector == sector)
     1ec:	80 90 3c 01 	lds	r8, 0x013C
     1f0:	90 90 3d 01 	lds	r9, 0x013D
     1f4:	a0 90 3e 01 	lds	r10, 0x013E
     1f8:	b0 90 3f 01 	lds	r11, 0x013F
     1fc:	8c 14       	cp	r8, r12
     1fe:	9d 04       	cpc	r9, r13
     200:	ae 04       	cpc	r10, r14
     202:	bf 04       	cpc	r11, r15
     204:	49 f1       	breq	.+82     	; 0x258 <_Z11read_sectorhmjPc+0x8c>
            return num_of_bytes;
        else {
            current_fat_sector = sector;
     206:	c0 92 3c 01 	sts	0x013C, r12
     20a:	d0 92 3d 01 	sts	0x013D, r13
     20e:	e0 92 3e 01 	sts	0x013E, r14
     212:	f0 92 3f 01 	sts	0x013F, r15
            return mmc_read_sector(sector, num_of_bytes, data_buffer);
     216:	98 01       	movw	r18, r16
     218:	c7 01       	movw	r24, r14
     21a:	b6 01       	movw	r22, r12
     21c:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z15mmc_read_sectormjPc>
     220:	20 c0       	rjmp	.+64     	; 0x262 <_Z11read_sectorhmjPc+0x96>
        }
    }
    else {
        /* Read only sector from card if last sector in buffer */
        /* is not the same as requested */
        if (current_data_sector == sector)
     222:	80 90 38 01 	lds	r8, 0x0138
     226:	90 90 39 01 	lds	r9, 0x0139
     22a:	a0 90 3a 01 	lds	r10, 0x013A
     22e:	b0 90 3b 01 	lds	r11, 0x013B
     232:	8c 14       	cp	r8, r12
     234:	9d 04       	cpc	r9, r13
     236:	ae 04       	cpc	r10, r14
     238:	bf 04       	cpc	r11, r15
     23a:	89 f0       	breq	.+34     	; 0x25e <_Z11read_sectorhmjPc+0x92>
            return num_of_bytes;
        else {
            current_data_sector = sector;
     23c:	c0 92 38 01 	sts	0x0138, r12
     240:	d0 92 39 01 	sts	0x0139, r13
     244:	e0 92 3a 01 	sts	0x013A, r14
     248:	f0 92 3b 01 	sts	0x013B, r15
            return mmc_read_sector(sector, num_of_bytes, data_buffer);
     24c:	98 01       	movw	r18, r16
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z15mmc_read_sectormjPc>
     256:	05 c0       	rjmp	.+10     	; 0x262 <_Z11read_sectorhmjPc+0x96>

    if (fat) {
        /* Read only sector from card if last sector in buffer */
        /* is not the same as requested */
        if(current_fat_sector == sector)
            return num_of_bytes;
     258:	82 2f       	mov	r24, r18
     25a:	93 2f       	mov	r25, r19
     25c:	02 c0       	rjmp	.+4      	; 0x262 <_Z11read_sectorhmjPc+0x96>
    }
    else {
        /* Read only sector from card if last sector in buffer */
        /* is not the same as requested */
        if (current_data_sector == sector)
            return num_of_bytes;
     25e:	82 2f       	mov	r24, r18
     260:	93 2f       	mov	r25, r19
        else {
            current_data_sector = sector;
            return mmc_read_sector(sector, num_of_bytes, data_buffer);
        }
    }
}
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	bf 90       	pop	r11
     270:	af 90       	pop	r10
     272:	9f 90       	pop	r9
     274:	8f 90       	pop	r8
     276:	08 95       	ret

00000278 <_Z8init_fatv>:
// Returns: Error code
//
// Description: Init MMC card and read 1st partition info from MBR.
//              Return initialization status from MMC card.
//*****************************************************************************
int8_t init_fat(){
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
    
	/* Not used by us */
	// if( mmc_card_present() != 0 ) return E_ERROR;

    current_fat_sector = -1;
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	9f ef       	ldi	r25, 0xFF	; 255
     294:	dc 01       	movw	r26, r24
     296:	80 93 3c 01 	sts	0x013C, r24
     29a:	90 93 3d 01 	sts	0x013D, r25
     29e:	a0 93 3e 01 	sts	0x013E, r26
     2a2:	b0 93 3f 01 	sts	0x013F, r27
    current_data_sector = -1;
     2a6:	80 93 38 01 	sts	0x0138, r24
     2aa:	90 93 39 01 	sts	0x0139, r25
     2ae:	a0 93 3a 01 	sts	0x013A, r26
     2b2:	b0 93 3b 01 	sts	0x013B, r27

    mmc_init();		// init MMC card
     2b6:	60 d7       	rcall	.+3776   	; 0x1178 <_Z8mmc_initv>

    // read Master Boot Record
    read_sector(DATA, 0, SECTOR_SIZE, sector_buffer);
     2b8:	00 e4       	ldi	r16, 0x40	; 64
     2ba:	13 e0       	ldi	r17, 0x03	; 3
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	32 e0       	ldi	r19, 0x02	; 2
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	ba 01       	movw	r22, r20
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	81 df       	rcall	.-254    	; 0x1cc <_Z11read_sectorhmjPc>

    char *MBR = &sector_buffer[446];	// set pointer to FAT type code in MBR

    uint8_t part_type = MBR[4];	// get partition type
     2ca:	e8 01       	movw	r28, r16
     2cc:	b0 90 02 05 	lds	r11, 0x0502

    // get partition start sector
    uint32_t part_start = *((uint32_t *) & MBR[8]);	// get partition start sector
     2d0:	c0 90 06 05 	lds	r12, 0x0506
     2d4:	d0 90 07 05 	lds	r13, 0x0507
     2d8:	e0 90 08 05 	lds	r14, 0x0508
     2dc:	f0 90 09 05 	lds	r15, 0x0509
    // Read Partition Boot Record (Volume ID)
    uint32_t sectors_per_fat;
    uint8_t num_of_fats;

    // read partition sector 0 - Volume ID
    read_sector(DATA, part_start, SECTOR_SIZE, sector_buffer);
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	32 e0       	ldi	r19, 0x02	; 2
     2e4:	b7 01       	movw	r22, r14
     2e6:	a6 01       	movw	r20, r12
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	70 df       	rcall	.-288    	; 0x1cc <_Z11read_sectorhmjPc>

    partition.bytes_per_sector = *((uint16_t *) & sector_buffer[0x0b]);	// bytes per sector
     2ec:	e0 e4       	ldi	r30, 0x40	; 64
     2ee:	f5 e0       	ldi	r31, 0x05	; 5
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	80 83       	st	Z, r24
    partition.sectors_per_cluster = *((uint8_t *) & sector_buffer[0x0d]);	// sectors per cluster
     2f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2fa:	86 87       	std	Z+14, r24	; 0x0e
    partition.reserved_sectors = *((uint16_t *) & sector_buffer[0x0e]);	// number of reserved sectors
    partition.reserved_sectors += part_start;
     2fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     2fe:	9f 85       	ldd	r25, Y+15	; 0x0f
     300:	c8 0e       	add	r12, r24
     302:	d9 1e       	adc	r13, r25
     304:	d0 8a       	std	Z+16, r13	; 0x10
     306:	c7 86       	std	Z+15, r12	; 0x0f
    num_of_fats = *((uint8_t *) & sector_buffer[0x10]);	// number of FATs
     308:	a8 89       	ldd	r26, Y+16	; 0x10

    // check for FAT32
    if (!(part_type == 0x0b || part_type == 0x0c))
     30a:	85 ef       	ldi	r24, 0xF5	; 245
     30c:	8b 0d       	add	r24, r11
     30e:	82 30       	cpi	r24, 0x02	; 2
     310:	18 f5       	brcc	.+70     	; 0x358 <_Z8init_fatv+0xe0>
        return E_INVALID;	// return on error

    // store number of sectors per FAT, 32bit
    sectors_per_fat = *((uint32_t *) & sector_buffer[0x24]);
     312:	2c a1       	ldd	r18, Y+36	; 0x24
     314:	3d a1       	ldd	r19, Y+37	; 0x25
     316:	4e a1       	ldd	r20, Y+38	; 0x26
     318:	5f a1       	ldd	r21, Y+39	; 0x27
    // store Root Directory first cluster, 32bit
    partition.root_directory = *((uint32_t *) & sector_buffer[0x2c]);	//first cluster in directory chain
    partition.root_directory &= 0xfffffff;
     31a:	8c a4       	ldd	r8, Y+44	; 0x2c
     31c:	9d a4       	ldd	r9, Y+45	; 0x2d
     31e:	ae a4       	ldd	r10, Y+46	; 0x2e
     320:	bf a4       	ldd	r11, Y+47	; 0x2f
     322:	8f e0       	ldi	r24, 0x0F	; 15
     324:	b8 22       	and	r11, r24
     326:	e0 e4       	ldi	r30, 0x40	; 64
     328:	f5 e0       	ldi	r31, 0x05	; 5
     32a:	86 82       	std	Z+6, r8	; 0x06
     32c:	97 82       	std	Z+7, r9	; 0x07
     32e:	a0 86       	std	Z+8, r10	; 0x08
     330:	b1 86       	std	Z+9, r11	; 0x09
    partition.current_directory = partition.root_directory;
     332:	82 86       	std	Z+10, r8	; 0x0a
     334:	93 86       	std	Z+11, r9	; 0x0b
     336:	a4 86       	std	Z+12, r10	; 0x0c
     338:	b5 86       	std	Z+13, r11	; 0x0d
    // Calculate the first LBA cluster
    partition.data_starts = partition.reserved_sectors + sectors_per_fat * num_of_fats;
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	8c 0d       	add	r24, r12
     346:	9d 1d       	adc	r25, r13
     348:	a1 1d       	adc	r26, r1
     34a:	b1 1d       	adc	r27, r1
     34c:	82 83       	std	Z+2, r24	; 0x02
     34e:	93 83       	std	Z+3, r25	; 0x03
     350:	a4 83       	std	Z+4, r26	; 0x04
     352:	b5 83       	std	Z+5, r27	; 0x05

    return S_OK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	01 c0       	rjmp	.+2      	; 0x35a <_Z8init_fatv+0xe2>
    partition.reserved_sectors += part_start;
    num_of_fats = *((uint8_t *) & sector_buffer[0x10]);	// number of FATs

    // check for FAT32
    if (!(part_type == 0x0b || part_type == 0x0c))
        return E_INVALID;	// return on error
     358:	82 e0       	ldi	r24, 0x02	; 2
    partition.current_directory = partition.root_directory;
    // Calculate the first LBA cluster
    partition.data_starts = partition.reserved_sectors + sectors_per_fat * num_of_fats;

    return S_OK;
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	bf 90       	pop	r11
     36c:	af 90       	pop	r10
     36e:	9f 90       	pop	r9
     370:	8f 90       	pop	r8
     372:	08 95       	ret

00000374 <_Z14cluster2sectorm>:
// Parameters: Cluster number
// Returns: Sector number
//
// Description:  Convert cluster number to sector number
//*****************************************************************************
uint32_t cluster2sector (uint32_t cluster){
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17

    // Convert cluster number to sector number
    return partition.data_starts + ((cluster - 2) * partition.sectors_per_cluster);
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	22 50       	subi	r18, 0x02	; 2
     37e:	31 09       	sbc	r19, r1
     380:	41 09       	sbc	r20, r1
     382:	51 09       	sbc	r21, r1
     384:	e0 e4       	ldi	r30, 0x40	; 64
     386:	f5 e0       	ldi	r31, 0x05	; 5
     388:	a6 85       	ldd	r26, Z+14	; 0x0e
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
     390:	02 81       	ldd	r16, Z+2	; 0x02
     392:	13 81       	ldd	r17, Z+3	; 0x03
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	35 81       	ldd	r19, Z+5	; 0x05
     398:	60 0f       	add	r22, r16
     39a:	71 1f       	adc	r23, r17
     39c:	82 1f       	adc	r24, r18
     39e:	93 1f       	adc	r25, r19
}
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <_Z16get_next_clusterm>:
// Parameters: Cluster number
// Returns: Next cluster number
//
// Description:  Return next cluster in chain
//*****************************************************************************
uint32_t get_next_cluster (uint32_t cluster){
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17

    uint32_t sector_offset;
    uint32_t byte_offset;

    cluster &= 0xfffffff;	//FAT32 is actually 28 bits.  Need to mask upper 4 bits
     3ba:	4b 01       	movw	r8, r22
     3bc:	5c 01       	movw	r10, r24
     3be:	2f e0       	ldi	r18, 0x0F	; 15
     3c0:	b2 22       	and	r11, r18
    sector_offset = cluster >> 7;
     3c2:	68 94       	set
     3c4:	16 f8       	bld	r1, 6
     3c6:	b6 94       	lsr	r11
     3c8:	a7 94       	ror	r10
     3ca:	97 94       	ror	r9
     3cc:	87 94       	ror	r8
     3ce:	16 94       	lsr	r1
     3d0:	d1 f7       	brne	.-12     	; 0x3c6 <_Z16get_next_clusterm+0x20>
    sector_offset += partition.reserved_sectors;
     3d2:	20 91 4f 05 	lds	r18, 0x054F
     3d6:	30 91 50 05 	lds	r19, 0x0550
     3da:	82 0e       	add	r8, r18
     3dc:	93 1e       	adc	r9, r19
     3de:	a1 1c       	adc	r10, r1
     3e0:	b1 1c       	adc	r11, r1
    byte_offset = (cluster & 0x7f) << 2;
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	8f 77       	andi	r24, 0x7F	; 127
     3e8:	99 27       	eor	r25, r25
     3ea:	aa 27       	eor	r26, r26
     3ec:	bb 27       	eor	r27, r27
     3ee:	6c 01       	movw	r12, r24
     3f0:	7d 01       	movw	r14, r26
     3f2:	cc 0c       	add	r12, r12
     3f4:	dd 1c       	adc	r13, r13
     3f6:	ee 1c       	adc	r14, r14
     3f8:	ff 1c       	adc	r15, r15
     3fa:	cc 0c       	add	r12, r12
     3fc:	dd 1c       	adc	r13, r13
     3fe:	ee 1c       	adc	r14, r14
     400:	ff 1c       	adc	r15, r15

    if (sector_offset != current_fat_sector) {
     402:	80 91 3c 01 	lds	r24, 0x013C
     406:	90 91 3d 01 	lds	r25, 0x013D
     40a:	a0 91 3e 01 	lds	r26, 0x013E
     40e:	b0 91 3f 01 	lds	r27, 0x013F
     412:	88 16       	cp	r8, r24
     414:	99 06       	cpc	r9, r25
     416:	aa 06       	cpc	r10, r26
     418:	bb 06       	cpc	r11, r27
     41a:	81 f0       	breq	.+32     	; 0x43c <_Z16get_next_clusterm+0x96>
        read_sector (FAT, sector_offset, SECTOR_SIZE, fat_cache);
     41c:	00 e4       	ldi	r16, 0x40	; 64
     41e:	11 e0       	ldi	r17, 0x01	; 1
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	32 e0       	ldi	r19, 0x02	; 2
     424:	b5 01       	movw	r22, r10
     426:	a4 01       	movw	r20, r8
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	d0 de       	rcall	.-608    	; 0x1cc <_Z11read_sectorhmjPc>
        current_fat_sector = sector_offset;
     42c:	80 92 3c 01 	sts	0x013C, r8
     430:	90 92 3d 01 	sts	0x013D, r9
     434:	a0 92 3e 01 	sts	0x013E, r10
     438:	b0 92 3f 01 	sts	0x013F, r11
    }

    byte_offset &= 0x1ff;
     43c:	d7 01       	movw	r26, r14
     43e:	c6 01       	movw	r24, r12
     440:	91 70       	andi	r25, 0x01	; 1
     442:	aa 27       	eor	r26, r26
     444:	bb 27       	eor	r27, r27

    cluster = *((uint32_t *) & fat_cache[byte_offset]);
     446:	fc 01       	movw	r30, r24
     448:	e0 5c       	subi	r30, 0xC0	; 192
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	a2 81       	ldd	r26, Z+2	; 0x02
     452:	b3 81       	ldd	r27, Z+3	; 0x03

    if ((cluster & 0xffffff8) == 0xffffff8)	{//anything greater is end-of-chain
     454:	6c 01       	movw	r12, r24
     456:	7d 01       	movw	r14, r26
     458:	28 ef       	ldi	r18, 0xF8	; 248
     45a:	c2 22       	and	r12, r18
     45c:	2f e0       	ldi	r18, 0x0F	; 15
     45e:	f2 22       	and	r15, r18
     460:	28 ef       	ldi	r18, 0xF8	; 248
     462:	c2 16       	cp	r12, r18
     464:	2f ef       	ldi	r18, 0xFF	; 255
     466:	d2 06       	cpc	r13, r18
     468:	e2 06       	cpc	r14, r18
     46a:	2f e0       	ldi	r18, 0x0F	; 15
     46c:	f2 06       	cpc	r15, r18
     46e:	21 f0       	breq	.+8      	; 0x478 <_Z16get_next_clusterm+0xd2>
        return 0;
	}

    return cluster & 0xfffffff;
     470:	bc 01       	movw	r22, r24
     472:	cd 01       	movw	r24, r26
     474:	9f 70       	andi	r25, 0x0F	; 15
     476:	03 c0       	rjmp	.+6      	; 0x47e <_Z16get_next_clusterm+0xd8>
    byte_offset &= 0x1ff;

    cluster = *((uint32_t *) & fat_cache[byte_offset]);

    if ((cluster & 0xffffff8) == 0xffffff8)	{//anything greater is end-of-chain
        return 0;
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	cb 01       	movw	r24, r22
	}

    return cluster & 0xfffffff;
}
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	9f 90       	pop	r9
     490:	8f 90       	pop	r8
     492:	08 95       	ret

00000494 <_Z8fat_openjPcS_P8FAT_FILE>:
//              File info structure
// Returns: Error code
//
// Description:  open specific file
//*****************************************************************************
uint8_t fat_open (uint16_t entry, char * fname, char * ext, FAT_FILE * file){
     494:	2f 92       	push	r2
     496:	3f 92       	push	r3
     498:	4f 92       	push	r4
     49a:	5f 92       	push	r5
     49c:	6f 92       	push	r6
     49e:	7f 92       	push	r7
     4a0:	8f 92       	push	r8
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	ce 50       	subi	r28, 0x0E	; 14
     4be:	d1 40       	sbci	r29, 0x01	; 1
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	c5 5f       	subi	r28, 0xF5	; 245
     4cc:	de 4f       	sbci	r29, 0xFE	; 254
     4ce:	99 83       	std	Y+1, r25	; 0x01
     4d0:	88 83       	st	Y, r24
     4d2:	cb 50       	subi	r28, 0x0B	; 11
     4d4:	d1 40       	sbci	r29, 0x01	; 1
     4d6:	1b 01       	movw	r2, r22
     4d8:	c7 5f       	subi	r28, 0xF7	; 247
     4da:	de 4f       	sbci	r29, 0xFE	; 254
     4dc:	59 83       	std	Y+1, r21	; 0x01
     4de:	48 83       	st	Y, r20
     4e0:	c9 50       	subi	r28, 0x09	; 9
     4e2:	d1 40       	sbci	r29, 0x01	; 1
     4e4:	c3 5f       	subi	r28, 0xF3	; 243
     4e6:	de 4f       	sbci	r29, 0xFE	; 254
     4e8:	39 83       	std	Y+1, r19	; 0x01
     4ea:	28 83       	st	Y, r18
     4ec:	cd 50       	subi	r28, 0x0D	; 13
     4ee:	d1 40       	sbci	r29, 0x01	; 1
    
	//if (mmc_card_present () != 0) return E_ERROR;

    cur_dir_entry = 0;
     4f0:	10 92 37 01 	sts	0x0137, r1
     4f4:	10 92 36 01 	sts	0x0136, r1
    char *nameptr;
    uint32_t sector = 0;
    uint32_t dir_cluster = 0;
    uint8_t sector_entry = 16, sector_count = 0;;
    uint8_t seqnum = 0;		// long name seqence number
    char localname[MAX_PATH] = { 0 };	// clear long name
     4f8:	fe 01       	movw	r30, r28
     4fa:	31 96       	adiw	r30, 0x01	; 1
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	df 01       	movw	r26, r30
     502:	9c 01       	movw	r18, r24
     504:	1d 92       	st	X+, r1
     506:	21 50       	subi	r18, 0x01	; 1
     508:	30 40       	sbci	r19, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <_Z8fat_openjPcS_P8FAT_FILE+0x70>

    cur_dir_entry = 0;
    char *nameptr;
    uint32_t sector = 0;
    uint32_t dir_cluster = 0;
    uint8_t sector_entry = 16, sector_count = 0;;
     50c:	b1 2c       	mov	r11, r1
     50e:	68 94       	set
     510:	aa 24       	eor	r10, r10
     512:	a4 f8       	bld	r10, 4
	//if (mmc_card_present () != 0) return E_ERROR;

    cur_dir_entry = 0;
    char *nameptr;
    uint32_t sector = 0;
    uint32_t dir_cluster = 0;
     514:	c1 2c       	mov	r12, r1
     516:	d1 2c       	mov	r13, r1
     518:	76 01       	movw	r14, r12
    
	//if (mmc_card_present () != 0) return E_ERROR;

    cur_dir_entry = 0;
    char *nameptr;
    uint32_t sector = 0;
     51a:	41 2c       	mov	r4, r1
     51c:	51 2c       	mov	r5, r1
     51e:	32 01       	movw	r6, r4
    uint32_t dir_cluster = 0;
    uint8_t sector_entry = 16, sector_count = 0;;
    uint8_t seqnum = 0;		// long name seqence number
    char localname[MAX_PATH] = { 0 };	// clear long name
    nameptr = localname;
     520:	8f 01       	movw	r16, r30
     522:	4e 01       	movw	r8, r28
     524:	3e e0       	ldi	r19, 0x0E	; 14
     526:	83 0e       	add	r8, r19
     528:	91 1c       	adc	r9, r1

    do {

        if (sector_entry >= 16) {
     52a:	8f e0       	ldi	r24, 0x0F	; 15
     52c:	8a 15       	cp	r24, r10
     52e:	08 f0       	brcs	.+2      	; 0x532 <_Z8fat_openjPcS_P8FAT_FILE+0x9e>
     530:	54 c0       	rjmp	.+168    	; 0x5da <_Z8fat_openjPcS_P8FAT_FILE+0x146>
            if (dir_cluster == 0) {	// read first Dir sector
     532:	c1 14       	cp	r12, r1
     534:	d1 04       	cpc	r13, r1
     536:	e1 04       	cpc	r14, r1
     538:	f1 04       	cpc	r15, r1
     53a:	e9 f4       	brne	.+58     	; 0x576 <_Z8fat_openjPcS_P8FAT_FILE+0xe2>
                dir_cluster = partition.current_directory;	// get first cluster of RootDir
     53c:	c0 90 4a 05 	lds	r12, 0x054A
     540:	d0 90 4b 05 	lds	r13, 0x054B
     544:	e0 90 4c 05 	lds	r14, 0x054C
     548:	f0 90 4d 05 	lds	r15, 0x054D
                sector = cluster2sector (dir_cluster);	// convert 1st RootDir cluster to sector
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	11 df       	rcall	.-478    	; 0x374 <_Z14cluster2sectorm>
     552:	ab 01       	movw	r20, r22
     554:	bc 01       	movw	r22, r24
                sector_count = 0;
                read_sector (DATA, sector++, SECTOR_SIZE, sector_buffer);	// read 1st RootDir sector in buffer
     556:	2a 01       	movw	r4, r20
     558:	3b 01       	movw	r6, r22
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	49 1a       	sub	r4, r25
     55e:	59 0a       	sbc	r5, r25
     560:	69 0a       	sbc	r6, r25
     562:	79 0a       	sbc	r7, r25
     564:	00 e4       	ldi	r16, 0x40	; 64
     566:	13 e0       	ldi	r17, 0x03	; 3
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	32 e0       	ldi	r19, 0x02	; 2
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	2e de       	rcall	.-932    	; 0x1cc <_Z11read_sectorhmjPc>

        if (sector_entry >= 16) {
            if (dir_cluster == 0) {	// read first Dir sector
                dir_cluster = partition.current_directory;	// get first cluster of RootDir
                sector = cluster2sector (dir_cluster);	// convert 1st RootDir cluster to sector
                sector_count = 0;
     570:	b1 2c       	mov	r11, r1
                    sector = cluster2sector (dir_cluster);	// convert cluster to sector 
                }
                read_sector (DATA, sector++, SECTOR_SIZE, sector_buffer);	// read next RootDir sector
            }
      
            sector_entry = 0;
     572:	a1 2c       	mov	r10, r1
     574:	32 c0       	rjmp	.+100    	; 0x5da <_Z8fat_openjPcS_P8FAT_FILE+0x146>
                sector_count = 0;
                read_sector (DATA, sector++, SECTOR_SIZE, sector_buffer);	// read 1st RootDir sector in buffer
            }
            else {		// if we cross the sector bountry then get next Dir sector
      
                if (++sector_count >= partition.sectors_per_cluster) {
     576:	b3 94       	inc	r11
     578:	80 91 4e 05 	lds	r24, 0x054E
     57c:	b8 16       	cp	r11, r24
     57e:	78 f0       	brcs	.+30     	; 0x59e <_Z8fat_openjPcS_P8FAT_FILE+0x10a>
                    sector_count = 0;
                    dir_cluster = get_next_cluster (dir_cluster);	// get next RootDir cluster
     580:	c7 01       	movw	r24, r14
     582:	b6 01       	movw	r22, r12
     584:	10 df       	rcall	.-480    	; 0x3a6 <_Z16get_next_clusterm>
     586:	6b 01       	movw	r12, r22
     588:	7c 01       	movw	r14, r24
            
                    if (dir_cluster == 0)
     58a:	61 15       	cp	r22, r1
     58c:	71 05       	cpc	r23, r1
     58e:	81 05       	cpc	r24, r1
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <_Z8fat_openjPcS_P8FAT_FILE+0x102>
     594:	5f c1       	rjmp	.+702    	; 0x854 <_Z8fat_openjPcS_P8FAT_FILE+0x3c0>
                  break;	// we reached the last cluster in folder
            
                    sector = cluster2sector (dir_cluster);	// convert cluster to sector 
     596:	ee de       	rcall	.-548    	; 0x374 <_Z14cluster2sectorm>
     598:	2b 01       	movw	r4, r22
     59a:	3c 01       	movw	r6, r24
                read_sector (DATA, sector++, SECTOR_SIZE, sector_buffer);	// read 1st RootDir sector in buffer
            }
            else {		// if we cross the sector bountry then get next Dir sector
      
                if (++sector_count >= partition.sectors_per_cluster) {
                    sector_count = 0;
     59c:	b1 2c       	mov	r11, r1
                    if (dir_cluster == 0)
                  break;	// we reached the last cluster in folder
            
                    sector = cluster2sector (dir_cluster);	// convert cluster to sector 
                }
                read_sector (DATA, sector++, SECTOR_SIZE, sector_buffer);	// read next RootDir sector
     59e:	d3 01       	movw	r26, r6
     5a0:	c2 01       	movw	r24, r4
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	cb 5f       	subi	r28, 0xFB	; 251
     5aa:	de 4f       	sbci	r29, 0xFE	; 254
     5ac:	88 83       	st	Y, r24
     5ae:	99 83       	std	Y+1, r25	; 0x01
     5b0:	aa 83       	std	Y+2, r26	; 0x02
     5b2:	bb 83       	std	Y+3, r27	; 0x03
     5b4:	c5 50       	subi	r28, 0x05	; 5
     5b6:	d1 40       	sbci	r29, 0x01	; 1
     5b8:	00 e4       	ldi	r16, 0x40	; 64
     5ba:	13 e0       	ldi	r17, 0x03	; 3
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	32 e0       	ldi	r19, 0x02	; 2
     5c0:	b3 01       	movw	r22, r6
     5c2:	a2 01       	movw	r20, r4
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	02 de       	rcall	.-1020   	; 0x1cc <_Z11read_sectorhmjPc>
     5c8:	cb 5f       	subi	r28, 0xFB	; 251
     5ca:	de 4f       	sbci	r29, 0xFE	; 254
     5cc:	48 80       	ld	r4, Y
     5ce:	59 80       	ldd	r5, Y+1	; 0x01
     5d0:	6a 80       	ldd	r6, Y+2	; 0x02
     5d2:	7b 80       	ldd	r7, Y+3	; 0x03
     5d4:	c5 50       	subi	r28, 0x05	; 5
     5d6:	d1 40       	sbci	r29, 0x01	; 1
            }
      
            sector_entry = 0;
     5d8:	a1 2c       	mov	r10, r1
            nameptr = sector_buffer;	// point to file name in Dir record entry
        }

        if (*nameptr != 0xE5)	// if not a deleted entry
     5da:	d8 01       	movw	r26, r16
     5dc:	8c 91       	ld	r24, X
     5de:	85 3e       	cpi	r24, 0xE5	; 229
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <_Z8fat_openjPcS_P8FAT_FILE+0x150>
     5e2:	34 c1       	rjmp	.+616    	; 0x84c <_Z8fat_openjPcS_P8FAT_FILE+0x3b8>
        {
            if (*(nameptr + 11) == ATTR_LFN)	// check for long name
     5e4:	1b 96       	adiw	r26, 0x0b	; 11
     5e6:	9c 91       	ld	r25, X
     5e8:	9f 30       	cpi	r25, 0x0F	; 15
     5ea:	09 f0       	breq	.+2      	; 0x5ee <_Z8fat_openjPcS_P8FAT_FILE+0x15a>
     5ec:	8d c0       	rjmp	.+282    	; 0x708 <_Z8fat_openjPcS_P8FAT_FILE+0x274>
            {			//Entry for Long Filename
                seqnum = (*nameptr & 0x3F) - 1;	// get sequence number
     5ee:	8f 73       	andi	r24, 0x3F	; 63
     5f0:	81 50       	subi	r24, 0x01	; 1
            
                // make complete filename from entrys
                localname[seqnum * 13 + 0] = *(nameptr + 1);
     5f2:	bd e0       	ldi	r27, 0x0D	; 13
     5f4:	8b 9f       	mul	r24, r27
     5f6:	c0 01       	movw	r24, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	f8 01       	movw	r30, r16
     5fc:	21 81       	ldd	r18, Z+1	; 0x01
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f9 1f       	adc	r31, r25
     60a:	20 83       	st	Z, r18
                localname[seqnum * 13 + 1] = *(nameptr + 3);
     60c:	d8 01       	movw	r26, r16
     60e:	13 96       	adiw	r26, 0x03	; 3
     610:	2c 91       	ld	r18, X
     612:	13 97       	sbiw	r26, 0x03	; 3
     614:	e2 e0       	ldi	r30, 0x02	; 2
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 0f       	add	r30, r28
     61a:	fd 1f       	adc	r31, r29
     61c:	e8 0f       	add	r30, r24
     61e:	f9 1f       	adc	r31, r25
     620:	20 83       	st	Z, r18
                localname[seqnum * 13 + 2] = *(nameptr + 5);
     622:	15 96       	adiw	r26, 0x05	; 5
     624:	2c 91       	ld	r18, X
     626:	15 97       	sbiw	r26, 0x05	; 5
     628:	e3 e0       	ldi	r30, 0x03	; 3
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e8 0f       	add	r30, r24
     632:	f9 1f       	adc	r31, r25
     634:	20 83       	st	Z, r18
                localname[seqnum * 13 + 3] = *(nameptr + 7);
     636:	17 96       	adiw	r26, 0x07	; 7
     638:	2c 91       	ld	r18, X
     63a:	17 97       	sbiw	r26, 0x07	; 7
     63c:	e4 e0       	ldi	r30, 0x04	; 4
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ec 0f       	add	r30, r28
     642:	fd 1f       	adc	r31, r29
     644:	e8 0f       	add	r30, r24
     646:	f9 1f       	adc	r31, r25
     648:	20 83       	st	Z, r18
                localname[seqnum * 13 + 4] = *(nameptr + 9);
     64a:	19 96       	adiw	r26, 0x09	; 9
     64c:	2c 91       	ld	r18, X
     64e:	19 97       	sbiw	r26, 0x09	; 9
     650:	e5 e0       	ldi	r30, 0x05	; 5
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	ec 0f       	add	r30, r28
     656:	fd 1f       	adc	r31, r29
     658:	e8 0f       	add	r30, r24
     65a:	f9 1f       	adc	r31, r25
     65c:	20 83       	st	Z, r18
                localname[seqnum * 13 + 5] = *(nameptr + 14);
     65e:	1e 96       	adiw	r26, 0x0e	; 14
     660:	2c 91       	ld	r18, X
     662:	1e 97       	sbiw	r26, 0x0e	; 14
     664:	e6 e0       	ldi	r30, 0x06	; 6
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ec 0f       	add	r30, r28
     66a:	fd 1f       	adc	r31, r29
     66c:	e8 0f       	add	r30, r24
     66e:	f9 1f       	adc	r31, r25
     670:	20 83       	st	Z, r18
                localname[seqnum * 13 + 6] = *(nameptr + 16);
     672:	50 96       	adiw	r26, 0x10	; 16
     674:	2c 91       	ld	r18, X
     676:	50 97       	sbiw	r26, 0x10	; 16
     678:	e7 e0       	ldi	r30, 0x07	; 7
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	e8 0f       	add	r30, r24
     682:	f9 1f       	adc	r31, r25
     684:	20 83       	st	Z, r18
                localname[seqnum * 13 + 7] = *(nameptr + 18);
     686:	52 96       	adiw	r26, 0x12	; 18
     688:	2c 91       	ld	r18, X
     68a:	52 97       	sbiw	r26, 0x12	; 18
     68c:	e8 e0       	ldi	r30, 0x08	; 8
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ec 0f       	add	r30, r28
     692:	fd 1f       	adc	r31, r29
     694:	e8 0f       	add	r30, r24
     696:	f9 1f       	adc	r31, r25
     698:	20 83       	st	Z, r18
                localname[seqnum * 13 + 8] = *(nameptr + 20);
     69a:	54 96       	adiw	r26, 0x14	; 20
     69c:	2c 91       	ld	r18, X
     69e:	54 97       	sbiw	r26, 0x14	; 20
     6a0:	e9 e0       	ldi	r30, 0x09	; 9
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	ec 0f       	add	r30, r28
     6a6:	fd 1f       	adc	r31, r29
     6a8:	e8 0f       	add	r30, r24
     6aa:	f9 1f       	adc	r31, r25
     6ac:	20 83       	st	Z, r18
                localname[seqnum * 13 + 9] = *(nameptr + 22);
     6ae:	56 96       	adiw	r26, 0x16	; 22
     6b0:	2c 91       	ld	r18, X
     6b2:	56 97       	sbiw	r26, 0x16	; 22
     6b4:	ea e0       	ldi	r30, 0x0A	; 10
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
     6bc:	e8 0f       	add	r30, r24
     6be:	f9 1f       	adc	r31, r25
     6c0:	20 83       	st	Z, r18
                localname[seqnum * 13 + 10] = *(nameptr + 24);
     6c2:	58 96       	adiw	r26, 0x18	; 24
     6c4:	2c 91       	ld	r18, X
     6c6:	58 97       	sbiw	r26, 0x18	; 24
     6c8:	eb e0       	ldi	r30, 0x0B	; 11
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	e8 0f       	add	r30, r24
     6d2:	f9 1f       	adc	r31, r25
     6d4:	20 83       	st	Z, r18
                localname[seqnum * 13 + 11] = *(nameptr + 28);
     6d6:	5c 96       	adiw	r26, 0x1c	; 28
     6d8:	2c 91       	ld	r18, X
     6da:	5c 97       	sbiw	r26, 0x1c	; 28
     6dc:	ec e0       	ldi	r30, 0x0C	; 12
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ec 0f       	add	r30, r28
     6e2:	fd 1f       	adc	r31, r29
     6e4:	e8 0f       	add	r30, r24
     6e6:	f9 1f       	adc	r31, r25
     6e8:	20 83       	st	Z, r18
                localname[seqnum * 13 + 12] = *(nameptr + 30);
     6ea:	5e 96       	adiw	r26, 0x1e	; 30
     6ec:	2c 91       	ld	r18, X
     6ee:	5e 97       	sbiw	r26, 0x1e	; 30
     6f0:	fe 01       	movw	r30, r28
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	25 87       	std	Z+13, r18	; 0x0d
                // terminate file name string
                if (*nameptr & 0x40)
     6f8:	2c 91       	ld	r18, X
     6fa:	26 ff       	sbrs	r18, 6
     6fc:	a7 c0       	rjmp	.+334    	; 0x84c <_Z8fat_openjPcS_P8FAT_FILE+0x3b8>
                    localname[seqnum * 13 + 13] = 0;
     6fe:	f4 01       	movw	r30, r8
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	10 82       	st	Z, r1
     706:	a2 c0       	rjmp	.+324    	; 0x84c <_Z8fat_openjPcS_P8FAT_FILE+0x3b8>
            }
            else if ((*nameptr != '.') &&
     708:	8e 32       	cpi	r24, 0x2E	; 46
     70a:	09 f4       	brne	.+2      	; 0x70e <_Z8fat_openjPcS_P8FAT_FILE+0x27a>
     70c:	9f c0       	rjmp	.+318    	; 0x84c <_Z8fat_openjPcS_P8FAT_FILE+0x3b8>
               ((*(nameptr + 11) &
     70e:	9e 70       	andi	r25, 0x0E	; 14
                localname[seqnum * 13 + 12] = *(nameptr + 30);
                // terminate file name string
                if (*nameptr & 0x40)
                    localname[seqnum * 13 + 13] = 0;
            }
            else if ((*nameptr != '.') &&
     710:	09 f0       	breq	.+2      	; 0x714 <_Z8fat_openjPcS_P8FAT_FILE+0x280>
     712:	9c c0       	rjmp	.+312    	; 0x84c <_Z8fat_openjPcS_P8FAT_FILE+0x3b8>
               ((*(nameptr + 11) &
                 (ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME))
                == 0)
          ) {		// Short name entry
            
                if (localname[0] == 0) {
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	91 11       	cpse	r25, r1
     718:	2d c0       	rjmp	.+90     	; 0x774 <_Z8fat_openjPcS_P8FAT_FILE+0x2e0>
                    // copy short name
                    localname[0] = *(nameptr);
     71a:	89 83       	std	Y+1, r24	; 0x01
                    localname[1] = *(nameptr + 1);
     71c:	f8 01       	movw	r30, r16
     71e:	81 81       	ldd	r24, Z+1	; 0x01
     720:	8a 83       	std	Y+2, r24	; 0x02
                    localname[2] = *(nameptr + 2);
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	8b 83       	std	Y+3, r24	; 0x03
                    localname[3] = *(nameptr + 3);
     726:	83 81       	ldd	r24, Z+3	; 0x03
     728:	8c 83       	std	Y+4, r24	; 0x04
                    localname[4] = *(nameptr + 4);
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	8d 83       	std	Y+5, r24	; 0x05
                    localname[5] = *(nameptr + 5);
     72e:	85 81       	ldd	r24, Z+5	; 0x05
     730:	8e 83       	std	Y+6, r24	; 0x06
                    localname[6] = *(nameptr + 6);
     732:	86 81       	ldd	r24, Z+6	; 0x06
     734:	8f 83       	std	Y+7, r24	; 0x07
                    localname[7] = *(nameptr + 7);
     736:	87 81       	ldd	r24, Z+7	; 0x07
     738:	88 87       	std	Y+8, r24	; 0x08
                    localname[8] = '.';
     73a:	8e e2       	ldi	r24, 0x2E	; 46
     73c:	89 87       	std	Y+9, r24	; 0x09
                    localname[9] = *(nameptr + 8);
     73e:	80 85       	ldd	r24, Z+8	; 0x08
     740:	8a 87       	std	Y+10, r24	; 0x0a
                    localname[10] = *(nameptr + 9);
     742:	81 85       	ldd	r24, Z+9	; 0x09
     744:	8b 87       	std	Y+11, r24	; 0x0b
                    localname[11] = *(nameptr + 10);
     746:	82 85       	ldd	r24, Z+10	; 0x0a
     748:	8c 87       	std	Y+12, r24	; 0x0c
                    localname[12] = 0;	// terminate string
     74a:	1d 86       	std	Y+13, r1	; 0x0d
            
                    // remove trailing spaces from SFN
                    uint8_t fname_len = strlen (fname) - 4;
     74c:	f1 01       	movw	r30, r2
     74e:	01 90       	ld	r0, Z+
     750:	00 20       	and	r0, r0
     752:	e9 f7       	brne	.-6      	; 0x74e <_Z8fat_openjPcS_P8FAT_FILE+0x2ba>
     754:	8e 2f       	mov	r24, r30
     756:	82 19       	sub	r24, r2
     758:	fe 01       	movw	r30, r28
     75a:	39 96       	adiw	r30, 0x09	; 9
     75c:	85 50       	subi	r24, 0x05	; 5
     75e:	a1 e0       	ldi	r26, 0x01	; 1
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	ac 0f       	add	r26, r28
     764:	bd 1f       	adc	r27, r29
     766:	a8 0f       	add	r26, r24
     768:	b1 1d       	adc	r27, r1
                    for (uint8_t m = 0; m < 5; m++)
                        localname[fname_len + m] = localname[8 + m];
     76a:	81 91       	ld	r24, Z+
     76c:	8d 93       	st	X+, r24
                    localname[11] = *(nameptr + 10);
                    localname[12] = 0;	// terminate string
            
                    // remove trailing spaces from SFN
                    uint8_t fname_len = strlen (fname) - 4;
                    for (uint8_t m = 0; m < 5; m++)
     76e:	e8 15       	cp	r30, r8
     770:	f9 05       	cpc	r31, r9
     772:	d9 f7       	brne	.-10     	; 0x76a <_Z8fat_openjPcS_P8FAT_FILE+0x2d6>
                        localname[fname_len + m] = localname[8 + m];
                }
            
                // get file data on filename match OR
                // on extention and entry number match
                if ((strncasecmp (localname, fname, MAX_PATH) == 0)
     774:	44 e0       	ldi	r20, 0x04	; 4
     776:	51 e0       	ldi	r21, 0x01	; 1
     778:	b1 01       	movw	r22, r2
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	0e 94 85 13 	call	0x270a	; 0x270a <strncasecmp>
     782:	89 2b       	or	r24, r25
     784:	f1 f0       	breq	.+60     	; 0x7c2 <_Z8fat_openjPcS_P8FAT_FILE+0x32e>
                    ||
                    ((strncasecmp (ext, nameptr + 8, 3) == 0) &&
     786:	43 e0       	ldi	r20, 0x03	; 3
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	b8 01       	movw	r22, r16
     78c:	68 5f       	subi	r22, 0xF8	; 248
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	c7 5f       	subi	r28, 0xF7	; 247
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	88 81       	ld	r24, Y
     796:	99 81       	ldd	r25, Y+1	; 0x01
     798:	c9 50       	subi	r28, 0x09	; 9
     79a:	d1 40       	sbci	r29, 0x01	; 1
     79c:	0e 94 85 13 	call	0x270a	; 0x270a <strncasecmp>
                }
            
                // get file data on filename match OR
                // on extention and entry number match
                if ((strncasecmp (localname, fname, MAX_PATH) == 0)
                    ||
     7a0:	89 2b       	or	r24, r25
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <_Z8fat_openjPcS_P8FAT_FILE+0x312>
     7a4:	52 c0       	rjmp	.+164    	; 0x84a <_Z8fat_openjPcS_P8FAT_FILE+0x3b6>
                    ((strncasecmp (ext, nameptr + 8, 3) == 0) &&
                     cur_dir_entry == entry)
     7a6:	80 91 36 01 	lds	r24, 0x0136
     7aa:	90 91 37 01 	lds	r25, 0x0137
            
                // get file data on filename match OR
                // on extention and entry number match
                if ((strncasecmp (localname, fname, MAX_PATH) == 0)
                    ||
                    ((strncasecmp (ext, nameptr + 8, 3) == 0) &&
     7ae:	c5 5f       	subi	r28, 0xF5	; 245
     7b0:	de 4f       	sbci	r29, 0xFE	; 254
     7b2:	28 81       	ld	r18, Y
     7b4:	39 81       	ldd	r19, Y+1	; 0x01
     7b6:	cb 50       	subi	r28, 0x0B	; 11
     7b8:	d1 40       	sbci	r29, 0x01	; 1
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	09 f0       	breq	.+2      	; 0x7c2 <_Z8fat_openjPcS_P8FAT_FILE+0x32e>
     7c0:	4b c0       	rjmp	.+150    	; 0x858 <_Z8fat_openjPcS_P8FAT_FILE+0x3c4>
                     cur_dir_entry == entry)
                    ) {
            
                    // get first cluster of file
                    file->first_cluster = *((uint16_t *) & nameptr[0x14]);
     7c2:	d8 01       	movw	r26, r16
     7c4:	54 96       	adiw	r26, 0x14	; 20
     7c6:	8d 91       	ld	r24, X+
     7c8:	9c 91       	ld	r25, X
     7ca:	55 97       	sbiw	r26, 0x15	; 21
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
                    file->first_cluster <<= 16;
     7d0:	dc 01       	movw	r26, r24
     7d2:	99 27       	eor	r25, r25
     7d4:	88 27       	eor	r24, r24
     7d6:	c3 5f       	subi	r28, 0xF3	; 243
     7d8:	de 4f       	sbci	r29, 0xFE	; 254
     7da:	e8 81       	ld	r30, Y
     7dc:	f9 81       	ldd	r31, Y+1	; 0x01
     7de:	cd 50       	subi	r28, 0x0D	; 13
     7e0:	d1 40       	sbci	r29, 0x01	; 1
     7e2:	84 83       	std	Z+4, r24	; 0x04
     7e4:	95 83       	std	Z+5, r25	; 0x05
     7e6:	a6 83       	std	Z+6, r26	; 0x06
     7e8:	b7 83       	std	Z+7, r27	; 0x07
                    file->first_cluster += *((uint16_t *) & nameptr[0x1a]);
     7ea:	f8 01       	movw	r30, r16
     7ec:	22 8d       	ldd	r18, Z+26	; 0x1a
     7ee:	33 8d       	ldd	r19, Z+27	; 0x1b
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	a1 1d       	adc	r26, r1
     7f6:	b1 1d       	adc	r27, r1
                    file->first_cluster &= 0xfffffff;
     7f8:	bf 70       	andi	r27, 0x0F	; 15
     7fa:	c3 5f       	subi	r28, 0xF3	; 243
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	e8 81       	ld	r30, Y
     800:	f9 81       	ldd	r31, Y+1	; 0x01
     802:	cd 50       	subi	r28, 0x0D	; 13
     804:	d1 40       	sbci	r29, 0x01	; 1
     806:	84 83       	std	Z+4, r24	; 0x04
     808:	95 83       	std	Z+5, r25	; 0x05
     80a:	a6 83       	std	Z+6, r26	; 0x06
     80c:	b7 83       	std	Z+7, r27	; 0x07
                    // get file size in bytes
                    file->file_size = *((uint32_t *) & nameptr[0x1c]);
     80e:	f8 01       	movw	r30, r16
     810:	44 8d       	ldd	r20, Z+28	; 0x1c
     812:	55 8d       	ldd	r21, Z+29	; 0x1d
     814:	66 8d       	ldd	r22, Z+30	; 0x1e
     816:	77 8d       	ldd	r23, Z+31	; 0x1f
     818:	c3 5f       	subi	r28, 0xF3	; 243
     81a:	de 4f       	sbci	r29, 0xFE	; 254
     81c:	e8 81       	ld	r30, Y
     81e:	f9 81       	ldd	r31, Y+1	; 0x01
     820:	cd 50       	subi	r28, 0x0D	; 13
     822:	d1 40       	sbci	r29, 0x01	; 1
     824:	40 87       	std	Z+8, r20	; 0x08
     826:	51 87       	std	Z+9, r21	; 0x09
     828:	62 87       	std	Z+10, r22	; 0x0a
     82a:	73 87       	std	Z+11, r23	; 0x0b
                    file->current_cluster = file->first_cluster;
     82c:	80 83       	st	Z, r24
     82e:	91 83       	std	Z+1, r25	; 0x01
     830:	a2 83       	std	Z+2, r26	; 0x02
     832:	b3 83       	std	Z+3, r27	; 0x03
                    file->pointer = 0;
     834:	14 86       	std	Z+12, r1	; 0x0c
     836:	15 86       	std	Z+13, r1	; 0x0d
     838:	16 86       	std	Z+14, r1	; 0x0e
     83a:	17 86       	std	Z+15, r1	; 0x0f
            
                    return S_OK;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	11 c0       	rjmp	.+34     	; 0x862 <_Z8fat_openjPcS_P8FAT_FILE+0x3ce>
            
                // Increment file entry counter
                if ((*(nameptr + 11) != ATTR_DIRECTORY) &&
                    (strncasecmp (ext, nameptr + 8, 3) == 0)
                    )
                    cur_dir_entry++;
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	90 93 37 01 	sts	0x0137, r25
     846:	80 93 36 01 	sts	0x0136, r24
            
                localname[0] = 0;	// clear long name
     84a:	19 82       	std	Y+1, r1	; 0x01
            }			// if short name entry   
        }			// if valid entry          

        nameptr += 32;
     84c:	00 5e       	subi	r16, 0xE0	; 224
     84e:	1f 4f       	sbci	r17, 0xFF	; 255
        sector_entry++;
     850:	a3 94       	inc	r10
    } while (1);

    return E_INVALID;		// return if file was not found
     852:	6b ce       	rjmp	.-810    	; 0x52a <_Z8fat_openjPcS_P8FAT_FILE+0x96>
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	05 c0       	rjmp	.+10     	; 0x862 <_Z8fat_openjPcS_P8FAT_FILE+0x3ce>
            
                    return S_OK;
                }		// if filename check
            
                // Increment file entry counter
                if ((*(nameptr + 11) != ATTR_DIRECTORY) &&
     858:	f8 01       	movw	r30, r16
     85a:	23 85       	ldd	r18, Z+11	; 0x0b
     85c:	20 31       	cpi	r18, 0x10	; 16
     85e:	81 f7       	brne	.-32     	; 0x840 <_Z8fat_openjPcS_P8FAT_FILE+0x3ac>
     860:	f4 cf       	rjmp	.-24     	; 0x84a <_Z8fat_openjPcS_P8FAT_FILE+0x3b6>
        nameptr += 32;
        sector_entry++;
    } while (1);

    return E_INVALID;		// return if file was not found
}
     862:	c2 5f       	subi	r28, 0xF2	; 242
     864:	de 4f       	sbci	r29, 0xFE	; 254
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	4f 90       	pop	r4
     890:	3f 90       	pop	r3
     892:	2f 90       	pop	r2
     894:	08 95       	ret

00000896 <_Z8fat_readPcjP8FAT_FILE>:
// Returns: Number of bytes read
//
// Description: read specific number of bytes from file
//              Be sure that out buffer IS NOT the same as sector_buffer!
//*****************************************************************************
uint16_t fat_read (char * out, uint16_t size, FAT_FILE * file){
     896:	2f 92       	push	r2
     898:	3f 92       	push	r3
     89a:	4f 92       	push	r4
     89c:	5f 92       	push	r5
     89e:	6f 92       	push	r6
     8a0:	7f 92       	push	r7
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	27 97       	sbiw	r28, 0x07	; 7
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	88 2e       	mov	r8, r24
     8cc:	99 2e       	mov	r9, r25
     8ce:	7a 01       	movw	r14, r20
    
	//if (mmc_card_present () != 0) return 0;

    if (!size)
     8d0:	61 15       	cp	r22, r1
     8d2:	71 05       	cpc	r23, r1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <_Z8fat_readPcjP8FAT_FILE+0x42>
     8d6:	ae c0       	rjmp	.+348    	; 0xa34 <_Z8fat_readPcjP8FAT_FILE+0x19e>
     8d8:	7f 83       	std	Y+7, r23	; 0x07
     8da:	6e 83       	std	Y+6, r22	; 0x06
     8dc:	61 30       	cpi	r22, 0x01	; 1
     8de:	72 40       	sbci	r23, 0x02	; 2
     8e0:	20 f0       	brcs	.+8      	; 0x8ea <_Z8fat_readPcjP8FAT_FILE+0x54>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	9f 83       	std	Y+7, r25	; 0x07
     8e8:	8e 83       	std	Y+6, r24	; 0x06
        return size;
    if (size > SECTOR_SIZE)
        size = SECTOR_SIZE;

    // correct number of bytes requested
    if (file->pointer + size > file->file_size)
     8ea:	f7 01       	movw	r30, r14
     8ec:	84 85       	ldd	r24, Z+12	; 0x0c
     8ee:	95 85       	ldd	r25, Z+13	; 0x0d
     8f0:	a6 85       	ldd	r26, Z+14	; 0x0e
     8f2:	b7 85       	ldd	r27, Z+15	; 0x0f
     8f4:	40 85       	ldd	r20, Z+8	; 0x08
     8f6:	51 85       	ldd	r21, Z+9	; 0x09
     8f8:	62 85       	ldd	r22, Z+10	; 0x0a
     8fa:	73 85       	ldd	r23, Z+11	; 0x0b
     8fc:	2c 01       	movw	r4, r24
     8fe:	3d 01       	movw	r6, r26
     900:	2e 81       	ldd	r18, Y+6	; 0x06
     902:	3f 81       	ldd	r19, Y+7	; 0x07
     904:	42 0e       	add	r4, r18
     906:	53 1e       	adc	r5, r19
     908:	61 1c       	adc	r6, r1
     90a:	71 1c       	adc	r7, r1
     90c:	44 15       	cp	r20, r4
     90e:	55 05       	cpc	r21, r5
     910:	66 05       	cpc	r22, r6
     912:	77 05       	cpc	r23, r7
     914:	28 f4       	brcc	.+10     	; 0x920 <_Z8fat_readPcjP8FAT_FILE+0x8a>
        size = (uint16_t) (file->file_size - file->pointer);
     916:	fa 01       	movw	r30, r20
     918:	e8 1b       	sub	r30, r24
     91a:	f9 0b       	sbc	r31, r25
     91c:	ff 83       	std	Y+7, r31	; 0x07
     91e:	ee 83       	std	Y+6, r30	; 0x06
// Returns: Number of bytes read
//
// Description: read specific number of bytes from file
//              Be sure that out buffer IS NOT the same as sector_buffer!
//*****************************************************************************
uint16_t fat_read (char * out, uint16_t size, FAT_FILE * file){
     920:	c1 2c       	mov	r12, r1
     922:	d1 2c       	mov	r13, r1
     924:	0f 2e       	mov	r0, r31
     926:	f0 e4       	ldi	r31, 0x40	; 64
     928:	af 2e       	mov	r10, r31
     92a:	f5 e0       	ldi	r31, 0x05	; 5
     92c:	bf 2e       	mov	r11, r31
     92e:	f0 2d       	mov	r31, r0
    char *ptr;

    do {
        // calculate sector offset in cluster
        uint8_t sector_in_cluster =
            (uint8_t) ((file->pointer / partition.bytes_per_sector) %
     930:	d7 01       	movw	r26, r14
     932:	1c 96       	adiw	r26, 0x0c	; 12
     934:	6d 91       	ld	r22, X+
     936:	7d 91       	ld	r23, X+
     938:	8d 91       	ld	r24, X+
     93a:	9c 91       	ld	r25, X
     93c:	1f 97       	sbiw	r26, 0x0f	; 15
     93e:	e0 e4       	ldi	r30, 0x40	; 64
     940:	f5 e0       	ldi	r31, 0x05	; 5
     942:	20 81       	ld	r18, Z
     944:	31 81       	ldd	r19, Z+1	; 0x01
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	40 90 4e 05 	lds	r4, 0x054E
     95a:	51 2c       	mov	r5, r1
     95c:	61 2c       	mov	r6, r1
     95e:	71 2c       	mov	r7, r1
     960:	ca 01       	movw	r24, r20
     962:	b9 01       	movw	r22, r18
     964:	a3 01       	movw	r20, r6
     966:	92 01       	movw	r18, r4
     968:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     96c:	2b 01       	movw	r4, r22
     96e:	3c 01       	movw	r6, r24
                 partition.sectors_per_cluster);
     970:	6d 83       	std	Y+5, r22	; 0x05
      
        ptr = &sector_buffer[file->pointer % partition.bytes_per_sector];
     972:	29 81       	ldd	r18, Y+1	; 0x01
     974:	3a 81       	ldd	r19, Y+2	; 0x02
     976:	20 5c       	subi	r18, 0xC0	; 192
     978:	3c 4f       	sbci	r19, 0xFC	; 252
     97a:	19 01       	movw	r2, r18
      
        // read required sector
        read_sector (DATA, cluster2sector (file->current_cluster) + sector_in_cluster, SECTOR_SIZE, sector_buffer);
     97c:	d7 01       	movw	r26, r14
     97e:	6d 91       	ld	r22, X+
     980:	7d 91       	ld	r23, X+
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	f6 dc       	rcall	.-1556   	; 0x374 <_Z14cluster2sectorm>
     988:	ab 01       	movw	r20, r22
     98a:	bc 01       	movw	r22, r24
     98c:	44 0d       	add	r20, r4
     98e:	55 1d       	adc	r21, r5
     990:	66 1d       	adc	r22, r6
     992:	77 1d       	adc	r23, r7
     994:	00 e4       	ldi	r16, 0x40	; 64
     996:	13 e0       	ldi	r17, 0x03	; 3
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	32 e0       	ldi	r19, 0x02	; 2
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	16 dc       	rcall	.-2004   	; 0x1cc <_Z11read_sectorhmjPc>
      
        for (; size > 0; size--) {
     9a0:	ee 81       	ldd	r30, Y+6	; 0x06
     9a2:	ff 81       	ldd	r31, Y+7	; 0x07
     9a4:	ef 2b       	or	r30, r31
     9a6:	09 f4       	brne	.+2      	; 0x9aa <_Z8fat_readPcjP8FAT_FILE+0x114>
     9a8:	48 c0       	rjmp	.+144    	; 0xa3a <_Z8fat_readPcjP8FAT_FILE+0x1a4>
      
            if (ptr >= (sector_buffer + sizeof (sector_buffer)))
     9aa:	f0 e4       	ldi	r31, 0x40	; 64
     9ac:	2f 16       	cp	r2, r31
     9ae:	f5 e0       	ldi	r31, 0x05	; 5
     9b0:	3f 06       	cpc	r3, r31
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <_Z8fat_readPcjP8FAT_FILE+0x120>
     9b4:	4e c0       	rjmp	.+156    	; 0xa52 <_Z8fat_readPcjP8FAT_FILE+0x1bc>
     9b6:	f1 01       	movw	r30, r2
     9b8:	a8 2d       	mov	r26, r8
     9ba:	b9 2d       	mov	r27, r9
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <_Z8fat_readPcjP8FAT_FILE+0x132>
     9be:	dc 01       	movw	r26, r24
     9c0:	ea 15       	cp	r30, r10
     9c2:	fb 05       	cpc	r31, r11
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <_Z8fat_readPcjP8FAT_FILE+0x132>
     9c6:	45 c0       	rjmp	.+138    	; 0xa52 <_Z8fat_readPcjP8FAT_FILE+0x1bc>
     9c8:	cd 01       	movw	r24, r26
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	88 2e       	mov	r8, r24
     9ce:	99 2e       	mov	r9, r25
                break;
      
            *out++ = *ptr++;
     9d0:	21 91       	ld	r18, Z+
     9d2:	2c 93       	st	X, r18
            file->pointer++;
     9d4:	d7 01       	movw	r26, r14
     9d6:	1c 96       	adiw	r26, 0x0c	; 12
     9d8:	4d 91       	ld	r20, X+
     9da:	5d 91       	ld	r21, X+
     9dc:	6d 91       	ld	r22, X+
     9de:	7c 91       	ld	r23, X
     9e0:	1f 97       	sbiw	r26, 0x0f	; 15
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	6f 4f       	sbci	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	1c 96       	adiw	r26, 0x0c	; 12
     9ec:	4d 93       	st	X+, r20
     9ee:	5d 93       	st	X+, r21
     9f0:	6d 93       	st	X+, r22
     9f2:	7c 93       	st	X, r23
     9f4:	1f 97       	sbiw	r26, 0x0f	; 15
            read++;
     9f6:	bf ef       	ldi	r27, 0xFF	; 255
     9f8:	cb 1a       	sub	r12, r27
     9fa:	db 0a       	sbc	r13, r27
        ptr = &sector_buffer[file->pointer % partition.bytes_per_sector];
      
        // read required sector
        read_sector (DATA, cluster2sector (file->current_cluster) + sector_in_cluster, SECTOR_SIZE, sector_buffer);
      
        for (; size > 0; size--) {
     9fc:	2e 81       	ldd	r18, Y+6	; 0x06
     9fe:	3f 81       	ldd	r19, Y+7	; 0x07
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	31 09       	sbc	r19, r1
     a04:	3f 83       	std	Y+7, r19	; 0x07
     a06:	2e 83       	std	Y+6, r18	; 0x06
     a08:	23 2b       	or	r18, r19
     a0a:	c9 f6       	brne	.-78     	; 0x9be <_Z8fat_readPcjP8FAT_FILE+0x128>
     a0c:	16 c0       	rjmp	.+44     	; 0xa3a <_Z8fat_readPcjP8FAT_FILE+0x1a4>
            read++;
        }
      
        // check if we reach the cluster boundary
        if ((sector_in_cluster + 1) % partition.sectors_per_cluster == 0) // load new cluster
            file->current_cluster = get_next_cluster (file->current_cluster);
     a0e:	d7 01       	movw	r26, r14
     a10:	6d 91       	ld	r22, X+
     a12:	7d 91       	ld	r23, X+
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	c6 dc       	rcall	.-1652   	; 0x3a6 <_Z16get_next_clusterm>
     a1a:	f7 01       	movw	r30, r14
     a1c:	60 83       	st	Z, r22
     a1e:	71 83       	std	Z+1, r23	; 0x01
     a20:	82 83       	std	Z+2, r24	; 0x02
     a22:	93 83       	std	Z+3, r25	; 0x03
        size = (uint16_t) (file->file_size - file->pointer);

    uint16_t read = 0;		// number of bytes read
    char *ptr;

    do {
     a24:	2e 81       	ldd	r18, Y+6	; 0x06
     a26:	3f 81       	ldd	r19, Y+7	; 0x07
     a28:	23 2b       	or	r18, r19
     a2a:	09 f0       	breq	.+2      	; 0xa2e <_Z8fat_readPcjP8FAT_FILE+0x198>
     a2c:	81 cf       	rjmp	.-254    	; 0x930 <_Z8fat_readPcjP8FAT_FILE+0x9a>
        if ((sector_in_cluster + 1) % partition.sectors_per_cluster == 0) // load new cluster
            file->current_cluster = get_next_cluster (file->current_cluster);
      
    } while (size);

    return read;		// return bytes read
     a2e:	8c 2d       	mov	r24, r12
     a30:	9d 2d       	mov	r25, r13
     a32:	27 c0       	rjmp	.+78     	; 0xa82 <_Z8fat_readPcjP8FAT_FILE+0x1ec>
uint16_t fat_read (char * out, uint16_t size, FAT_FILE * file){
    
	//if (mmc_card_present () != 0) return 0;

    if (!size)
        return size;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	24 c0       	rjmp	.+72     	; 0xa82 <_Z8fat_readPcjP8FAT_FILE+0x1ec>
            file->pointer++;
            read++;
        }
      
        // check if we reach the cluster boundary
        if ((sector_in_cluster + 1) % partition.sectors_per_cluster == 0) // load new cluster
     a3a:	3d 81       	ldd	r19, Y+5	; 0x05
     a3c:	83 2f       	mov	r24, r19
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	60 91 4e 05 	lds	r22, 0x054E
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__divmodhi4>
     a4c:	89 2b       	or	r24, r25
     a4e:	79 f7       	brne	.-34     	; 0xa2e <_Z8fat_readPcjP8FAT_FILE+0x198>
     a50:	0c c0       	rjmp	.+24     	; 0xa6a <_Z8fat_readPcjP8FAT_FILE+0x1d4>
     a52:	51 2c       	mov	r5, r1
     a54:	c2 01       	movw	r24, r4
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	60 91 4e 05 	lds	r22, 0x054E
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__divmodhi4>
     a62:	89 2b       	or	r24, r25
     a64:	09 f0       	breq	.+2      	; 0xa68 <_Z8fat_readPcjP8FAT_FILE+0x1d2>
     a66:	64 cf       	rjmp	.-312    	; 0x930 <_Z8fat_readPcjP8FAT_FILE+0x9a>
     a68:	d2 cf       	rjmp	.-92     	; 0xa0e <_Z8fat_readPcjP8FAT_FILE+0x178>
            file->current_cluster = get_next_cluster (file->current_cluster);
     a6a:	d7 01       	movw	r26, r14
     a6c:	6d 91       	ld	r22, X+
     a6e:	7d 91       	ld	r23, X+
     a70:	8d 91       	ld	r24, X+
     a72:	9c 91       	ld	r25, X
     a74:	98 dc       	rcall	.-1744   	; 0x3a6 <_Z16get_next_clusterm>
     a76:	f7 01       	movw	r30, r14
     a78:	60 83       	st	Z, r22
     a7a:	71 83       	std	Z+1, r23	; 0x01
     a7c:	82 83       	std	Z+2, r24	; 0x02
     a7e:	93 83       	std	Z+3, r25	; 0x03
     a80:	d6 cf       	rjmp	.-84     	; 0xa2e <_Z8fat_readPcjP8FAT_FILE+0x198>
      
    } while (size);

    return read;		// return bytes read
}
     a82:	27 96       	adiw	r28, 0x07	; 7
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	7f 90       	pop	r7
     aa8:	6f 90       	pop	r6
     aaa:	5f 90       	pop	r5
     aac:	4f 90       	pop	r4
     aae:	3f 90       	pop	r3
     ab0:	2f 90       	pop	r2
     ab2:	08 95       	ret

00000ab4 <_Z8fat_seekP8FAT_FILElh>:
//             Seek base
// Returns: None
//
// Description:  Set file pointer to specific location in file
//*****************************************************************************
void fat_seek (FAT_FILE * file, int32_t offset, uint8_t base){
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24

    // add offset to pointer
    if (base == SEEK_CUR)
     ac2:	21 30       	cpi	r18, 0x01	; 1
     ac4:	69 f4       	brne	.+26     	; 0xae0 <_Z8fat_seekP8FAT_FILElh+0x2c>
        file->pointer += offset;
     ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
     aca:	ae 85       	ldd	r26, Y+14	; 0x0e
     acc:	bf 85       	ldd	r27, Y+15	; 0x0f
     ace:	48 0f       	add	r20, r24
     ad0:	59 1f       	adc	r21, r25
     ad2:	6a 1f       	adc	r22, r26
     ad4:	7b 1f       	adc	r23, r27
     ad6:	4c 87       	std	Y+12, r20	; 0x0c
     ad8:	5d 87       	std	Y+13, r21	; 0x0d
     ada:	6e 87       	std	Y+14, r22	; 0x0e
     adc:	7f 87       	std	Y+15, r23	; 0x0f
     ade:	15 c0       	rjmp	.+42     	; 0xb0a <_Z8fat_seekP8FAT_FILElh+0x56>
    else if (base == SEEK_START)
     ae0:	21 11       	cpse	r18, r1
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <_Z8fat_seekP8FAT_FILElh+0x3a>
        file->pointer = offset;
     ae4:	4c 87       	std	Y+12, r20	; 0x0c
     ae6:	5d 87       	std	Y+13, r21	; 0x0d
     ae8:	6e 87       	std	Y+14, r22	; 0x0e
     aea:	7f 87       	std	Y+15, r23	; 0x0f
     aec:	0e c0       	rjmp	.+28     	; 0xb0a <_Z8fat_seekP8FAT_FILElh+0x56>
    else if (base == SEEK_END)
     aee:	22 30       	cpi	r18, 0x02	; 2
     af0:	61 f4       	brne	.+24     	; 0xb0a <_Z8fat_seekP8FAT_FILElh+0x56>
        file->pointer = file->file_size - offset;
     af2:	88 85       	ldd	r24, Y+8	; 0x08
     af4:	99 85       	ldd	r25, Y+9	; 0x09
     af6:	aa 85       	ldd	r26, Y+10	; 0x0a
     af8:	bb 85       	ldd	r27, Y+11	; 0x0b
     afa:	84 1b       	sub	r24, r20
     afc:	95 0b       	sbc	r25, r21
     afe:	a6 0b       	sbc	r26, r22
     b00:	b7 0b       	sbc	r27, r23
     b02:	8c 87       	std	Y+12, r24	; 0x0c
     b04:	9d 87       	std	Y+13, r25	; 0x0d
     b06:	ae 87       	std	Y+14, r26	; 0x0e
     b08:	bf 87       	std	Y+15, r27	; 0x0f
    // check for valid pointer
    if (file->pointer > file->file_size)
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	99 85       	ldd	r25, Y+9	; 0x09
     b0e:	aa 85       	ldd	r26, Y+10	; 0x0a
     b10:	bb 85       	ldd	r27, Y+11	; 0x0b
     b12:	4c 85       	ldd	r20, Y+12	; 0x0c
     b14:	5d 85       	ldd	r21, Y+13	; 0x0d
     b16:	6e 85       	ldd	r22, Y+14	; 0x0e
     b18:	7f 85       	ldd	r23, Y+15	; 0x0f
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	a6 07       	cpc	r26, r22
     b20:	b7 07       	cpc	r27, r23
     b22:	20 f4       	brcc	.+8      	; 0xb2c <_Z8fat_seekP8FAT_FILElh+0x78>
        file->pointer = file->file_size;
     b24:	8c 87       	std	Y+12, r24	; 0x0c
     b26:	9d 87       	std	Y+13, r25	; 0x0d
     b28:	ae 87       	std	Y+14, r26	; 0x0e
     b2a:	bf 87       	std	Y+15, r27	; 0x0f

    uint32_t cluster_offset = file->pointer / (partition.bytes_per_sector * partition.sectors_per_cluster);
     b2c:	e0 e4       	ldi	r30, 0x40	; 64
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	46 85       	ldd	r20, Z+14	; 0x0e
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	48 9f       	mul	r20, r24
     b38:	90 01       	movw	r18, r0
     b3a:	49 9f       	mul	r20, r25
     b3c:	30 0d       	add	r19, r0
     b3e:	11 24       	eor	r1, r1
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	6c 85       	ldd	r22, Y+12	; 0x0c
     b46:	7d 85       	ldd	r23, Y+13	; 0x0d
     b48:	8e 85       	ldd	r24, Y+14	; 0x0e
     b4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b4c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     b50:	69 01       	movw	r12, r18
     b52:	7a 01       	movw	r14, r20

    file->current_cluster = file->first_cluster;
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	ae 81       	ldd	r26, Y+6	; 0x06
     b5a:	bf 81       	ldd	r27, Y+7	; 0x07
     b5c:	88 83       	st	Y, r24
     b5e:	99 83       	std	Y+1, r25	; 0x01
     b60:	aa 83       	std	Y+2, r26	; 0x02
     b62:	bb 83       	std	Y+3, r27	; 0x03

    for ( ; cluster_offset > 0; --cluster_offset) {
     b64:	23 2b       	or	r18, r19
     b66:	24 2b       	or	r18, r20
     b68:	25 2b       	or	r18, r21
     b6a:	79 f0       	breq	.+30     	; 0xb8a <_Z8fat_seekP8FAT_FILElh+0xd6>
        file->current_cluster = get_next_cluster (file->current_cluster);
     b6c:	68 81       	ld	r22, Y
     b6e:	79 81       	ldd	r23, Y+1	; 0x01
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	9b 81       	ldd	r25, Y+3	; 0x03
     b74:	18 dc       	rcall	.-2000   	; 0x3a6 <_Z16get_next_clusterm>
     b76:	68 83       	st	Y, r22
     b78:	79 83       	std	Y+1, r23	; 0x01
     b7a:	8a 83       	std	Y+2, r24	; 0x02
     b7c:	9b 83       	std	Y+3, r25	; 0x03

    uint32_t cluster_offset = file->pointer / (partition.bytes_per_sector * partition.sectors_per_cluster);

    file->current_cluster = file->first_cluster;

    for ( ; cluster_offset > 0; --cluster_offset) {
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	c8 1a       	sub	r12, r24
     b82:	d1 08       	sbc	r13, r1
     b84:	e1 08       	sbc	r14, r1
     b86:	f1 08       	sbc	r15, r1
     b88:	89 f7       	brne	.-30     	; 0xb6c <_Z8fat_seekP8FAT_FILElh+0xb8>
        file->current_cluster = get_next_cluster (file->current_cluster);
	}
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	08 95       	ret

00000b98 <_Z8dir_listPcP8FAT_FILE>:
// Returns: Number of files found
// 
// Description:  Search actual directory for files with specific extension
//               and return number of files found
//*****************************************************************************
uint16_t dir_list (char * ext, FAT_FILE * file){
     b98:	9b 01       	movw	r18, r22

    //if(mmc_card_present () != 0) return 0;

    fat_open(-1, NULL, ext, file);
     b9a:	ac 01       	movw	r20, r24
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	77 dc       	rcall	.-1810   	; 0x494 <_Z8fat_openjPcS_P8FAT_FILE>

    return cur_dir_entry;
}
     ba6:	80 91 36 01 	lds	r24, 0x0136
     baa:	90 91 37 01 	lds	r25, 0x0137
     bae:	08 95       	ret

00000bb0 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "headsup.h"


int main(){
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <main+0x6>
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	
	rtc_time rtmCurrent;
	lcd lcdNHD;
     bba:	ce 01       	movw	r24, r28
     bbc:	02 96       	adiw	r24, 0x02	; 2
     bbe:	98 d2       	rcall	.+1328   	; 0x10f0 <_ZN3lcdC1Ev>
	rtc rtcDS;
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	4a d6       	rcall	.+3220   	; 0x185a <_ZN3rtcC1Ev>
	unsigned char uchCurrenttime[ LINE_SIZE ] ;

	play_audio_through_vs1011();
     bc6:	54 d4       	rcall	.+2216   	; 0x1470 <_Z25play_audio_through_vs1011v>
		_delay_ms( 1000 );
	}
	
	return 0;
	*/
}
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <_Z11get_id3_tagPcS_S_Pj>:
#include "fat.h"
#include "multimediacard.h"

extern FAT_FILE mp3_file;

void get_id3_tag (char * title_name, char * artist_name, char * playlist_name, uint16_t * title_length){
     bd6:	2f 92       	push	r2
     bd8:	3f 92       	push	r3
     bda:	4f 92       	push	r4
     bdc:	5f 92       	push	r5
     bde:	6f 92       	push	r6
     be0:	7f 92       	push	r7
     be2:	8f 92       	push	r8
     be4:	9f 92       	push	r9
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	c6 58       	subi	r28, 0x86	; 134
     c00:	d1 09       	sbc	r29, r1
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	cd 57       	subi	r28, 0x7D	; 125
     c0e:	df 4f       	sbci	r29, 0xFF	; 255
     c10:	99 83       	std	Y+1, r25	; 0x01
     c12:	88 83       	st	Y, r24
     c14:	c3 58       	subi	r28, 0x83	; 131
     c16:	d0 40       	sbci	r29, 0x00	; 0
     c18:	cf 57       	subi	r28, 0x7F	; 127
     c1a:	df 4f       	sbci	r29, 0xFF	; 255
     c1c:	79 83       	std	Y+1, r23	; 0x01
     c1e:	68 83       	st	Y, r22
     c20:	c1 58       	subi	r28, 0x81	; 129
     c22:	d0 40       	sbci	r29, 0x00	; 0
     c24:	1a 01       	movw	r2, r20
     c26:	cb 57       	subi	r28, 0x7B	; 123
     c28:	df 4f       	sbci	r29, 0xFF	; 255
     c2a:	39 83       	std	Y+1, r19	; 0x01
     c2c:	28 83       	st	Y, r18
     c2e:	c5 58       	subi	r28, 0x85	; 133
     c30:	d0 40       	sbci	r29, 0x00	; 0

    char id3tag[128];

    // set file pointer to start of ID3v1 tag
    fat_seek (&mp3_file, 128, SEEK_END);
     c32:	22 e0       	ldi	r18, 0x02	; 2
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	86 e1       	ldi	r24, 0x16	; 22
     c3e:	96 e0       	ldi	r25, 0x06	; 6
     c40:	39 df       	rcall	.-398    	; 0xab4 <_Z8fat_seekP8FAT_FILElh>

    // check if ID3v1 tag exists
    if ((fat_read (id3tag, 128, &mp3_file) == 128) &&
     c42:	46 e1       	ldi	r20, 0x16	; 22
     c44:	56 e0       	ldi	r21, 0x06	; 6
     c46:	60 e8       	ldi	r22, 0x80	; 128
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	23 de       	rcall	.-954    	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     c50:	80 38       	cpi	r24, 0x80	; 128
     c52:	91 05       	cpc	r25, r1
     c54:	59 f4       	brne	.+22     	; 0xc6c <_Z11get_id3_tagPcS_S_Pj+0x96>
        (strncmp (id3tag, "TAG", 3) == 0)) {
     c56:	43 e0       	ldi	r20, 0x03	; 3
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	71 e0       	ldi	r23, 0x01	; 1
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>

    // set file pointer to start of ID3v1 tag
    fat_seek (&mp3_file, 128, SEEK_END);

    // check if ID3v1 tag exists
    if ((fat_read (id3tag, 128, &mp3_file) == 128) &&
     c66:	89 2b       	or	r24, r25
     c68:	09 f4       	brne	.+2      	; 0xc6c <_Z11get_id3_tagPcS_S_Pj+0x96>
     c6a:	64 c1       	rjmp	.+712    	; 0xf34 <_Z11get_id3_tagPcS_S_Pj+0x35e>
        strncpy (artist_name, id3tag + 33, 30);
        strncpy (playlist_name, id3tag + 63, 30);
    }

    // set file pointer back to start of file
    fat_seek (&mp3_file, 0, SEEK_START);
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	ba 01       	movw	r22, r20
     c74:	86 e1       	ldi	r24, 0x16	; 22
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	1d df       	rcall	.-454    	; 0xab4 <_Z8fat_seekP8FAT_FILElh>

    // check if ID3v2 tag header exists
    if ((fat_read (id3tag, 10, &mp3_file) == 10) && // header successful read
     c7a:	46 e1       	ldi	r20, 0x16	; 22
     c7c:	56 e0       	ldi	r21, 0x06	; 6
     c7e:	6a e0       	ldi	r22, 0x0A	; 10
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	07 de       	rcall	.-1010   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
        (strncmp (id3tag, "ID3", 3) == 0) && // id tag exists
     c88:	0a 97       	sbiw	r24, 0x0a	; 10
     c8a:	09 f0       	breq	.+2      	; 0xc8e <_Z11get_id3_tagPcS_S_Pj+0xb8>
     c8c:	4b c1       	rjmp	.+662    	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
     c8e:	43 e0       	ldi	r20, 0x03	; 3
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	71 e0       	ldi	r23, 0x01	; 1
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>

    // set file pointer back to start of file
    fat_seek (&mp3_file, 0, SEEK_START);

    // check if ID3v2 tag header exists
    if ((fat_read (id3tag, 10, &mp3_file) == 10) && // header successful read
     c9e:	89 2b       	or	r24, r25
     ca0:	09 f0       	breq	.+2      	; 0xca4 <_Z11get_id3_tagPcS_S_Pj+0xce>
     ca2:	40 c1       	rjmp	.+640    	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
        (strncmp (id3tag, "ID3", 3) == 0) && // id tag exists
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	08 f0       	brcs	.+2      	; 0xcac <_Z11get_id3_tagPcS_S_Pj+0xd6>
     caa:	67 c1       	rjmp	.+718    	; 0xf7a <_Z11get_id3_tagPcS_S_Pj+0x3a4>
     cac:	3b c1       	rjmp	.+630    	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
        uint32_t tag_header_size = 0;
      
        // check if extended header exists
        if ((id3tag[5] & 0x40)) {
            // read extended header if present
            if (fat_read (id3tag, 6, &mp3_file) == 6) {
     cae:	46 e1       	ldi	r20, 0x16	; 22
     cb0:	56 e0       	ldi	r21, 0x06	; 6
     cb2:	66 e0       	ldi	r22, 0x06	; 6
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	ed dd       	rcall	.-1062   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     cbc:	06 97       	sbiw	r24, 0x06	; 6
     cbe:	f9 f4       	brne	.+62     	; 0xcfe <_Z11get_id3_tagPcS_S_Pj+0x128>
                // get extended header size
                tag_header_size = (id3tag[3] & 0x7f) +
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	8f 77       	andi	r24, 0x7F	; 127
                    ((id3tag[2] & 0x7f) << 7) +
     cc4:	4b 81       	ldd	r20, Y+3	; 0x03
     cc6:	4f 77       	andi	r20, 0x7F	; 127
     cc8:	20 e8       	ldi	r18, 0x80	; 128
     cca:	42 9f       	mul	r20, r18
     ccc:	a0 01       	movw	r20, r0
     cce:	11 24       	eor	r1, r1
        // check if extended header exists
        if ((id3tag[5] & 0x40)) {
            // read extended header if present
            if (fat_read (id3tag, 6, &mp3_file) == 6) {
                // get extended header size
                tag_header_size = (id3tag[3] & 0x7f) +
     cd0:	48 0f       	add	r20, r24
     cd2:	51 1d       	adc	r21, r1
                    ((id3tag[2] & 0x7f) << 7) +
                    ((id3tag[1] & 0x7f) << 14) + ((id3tag[0] & 0x7f) << 21);
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	90 e4       	ldi	r25, 0x40	; 64
     cda:	89 9f       	mul	r24, r25
     cdc:	90 2d       	mov	r25, r0
     cde:	88 27       	eor	r24, r24
     ce0:	11 24       	eor	r1, r1
     ce2:	48 0f       	add	r20, r24
     ce4:	59 1f       	adc	r21, r25
     ce6:	05 2e       	mov	r0, r21
     ce8:	00 0c       	add	r0, r0
     cea:	66 0b       	sbc	r22, r22
     cec:	77 0b       	sbc	r23, r23
                // skip extended header            
                fat_seek (&mp3_file, tag_header_size - 6, SEEK_CUR);
     cee:	46 50       	subi	r20, 0x06	; 6
     cf0:	51 09       	sbc	r21, r1
     cf2:	61 09       	sbc	r22, r1
     cf4:	71 09       	sbc	r23, r1
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	86 e1       	ldi	r24, 0x16	; 22
     cfa:	96 e0       	ldi	r25, 0x06	; 6
     cfc:	db de       	rcall	.-586    	; 0xab4 <_Z8fat_seekP8FAT_FILElh>
            }
        }
      
        while (id3v2_tag_size) {
     cfe:	c1 14       	cp	r12, r1
     d00:	d1 04       	cpc	r13, r1
     d02:	e1 04       	cpc	r14, r1
     d04:	f1 04       	cpc	r15, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <_Z11get_id3_tagPcS_S_Pj+0x134>
     d08:	0d c1       	rjmp	.+538    	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
                    }
                }
                else if (strncmp (id3tag, "TALB", 4) == 0) {
            
                    // read frame content, max 50 characters for album name
                    if (fat_read (id3tag, tag_header_size % 50, &mp3_file) ==
     d0a:	0f 2e       	mov	r0, r31
     d0c:	f2 e3       	ldi	r31, 0x32	; 50
     d0e:	8f 2e       	mov	r8, r31
     d10:	91 2c       	mov	r9, r1
     d12:	a1 2c       	mov	r10, r1
     d14:	b1 2c       	mov	r11, r1
     d16:	f0 2d       	mov	r31, r0
            }
        }
      
        while (id3v2_tag_size) {
            // read frame header
            if (fat_read (id3tag, 10, &mp3_file) == 10) {
     d18:	46 e1       	ldi	r20, 0x16	; 22
     d1a:	56 e0       	ldi	r21, 0x06	; 6
     d1c:	6a e0       	ldi	r22, 0x0A	; 10
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	b8 dd       	rcall	.-1168   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     d26:	0a 97       	sbiw	r24, 0x0a	; 10
     d28:	09 f0       	breq	.+2      	; 0xd2c <_Z11get_id3_tagPcS_S_Pj+0x156>
     d2a:	f5 c0       	rjmp	.+490    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
      
                // check if frame ID exists
                if ((id3tag[0] == 0) && (id3tag[1] == 0) &&
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	81 11       	cpse	r24, r1
     d30:	0a c0       	rjmp	.+20     	; 0xd46 <_Z11get_id3_tagPcS_S_Pj+0x170>
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	81 11       	cpse	r24, r1
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <_Z11get_id3_tagPcS_S_Pj+0x170>
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	81 11       	cpse	r24, r1
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <_Z11get_id3_tagPcS_S_Pj+0x170>
                    (id3tag[2] == 0) && (id3tag[3] == 0)) {
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <_Z11get_id3_tagPcS_S_Pj+0x170>
     d44:	ef c0       	rjmp	.+478    	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
                    break;
                }
            
                tag_header_size = (id3tag[7] & 0x7f) +
     d46:	88 85       	ldd	r24, Y+8	; 0x08
     d48:	8f 77       	andi	r24, 0x7F	; 127
                    ((id3tag[6] & 0x7f) << 7) +
     d4a:	0f 81       	ldd	r16, Y+7	; 0x07
     d4c:	0f 77       	andi	r16, 0x7F	; 127
     d4e:	30 e8       	ldi	r19, 0x80	; 128
     d50:	03 9f       	mul	r16, r19
     d52:	80 01       	movw	r16, r0
     d54:	11 24       	eor	r1, r1
                if ((id3tag[0] == 0) && (id3tag[1] == 0) &&
                    (id3tag[2] == 0) && (id3tag[3] == 0)) {
                    break;
                }
            
                tag_header_size = (id3tag[7] & 0x7f) +
     d56:	f8 01       	movw	r30, r16
     d58:	e8 0f       	add	r30, r24
     d5a:	f1 1d       	adc	r31, r1
                    ((id3tag[6] & 0x7f) << 7) +
                    ((id3tag[5] & 0x7f) << 14) + ((id3tag[4] & 0x7f) << 21);
     d5c:	0e 81       	ldd	r16, Y+6	; 0x06
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	10 e4       	ldi	r17, 0x40	; 64
     d62:	01 9f       	mul	r16, r17
     d64:	10 2d       	mov	r17, r0
     d66:	00 27       	eor	r16, r16
     d68:	11 24       	eor	r1, r1
     d6a:	0e 0f       	add	r16, r30
     d6c:	1f 1f       	adc	r17, r31
     d6e:	28 01       	movw	r4, r16
     d70:	01 2e       	mov	r0, r17
     d72:	00 0c       	add	r0, r0
     d74:	66 08       	sbc	r6, r6
     d76:	77 08       	sbc	r7, r7
            
                if (strncmp (id3tag, "TPE1", 4) == 0) {
     d78:	44 e0       	ldi	r20, 0x04	; 4
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	6a e0       	ldi	r22, 0x0A	; 10
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>
     d88:	89 2b       	or	r24, r25
     d8a:	51 f5       	brne	.+84     	; 0xde0 <_Z11get_id3_tagPcS_S_Pj+0x20a>
            
            
                    // read frame content, max 50 characters for artist name
                    if (fat_read (id3tag, tag_header_size % 50, &mp3_file) ==
     d8c:	c3 01       	movw	r24, r6
     d8e:	b2 01       	movw	r22, r4
     d90:	a5 01       	movw	r20, r10
     d92:	94 01       	movw	r18, r8
     d94:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     d98:	46 e1       	ldi	r20, 0x16	; 22
     d9a:	56 e0       	ldi	r21, 0x06	; 6
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	7a dd       	rcall	.-1292   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     da2:	a0 e0       	ldi	r26, 0x00	; 0
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	48 16       	cp	r4, r24
     da8:	59 06       	cpc	r5, r25
     daa:	6a 06       	cpc	r6, r26
     dac:	7b 06       	cpc	r7, r27
     dae:	09 f0       	breq	.+2      	; 0xdb2 <_Z11get_id3_tagPcS_S_Pj+0x1dc>
     db0:	b2 c0       	rjmp	.+356    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                        tag_header_size) {
            
                        // copy artist name
                        strncpy (artist_name, &id3tag[1],
                           (tag_header_size - 1) % 50);
     db2:	c3 01       	movw	r24, r6
     db4:	b2 01       	movw	r22, r4
     db6:	61 50       	subi	r22, 0x01	; 1
     db8:	71 09       	sbc	r23, r1
     dba:	81 09       	sbc	r24, r1
     dbc:	91 09       	sbc	r25, r1
     dbe:	a5 01       	movw	r20, r10
     dc0:	94 01       	movw	r18, r8
     dc2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     dc6:	ab 01       	movw	r20, r22
     dc8:	be 01       	movw	r22, r28
     dca:	6e 5f       	subi	r22, 0xFE	; 254
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	cf 57       	subi	r28, 0x7F	; 127
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	88 81       	ld	r24, Y
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	c1 58       	subi	r28, 0x81	; 129
     dd8:	d0 40       	sbci	r29, 0x00	; 0
     dda:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
     dde:	9b c0       	rjmp	.+310    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                    }
                }
                else if (strncmp (id3tag, "TIT2", 4) == 0) {
     de0:	44 e0       	ldi	r20, 0x04	; 4
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	6f e0       	ldi	r22, 0x0F	; 15
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>
     df0:	89 2b       	or	r24, r25
     df2:	51 f5       	brne	.+84     	; 0xe48 <_Z11get_id3_tagPcS_S_Pj+0x272>
            
                    // read frame content, max 50 characters for  title name
                    if (fat_read (id3tag, tag_header_size % 50, &mp3_file) ==
     df4:	c3 01       	movw	r24, r6
     df6:	b2 01       	movw	r22, r4
     df8:	a5 01       	movw	r20, r10
     dfa:	94 01       	movw	r18, r8
     dfc:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     e00:	46 e1       	ldi	r20, 0x16	; 22
     e02:	56 e0       	ldi	r21, 0x06	; 6
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	46 dd       	rcall	.-1396   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	48 16       	cp	r4, r24
     e10:	59 06       	cpc	r5, r25
     e12:	6a 06       	cpc	r6, r26
     e14:	7b 06       	cpc	r7, r27
     e16:	09 f0       	breq	.+2      	; 0xe1a <_Z11get_id3_tagPcS_S_Pj+0x244>
     e18:	7e c0       	rjmp	.+252    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                        tag_header_size) {
            
                        // copy title name
                        strncpy (title_name, &id3tag[1],
                           (tag_header_size - 1) % 50);
     e1a:	c3 01       	movw	r24, r6
     e1c:	b2 01       	movw	r22, r4
     e1e:	61 50       	subi	r22, 0x01	; 1
     e20:	71 09       	sbc	r23, r1
     e22:	81 09       	sbc	r24, r1
     e24:	91 09       	sbc	r25, r1
     e26:	a5 01       	movw	r20, r10
     e28:	94 01       	movw	r18, r8
     e2a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     e2e:	ab 01       	movw	r20, r22
     e30:	be 01       	movw	r22, r28
     e32:	6e 5f       	subi	r22, 0xFE	; 254
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	cd 57       	subi	r28, 0x7D	; 125
     e38:	df 4f       	sbci	r29, 0xFF	; 255
     e3a:	88 81       	ld	r24, Y
     e3c:	99 81       	ldd	r25, Y+1	; 0x01
     e3e:	c3 58       	subi	r28, 0x83	; 131
     e40:	d0 40       	sbci	r29, 0x00	; 0
     e42:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
     e46:	67 c0       	rjmp	.+206    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                    }
                }
                else if (strncmp (id3tag, "TLEN", 4) == 0) {
     e48:	44 e0       	ldi	r20, 0x04	; 4
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	64 e1       	ldi	r22, 0x14	; 20
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>
     e58:	89 2b       	or	r24, r25
     e5a:	39 f5       	brne	.+78     	; 0xeaa <_Z11get_id3_tagPcS_S_Pj+0x2d4>
            
                    // read frame content, max 128 characters for title length
                    if (fat_read (id3tag, tag_header_size % 128, &mp3_file) ==
     e5c:	b8 01       	movw	r22, r16
     e5e:	6f 77       	andi	r22, 0x7F	; 127
     e60:	77 27       	eor	r23, r23
     e62:	46 e1       	ldi	r20, 0x16	; 22
     e64:	56 e0       	ldi	r21, 0x06	; 6
     e66:	ce 01       	movw	r24, r28
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	15 dd       	rcall	.-1494   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     e6c:	a0 e0       	ldi	r26, 0x00	; 0
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	48 16       	cp	r4, r24
     e72:	59 06       	cpc	r5, r25
     e74:	6a 06       	cpc	r6, r26
     e76:	7b 06       	cpc	r7, r27
     e78:	09 f0       	breq	.+2      	; 0xe7c <_Z11get_id3_tagPcS_S_Pj+0x2a6>
     e7a:	4d c0       	rjmp	.+154    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                        tag_header_size) {
                        // get title length in full seconds
                        *title_length = (uint16_t)(strtol( &id3tag[1], NULL, 10)/1000);
     e7c:	4a e0       	ldi	r20, 0x0A	; 10
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	ce 01       	movw	r24, r28
     e86:	02 96       	adiw	r24, 0x02	; 2
     e88:	0e 94 5e 11 	call	0x22bc	; 0x22bc <strtol>
     e8c:	28 ee       	ldi	r18, 0xE8	; 232
     e8e:	33 e0       	ldi	r19, 0x03	; 3
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	0e 94 15 11 	call	0x222a	; 0x222a <__divmodsi4>
     e98:	cb 57       	subi	r28, 0x7B	; 123
     e9a:	df 4f       	sbci	r29, 0xFF	; 255
     e9c:	e8 81       	ld	r30, Y
     e9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ea0:	c5 58       	subi	r28, 0x85	; 133
     ea2:	d0 40       	sbci	r29, 0x00	; 0
     ea4:	31 83       	std	Z+1, r19	; 0x01
     ea6:	20 83       	st	Z, r18
     ea8:	36 c0       	rjmp	.+108    	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                    }
                }
                else if (strncmp (id3tag, "TALB", 4) == 0) {
     eaa:	44 e0       	ldi	r20, 0x04	; 4
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	69 e1       	ldi	r22, 0x19	; 25
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>
     eba:	89 2b       	or	r24, r25
     ebc:	21 f5       	brne	.+72     	; 0xf06 <_Z11get_id3_tagPcS_S_Pj+0x330>
            
                    // read frame content, max 50 characters for album name
                    if (fat_read (id3tag, tag_header_size % 50, &mp3_file) ==
     ebe:	c3 01       	movw	r24, r6
     ec0:	b2 01       	movw	r22, r4
     ec2:	a5 01       	movw	r20, r10
     ec4:	94 01       	movw	r18, r8
     ec6:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     eca:	46 e1       	ldi	r20, 0x16	; 22
     ecc:	56 e0       	ldi	r21, 0x06	; 6
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	e1 dc       	rcall	.-1598   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	48 16       	cp	r4, r24
     eda:	59 06       	cpc	r5, r25
     edc:	6a 06       	cpc	r6, r26
     ede:	7b 06       	cpc	r7, r27
     ee0:	d1 f4       	brne	.+52     	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                        tag_header_size) {
                        // copy album name
                        strncpy (playlist_name, &id3tag[1],
                           (tag_header_size - 1) % 50);
     ee2:	c3 01       	movw	r24, r6
     ee4:	b2 01       	movw	r22, r4
     ee6:	61 50       	subi	r22, 0x01	; 1
     ee8:	71 09       	sbc	r23, r1
     eea:	81 09       	sbc	r24, r1
     eec:	91 09       	sbc	r25, r1
     eee:	a5 01       	movw	r20, r10
     ef0:	94 01       	movw	r18, r8
     ef2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
     ef6:	ab 01       	movw	r20, r22
     ef8:	be 01       	movw	r22, r28
     efa:	6e 5f       	subi	r22, 0xFE	; 254
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	c1 01       	movw	r24, r2
     f00:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <_Z11get_id3_tagPcS_S_Pj+0x340>
                    }
                }                  
                // skip frame if not required
                else
                    fat_seek (&mp3_file, tag_header_size, SEEK_CUR);
     f06:	a8 01       	movw	r20, r16
     f08:	11 0f       	add	r17, r17
     f0a:	66 0b       	sbc	r22, r22
     f0c:	77 0b       	sbc	r23, r23
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	86 e1       	ldi	r24, 0x16	; 22
     f12:	96 e0       	ldi	r25, 0x06	; 6
     f14:	cf dd       	rcall	.-1122   	; 0xab4 <_Z8fat_seekP8FAT_FILElh>
            }
      
            id3v2_tag_size -= 10;
     f16:	fa e0       	ldi	r31, 0x0A	; 10
     f18:	cf 1a       	sub	r12, r31
     f1a:	d1 08       	sbc	r13, r1
     f1c:	e1 08       	sbc	r14, r1
     f1e:	f1 08       	sbc	r15, r1
                // skip extended header            
                fat_seek (&mp3_file, tag_header_size - 6, SEEK_CUR);
            }
        }
      
        while (id3v2_tag_size) {
     f20:	09 f0       	breq	.+2      	; 0xf24 <_Z11get_id3_tagPcS_S_Pj+0x34e>
     f22:	fa ce       	rjmp	.-524    	; 0xd18 <_Z11get_id3_tagPcS_S_Pj+0x142>
            id3v2_tag_size -= 10;
        }			// end while id3v2_tag_size
    } // end if ID3v2 tag found

    // set file pointer to start of file
    fat_seek (&mp3_file, 0, SEEK_START);
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	ba 01       	movw	r22, r20
     f2c:	86 e1       	ldi	r24, 0x16	; 22
     f2e:	96 e0       	ldi	r25, 0x06	; 6
     f30:	c1 dd       	rcall	.-1150   	; 0xab4 <_Z8fat_seekP8FAT_FILElh>
     f32:	3e c0       	rjmp	.+124    	; 0xfb0 <_Z11get_id3_tagPcS_S_Pj+0x3da>

    // check if ID3v1 tag exists
    if ((fat_read (id3tag, 128, &mp3_file) == 128) &&
        (strncmp (id3tag, "TAG", 3) == 0)) {

        strncpy (title_name, id3tag + 3, 30);
     f34:	4e e1       	ldi	r20, 0x1E	; 30
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	be 01       	movw	r22, r28
     f3a:	6c 5f       	subi	r22, 0xFC	; 252
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	cd 57       	subi	r28, 0x7D	; 125
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	88 81       	ld	r24, Y
     f44:	99 81       	ldd	r25, Y+1	; 0x01
     f46:	c3 58       	subi	r28, 0x83	; 131
     f48:	d0 40       	sbci	r29, 0x00	; 0
     f4a:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
        strncpy (artist_name, id3tag + 33, 30);
     f4e:	4e e1       	ldi	r20, 0x1E	; 30
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	be 01       	movw	r22, r28
     f54:	6e 5d       	subi	r22, 0xDE	; 222
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	cf 57       	subi	r28, 0x7F	; 127
     f5a:	df 4f       	sbci	r29, 0xFF	; 255
     f5c:	88 81       	ld	r24, Y
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
     f60:	c1 58       	subi	r28, 0x81	; 129
     f62:	d0 40       	sbci	r29, 0x00	; 0
     f64:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
        strncpy (playlist_name, id3tag + 63, 30);
     f68:	4e e1       	ldi	r20, 0x1E	; 30
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	be 01       	movw	r22, r28
     f6e:	60 5c       	subi	r22, 0xC0	; 192
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	c1 01       	movw	r24, r2
     f74:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
     f78:	79 ce       	rjmp	.-782    	; 0xc6c <_Z11get_id3_tagPcS_S_Pj+0x96>
    if ((fat_read (id3tag, 10, &mp3_file) == 10) && // header successful read
        (strncmp (id3tag, "ID3", 3) == 0) && // id tag exists
        (id3tag[3] >= 3)) { // tag version 2.3.x or higher

        // get ID3v2 tag size
        uint32_t id3v2_tag_size = (id3tag[9] & 0x7f) +
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	9f 77       	andi	r25, 0x7F	; 127
            ((id3tag[8] & 0x7f) << 7) +
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	20 e8       	ldi	r18, 0x80	; 128
     f84:	82 9f       	mul	r24, r18
     f86:	60 01       	movw	r12, r0
     f88:	11 24       	eor	r1, r1
    if ((fat_read (id3tag, 10, &mp3_file) == 10) && // header successful read
        (strncmp (id3tag, "ID3", 3) == 0) && // id tag exists
        (id3tag[3] >= 3)) { // tag version 2.3.x or higher

        // get ID3v2 tag size
        uint32_t id3v2_tag_size = (id3tag[9] & 0x7f) +
     f8a:	c9 0e       	add	r12, r25
     f8c:	d1 1c       	adc	r13, r1
            ((id3tag[8] & 0x7f) << 7) +
            ((id3tag[7] & 0x7f) << 14) + ((id3tag[6] & 0x7f) << 21);
     f8e:	88 85       	ldd	r24, Y+8	; 0x08
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	90 e4       	ldi	r25, 0x40	; 64
     f94:	89 9f       	mul	r24, r25
     f96:	90 2d       	mov	r25, r0
     f98:	88 27       	eor	r24, r24
     f9a:	11 24       	eor	r1, r1
     f9c:	c8 0e       	add	r12, r24
     f9e:	d9 1e       	adc	r13, r25
     fa0:	0d 2c       	mov	r0, r13
     fa2:	00 0c       	add	r0, r0
     fa4:	ee 08       	sbc	r14, r14
     fa6:	ff 08       	sbc	r15, r15
      
        uint32_t tag_header_size = 0;
      
        // check if extended header exists
        if ((id3tag[5] & 0x40)) {
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	86 ff       	sbrs	r24, 6
     fac:	a8 ce       	rjmp	.-688    	; 0xcfe <_Z11get_id3_tagPcS_S_Pj+0x128>
     fae:	7f ce       	rjmp	.-770    	; 0xcae <_Z11get_id3_tagPcS_S_Pj+0xd8>
        }			// end while id3v2_tag_size
    } // end if ID3v2 tag found

    // set file pointer to start of file
    fat_seek (&mp3_file, 0, SEEK_START);
}
     fb0:	ca 57       	subi	r28, 0x7A	; 122
     fb2:	df 4f       	sbci	r29, 0xFF	; 255
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	3f 90       	pop	r3
     fe0:	2f 90       	pop	r2
     fe2:	08 95       	ret

00000fe4 <_ZN3lcd5CGRAMEv>:
	TWI_STOP();
}

void lcd::CGRAM(void)
{
 	TWI_StartCommunication();
     fe4:	89 d4       	rcall	.+2322   	; 0x18f8 <_Z22TWI_StartCommunicationv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
     fe6:	68 e1       	ldi	r22, 0x18	; 24
     fe8:	8c e7       	ldi	r24, 0x7C	; 124
     fea:	91 d4       	rcall	.+2338   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);;
     fec:	68 e2       	ldi	r22, 0x28	; 40
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	8e d4       	rcall	.+2332   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x38,TW_MT_DATA_ACK);		//go to instructino table 0
     ff2:	68 e2       	ldi	r22, 0x28	; 40
     ff4:	88 e3       	ldi	r24, 0x38	; 56
     ff6:	8b d4       	rcall	.+2326   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x40,TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
     ff8:	68 e2       	ldi	r22, 0x28	; 40
     ffa:	80 e4       	ldi	r24, 0x40	; 64
     ffc:	88 d4       	rcall	.+2320   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_STOP();
     ffe:	78 d4       	rcall	.+2288   	; 0x18f0 <_Z8TWI_STOPv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1000:	83 ec       	ldi	r24, 0xC3	; 195
    1002:	99 e0       	ldi	r25, 0x09	; 9
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <_ZN3lcd5CGRAMEv+0x20>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <_ZN3lcd5CGRAMEv+0x26>
    100a:	00 00       	nop
	_delay_ms(10);
	
	TWI_StartCommunication();
    100c:	75 d4       	rcall	.+2282   	; 0x18f8 <_Z22TWI_StartCommunicationv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
    100e:	68 e1       	ldi	r22, 0x18	; 24
    1010:	8c e7       	ldi	r24, 0x7C	; 124
    1012:	7d d4       	rcall	.+2298   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
    1014:	68 e2       	ldi	r22, 0x28	; 40
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	7a d4       	rcall	.+2292   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);		//write to first CGRAM address
    101a:	68 e2       	ldi	r22, 0x28	; 40
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	77 d4       	rcall	.+2286   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x1E,TW_MT_DATA_ACK);
    1020:	68 e2       	ldi	r22, 0x28	; 40
    1022:	8e e1       	ldi	r24, 0x1E	; 30
    1024:	74 d4       	rcall	.+2280   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x18,TW_MT_DATA_ACK);
    1026:	68 e2       	ldi	r22, 0x28	; 40
    1028:	88 e1       	ldi	r24, 0x18	; 24
    102a:	71 d4       	rcall	.+2274   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x14,TW_MT_DATA_ACK);
    102c:	68 e2       	ldi	r22, 0x28	; 40
    102e:	84 e1       	ldi	r24, 0x14	; 20
    1030:	6e d4       	rcall	.+2268   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x12,TW_MT_DATA_ACK);
    1032:	68 e2       	ldi	r22, 0x28	; 40
    1034:	82 e1       	ldi	r24, 0x12	; 18
    1036:	6b d4       	rcall	.+2262   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);
    1038:	68 e2       	ldi	r22, 0x28	; 40
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	68 d4       	rcall	.+2256   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);
    103e:	68 e2       	ldi	r22, 0x28	; 40
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	65 d4       	rcall	.+2250   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);		//8 bytes per character
    1044:	68 e2       	ldi	r22, 0x28	; 40
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	62 d4       	rcall	.+2244   	; 0x190e <_Z16TWI_TransmitDatahh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    104a:	52 c4       	rjmp	.+2212   	; 0x18f0 <_Z8TWI_STOPv>
    104c:	08 95       	ret

0000104e <_ZN3lcd8init_LCDEv>:
}

void lcd::init_LCD()
{
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
	TWI_StartCommunication();
    1054:	51 d4       	rcall	.+2210   	; 0x18f8 <_Z22TWI_StartCommunicationv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
    1056:	68 e1       	ldi	r22, 0x18	; 24
    1058:	8c e7       	ldi	r24, 0x7C	; 124
    105a:	59 d4       	rcall	.+2226   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
    105c:	68 e2       	ldi	r22, 0x28	; 40
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	56 d4       	rcall	.+2220   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x38,TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1062:	68 e2       	ldi	r22, 0x28	; 40
    1064:	88 e3       	ldi	r24, 0x38	; 56
    1066:	53 d4       	rcall	.+2214   	; 0x190e <_Z16TWI_TransmitDatahh>
    1068:	87 ea       	ldi	r24, 0xA7	; 167
    106a:	91 e6       	ldi	r25, 0x61	; 97
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <_ZN3lcd8init_LCDEv+0x1e>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <_ZN3lcd8init_LCDEv+0x24>
    1072:	00 00       	nop
	_delay_ms(100);
	TWI_TransmitData(0x39,TW_MT_DATA_ACK);						// Use Extended instruction set
    1074:	68 e2       	ldi	r22, 0x28	; 40
    1076:	89 e3       	ldi	r24, 0x39	; 57
    1078:	4a d4       	rcall	.+2196   	; 0x190e <_Z16TWI_TransmitDatahh>
    107a:	87 ea       	ldi	r24, 0xA7	; 167
    107c:	91 e6       	ldi	r25, 0x61	; 97
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <_ZN3lcd8init_LCDEv+0x30>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <_ZN3lcd8init_LCDEv+0x36>
    1084:	00 00       	nop
	_delay_ms(100);
	TWI_TransmitData(0x14,TW_MT_DATA_ACK);						// Set Internal Osc Freq
    1086:	68 e2       	ldi	r22, 0x28	; 40
    1088:	84 e1       	ldi	r24, 0x14	; 20
    108a:	41 d4       	rcall	.+2178   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x78,TW_MT_DATA_ACK);						// Contrast Set
    108c:	68 e2       	ldi	r22, 0x28	; 40
    108e:	88 e7       	ldi	r24, 0x78	; 120
    1090:	3e d4       	rcall	.+2172   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x5D,TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1092:	68 e2       	ldi	r22, 0x28	; 40
    1094:	8d e5       	ldi	r24, 0x5D	; 93
    1096:	3b d4       	rcall	.+2166   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x6D,TW_MT_DATA_ACK);						// Follower Control
    1098:	68 e2       	ldi	r22, 0x28	; 40
    109a:	8d e6       	ldi	r24, 0x6D	; 109
    109c:	38 d4       	rcall	.+2160   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x0C,TW_MT_DATA_ACK);						// Display On/Off
    109e:	68 e2       	ldi	r22, 0x28	; 40
    10a0:	8c e0       	ldi	r24, 0x0C	; 12
    10a2:	35 d4       	rcall	.+2154   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);						// Clear Display
    10a4:	68 e2       	ldi	r22, 0x28	; 40
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	32 d4       	rcall	.+2148   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x06,TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    10aa:	68 e2       	ldi	r22, 0x28	; 40
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	2f d4       	rcall	.+2142   	; 0x190e <_Z16TWI_TransmitDatahh>
    10b0:	87 ea       	ldi	r24, 0xA7	; 167
    10b2:	91 e6       	ldi	r25, 0x61	; 97
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <_ZN3lcd8init_LCDEv+0x66>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <_ZN3lcd8init_LCDEv+0x6c>
    10ba:	00 00       	nop
	_delay_ms(100);
	TWI_STOP();
    10bc:	19 d4       	rcall	.+2098   	; 0x18f0 <_Z8TWI_STOPv>

	CGRAM();			//define CGRAM
    10be:	ce 01       	movw	r24, r28
    10c0:	91 df       	rcall	.-222    	; 0xfe4 <_ZN3lcd5CGRAMEv>

	TWI_StartCommunication();
    10c2:	1a d4       	rcall	.+2100   	; 0x18f8 <_Z22TWI_StartCommunicationv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
    10c4:	68 e1       	ldi	r22, 0x18	; 24
    10c6:	8c e7       	ldi	r24, 0x7C	; 124
    10c8:	22 d4       	rcall	.+2116   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
    10ca:	68 e2       	ldi	r22, 0x28	; 40
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	1f d4       	rcall	.+2110   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x39,TW_MT_DATA_ACK);
    10d0:	68 e2       	ldi	r22, 0x28	; 40
    10d2:	89 e3       	ldi	r24, 0x39	; 57
    10d4:	1c d4       	rcall	.+2104   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);
    10d6:	68 e2       	ldi	r22, 0x28	; 40
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	19 d4       	rcall	.+2098   	; 0x190e <_Z16TWI_TransmitDatahh>
	TWI_STOP();
    10dc:	09 d4       	rcall	.+2066   	; 0x18f0 <_Z8TWI_STOPv>
    10de:	87 ea       	ldi	r24, 0xA7	; 167
    10e0:	91 e6       	ldi	r25, 0x61	; 97
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <_ZN3lcd8init_LCDEv+0x94>
    10e6:	00 c0       	rjmp	.+0      	; 0x10e8 <_ZN3lcd8init_LCDEv+0x9a>
    10e8:	00 00       	nop
	_delay_ms(100);
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <_ZN3lcdC1Ev>:
#include "lcd.h"
#include "twi.h"


lcd::lcd(){
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
	
	TWI_INIT();
    10f6:	e9 d3       	rcall	.+2002   	; 0x18ca <_Z8TWI_INITv>
	init_LCD();
    10f8:	ce 01       	movw	r24, r28
    10fa:	a9 df       	rcall	.-174    	; 0x104e <_ZN3lcd8init_LCDEv>
    10fc:	87 e8       	ldi	r24, 0x87	; 135
    10fe:	93 e1       	ldi	r25, 0x13	; 19
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <_ZN3lcdC1Ev+0x10>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <_ZN3lcdC1Ev+0x16>
    1106:	00 00       	nop
	_delay_ms(20);
		
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <_Z12mmc_sendbyteh>:
//*****************************************************************************
uint8_t mmc_sendbyte (uint8_t data){

    uint16_t i;

    SPDR = data;
    110e:	8e bd       	out	0x2e, r24	; 46

    i = 0x1000;
    while (!(SPSR & (1 << SPIF))) {
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e1       	ldi	r25, 0x10	; 16
    1114:	02 c0       	rjmp	.+4      	; 0x111a <_Z12mmc_sendbyteh+0xc>
    1116:	01 97       	sbiw	r24, 0x01	; 1
        if (i-- == 0)
    1118:	19 f0       	breq	.+6      	; 0x1120 <_Z12mmc_sendbyteh+0x12>
    uint16_t i;

    SPDR = data;

    i = 0x1000;
    while (!(SPSR & (1 << SPIF))) {
    111a:	0d b4       	in	r0, 0x2d	; 45
    111c:	07 fe       	sbrs	r0, 7
    111e:	fb cf       	rjmp	.-10     	; 0x1116 <_Z12mmc_sendbyteh+0x8>
        if (i-- == 0)
            break;
    }

    return SPDR;
    1120:	8e b5       	in	r24, 0x2e	; 46

}
    1122:	08 95       	ret

00001124 <_Z11mmc_commandhm>:
//             Argument
// Returns: Received response byte
//
// Description: Send command to MMC card NO CS signal handle
//*****************************************************************************
uint8_t mmc_command(uint8_t cmd, uint32_t arg){
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	c4 2f       	mov	r28, r20
    112e:	d5 2f       	mov	r29, r21
    1130:	16 2f       	mov	r17, r22
    1132:	07 2f       	mov	r16, r23

    uint8_t result;			// Card response
    uint8_t retry = 0;		// Retry counter

    mmc_sendbyte(cmd);			// Send command
    1134:	ec df       	rcall	.-40     	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(arg >> 24);	// send argument
    1136:	80 2f       	mov	r24, r16
    1138:	ea df       	rcall	.-44     	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(arg >> 16);
    113a:	81 2f       	mov	r24, r17
    113c:	e8 df       	rcall	.-48     	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(arg >> 8);
    113e:	8d 2f       	mov	r24, r29
    1140:	e6 df       	rcall	.-52     	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(arg);
    1142:	8c 2f       	mov	r24, r28
    1144:	e4 df       	rcall	.-56     	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(0x95);			// crc valid only for MMC_GO_IDLE_STATE
    1146:	85 e9       	ldi	r24, 0x95	; 149
    1148:	e2 df       	rcall	.-60     	; 0x110e <_Z12mmc_sendbyteh>

    /* Wait for card */
    while( (result = mmc_sendbyte(0xff)) == 0xff ) {
    114a:	ca e0       	ldi	r28, 0x0A	; 10
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <_Z11mmc_commandhm+0x2e>
    114e:	c1 50       	subi	r28, 0x01	; 1
        if(retry++ > 8)
    1150:	21 f0       	breq	.+8      	; 0x115a <_Z11mmc_commandhm+0x36>
    mmc_sendbyte(arg >> 8);
    mmc_sendbyte(arg);
    mmc_sendbyte(0x95);			// crc valid only for MMC_GO_IDLE_STATE

    /* Wait for card */
    while( (result = mmc_sendbyte(0xff)) == 0xff ) {
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	dc df       	rcall	.-72     	; 0x110e <_Z12mmc_sendbyteh>
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	d1 f3       	breq	.-12     	; 0x114e <_Z11mmc_commandhm+0x2a>
            break;
    }

    return result;		// return command response

}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <_Z15mmc_sendcommandhm>:
//             Argument
// Returns: Received response byte
//
// Description: Send command to MMC card with CS signal handle
//*****************************************************************************
uint8_t mmc_sendcommand(uint8_t cmd, uint32_t arg){
    1164:	cf 93       	push	r28

    uint8_t resp;

    MMC_PORT &= ~(1 << MMC_CS);		// Select MMC card
    1166:	2a 98       	cbi	0x05, 2	; 5

    resp = mmc_command(cmd, arg);	// Issue the command
    1168:	dd df       	rcall	.-70     	; 0x1124 <_Z11mmc_commandhm>
    116a:	c8 2f       	mov	r28, r24

    MMC_PORT |= (1 << MMC_CS);		// Deselect MMC card
    116c:	2a 9a       	sbi	0x05, 2	; 5
    mmc_sendbyte(0xFF);				// send dummy byte
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	ce df       	rcall	.-100    	; 0x110e <_Z12mmc_sendbyteh>

    return resp;
}
    1172:	8c 2f       	mov	r24, r28
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <_Z8mmc_initv>:
// Returns: 0 - Successfully
//          !0 - Error
//
// Description: Init MMC card and return status
//*****************************************************************************
uint8_t mmc_init (void){
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29

    MMC_PORT |= (1 << MMC_CS);	// deselect MMC card
    117c:	2a 9a       	sbi	0x05, 2	; 5
    MMC_DIR |= (1 << MMC_CS);	// MMC Chip Select is outputs
    117e:	22 9a       	sbi	0x04, 2	; 4
    1180:	cb e0       	ldi	r28, 0x0B	; 11
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t retry;				// timeout counter
    uint8_t result;				// card response

    /* Send dummy bytes */
    for(retry = 0; retry < 11; retry++) {
        mmc_sendbyte(0xFF);
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	c3 df       	rcall	.-122    	; 0x110e <_Z12mmc_sendbyteh>
    1188:	21 97       	sbiw	r28, 0x01	; 1
    MMC_DIR |= (1 << MMC_CS);	// MMC Chip Select is outputs
    uint16_t retry;				// timeout counter
    uint8_t result;				// card response

    /* Send dummy bytes */
    for(retry = 0; retry < 11; retry++) {
    118a:	e1 f7       	brne	.-8      	; 0x1184 <_Z8mmc_initv+0xc>
    118c:	47 c0       	rjmp	.+142    	; 0x121c <_Z8mmc_initv+0xa4>
        mmc_sendbyte(0xFF);
    }

    retry = 0;
    do {
        result = mmc_sendcommand(MMC_GO_IDLE_STATE, 0);	// Put card into idle state
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	ba 01       	movw	r22, r20
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	e6 df       	rcall	.-52     	; 0x1164 <_Z15mmc_sendcommandhm>
    1198:	21 97       	sbiw	r28, 0x01	; 1
		if (retry++ == 100)
    119a:	19 f0       	breq	.+6      	; 0x11a2 <_Z8mmc_initv+0x2a>
    for(retry = 0; retry < 11; retry++) {
        mmc_sendbyte(0xFF);
    }

    retry = 0;
    do {
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	b9 f7       	brne	.-18     	; 0x118e <_Z8mmc_initv+0x16>
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <_Z8mmc_initv+0x30>
		if (retry++ == 100)
            break;

    } while(result != MMC_R1_IDLE_STATE);

    if(result == 0) {
    11a2:	88 23       	and	r24, r24
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <_Z8mmc_initv+0x30>
    11a6:	36 c0       	rjmp	.+108    	; 0x1214 <_Z8mmc_initv+0x9c>
		return -1;		// Return if card was not detected
    }

    retry = 0;
    do {
        result = mmc_sendcommand(MMC_SEND_OP_COND, 0);	// Wait for card init process
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	ba 01       	movw	r22, r20
    11ae:	81 e4       	ldi	r24, 0x41	; 65
    11b0:	d9 df       	rcall	.-78     	; 0x1164 <_Z15mmc_sendcommandhm>
    11b2:	c8 ee       	ldi	r28, 0xE8	; 232
    11b4:	d3 e0       	ldi	r29, 0x03	; 3
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <_Z8mmc_initv+0x4e>
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	ba 01       	movw	r22, r20
    11be:	81 e4       	ldi	r24, 0x41	; 65
    11c0:	d1 df       	rcall	.-94     	; 0x1164 <_Z15mmc_sendcommandhm>
    11c2:	21 97       	sbiw	r28, 0x01	; 1
        if(retry++ == 1000)
    11c4:	11 f0       	breq	.+4      	; 0x11ca <_Z8mmc_initv+0x52>
    if(result == 0) {
		return -1;		// Return if card was not detected
    }

    retry = 0;
    do {
    11c6:	81 11       	cpse	r24, r1
    11c8:	f7 cf       	rjmp	.-18     	; 0x11b8 <_Z8mmc_initv+0x40>
            break;
    } while (result);

    retry = 0;
    do {
        result = mmc_sendcommand(MMC_CRC_ON_OFF, 0);	// Turn CRC off
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	ba 01       	movw	r22, r20
    11d0:	8b e7       	ldi	r24, 0x7B	; 123
    11d2:	c8 df       	rcall	.-112    	; 0x1164 <_Z15mmc_sendcommandhm>
    11d4:	c4 e6       	ldi	r28, 0x64	; 100
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <_Z8mmc_initv+0x70>
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	ba 01       	movw	r22, r20
    11e0:	8b e7       	ldi	r24, 0x7B	; 123
    11e2:	c0 df       	rcall	.-128    	; 0x1164 <_Z15mmc_sendcommandhm>
    11e4:	21 97       	sbiw	r28, 0x01	; 1
        if(retry++ == 100)
    11e6:	11 f0       	breq	.+4      	; 0x11ec <_Z8mmc_initv+0x74>
        if(retry++ == 1000)
            break;
    } while (result);

    retry = 0;
    do {
    11e8:	81 11       	cpse	r24, r1
    11ea:	f7 cf       	rjmp	.-18     	; 0x11da <_Z8mmc_initv+0x62>
            break;
    } while (result);

    retry = 0;
    do {
        result = mmc_sendcommand(MMC_SET_BLOCKLEN, 512);	// Set 512 byte block length
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	52 e0       	ldi	r21, 0x02	; 2
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	80 e5       	ldi	r24, 0x50	; 80
    11f6:	b6 df       	rcall	.-148    	; 0x1164 <_Z15mmc_sendcommandhm>
    11f8:	c4 e6       	ldi	r28, 0x64	; 100
    11fa:	d0 e0       	ldi	r29, 0x00	; 0
    11fc:	08 c0       	rjmp	.+16     	; 0x120e <_Z8mmc_initv+0x96>
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	52 e0       	ldi	r21, 0x02	; 2
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e5       	ldi	r24, 0x50	; 80
    1208:	ad df       	rcall	.-166    	; 0x1164 <_Z15mmc_sendcommandhm>
    120a:	21 97       	sbiw	r28, 0x01	; 1
        if(retry++ == 100)
    120c:	29 f0       	breq	.+10     	; 0x1218 <_Z8mmc_initv+0xa0>
        if(retry++ == 100)
            break;
    } while (result);

    retry = 0;
    do {
    120e:	81 11       	cpse	r24, r1
    1210:	f6 cf       	rjmp	.-20     	; 0x11fe <_Z8mmc_initv+0x86>
    1212:	0c c0       	rjmp	.+24     	; 0x122c <_Z8mmc_initv+0xb4>
            break;

    } while(result != MMC_R1_IDLE_STATE);

    if(result == 0) {
		return -1;		// Return if card was not detected
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	0a c0       	rjmp	.+20     	; 0x122c <_Z8mmc_initv+0xb4>
        result = mmc_sendcommand(MMC_SET_BLOCKLEN, 512);	// Set 512 byte block length
        if(retry++ == 100)
            break;
    } while (result);

    return 0;
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	08 c0       	rjmp	.+16     	; 0x122c <_Z8mmc_initv+0xb4>
        mmc_sendbyte(0xFF);
    }

    retry = 0;
    do {
        result = mmc_sendcommand(MMC_GO_IDLE_STATE, 0);	// Put card into idle state
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	ba 01       	movw	r22, r20
    1222:	80 e4       	ldi	r24, 0x40	; 64
    1224:	9f df       	rcall	.-194    	; 0x1164 <_Z15mmc_sendcommandhm>
    1226:	c4 e6       	ldi	r28, 0x64	; 100
    1228:	d0 e0       	ldi	r29, 0x00	; 0
    122a:	b8 cf       	rjmp	.-144    	; 0x119c <_Z8mmc_initv+0x24>
        if(retry++ == 100)
            break;
    } while (result);

    return 0;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <_Z13mmc_busy_waitv>:
// Returns: 0 - Not Busy
//          1 - Busy
//
// Description: Wait until card is not busy
//*****************************************************************************
uint8_t mmc_busy_wait (void){
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29

    uint16_t i;

    MMC_DESELECT mmc_sendbyte(0xff);	// Wait 8 clock cycles
    1236:	2a 9a       	sbi	0x05, 2	; 5
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	69 df       	rcall	.-302    	; 0x110e <_Z12mmc_sendbyteh>
    MMC_SELECT mmc_sendbyte(0xff);		// Wait 8 clock cycles
    123c:	2a 98       	cbi	0x05, 2	; 5
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	66 df       	rcall	.-308    	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(0xff);					// Wait 8 clock cycles
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	64 df       	rcall	.-312    	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(0xff);					// Wait 8 clock cycles
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	62 df       	rcall	.-316    	; 0x110e <_Z12mmc_sendbyteh>
    mmc_sendbyte(0xff);					// Wait 8 clock cycles
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	60 df       	rcall	.-320    	; 0x110e <_Z12mmc_sendbyteh>

    i = 25000;

    while (i--) {
    124e:	c7 ea       	ldi	r28, 0xA7	; 167
    1250:	d1 e6       	ldi	r29, 0x61	; 97
        if(mmc_sendbyte(0xff) == 0xff)
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	5c df       	rcall	.-328    	; 0x110e <_Z12mmc_sendbyteh>
    1256:	8f 3f       	cpi	r24, 0xFF	; 255
    1258:	11 f0       	breq	.+4      	; 0x125e <_Z13mmc_busy_waitv+0x2c>
    mmc_sendbyte(0xff);					// Wait 8 clock cycles
    mmc_sendbyte(0xff);					// Wait 8 clock cycles

    i = 25000;

    while (i--) {
    125a:	21 97       	sbiw	r28, 0x01	; 1
    125c:	d0 f7       	brcc	.-12     	; 0x1252 <_Z13mmc_busy_waitv+0x20>
        if(mmc_sendbyte(0xff) == 0xff)
            break;		// Wait for data line to become low
    }
    if(i == 0)
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	cd 2b       	or	r28, r29
    1262:	09 f0       	breq	.+2      	; 0x1266 <_Z13mmc_busy_waitv+0x34>
    1264:	80 e0       	ldi	r24, 0x00	; 0
        return 1;		// Card still busy

    return 0;			// Card no longer busy
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <_Z17mmc_card_responseh>:
// Returns: 1 - Response valid
//          0 - Response invalid
//
// Description: Wait for expected card response, return response status
//*****************************************************************************
uint8_t mmc_card_response(uint8_t res){
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	18 2f       	mov	r17, r24
    1274:	c0 e5       	ldi	r28, 0x50	; 80
    1276:	d3 ec       	ldi	r29, 0xC3	; 195

    uint16_t count = 50000;

    while(count > 0) {
        if( mmc_sendbyte(0xFF) == res)
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	49 df       	rcall	.-366    	; 0x110e <_Z12mmc_sendbyteh>
    127c:	81 17       	cp	r24, r17
    127e:	21 f0       	breq	.+8      	; 0x1288 <_Z17mmc_card_responseh+0x1c>
    1280:	21 97       	sbiw	r28, 0x01	; 1
//*****************************************************************************
uint8_t mmc_card_response(uint8_t res){

    uint16_t count = 50000;

    while(count > 0) {
    1282:	d1 f7       	brne	.-12     	; 0x1278 <_Z17mmc_card_responseh+0xc>
        if( mmc_sendbyte(0xFF) == res)
            return 1;		//wait for result to be the expected one...
        count--;
    }

    return 0;
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	01 c0       	rjmp	.+2      	; 0x128a <_Z17mmc_card_responseh+0x1e>

    uint16_t count = 50000;

    while(count > 0) {
        if( mmc_sendbyte(0xFF) == res)
            return 1;		//wait for result to be the expected one...
    1288:	81 e0       	ldi	r24, 0x01	; 1
        count--;
    }

    return 0;

}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	08 95       	ret

00001292 <_Z15mmc_read_sectormjPc>:
//
// Description: Read data from one sectors
//              The sector number starts always from begin of partition not from
//              MBR!!! Reading sector 0 doesn't read the MBR but the Volume ID!!!
//*****************************************************************************
uint16_t mmc_read_sector(uint32_t sec, uint16_t num_of_bytes, char * buffer){
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	4b 01       	movw	r8, r22
    12a8:	5c 01       	movw	r10, r24
    12aa:	7a 01       	movw	r14, r20
    12ac:	89 01       	movw	r16, r18

    int16_t i = 0, count = 0;

    mmc_busy_wait();		// Wait until card is avail.
    12ae:	c1 df       	rcall	.-126    	; 0x1232 <_Z13mmc_busy_waitv>

    MMC_SELECT
    12b0:	2a 98       	cbi	0x05, 2	; 5

    if( 0 == mmc_command (MMC_READ_SINGLE_BLOCK, sec << 9) ) {
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	03 2e       	mov	r0, r19
    12b8:	39 e0       	ldi	r19, 0x09	; 9
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	3a 95       	dec	r19
    12c4:	d1 f7       	brne	.-12     	; 0x12ba <_Z15mmc_read_sectormjPc+0x28>
    12c6:	30 2d       	mov	r19, r0
    12c8:	81 e5       	ldi	r24, 0x51	; 81
    12ca:	2c df       	rcall	.-424    	; 0x1124 <_Z11mmc_commandhm>
    12cc:	81 11       	cpse	r24, r1
    12ce:	25 c0       	rjmp	.+74     	; 0x131a <_Z15mmc_read_sectormjPc+0x88>
        if( mmc_card_response(0xFE) ) {
    12d0:	8e ef       	ldi	r24, 0xFE	; 254
    12d2:	cc df       	rcall	.-104    	; 0x126c <_Z17mmc_card_responseh>
    12d4:	88 23       	and	r24, r24
    12d6:	21 f1       	breq	.+72     	; 0x1320 <_Z15mmc_read_sectormjPc+0x8e>
            for(i = 0; i < num_of_bytes; i++) {
    12d8:	e1 14       	cp	r14, r1
    12da:	f1 04       	cpc	r15, r1
    12dc:	89 f0       	breq	.+34     	; 0x1300 <_Z15mmc_read_sectormjPc+0x6e>
    12de:	e8 01       	movw	r28, r16
    12e0:	0e 0d       	add	r16, r14
    12e2:	1f 1d       	adc	r17, r15
                *(buffer + i) = mmc_sendbyte(0xFF);
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	13 df       	rcall	.-474    	; 0x110e <_Z12mmc_sendbyteh>
    12e8:	89 93       	st	Y+, r24

    MMC_SELECT

    if( 0 == mmc_command (MMC_READ_SINGLE_BLOCK, sec << 9) ) {
        if( mmc_card_response(0xFE) ) {
            for(i = 0; i < num_of_bytes; i++) {
    12ea:	c0 17       	cp	r28, r16
    12ec:	d1 07       	cpc	r29, r17
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <_Z15mmc_read_sectormjPc+0x52>
    12f0:	ae 2c       	mov	r10, r14
    12f2:	bf 2c       	mov	r11, r15
                *(buffer + i) = mmc_sendbyte(0xFF);
                count++;
            }
            for(i = 0; i < SECTOR_SIZE - num_of_bytes; i++) {
    12f4:	00 e0       	ldi	r16, 0x00	; 0
    12f6:	12 e0       	ldi	r17, 0x02	; 2
    12f8:	0e 19       	sub	r16, r14
    12fa:	1f 09       	sbc	r17, r15
    12fc:	29 f4       	brne	.+10     	; 0x1308 <_Z15mmc_read_sectormjPc+0x76>
    12fe:	12 c0       	rjmp	.+36     	; 0x1324 <_Z15mmc_read_sectormjPc+0x92>

    MMC_SELECT

    if( 0 == mmc_command (MMC_READ_SINGLE_BLOCK, sec << 9) ) {
        if( mmc_card_response(0xFE) ) {
            for(i = 0; i < num_of_bytes; i++) {
    1300:	a1 2c       	mov	r10, r1
    1302:	b1 2c       	mov	r11, r1
                *(buffer + i) = mmc_sendbyte(0xFF);
                count++;
            }
            for(i = 0; i < SECTOR_SIZE - num_of_bytes; i++) {
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	12 e0       	ldi	r17, 0x02	; 2
    1308:	c0 e0       	ldi	r28, 0x00	; 0
    130a:	d0 e0       	ldi	r29, 0x00	; 0
                mmc_sendbyte(0xFF);
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	ff de       	rcall	.-514    	; 0x110e <_Z12mmc_sendbyteh>
        if( mmc_card_response(0xFE) ) {
            for(i = 0; i < num_of_bytes; i++) {
                *(buffer + i) = mmc_sendbyte(0xFF);
                count++;
            }
            for(i = 0; i < SECTOR_SIZE - num_of_bytes; i++) {
    1310:	21 96       	adiw	r28, 0x01	; 1
    1312:	c0 17       	cp	r28, r16
    1314:	d1 07       	cpc	r29, r17
    1316:	d0 f3       	brcs	.-12     	; 0x130c <_Z15mmc_read_sectormjPc+0x7a>
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <_Z15mmc_read_sectormjPc+0x92>
//              The sector number starts always from begin of partition not from
//              MBR!!! Reading sector 0 doesn't read the MBR but the Volume ID!!!
//*****************************************************************************
uint16_t mmc_read_sector(uint32_t sec, uint16_t num_of_bytes, char * buffer){

    int16_t i = 0, count = 0;
    131a:	a1 2c       	mov	r10, r1
    131c:	b1 2c       	mov	r11, r1
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <_Z15mmc_read_sectormjPc+0x92>
    1320:	a1 2c       	mov	r10, r1
    1322:	b1 2c       	mov	r11, r1
                mmc_sendbyte(0xFF);
            }
        }
    }

    MMC_DESELECT
    1324:	2a 9a       	sbi	0x05, 2	; 5

    mmc_sendbyte(0xff);
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	f2 de       	rcall	.-540    	; 0x110e <_Z12mmc_sendbyteh>

    return count;
}
    132a:	8a 2d       	mov	r24, r10
    132c:	9b 2d       	mov	r25, r11
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	08 95       	ret

00001344 <_Z10pump_audiov>:
// Parameters: none.
// Returns: none.
//
// Description: Fill audio data FIFO of VS1011
//*****************************************************************************
void pump_audio(){
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29

    int16_t read_data;

    while( bit_is_set(VS_DREQ_INP, VS_DREQ) ) {
    1348:	4a 9b       	sbis	0x09, 2	; 9
    134a:	24 c0       	rjmp	.+72     	; 0x1394 <_Z10pump_audiov+0x50>

        if (audiodata_pntr == (sector_buffer + 512))	// Buffer empty
        {
            audiodata_pntr = sector_buffer;				// Data pointer at begin of sector buffer
    134c:	c0 e4       	ldi	r28, 0x40	; 64
    134e:	d3 e0       	ldi	r29, 0x03	; 3

    int16_t read_data;

    while( bit_is_set(VS_DREQ_INP, VS_DREQ) ) {

        if (audiodata_pntr == (sector_buffer + 512))	// Buffer empty
    1350:	20 91 14 06 	lds	r18, 0x0614
    1354:	30 91 15 06 	lds	r19, 0x0615
    1358:	20 54       	subi	r18, 0x40	; 64
    135a:	35 40       	sbci	r19, 0x05	; 5
    135c:	51 f4       	brne	.+20     	; 0x1372 <_Z10pump_audiov+0x2e>
        {
            audiodata_pntr = sector_buffer;				// Data pointer at begin of sector buffer
    135e:	d0 93 15 06 	sts	0x0615, r29
    1362:	c0 93 14 06 	sts	0x0614, r28

            read_data = fat_read(sector_buffer, 512, &mp3_file);
    1366:	46 e1       	ldi	r20, 0x16	; 22
    1368:	56 e0       	ldi	r21, 0x06	; 6
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	72 e0       	ldi	r23, 0x02	; 2
    136e:	ce 01       	movw	r24, r28
    1370:	92 da       	rcall	.-2780   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
            // If we reach the end of file play next title
            if (read_data == 0) {
                //next_title (1);	// Play next title
            }
        }
        vs1011_send32(audiodata_pntr);	// Send data on SPI bus
    1372:	80 91 14 06 	lds	r24, 0x0614
    1376:	90 91 15 06 	lds	r25, 0x0615
    137a:	e2 d2       	rcall	.+1476   	; 0x1940 <_Z13vs1011_send32Pc>
        audiodata_pntr += 32;			// Advance data pointer
    137c:	20 91 14 06 	lds	r18, 0x0614
    1380:	30 91 15 06 	lds	r19, 0x0615
    1384:	20 5e       	subi	r18, 0xE0	; 224
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	30 93 15 06 	sts	0x0615, r19
    138c:	20 93 14 06 	sts	0x0614, r18
//*****************************************************************************
void pump_audio(){

    int16_t read_data;

    while( bit_is_set(VS_DREQ_INP, VS_DREQ) ) {
    1390:	4a 99       	sbic	0x09, 2	; 9
    1392:	de cf       	rjmp	.-68     	; 0x1350 <_Z10pump_audiov+0xc>
            }
        }
        vs1011_send32(audiodata_pntr);	// Send data on SPI bus
        audiodata_pntr += 32;			// Advance data pointer
    }
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <_Z10play_titlev>:
//          0 = Error
//          1 = No error
//
// Description: get title infos and start audio stream
//*****************************************************************************
uint8_t play_title(){
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28

    vs1011_softreset();   // reset VS1011
    13ac:	ff d2       	rcall	.+1534   	; 0x19ac <_Z16vs1011_softresetv>

    vs1011_setvolume (eeprom_read_byte (&ee_volume),
		      eeprom_read_byte ((uint8_t *)&ee_balance));
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 9c 14 	call	0x2938	; 0x2938 <eeprom_read_byte>
    13b6:	c8 2f       	mov	r28, r24
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 9c 14 	call	0x2938	; 0x2938 <eeprom_read_byte>
    13c0:	6c 2f       	mov	r22, r28
    13c2:	06 d3       	rcall	.+1548   	; 0x19d0 <_Z16vs1011_setvolumehh>
    vs1011_setbassboost (eeprom_read_byte (&ee_bassboost));
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 9c 14 	call	0x2938	; 0x2938 <eeprom_read_byte>
    13cc:	22 d3       	rcall	.+1604   	; 0x1a12 <_Z19vs1011_setbassboosth>

    is_playing = 0;		// prevent playing in case of error
    13ce:	10 92 53 05 	sts	0x0553, r1
						&playlist_length,
						actual_title,
						&title_time,
						titlename,
						artistname,
						playlist_name) == 1 ) {
    13d2:	20 91 00 01 	lds	r18, 0x0100
    13d6:	30 91 01 01 	lds	r19, 0x0101
    13da:	80 91 12 06 	lds	r24, 0x0612
    13de:	90 91 13 06 	lds	r25, 0x0613
    13e2:	0f 2e       	mov	r0, r31
    13e4:	f0 ed       	ldi	r31, 0xD0	; 208
    13e6:	af 2e       	mov	r10, r31
    13e8:	f5 e0       	ldi	r31, 0x05	; 5
    13ea:	bf 2e       	mov	r11, r31
    13ec:	f0 2d       	mov	r31, r0
    13ee:	0f 2e       	mov	r0, r31
    13f0:	f4 e5       	ldi	r31, 0x54	; 84
    13f2:	cf 2e       	mov	r12, r31
    13f4:	f5 e0       	ldi	r31, 0x05	; 5
    13f6:	df 2e       	mov	r13, r31
    13f8:	f0 2d       	mov	r31, r0
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f0 e9       	ldi	r31, 0x90	; 144
    13fe:	ef 2e       	mov	r14, r31
    1400:	f5 e0       	ldi	r31, 0x05	; 5
    1402:	ff 2e       	mov	r15, r31
    1404:	f0 2d       	mov	r31, r0
    1406:	0c ec       	ldi	r16, 0xCC	; 204
    1408:	15 e0       	ldi	r17, 0x05	; 5
    140a:	4c e0       	ldi	r20, 0x0C	; 12
    140c:	56 e0       	ldi	r21, 0x06	; 6
    140e:	60 e1       	ldi	r22, 0x10	; 16
    1410:	76 e0       	ldi	r23, 0x06	; 6
    1412:	73 d0       	rcall	.+230    	; 0x14fa <_Z14get_title_infohPjPmjS_PcS1_S1_>
    1414:	c8 2f       	mov	r28, r24
    vs1011_setbassboost (eeprom_read_byte (&ee_bassboost));

    is_playing = 0;		// prevent playing in case of error

    // get actual title information from play list
    if (get_title_info (actual_playlist,
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	e9 f4       	brne	.+58     	; 0x1454 <_Z10play_titlev+0xba>
						titlename,
						artistname,
						playlist_name) == 1 ) {

        // read ID3 tag informations
        get_id3_tag(titlename, artistname, playlist_name, &title_time);
    141a:	98 01       	movw	r18, r16
    141c:	a5 01       	movw	r20, r10
    141e:	b6 01       	movw	r22, r12
    1420:	c7 01       	movw	r24, r14
    1422:	d9 db       	rcall	.-2126   	; 0xbd6 <_Z11get_id3_tagPcS_S_Pj>

        // read first sector
        if (fat_read (sector_buffer, 512, &mp3_file) > 0) {
    1424:	46 e1       	ldi	r20, 0x16	; 22
    1426:	56 e0       	ldi	r21, 0x06	; 6
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	72 e0       	ldi	r23, 0x02	; 2
    142c:	80 e4       	ldi	r24, 0x40	; 64
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	32 da       	rcall	.-2972   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
    1432:	89 2b       	or	r24, r25
    1434:	89 f0       	breq	.+34     	; 0x1458 <_Z10play_titlev+0xbe>
      
            //show_titleinfo ();	// show title infos on LCD 
            
            audiodata_pntr = sector_buffer;	// init pointer to audio data
    1436:	80 e4       	ldi	r24, 0x40	; 64
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	90 93 15 06 	sts	0x0615, r25
    143e:	80 93 14 06 	sts	0x0614, r24
            pump_audio ();	// pump initial audio data to VS1011
    1442:	80 df       	rcall	.-256    	; 0x1344 <_Z10pump_audiov>
      
            is_playing = 1;	// indicate playing state
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 53 05 	sts	0x0553, r24
      
            last_decode_time = 0;
    144a:	10 92 52 05 	sts	0x0552, r1
    144e:	10 92 51 05 	sts	0x0551, r1
      
            return 1;		// return no error
    1452:	03 c0       	rjmp	.+6      	; 0x145a <_Z10play_titlev+0xc0>
        }
    }

    return 0;			// return error
    1454:	c0 e0       	ldi	r28, 0x00	; 0
    1456:	01 c0       	rjmp	.+2      	; 0x145a <_Z10play_titlev+0xc0>
    1458:	c0 e0       	ldi	r28, 0x00	; 0

    145a:	8c 2f       	mov	r24, r28
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	08 95       	ret

00001470 <_Z25play_audio_through_vs1011v>:
EEPROM int8_t ee_balance = 100;	// default balance center
EEPROM uint8_t ee_bassboost = 0;	// default no bass boost
//EEPROM uint8_t ee_randommode = 0;	// default random mode


void play_audio_through_vs1011(){
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17

	spi_init();
    1480:	16 d2       	rcall	.+1068   	; 0x18ae <_Z8spi_initv>
	VS1011setDataDirection();
    1482:	12 d3       	rcall	.+1572   	; 0x1aa8 <_Z22VS1011setDataDirectionv>
	InitVS1011();
    1484:	08 d3       	rcall	.+1552   	; 0x1a96 <_Z10InitVS1011v>
	vs1011_hardreset();
    1486:	82 d2       	rcall	.+1284   	; 0x198c <_Z16vs1011_hardresetv>
	//vs1011_setvolume (eeprom_read_byte(&ee_volume), (int8_t)(eeprom_read_byte((uint8_t*)&ee_balance)));
	//vs1011_setbassboost (eeprom_read_byte(&ee_bassboost));
	sinewave_beep_test(4);
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	c8 d2       	rcall	.+1424   	; 0x1a1c <_Z18sinewave_beep_testh>

	if (init_fat() == S_OK) {
    148c:	0e 94 3c 01 	call	0x278	; 0x278 <_Z8init_fatv>
    1490:	81 11       	cpse	r24, r1
    1492:	23 c0       	rjmp	.+70     	; 0x14da <_Z25play_audio_through_vs1011v+0x6a>
		number_of_playlists = dir_list("m3u", &playlist_file);
    1494:	66 e2       	ldi	r22, 0x26	; 38
    1496:	76 e0       	ldi	r23, 0x06	; 6
    1498:	8e e1       	ldi	r24, 0x1E	; 30
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	7d db       	rcall	.-2310   	; 0xb98 <_Z8dir_listPcP8FAT_FILE>
    149e:	90 93 cf 05 	sts	0x05CF, r25
    14a2:	80 93 ce 05 	sts	0x05CE, r24
		get_playlist_info(actual_playlist, &playlist_entries, &playlist_length, playlist_name);
    14a6:	80 91 12 06 	lds	r24, 0x0612
    14aa:	90 91 13 06 	lds	r25, 0x0613
    14ae:	0f 2e       	mov	r0, r31
    14b0:	f0 ed       	ldi	r31, 0xD0	; 208
    14b2:	af 2e       	mov	r10, r31
    14b4:	f5 e0       	ldi	r31, 0x05	; 5
    14b6:	bf 2e       	mov	r11, r31
    14b8:	f0 2d       	mov	r31, r0
    14ba:	c1 2c       	mov	r12, r1
    14bc:	d1 2c       	mov	r13, r1
    14be:	e1 2c       	mov	r14, r1
    14c0:	f1 2c       	mov	r15, r1
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4c e0       	ldi	r20, 0x0C	; 12
    14cc:	56 e0       	ldi	r21, 0x06	; 6
    14ce:	60 e1       	ldi	r22, 0x10	; 16
    14d0:	76 e0       	ldi	r23, 0x06	; 6
    14d2:	13 d0       	rcall	.+38     	; 0x14fa <_Z14get_title_infohPjPmjS_PcS1_S1_>
		sinewave_beep_test(2);
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	a2 d2       	rcall	.+1348   	; 0x1a1c <_Z18sinewave_beep_testh>
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <_Z25play_audio_through_vs1011v+0x72>
	} else {
		number_of_playlists = 0;
    14da:	10 92 cf 05 	sts	0x05CF, r1
    14de:	10 92 ce 05 	sts	0x05CE, r1
		// ERROR: NO songs found
	}
	play_title();
    14e2:	5b df       	rcall	.-330    	; 0x139a <_Z10play_titlev>
	sinewave_beep_test(2);
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	9a d2       	rcall	.+1332   	; 0x1a1c <_Z18sinewave_beep_testh>
}
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	08 95       	ret

000014fa <_Z14get_title_infohPjPmjS_PcS1_S1_>:
   						uint16_t title,						// title to read
						uint16_t * title_length,			// title length in seconds
						char * title_name,					// title name
						char * artist_name,					// artist name
						char *playlist_name)				// playlist name
{
    14fa:	2f 92       	push	r2
    14fc:	3f 92       	push	r3
    14fe:	4f 92       	push	r4
    1500:	5f 92       	push	r5
    1502:	6f 92       	push	r6
    1504:	7f 92       	push	r7
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	2f 97       	sbiw	r28, 0x0f	; 15
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	7d 87       	std	Y+13, r23	; 0x0d
    1530:	6c 87       	std	Y+12, r22	; 0x0c
    1532:	5c 83       	std	Y+4, r21	; 0x04
    1534:	4b 83       	std	Y+3, r20	; 0x03
    1536:	39 01       	movw	r6, r18
    1538:	1f 83       	std	Y+7, r17	; 0x07
    153a:	0e 83       	std	Y+6, r16	; 0x06
    153c:	f9 86       	std	Y+9, r15	; 0x09
    153e:	e8 86       	std	Y+8, r14	; 0x08
    1540:	db 86       	std	Y+11, r13	; 0x0b
    1542:	ca 86       	std	Y+10, r12	; 0x0a
    1544:	bf 86       	std	Y+15, r11	; 0x0f
    1546:	ae 86       	std	Y+14, r10	; 0x0e
    char *ptr_line;
    uint16_t n;
    uint16_t bytes_read;
    uint16_t local_entries = 0;
    
    *title_length = 0;
    1548:	d8 01       	movw	r26, r16
    154a:	1d 92       	st	X+, r1
    154c:	1c 92       	st	X, r1
   
    /* Open specific playlist */
    if( fat_open (playlist, NULL, "m3u", &playlist_file) == S_OK ) {
    154e:	26 e2       	ldi	r18, 0x26	; 38
    1550:	36 e0       	ldi	r19, 0x06	; 6
    1552:	4e e1       	ldi	r20, 0x1E	; 30
    1554:	51 e0       	ldi	r21, 0x01	; 1
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 4a 02 	call	0x494	; 0x494 <_Z8fat_openjPcS_P8FAT_FILE>
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	81 11       	cpse	r24, r1
    1564:	25 c1       	rjmp	.+586    	; 0x17b0 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2b6>
        // Read first sector of playlist
        bytes_read = fat_read(sector_buffer, 512, &playlist_file);      
    1566:	46 e2       	ldi	r20, 0x26	; 38
    1568:	56 e0       	ldi	r21, 0x06	; 6
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	72 e0       	ldi	r23, 0x02	; 2
    156e:	80 e4       	ldi	r24, 0x40	; 64
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	91 d9       	rcall	.-3294   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
    1574:	5c 01       	movw	r10, r24
        ptr_sector = sector_buffer;
        
        /* Browse complete playlist */
        while(bytes_read > 0) {
    1576:	89 2b       	or	r24, r25
    1578:	d1 f4       	brne	.+52     	; 0x15ae <_Z14get_title_infohPjPmjS_PcS1_S1_+0xb4>
{
    char *ptr_sector;
    char *ptr_line;
    uint16_t n;
    uint16_t bytes_read;
    uint16_t local_entries = 0;
    157a:	21 2c       	mov	r2, r1
    157c:	31 2c       	mov	r3, r1
    157e:	0b c1       	rjmp	.+534    	; 0x1796 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x29c>
                /* Check if line length crosses sector boundary */
                if( ptr_sector == (sector_buffer + bytes_read) ) { // buffer empty
                    
                    /* Read new sector of playlist */
                    ptr_sector = sector_buffer;
                    bytes_read = fat_read(sector_buffer, 512, &playlist_file);
    1580:	46 e2       	ldi	r20, 0x26	; 38
    1582:	56 e0       	ldi	r21, 0x06	; 6
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	72 e0       	ldi	r23, 0x02	; 2
    1588:	80 e4       	ldi	r24, 0x40	; 64
    158a:	93 e0       	ldi	r25, 0x03	; 3
    158c:	84 d9       	rcall	.-3320   	; 0x896 <_Z8fat_readPcjP8FAT_FILE>
    158e:	9c 01       	movw	r18, r24

                /* Check if line length crosses sector boundary */
                if( ptr_sector == (sector_buffer + bytes_read) ) { // buffer empty
                    
                    /* Read new sector of playlist */
                    ptr_sector = sector_buffer;
    1590:	e0 e4       	ldi	r30, 0x40	; 64
    1592:	f3 e0       	ldi	r31, 0x03	; 3
                    bytes_read = fat_read(sector_buffer, 512, &playlist_file);
                }
                
                /* Store char by char in buffer */
                *ptr_line++ = *ptr_sector;
    1594:	91 91       	ld	r25, Z+
    1596:	d6 01       	movw	r26, r12
    1598:	9c 93       	st	X, r25
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
                
                /* Stop if we reach the end of line */
                if( *ptr_sector++ == '\n' ) {
    159e:	9a 30       	cpi	r25, 0x0A	; 10
    15a0:	f1 f4       	brne	.+60     	; 0x15de <_Z14get_title_infohPjPmjS_PcS1_S1_+0xe4>
    15a2:	59 01       	movw	r10, r18
    15a4:	7f 01       	movw	r14, r30
                    *(ptr_line-2) = 0;			// Null terminate string
    15a6:	f6 01       	movw	r30, r12
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	10 82       	st	Z, r1
                    break;
    15ac:	25 c0       	rjmp	.+74     	; 0x15f8 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xfe>
        // Read first sector of playlist
        bytes_read = fat_read(sector_buffer, 512, &playlist_file);      
        ptr_sector = sector_buffer;
        
        /* Browse complete playlist */
        while(bytes_read > 0) {
    15ae:	21 2c       	mov	r2, r1
    15b0:	31 2c       	mov	r3, r1
    15b2:	0f 2e       	mov	r0, r31
    15b4:	f0 e4       	ldi	r31, 0x40	; 64
    15b6:	ef 2e       	mov	r14, r31
    15b8:	f3 e0       	ldi	r31, 0x03	; 3
    15ba:	ff 2e       	mov	r15, r31
    15bc:	f0 2d       	mov	r31, r0
    15be:	0f 2e       	mov	r0, r31
    15c0:	f6 e3       	ldi	r31, 0x36	; 54
    15c2:	4f 2e       	mov	r4, r31
    15c4:	f6 e0       	ldi	r31, 0x06	; 6
    15c6:	5f 2e       	mov	r5, r31
    15c8:	f0 2d       	mov	r31, r0
    15ca:	0f 2e       	mov	r0, r31
    15cc:	f9 e3       	ldi	r31, 0x39	; 57
    15ce:	8f 2e       	mov	r8, r31
    15d0:	f7 e0       	ldi	r31, 0x07	; 7
    15d2:	9f 2e       	mov	r9, r31
    15d4:	f0 2d       	mov	r31, r0
    15d6:	82 01       	movw	r16, r4
    15d8:	95 01       	movw	r18, r10
    15da:	f7 01       	movw	r30, r14
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xea>
        
            ptr_line = line_buffer;
            n = sizeof(line_buffer);
            
            /* Read on line with specific number of chars or until EOF */
            while( (--n > 0) && (bytes_read > 0 ) ) {
    15de:	08 15       	cp	r16, r8
    15e0:	19 05       	cpc	r17, r9
    15e2:	41 f0       	breq	.+16     	; 0x15f4 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xfa>
    15e4:	68 01       	movw	r12, r16
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	09 f0       	breq	.+2      	; 0x15ee <_Z14get_title_infohPjPmjS_PcS1_S1_+0xf4>
    15ec:	e7 c0       	rjmp	.+462    	; 0x17bc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2c2>
    15ee:	59 01       	movw	r10, r18
    15f0:	7f 01       	movw	r14, r30
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xfe>
    15f4:	59 01       	movw	r10, r18
    15f6:	7f 01       	movw	r14, r30
                    break;
                }
            }      
                        
            /* Check for extended title information */
            if(strncmp("#EXTINF", line_buffer, 7) == 0) {
    15f8:	47 e0       	ldi	r20, 0x07	; 7
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	b2 01       	movw	r22, r4
    15fe:	82 e2       	ldi	r24, 0x22	; 34
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 9d 13 	call	0x273a	; 0x273a <strncmp>
    1606:	89 2b       	or	r24, r25
    1608:	09 f0       	breq	.+2      	; 0x160c <_Z14get_title_infohPjPmjS_PcS1_S1_+0x112>
    160a:	45 c0       	rjmp	.+138    	; 0x1696 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x19c>
                
                char *endptr;
                
                /* Check if we scanning the list or playing a specific title */
                if(title != 0) {
    160c:	61 14       	cp	r6, r1
    160e:	71 04       	cpc	r7, r1
    1610:	51 f1       	breq	.+84     	; 0x1666 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x16c>
                    /* Read title length */
                    *title_length = (uint16_t)strtol( &line_buffer[8], &endptr, 10 );
    1612:	4a e0       	ldi	r20, 0x0A	; 10
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	be 01       	movw	r22, r28
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8e e3       	ldi	r24, 0x3E	; 62
    161e:	96 e0       	ldi	r25, 0x06	; 6
    1620:	4d d6       	rcall	.+3226   	; 0x22bc <strtol>
    1622:	ee 81       	ldd	r30, Y+6	; 0x06
    1624:	ff 81       	ldd	r31, Y+7	; 0x07
    1626:	71 83       	std	Z+1, r23	; 0x01
    1628:	60 83       	st	Z, r22
                    endptr++;	// skip ',' after title length
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
                    /* Search title and artist name delimiter */
                    ptr_line = strstr( endptr, " - ");                    
    1634:	6a e2       	ldi	r22, 0x2A	; 42
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	0e 94 c5 13 	call	0x278a	; 0x278a <strstr>
    163c:	8c 01       	movw	r16, r24
                    /* Null terminate title name */
                    *ptr_line = 0;
    163e:	dc 01       	movw	r26, r24
    1640:	1c 92       	st	X, r1
                    /* Copy title name */
                    strncpy(artist_name, endptr, 60);
    1642:	69 81       	ldd	r22, Y+1	; 0x01
    1644:	7a 81       	ldd	r23, Y+2	; 0x02
    1646:	4c e3       	ldi	r20, 0x3C	; 60
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	8a 85       	ldd	r24, Y+10	; 0x0a
    164c:	9b 85       	ldd	r25, Y+11	; 0x0b
    164e:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
                    /* Copy artist name */
                    strncpy(title_name, ptr_line+3, 60);
    1652:	b8 01       	movw	r22, r16
    1654:	6d 5f       	subi	r22, 0xFD	; 253
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	4c e3       	ldi	r20, 0x3C	; 60
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	88 85       	ldd	r24, Y+8	; 0x08
    165e:	99 85       	ldd	r25, Y+9	; 0x09
    1660:	0e 94 ab 13 	call	0x2756	; 0x2756 <strncpy>
    1664:	2b c0       	rjmp	.+86     	; 0x16bc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1c2>
                } else {
                    /* Count total play time on list scan only */
                    *playlist_length += strtol( &line_buffer[8], (char **)NULL, 10);
    1666:	4a e0       	ldi	r20, 0x0A	; 10
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	8e e3       	ldi	r24, 0x3E	; 62
    1670:	96 e0       	ldi	r25, 0x06	; 6
    1672:	24 d6       	rcall	.+3144   	; 0x22bc <strtol>
    1674:	eb 81       	ldd	r30, Y+3	; 0x03
    1676:	fc 81       	ldd	r31, Y+4	; 0x04
    1678:	00 81       	ld	r16, Z
    167a:	11 81       	ldd	r17, Z+1	; 0x01
    167c:	22 81       	ldd	r18, Z+2	; 0x02
    167e:	33 81       	ldd	r19, Z+3	; 0x03
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	80 0f       	add	r24, r16
    1686:	91 1f       	adc	r25, r17
    1688:	a2 1f       	adc	r26, r18
    168a:	b3 1f       	adc	r27, r19
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	a2 83       	std	Z+2, r26	; 0x02
    1692:	b3 83       	std	Z+3, r27	; 0x03
    1694:	13 c0       	rjmp	.+38     	; 0x16bc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1c2>
                }
            } else
				/* Check if line is a file path name, if so, count as one entry */
				if(isalnum(line_buffer[0]) && (bytes_read > 0)) local_entries += 1;            
    1696:	d2 01       	movw	r26, r4
    1698:	8c 91       	ld	r24, X
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <isalnum>
    16a0:	89 2b       	or	r24, r25
    16a2:	61 f0       	breq	.+24     	; 0x16bc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1c2>
    16a4:	a1 14       	cp	r10, r1
    16a6:	b1 04       	cpc	r11, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1b2>
    16aa:	90 c0       	rjmp	.+288    	; 0x17cc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2d2>
    16ac:	bf ef       	ldi	r27, 0xFF	; 255
    16ae:	2b 1a       	sub	r2, r27
    16b0:	3b 0a       	sbc	r3, r27
            
				if( (title != 0) && (title == local_entries) ) {
    16b2:	61 14       	cp	r6, r1
    16b4:	71 04       	cpc	r7, r1
    16b6:	09 f0       	breq	.+2      	; 0x16ba <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1c0>
    16b8:	8d c0       	rjmp	.+282    	; 0x17d4 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2da>
    16ba:	8d cf       	rjmp	.-230    	; 0x15d6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xdc>
    16bc:	61 14       	cp	r6, r1
    16be:	71 04       	cpc	r7, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1ca>
    16c2:	65 c0       	rjmp	.+202    	; 0x178e <_Z14get_title_infohPjPmjS_PcS1_S1_+0x294>
    16c4:	62 14       	cp	r6, r2
    16c6:	73 04       	cpc	r7, r3
    16c8:	09 f0       	breq	.+2      	; 0x16cc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1d2>
    16ca:	61 c0       	rjmp	.+194    	; 0x178e <_Z14get_title_infohPjPmjS_PcS1_S1_+0x294>

					char *p;
					char *tok;

						/* Parse complete line for path and file name */
						for( tok = strtok_r(line_buffer,"\\",&p); tok; tok = strtok_r(NULL,"\\",&p) ){
    16cc:	ae 01       	movw	r20, r28
    16ce:	4f 5f       	subi	r20, 0xFF	; 255
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	6e e2       	ldi	r22, 0x2E	; 46
    16d4:	71 e0       	ldi	r23, 0x01	; 1
    16d6:	86 e3       	ldi	r24, 0x36	; 54
    16d8:	96 e0       	ldi	r25, 0x06	; 6
    16da:	0e 94 df 13 	call	0x27be	; 0x27be <strtok_r>
    16de:	8c 01       	movw	r16, r24
    16e0:	89 2b       	or	r24, r25
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1ec>
    16e4:	47 c0       	rjmp	.+142    	; 0x1774 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x27a>
								}

								/* Check if token is not an MP3 file name */
								if( strncasecmp( tok+(strlen(tok)-4), ".mp3",4) != 0) {
									/* Change current directory */
									partition.current_directory = mp3_file.first_cluster;
    16e6:	0f 2e       	mov	r0, r31
    16e8:	fa e3       	ldi	r31, 0x3A	; 58
    16ea:	ef 2e       	mov	r14, r31
    16ec:	f7 e0       	ldi	r31, 0x07	; 7
    16ee:	ff 2e       	mov	r15, r31
    16f0:	f0 2d       	mov	r31, r0

						/* Parse complete line for path and file name */
						for( tok = strtok_r(line_buffer,"\\",&p); tok; tok = strtok_r(NULL,"\\",&p) ){

							/* Skip drive letter */
							if(*(tok+1) != ':') {
    16f2:	f8 01       	movw	r30, r16
    16f4:	81 81       	ldd	r24, Z+1	; 0x01
    16f6:	8a 33       	cpi	r24, 0x3A	; 58
    16f8:	81 f1       	breq	.+96     	; 0x175a <_Z14get_title_infohPjPmjS_PcS1_S1_+0x260>

								if(fat_open (0, tok, NULL, &mp3_file) != S_OK) {
    16fa:	26 e1       	ldi	r18, 0x16	; 22
    16fc:	36 e0       	ldi	r19, 0x06	; 6
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	b8 01       	movw	r22, r16
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 4a 02 	call	0x494	; 0x494 <_Z8fat_openjPcS_P8FAT_FILE>
    170c:	88 23       	and	r24, r24
    170e:	59 f0       	breq	.+22     	; 0x1726 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x22c>
									partition.current_directory = partition.root_directory;
    1710:	ea e3       	ldi	r30, 0x3A	; 58
    1712:	f7 e0       	ldi	r31, 0x07	; 7
    1714:	86 81       	ldd	r24, Z+6	; 0x06
    1716:	97 81       	ldd	r25, Z+7	; 0x07
    1718:	a0 85       	ldd	r26, Z+8	; 0x08
    171a:	b1 85       	ldd	r27, Z+9	; 0x09
    171c:	82 87       	std	Z+10, r24	; 0x0a
    171e:	93 87       	std	Z+11, r25	; 0x0b
    1720:	a4 87       	std	Z+12, r26	; 0x0c
    1722:	b5 87       	std	Z+13, r27	; 0x0d
									return 0;
    1724:	60 c0       	rjmp	.+192    	; 0x17e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ec>
								}

								/* Check if token is not an MP3 file name */
								if( strncasecmp( tok+(strlen(tok)-4), ".mp3",4) != 0) {
    1726:	d8 01       	movw	r26, r16
    1728:	0d 90       	ld	r0, X+
    172a:	00 20       	and	r0, r0
    172c:	e9 f7       	brne	.-6      	; 0x1728 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x22e>
    172e:	cd 01       	movw	r24, r26
    1730:	44 e0       	ldi	r20, 0x04	; 4
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	60 e3       	ldi	r22, 0x30	; 48
    1736:	71 e0       	ldi	r23, 0x01	; 1
    1738:	05 97       	sbiw	r24, 0x05	; 5
    173a:	e7 d7       	rcall	.+4046   	; 0x270a <strncasecmp>
    173c:	89 2b       	or	r24, r25
    173e:	69 f0       	breq	.+26     	; 0x175a <_Z14get_title_infohPjPmjS_PcS1_S1_+0x260>
									/* Change current directory */
									partition.current_directory = mp3_file.first_cluster;
    1740:	80 91 1a 06 	lds	r24, 0x061A
    1744:	90 91 1b 06 	lds	r25, 0x061B
    1748:	a0 91 1c 06 	lds	r26, 0x061C
    174c:	b0 91 1d 06 	lds	r27, 0x061D
    1750:	f7 01       	movw	r30, r14
    1752:	82 87       	std	Z+10, r24	; 0x0a
    1754:	93 87       	std	Z+11, r25	; 0x0b
    1756:	a4 87       	std	Z+12, r26	; 0x0c
    1758:	b5 87       	std	Z+13, r27	; 0x0d

					char *p;
					char *tok;

						/* Parse complete line for path and file name */
						for( tok = strtok_r(line_buffer,"\\",&p); tok; tok = strtok_r(NULL,"\\",&p) ){
    175a:	ae 01       	movw	r20, r28
    175c:	4f 5f       	subi	r20, 0xFF	; 255
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	6e e2       	ldi	r22, 0x2E	; 46
    1762:	71 e0       	ldi	r23, 0x01	; 1
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 df 13 	call	0x27be	; 0x27be <strtok_r>
    176c:	8c 01       	movw	r16, r24
    176e:	89 2b       	or	r24, r25
    1770:	09 f0       	breq	.+2      	; 0x1774 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x27a>
    1772:	bf cf       	rjmp	.-130    	; 0x16f2 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1f8>
							}	// End if skip drive letter
                    
						 }	// End for loop strtok
                
						/*  Always start look-up from root directory */
						partition.current_directory = partition.root_directory;
    1774:	ea e3       	ldi	r30, 0x3A	; 58
    1776:	f7 e0       	ldi	r31, 0x07	; 7
    1778:	86 81       	ldd	r24, Z+6	; 0x06
    177a:	97 81       	ldd	r25, Z+7	; 0x07
    177c:	a0 85       	ldd	r26, Z+8	; 0x08
    177e:	b1 85       	ldd	r27, Z+9	; 0x09
    1780:	82 87       	std	Z+10, r24	; 0x0a
    1782:	93 87       	std	Z+11, r25	; 0x0b
    1784:	a4 87       	std	Z+12, r26	; 0x0c
    1786:	b5 87       	std	Z+13, r27	; 0x0d

						return 1;   // file successful read
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	fd 83       	std	Y+5, r31	; 0x05
    178c:	2c c0       	rjmp	.+88     	; 0x17e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ec>
        // Read first sector of playlist
        bytes_read = fat_read(sector_buffer, 512, &playlist_file);      
        ptr_sector = sector_buffer;
        
        /* Browse complete playlist */
        while(bytes_read > 0) {
    178e:	a1 14       	cp	r10, r1
    1790:	b1 04       	cpc	r11, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x29c>
    1794:	20 cf       	rjmp	.-448    	; 0x15d6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xdc>
				} // end if title and entry match

            
		}  // end while num_bytes_read > 0
        
        if(title == 0) {
    1796:	67 28       	or	r6, r7
    1798:	71 f4       	brne	.+28     	; 0x17b6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2bc>
            /* Update entry count if we counted all entries in playlist */
            *entries = local_entries;
    179a:	ac 85       	ldd	r26, Y+12	; 0x0c
    179c:	bd 85       	ldd	r27, Y+13	; 0x0d
    179e:	2d 92       	st	X+, r2
    17a0:	3c 92       	st	X, r3
            /* First 32 characters of file name (without extension) are taken as playlist name */
            memset(playlist_name,0,32); // clear old playlist name
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    17a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    17a8:	11 92       	st	Z+, r1
    17aa:	8a 95       	dec	r24
    17ac:	e9 f7       	brne	.-6      	; 0x17a8 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ae>
//            strncpy (playlist_name, playlist_file->filename, (strlen(playlist_file->filename)-4)%32);

            return S_OK;   // Play list successful read
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ec>
        }
    }

    return E_ERROR;			// File not found or error
    17b0:	f1 e0       	ldi	r31, 0x01	; 1
    17b2:	fd 83       	std	Y+5, r31	; 0x05
    17b4:	18 c0       	rjmp	.+48     	; 0x17e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ec>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	15 c0       	rjmp	.+42     	; 0x17e6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2ec>
            
            /* Read on line with specific number of chars or until EOF */
            while( (--n > 0) && (bytes_read > 0 ) ) {

                /* Check if line length crosses sector boundary */
                if( ptr_sector == (sector_buffer + bytes_read) ) { // buffer empty
    17bc:	c9 01       	movw	r24, r18
    17be:	80 5c       	subi	r24, 0xC0	; 192
    17c0:	9c 4f       	sbci	r25, 0xFC	; 252
    17c2:	e8 17       	cp	r30, r24
    17c4:	f9 07       	cpc	r31, r25
    17c6:	09 f0       	breq	.+2      	; 0x17ca <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2d0>
    17c8:	e5 ce       	rjmp	.-566    	; 0x1594 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x9a>
    17ca:	da ce       	rjmp	.-588    	; 0x1580 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x86>
                }
            } else
				/* Check if line is a file path name, if so, count as one entry */
				if(isalnum(line_buffer[0]) && (bytes_read > 0)) local_entries += 1;            
            
				if( (title != 0) && (title == local_entries) ) {
    17cc:	61 14       	cp	r6, r1
    17ce:	71 04       	cpc	r7, r1
    17d0:	31 f4       	brne	.+12     	; 0x17de <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2e4>
    17d2:	e3 cf       	rjmp	.-58     	; 0x179a <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2a0>
    17d4:	62 14       	cp	r6, r2
    17d6:	73 04       	cpc	r7, r3
    17d8:	09 f0       	breq	.+2      	; 0x17dc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x2e2>
    17da:	fd ce       	rjmp	.-518    	; 0x15d6 <_Z14get_title_infohPjPmjS_PcS1_S1_+0xdc>
    17dc:	77 cf       	rjmp	.-274    	; 0x16cc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1d2>
    17de:	62 14       	cp	r6, r2
    17e0:	73 04       	cpc	r7, r3
    17e2:	c9 f6       	brne	.-78     	; 0x1796 <_Z14get_title_infohPjPmjS_PcS1_S1_+0x29c>
    17e4:	73 cf       	rjmp	.-282    	; 0x16cc <_Z14get_title_infohPjPmjS_PcS1_S1_+0x1d2>
        }
    }

    return E_ERROR;			// File not found or error

}
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	2f 96       	adiw	r28, 0x0f	; 15
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	9f 90       	pop	r9
    180a:	8f 90       	pop	r8
    180c:	7f 90       	pop	r7
    180e:	6f 90       	pop	r6
    1810:	5f 90       	pop	r5
    1812:	4f 90       	pop	r4
    1814:	3f 90       	pop	r3
    1816:	2f 90       	pop	r2
    1818:	08 95       	ret

0000181a <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	16 2f       	mov	r17, r22
    1828:	e4 2e       	mov	r14, r20
    182a:	f5 2e       	mov	r15, r21
    182c:	e9 01       	movw	r28, r18

	spi_select( );
    182e:	38 d0       	rcall	.+112    	; 0x18a0 <_Z10spi_selectv>

	spi_master_transmit( iAddr + 0x80 );
    1830:	80 e8       	ldi	r24, 0x80	; 128
    1832:	81 0f       	add	r24, r17
    1834:	44 d0       	rcall	.+136    	; 0x18be <_Z19spi_master_transmith>
	while( iCount-- ){
    1836:	20 97       	sbiw	r28, 0x00	; 0
    1838:	41 f0       	breq	.+16     	; 0x184a <_ZN3rtc11write_blockEhPhj+0x30>
    183a:	0e 2d       	mov	r16, r14
    183c:	1f 2d       	mov	r17, r15
		spi_master_transmit( *pBuffer++ );
    183e:	f8 01       	movw	r30, r16
    1840:	81 91       	ld	r24, Z+
    1842:	8f 01       	movw	r16, r30
    1844:	3c d0       	rcall	.+120    	; 0x18be <_Z19spi_master_transmith>
    1846:	21 97       	sbiw	r28, 0x01	; 1
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){

	spi_select( );

	spi_master_transmit( iAddr + 0x80 );
	while( iCount-- ){
    1848:	d1 f7       	brne	.-12     	; 0x183e <_ZN3rtc11write_blockEhPhj+0x24>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    184a:	2f d0       	rcall	.+94     	; 0x18aa <_Z12spi_deselectv>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	08 95       	ret

0000185a <_ZN3rtcC1Ev>:
#include <util/delay.h>
#include "rtc.h"
#include "spi.h"


rtc::rtc(){
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	00 d0       	rcall	.+0      	; 0x1864 <_ZN3rtcC1Ev+0xa>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8c 01       	movw	r16, r24
	
	uint8_t tc = 0;
    186a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t tc2 = 0xFF;
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	89 83       	std	Y+1, r24	; 0x01


	spi_init();
    1870:	1e d0       	rcall	.+60     	; 0x18ae <_Z8spi_initv>
	write_block(0x0F,&tc,1);	// Enable timer and unwrite protect memory
    1872:	21 e0       	ldi	r18, 0x01	; 1
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	ae 01       	movw	r20, r28
    1878:	4e 5f       	subi	r20, 0xFE	; 254
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	6f e0       	ldi	r22, 0x0F	; 15
    187e:	c8 01       	movw	r24, r16
    1880:	cc df       	rcall	.-104    	; 0x181a <_ZN3rtc11write_blockEhPhj>
	write_block(0x82,&tc2,1);	// set 12hr format
    1882:	21 e0       	ldi	r18, 0x01	; 1
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	ae 01       	movw	r20, r28
    1888:	4f 5f       	subi	r20, 0xFF	; 255
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	62 e8       	ldi	r22, 0x82	; 130
    188e:	c8 01       	movw	r24, r16
    1890:	c4 df       	rcall	.-120    	; 0x181a <_ZN3rtc11write_blockEhPhj>
	
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <_Z10spi_selectv>:
 */ 
 #include "spi.h"

 void spi_select( ) {

	 SPCR |= ( 1 << CPHA );
    18a0:	8c b5       	in	r24, 0x2c	; 44
    18a2:	84 60       	ori	r24, 0x04	; 4
    18a4:	8c bd       	out	0x2c, r24	; 44
	 PORTB |= ( 1 << SS_PIN );
    18a6:	2c 9a       	sbi	0x05, 4	; 5
    18a8:	08 95       	ret

000018aa <_Z12spi_deselectv>:
 *	This routine de-selects the device by lowering the CE
 *	line. Must be done after the master transmit is complete
 */
 void spi_deselect( ){

	 PORTB &= ~( 1 << SS_PIN );
    18aa:	2c 98       	cbi	0x05, 4	; 5
    18ac:	08 95       	ret

000018ae <_Z8spi_initv>:
 void spi_init( ){

	 char IOReg;

	 /* Outputs: MOSI and SCK out, all others inputs */
	 DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    18ae:	80 eb       	ldi	r24, 0xB0	; 176
    18b0:	84 b9       	out	0x04, r24	; 4
	 /* Enable SPI, Master, CPOL=0, CPHA=0 set clock rate fck/64 */
	 SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR1 );	// POSSIBLE ERROR: PULLING DATA HIGH
    18b2:	82 e5       	ldi	r24, 0x52	; 82
    18b4:	8c bd       	out	0x2c, r24	; 44
	 
	 /* Clear the SPIF bit in SPSR */
	 IOReg = SPSR;
    18b6:	8d b5       	in	r24, 0x2d	; 45
	 IOReg = SPDR;
    18b8:	8e b5       	in	r24, 0x2e	; 46

	 spi_deselect( );
    18ba:	f7 cf       	rjmp	.-18     	; 0x18aa <_Z12spi_deselectv>
    18bc:	08 95       	ret

000018be <_Z19spi_master_transmith>:

 // This routine exchanges 1 byte with the SPI port.
 unsigned char spi_master_transmit( unsigned char cData )
 {

	 SPDR  = cData;	// Set Pointer to beginning of String
    18be:	8e bd       	out	0x2e, r24	; 46
	 /* wait until Char is sent */
	 while ( ! (SPSR & ( 1 << SPIF ))){
    18c0:	0d b4       	in	r0, 0x2d	; 45
    18c2:	07 fe       	sbrs	r0, 7
    18c4:	fd cf       	rjmp	.-6      	; 0x18c0 <_Z19spi_master_transmith+0x2>
		 ;
	 }

	 return SPDR;
    18c6:	8e b5       	in	r24, 0x2e	; 46
 }
    18c8:	08 95       	ret

000018ca <_Z8TWI_INITv>:

}

void TWI_ClearFlagAndEnableWithAck()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
    18ca:	e4 e6       	ldi	r30, 0x64	; 100
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 77       	andi	r24, 0x7F	; 127
    18d2:	80 83       	st	Z, r24
    18d4:	ec eb       	ldi	r30, 0xBC	; 188
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8e 7f       	andi	r24, 0xFE	; 254
    18dc:	80 83       	st	Z, r24
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	80 93 b8 00 	sts	0x00B8, r24
    18e4:	e9 eb       	ldi	r30, 0xB9	; 185
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8d 7f       	andi	r24, 0xFD	; 253
    18ec:	80 83       	st	Z, r24
    18ee:	08 95       	ret

000018f0 <_Z8TWI_STOPv>:
}

void TWI_STOP(){
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    18f0:	84 e9       	ldi	r24, 0x94	; 148
    18f2:	80 93 bc 00 	sts	0x00BC, r24
    18f6:	08 95       	ret

000018f8 <_Z22TWI_StartCommunicationv>:
	
}

void TWI_StartCommunication(){
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    18f8:	84 ea       	ldi	r24, 0xA4	; 164
    18fa:	80 93 bc 00 	sts	0x00BC, r24
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
    18fe:	ec eb       	ldi	r30, 0xBC	; 188
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 23       	and	r24, r24
    1906:	ec f7       	brge	.-6      	; 0x1902 <_Z22TWI_StartCommunicationv+0xa>
}


void TWI_CheckStatusRegister(uint8_t Status){

	if( (TWSR & 0xF8) != Status ) {					// Error check for start condition
    1908:	80 91 b9 00 	lds	r24, 0x00B9
    190c:	08 95       	ret

0000190e <_Z16TWI_TransmitDatahh>:
	
}

void TWI_TransmitData(uint8_t TwiData, uint8_t StatusCode){
	
	TWDR = TwiData;
    190e:	80 93 bb 00 	sts	0x00BB, r24
}


void TWI_ClearFlagAndEnable(){

	TWCR = (1 << TWINT) | (1 << TWEN);				// Clear Flag and Enable
    1912:	84 e8       	ldi	r24, 0x84	; 132
    1914:	80 93 bc 00 	sts	0x00BC, r24
	
	TWDR = TwiData;
	/*After TWDR is loaded with SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the SLA+W present in TWDR*/
	TWI_ClearFlagAndEnable();
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
    1918:	ec eb       	ldi	r30, 0xBC	; 188
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	88 23       	and	r24, r24
    1920:	ec f7       	brge	.-6      	; 0x191c <_Z16TWI_TransmitDatahh+0xe>
}


void TWI_CheckStatusRegister(uint8_t Status){

	if( (TWSR & 0xF8) != Status ) {					// Error check for start condition
    1922:	80 91 b9 00 	lds	r24, 0x00B9
    1926:	08 95       	ret

00001928 <_Z12vs1011_nullsj>:
	}

	VS_PORT |= ( 1 << VS_DCS );				// Deactivate DCS

	return 0;
}
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	ec 01       	movw	r28, r24
    192e:	89 2b       	or	r24, r25
    1930:	21 f0       	breq	.+8      	; 0x193a <_Z12vs1011_nullsj+0x12>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c4 df       	rcall	.-120    	; 0x18be <_Z19spi_master_transmith>
    1936:	21 97       	sbiw	r28, 0x01	; 1
    1938:	e1 f7       	brne	.-8      	; 0x1932 <_Z12vs1011_nullsj+0xa>
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <_Z13vs1011_send32Pc>:
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	ec 01       	movw	r28, r24
    194a:	8c 01       	movw	r16, r24
    194c:	00 5e       	subi	r16, 0xE0	; 224
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	89 91       	ld	r24, Y+
    1952:	b5 df       	rcall	.-150    	; 0x18be <_Z19spi_master_transmith>
    1954:	c0 17       	cp	r28, r16
    1956:	d1 07       	cpc	r29, r17
    1958:	d9 f7       	brne	.-10     	; 0x1950 <_Z13vs1011_send32Pc+0x10>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <_Z8WriteSciht>:
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	18 2f       	mov	r17, r24
    196c:	c6 2f       	mov	r28, r22
    196e:	d7 2f       	mov	r29, r23
    1970:	58 98       	cbi	0x0b, 0	; 11
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	a4 df       	rcall	.-184    	; 0x18be <_Z19spi_master_transmith>
    1976:	81 2f       	mov	r24, r17
    1978:	a2 df       	rcall	.-188    	; 0x18be <_Z19spi_master_transmith>
    197a:	8d 2f       	mov	r24, r29
    197c:	a0 df       	rcall	.-192    	; 0x18be <_Z19spi_master_transmith>
    197e:	8c 2f       	mov	r24, r28
    1980:	9e df       	rcall	.-196    	; 0x18be <_Z19spi_master_transmith>
    1982:	58 9a       	sbi	0x0b, 0	; 11
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	08 95       	ret

0000198c <_Z16vs1011_hardresetv>:
    198c:	f8 94       	cli
    198e:	5b 98       	cbi	0x0b, 3	; 11
    1990:	00 00       	nop
    1992:	5b 9a       	sbi	0x0b, 3	; 11
    1994:	4a 9b       	sbis	0x09, 2	; 9
    1996:	fe cf       	rjmp	.-4      	; 0x1994 <_Z16vs1011_hardresetv+0x8>
    1998:	80 e2       	ldi	r24, 0x20	; 32
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	c5 df       	rcall	.-118    	; 0x1928 <_Z12vs1011_nullsj>
    199e:	60 ee       	ldi	r22, 0xE0	; 224
    19a0:	7e ea       	ldi	r23, 0xAE	; 174
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	df df       	rcall	.-66     	; 0x1964 <_Z8WriteSciht>
    19a6:	58 9a       	sbi	0x0b, 0	; 11
    19a8:	78 94       	sei
    19aa:	08 95       	ret

000019ac <_Z16vs1011_softresetv>:
    19ac:	f8 94       	cli
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	98 e0       	ldi	r25, 0x08	; 8
    19b2:	ba df       	rcall	.-140    	; 0x1928 <_Z12vs1011_nullsj>
    19b4:	58 98       	cbi	0x0b, 0	; 11
    19b6:	64 e0       	ldi	r22, 0x04	; 4
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	d3 df       	rcall	.-90     	; 0x1964 <_Z8WriteSciht>
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	8a 95       	dec	r24
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <_Z16vs1011_softresetv+0x14>
    19c4:	00 00       	nop
    19c6:	4a 9b       	sbis	0x09, 2	; 9
    19c8:	fe cf       	rjmp	.-4      	; 0x19c6 <_Z16vs1011_softresetv+0x1a>
    19ca:	58 9a       	sbi	0x0b, 0	; 11
    19cc:	78 94       	sei
    19ce:	08 95       	ret

000019d0 <_Z16vs1011_setvolumehh>:
    19d0:	24 e6       	ldi	r18, 0x64	; 100
    19d2:	26 1b       	sub	r18, r22
    19d4:	32 2f       	mov	r19, r18
    19d6:	31 95       	neg	r19
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	13 16       	cp	r1, r19
    19dc:	34 f4       	brge	.+12     	; 0x19ea <_Z16vs1011_setvolumehh+0x1a>
    19de:	bc 01       	movw	r22, r24
    19e0:	63 0f       	add	r22, r19
    19e2:	71 1d       	adc	r23, r1
    19e4:	37 fd       	sbrc	r19, 7
    19e6:	7a 95       	dec	r23
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <_Z16vs1011_setvolumehh+0x1c>
    19ea:	bc 01       	movw	r22, r24
    19ec:	76 2f       	mov	r23, r22
    19ee:	66 27       	eor	r22, r22
    19f0:	68 0f       	add	r22, r24
    19f2:	79 1f       	adc	r23, r25
    19f4:	12 16       	cp	r1, r18
    19f6:	24 f4       	brge	.+8      	; 0x1a00 <_Z16vs1011_setvolumehh+0x30>
    19f8:	62 0f       	add	r22, r18
    19fa:	71 1d       	adc	r23, r1
    19fc:	27 fd       	sbrc	r18, 7
    19fe:	7a 95       	dec	r23
    1a00:	58 98       	cbi	0x0b, 0	; 11
    1a02:	8b e0       	ldi	r24, 0x0B	; 11
    1a04:	af df       	rcall	.-162    	; 0x1964 <_Z8WriteSciht>
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	ab df       	rcall	.-170    	; 0x1964 <_Z8WriteSciht>
    1a0e:	58 9a       	sbi	0x0b, 0	; 11
    1a10:	08 95       	ret

00001a12 <_Z19vs1011_setbassboosth>:
    1a12:	68 2f       	mov	r22, r24
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	a5 cf       	rjmp	.-182    	; 0x1964 <_Z8WriteSciht>
    1a1a:	08 95       	ret

00001a1c <_Z18sinewave_beep_testh>:
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	c8 2f       	mov	r28, r24
    1a22:	88 e0       	ldi	r24, 0x08	; 8
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	80 df       	rcall	.-256    	; 0x1928 <_Z12vs1011_nullsj>
    1a28:	f8 94       	cli
    1a2a:	60 e2       	ldi	r22, 0x20	; 32
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	99 df       	rcall	.-206    	; 0x1964 <_Z8WriteSciht>
    1a32:	d4 e6       	ldi	r29, 0x64	; 100
    1a34:	1d c0       	rjmp	.+58     	; 0x1a70 <_Z18sinewave_beep_testh+0x54>
    1a36:	e9 ef       	ldi	r30, 0xF9	; 249
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	31 97       	sbiw	r30, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <_Z18sinewave_beep_testh+0x1e>
    1a3e:	00 c0       	rjmp	.+0      	; 0x1a40 <_Z18sinewave_beep_testh+0x24>
    1a40:	00 00       	nop
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	c1 f7       	brne	.-16     	; 0x1a36 <_Z18sinewave_beep_testh+0x1a>
    1a46:	85 e4       	ldi	r24, 0x45	; 69
    1a48:	3a df       	rcall	.-396    	; 0x18be <_Z19spi_master_transmith>
    1a4a:	88 e7       	ldi	r24, 0x78	; 120
    1a4c:	38 df       	rcall	.-400    	; 0x18be <_Z19spi_master_transmith>
    1a4e:	89 e6       	ldi	r24, 0x69	; 105
    1a50:	36 df       	rcall	.-404    	; 0x18be <_Z19spi_master_transmith>
    1a52:	84 e7       	ldi	r24, 0x74	; 116
    1a54:	34 df       	rcall	.-408    	; 0x18be <_Z19spi_master_transmith>
    1a56:	88 e0       	ldi	r24, 0x08	; 8
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	66 df       	rcall	.-308    	; 0x1928 <_Z12vs1011_nullsj>
    1a5c:	8d 2f       	mov	r24, r29
    1a5e:	e9 ef       	ldi	r30, 0xF9	; 249
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	31 97       	sbiw	r30, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <_Z18sinewave_beep_testh+0x46>
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <_Z18sinewave_beep_testh+0x4c>
    1a68:	00 00       	nop
    1a6a:	81 50       	subi	r24, 0x01	; 1
    1a6c:	c1 f7       	brne	.-16     	; 0x1a5e <_Z18sinewave_beep_testh+0x42>
    1a6e:	c1 50       	subi	r28, 0x01	; 1
    1a70:	cc 23       	and	r28, r28
    1a72:	69 f0       	breq	.+26     	; 0x1a8e <_Z18sinewave_beep_testh+0x72>
    1a74:	83 e5       	ldi	r24, 0x53	; 83
    1a76:	23 df       	rcall	.-442    	; 0x18be <_Z19spi_master_transmith>
    1a78:	8f ee       	ldi	r24, 0xEF	; 239
    1a7a:	21 df       	rcall	.-446    	; 0x18be <_Z19spi_master_transmith>
    1a7c:	8e e6       	ldi	r24, 0x6E	; 110
    1a7e:	1f df       	rcall	.-450    	; 0x18be <_Z19spi_master_transmith>
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	1d df       	rcall	.-454    	; 0x18be <_Z19spi_master_transmith>
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	4f df       	rcall	.-354    	; 0x1928 <_Z12vs1011_nullsj>
    1a8a:	8d 2f       	mov	r24, r29
    1a8c:	d4 cf       	rjmp	.-88     	; 0x1a36 <_Z18sinewave_beep_testh+0x1a>
    1a8e:	78 94       	sei
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <_Z10InitVS1011v>:

/* Initialization */
void InitVS1011(void) {
	VS_PORT &= ~( 1 << VS_RESET );			// Reset Vs1011
    1a96:	5b 98       	cbi	0x0b, 3	; 11
	VS_PORT |= ( 1 << VS_CS );				// CS High
    1a98:	58 9a       	sbi	0x0b, 0	; 11
	VS_PORT |= ( 1 << VS_DCS );				// DCS High
    1a9a:	59 9a       	sbi	0x0b, 1	; 11
	VS_PORT |= ( 1 << VS_RESET );			// Out of Reset
    1a9c:	5b 9a       	sbi	0x0b, 3	; 11
	// SCI_MODE_INT_VAL separately defined for each (7) connection case
	WriteSci( SCI_MODE, SCI_MODE_INIT_VAL );
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	78 e0       	ldi	r23, 0x08	; 8
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	5f cf       	rjmp	.-322    	; 0x1964 <_Z8WriteSciht>
    1aa6:	08 95       	ret

00001aa8 <_Z22VS1011setDataDirectionv>:
	// for how long to wait
}

void VS1011setDataDirection(void) {
	/* Set Data Direction for VS_PORT */
	VS_PORT_DDR |=	0b11111011;
    1aa8:	8a b1       	in	r24, 0x0a	; 10
    1aaa:	8b 6f       	ori	r24, 0xFB	; 251
    1aac:	8a b9       	out	0x0a, r24	; 10
    1aae:	08 95       	ret

00001ab0 <vfprintf>:
    1ab0:	2f 92       	push	r2
    1ab2:	3f 92       	push	r3
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	63 97       	sbiw	r28, 0x13	; 19
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	6c 01       	movw	r12, r24
    1ae6:	4b 01       	movw	r8, r22
    1ae8:	2a 01       	movw	r4, r20
    1aea:	fc 01       	movw	r30, r24
    1aec:	17 82       	std	Z+7, r1	; 0x07
    1aee:	16 82       	std	Z+6, r1	; 0x06
    1af0:	83 81       	ldd	r24, Z+3	; 0x03
    1af2:	81 ff       	sbrs	r24, 1
    1af4:	29 c3       	rjmp	.+1618   	; 0x2148 <vfprintf+0x698>
    1af6:	ae 01       	movw	r20, r28
    1af8:	4f 5f       	subi	r20, 0xFF	; 255
    1afa:	5f 4f       	sbci	r21, 0xFF	; 255
    1afc:	3a 01       	movw	r6, r20
    1afe:	f6 01       	movw	r30, r12
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	f4 01       	movw	r30, r8
    1b04:	93 fd       	sbrc	r25, 3
    1b06:	85 91       	lpm	r24, Z+
    1b08:	93 ff       	sbrs	r25, 3
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	4f 01       	movw	r8, r30
    1b0e:	88 23       	and	r24, r24
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <vfprintf+0x64>
    1b12:	16 c3       	rjmp	.+1580   	; 0x2140 <vfprintf+0x690>
    1b14:	85 32       	cpi	r24, 0x25	; 37
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <vfprintf+0x76>
    1b18:	93 fd       	sbrc	r25, 3
    1b1a:	85 91       	lpm	r24, Z+
    1b1c:	93 ff       	sbrs	r25, 3
    1b1e:	81 91       	ld	r24, Z+
    1b20:	4f 01       	movw	r8, r30
    1b22:	85 32       	cpi	r24, 0x25	; 37
    1b24:	31 f4       	brne	.+12     	; 0x1b32 <vfprintf+0x82>
    1b26:	b6 01       	movw	r22, r12
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	70 d6       	rcall	.+3296   	; 0x280c <fputc>
    1b2c:	52 01       	movw	r10, r4
    1b2e:	25 01       	movw	r4, r10
    1b30:	e6 cf       	rjmp	.-52     	; 0x1afe <vfprintf+0x4e>
    1b32:	10 e0       	ldi	r17, 0x00	; 0
    1b34:	f1 2c       	mov	r15, r1
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	20 32       	cpi	r18, 0x20	; 32
    1b3a:	a0 f4       	brcc	.+40     	; 0x1b64 <vfprintf+0xb4>
    1b3c:	8b 32       	cpi	r24, 0x2B	; 43
    1b3e:	69 f0       	breq	.+26     	; 0x1b5a <vfprintf+0xaa>
    1b40:	30 f4       	brcc	.+12     	; 0x1b4e <vfprintf+0x9e>
    1b42:	80 32       	cpi	r24, 0x20	; 32
    1b44:	59 f0       	breq	.+22     	; 0x1b5c <vfprintf+0xac>
    1b46:	83 32       	cpi	r24, 0x23	; 35
    1b48:	69 f4       	brne	.+26     	; 0x1b64 <vfprintf+0xb4>
    1b4a:	20 61       	ori	r18, 0x10	; 16
    1b4c:	2c c0       	rjmp	.+88     	; 0x1ba6 <vfprintf+0xf6>
    1b4e:	8d 32       	cpi	r24, 0x2D	; 45
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <vfprintf+0xb0>
    1b52:	80 33       	cpi	r24, 0x30	; 48
    1b54:	39 f4       	brne	.+14     	; 0x1b64 <vfprintf+0xb4>
    1b56:	21 60       	ori	r18, 0x01	; 1
    1b58:	26 c0       	rjmp	.+76     	; 0x1ba6 <vfprintf+0xf6>
    1b5a:	22 60       	ori	r18, 0x02	; 2
    1b5c:	24 60       	ori	r18, 0x04	; 4
    1b5e:	23 c0       	rjmp	.+70     	; 0x1ba6 <vfprintf+0xf6>
    1b60:	28 60       	ori	r18, 0x08	; 8
    1b62:	21 c0       	rjmp	.+66     	; 0x1ba6 <vfprintf+0xf6>
    1b64:	27 fd       	sbrc	r18, 7
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <vfprintf+0x106>
    1b68:	30 ed       	ldi	r19, 0xD0	; 208
    1b6a:	38 0f       	add	r19, r24
    1b6c:	3a 30       	cpi	r19, 0x0A	; 10
    1b6e:	78 f4       	brcc	.+30     	; 0x1b8e <vfprintf+0xde>
    1b70:	26 ff       	sbrs	r18, 6
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0xd0>
    1b74:	fa e0       	ldi	r31, 0x0A	; 10
    1b76:	1f 9f       	mul	r17, r31
    1b78:	30 0d       	add	r19, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	13 2f       	mov	r17, r19
    1b7e:	13 c0       	rjmp	.+38     	; 0x1ba6 <vfprintf+0xf6>
    1b80:	4a e0       	ldi	r20, 0x0A	; 10
    1b82:	f4 9e       	mul	r15, r20
    1b84:	30 0d       	add	r19, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	f3 2e       	mov	r15, r19
    1b8a:	20 62       	ori	r18, 0x20	; 32
    1b8c:	0c c0       	rjmp	.+24     	; 0x1ba6 <vfprintf+0xf6>
    1b8e:	8e 32       	cpi	r24, 0x2E	; 46
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <vfprintf+0xea>
    1b92:	26 fd       	sbrc	r18, 6
    1b94:	d5 c2       	rjmp	.+1450   	; 0x2140 <vfprintf+0x690>
    1b96:	20 64       	ori	r18, 0x40	; 64
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <vfprintf+0xf6>
    1b9a:	8c 36       	cpi	r24, 0x6C	; 108
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <vfprintf+0xf2>
    1b9e:	20 68       	ori	r18, 0x80	; 128
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <vfprintf+0xf6>
    1ba2:	88 36       	cpi	r24, 0x68	; 104
    1ba4:	41 f4       	brne	.+16     	; 0x1bb6 <vfprintf+0x106>
    1ba6:	f4 01       	movw	r30, r8
    1ba8:	93 fd       	sbrc	r25, 3
    1baa:	85 91       	lpm	r24, Z+
    1bac:	93 ff       	sbrs	r25, 3
    1bae:	81 91       	ld	r24, Z+
    1bb0:	4f 01       	movw	r8, r30
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	c1 cf       	rjmp	.-126    	; 0x1b38 <vfprintf+0x88>
    1bb6:	9b eb       	ldi	r25, 0xBB	; 187
    1bb8:	98 0f       	add	r25, r24
    1bba:	93 30       	cpi	r25, 0x03	; 3
    1bbc:	18 f4       	brcc	.+6      	; 0x1bc4 <vfprintf+0x114>
    1bbe:	20 61       	ori	r18, 0x10	; 16
    1bc0:	80 5e       	subi	r24, 0xE0	; 224
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <vfprintf+0x120>
    1bc4:	9b e9       	ldi	r25, 0x9B	; 155
    1bc6:	98 0f       	add	r25, r24
    1bc8:	93 30       	cpi	r25, 0x03	; 3
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <vfprintf+0x11e>
    1bcc:	64 c1       	rjmp	.+712    	; 0x1e96 <vfprintf+0x3e6>
    1bce:	2f 7e       	andi	r18, 0xEF	; 239
    1bd0:	26 ff       	sbrs	r18, 6
    1bd2:	16 e0       	ldi	r17, 0x06	; 6
    1bd4:	2f 73       	andi	r18, 0x3F	; 63
    1bd6:	32 2e       	mov	r3, r18
    1bd8:	85 36       	cpi	r24, 0x65	; 101
    1bda:	19 f4       	brne	.+6      	; 0x1be2 <vfprintf+0x132>
    1bdc:	20 64       	ori	r18, 0x40	; 64
    1bde:	32 2e       	mov	r3, r18
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <vfprintf+0x142>
    1be2:	86 36       	cpi	r24, 0x66	; 102
    1be4:	21 f4       	brne	.+8      	; 0x1bee <vfprintf+0x13e>
    1be6:	f2 2f       	mov	r31, r18
    1be8:	f0 68       	ori	r31, 0x80	; 128
    1bea:	3f 2e       	mov	r3, r31
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vfprintf+0x142>
    1bee:	11 11       	cpse	r17, r1
    1bf0:	11 50       	subi	r17, 0x01	; 1
    1bf2:	37 fe       	sbrs	r3, 7
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <vfprintf+0x154>
    1bf6:	1c 33       	cpi	r17, 0x3C	; 60
    1bf8:	50 f4       	brcc	.+20     	; 0x1c0e <vfprintf+0x15e>
    1bfa:	ee 24       	eor	r14, r14
    1bfc:	e3 94       	inc	r14
    1bfe:	e1 0e       	add	r14, r17
    1c00:	27 e0       	ldi	r18, 0x07	; 7
    1c02:	0b c0       	rjmp	.+22     	; 0x1c1a <vfprintf+0x16a>
    1c04:	18 30       	cpi	r17, 0x08	; 8
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <vfprintf+0x166>
    1c08:	27 e0       	ldi	r18, 0x07	; 7
    1c0a:	17 e0       	ldi	r17, 0x07	; 7
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <vfprintf+0x168>
    1c0e:	27 e0       	ldi	r18, 0x07	; 7
    1c10:	4c e3       	ldi	r20, 0x3C	; 60
    1c12:	e4 2e       	mov	r14, r20
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vfprintf+0x16a>
    1c16:	21 2f       	mov	r18, r17
    1c18:	e1 2c       	mov	r14, r1
    1c1a:	52 01       	movw	r10, r4
    1c1c:	44 e0       	ldi	r20, 0x04	; 4
    1c1e:	a4 0e       	add	r10, r20
    1c20:	b1 1c       	adc	r11, r1
    1c22:	f2 01       	movw	r30, r4
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	0e 2d       	mov	r16, r14
    1c2e:	a3 01       	movw	r20, r6
    1c30:	6d d4       	rcall	.+2266   	; 0x250c <__ftoa_engine>
    1c32:	2c 01       	movw	r4, r24
    1c34:	09 81       	ldd	r16, Y+1	; 0x01
    1c36:	00 ff       	sbrs	r16, 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x18e>
    1c3a:	03 ff       	sbrs	r16, 3
    1c3c:	07 c0       	rjmp	.+14     	; 0x1c4c <vfprintf+0x19c>
    1c3e:	31 fc       	sbrc	r3, 1
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <vfprintf+0x1a2>
    1c42:	32 fe       	sbrs	r3, 2
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <vfprintf+0x1a8>
    1c46:	30 e2       	ldi	r19, 0x20	; 32
    1c48:	23 2e       	mov	r2, r19
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <vfprintf+0x1aa>
    1c4c:	2d e2       	ldi	r18, 0x2D	; 45
    1c4e:	22 2e       	mov	r2, r18
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <vfprintf+0x1aa>
    1c52:	9b e2       	ldi	r25, 0x2B	; 43
    1c54:	29 2e       	mov	r2, r25
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfprintf+0x1aa>
    1c58:	21 2c       	mov	r2, r1
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	8c 70       	andi	r24, 0x0C	; 12
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <vfprintf+0x1b6>
    1c60:	21 10       	cpse	r2, r1
    1c62:	51 c2       	rjmp	.+1186   	; 0x2106 <vfprintf+0x656>
    1c64:	8d c2       	rjmp	.+1306   	; 0x2180 <vfprintf+0x6d0>
    1c66:	37 fe       	sbrs	r3, 7
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <vfprintf+0x1d8>
    1c6a:	e4 0c       	add	r14, r4
    1c6c:	04 ff       	sbrs	r16, 4
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <vfprintf+0x1c8>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	81 33       	cpi	r24, 0x31	; 49
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <vfprintf+0x1c8>
    1c76:	ea 94       	dec	r14
    1c78:	1e 14       	cp	r1, r14
    1c7a:	74 f5       	brge	.+92     	; 0x1cd8 <vfprintf+0x228>
    1c7c:	f8 e0       	ldi	r31, 0x08	; 8
    1c7e:	fe 15       	cp	r31, r14
    1c80:	78 f5       	brcc	.+94     	; 0x1ce0 <vfprintf+0x230>
    1c82:	88 e0       	ldi	r24, 0x08	; 8
    1c84:	e8 2e       	mov	r14, r24
    1c86:	2c c0       	rjmp	.+88     	; 0x1ce0 <vfprintf+0x230>
    1c88:	36 fc       	sbrc	r3, 6
    1c8a:	2a c0       	rjmp	.+84     	; 0x1ce0 <vfprintf+0x230>
    1c8c:	81 2f       	mov	r24, r17
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	84 15       	cp	r24, r4
    1c92:	95 05       	cpc	r25, r5
    1c94:	9c f0       	brlt	.+38     	; 0x1cbc <vfprintf+0x20c>
    1c96:	2c ef       	ldi	r18, 0xFC	; 252
    1c98:	42 16       	cp	r4, r18
    1c9a:	2f ef       	ldi	r18, 0xFF	; 255
    1c9c:	52 06       	cpc	r5, r18
    1c9e:	74 f0       	brlt	.+28     	; 0x1cbc <vfprintf+0x20c>
    1ca0:	43 2d       	mov	r20, r3
    1ca2:	40 68       	ori	r20, 0x80	; 128
    1ca4:	34 2e       	mov	r3, r20
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <vfprintf+0x20c>
    1ca8:	e2 e0       	ldi	r30, 0x02	; 2
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	ec 0f       	add	r30, r28
    1cae:	fd 1f       	adc	r31, r29
    1cb0:	e1 0f       	add	r30, r17
    1cb2:	f1 1d       	adc	r31, r1
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 33       	cpi	r24, 0x30	; 48
    1cb8:	19 f4       	brne	.+6      	; 0x1cc0 <vfprintf+0x210>
    1cba:	11 50       	subi	r17, 0x01	; 1
    1cbc:	11 11       	cpse	r17, r1
    1cbe:	f4 cf       	rjmp	.-24     	; 0x1ca8 <vfprintf+0x1f8>
    1cc0:	37 fe       	sbrs	r3, 7
    1cc2:	0e c0       	rjmp	.+28     	; 0x1ce0 <vfprintf+0x230>
    1cc4:	ee 24       	eor	r14, r14
    1cc6:	e3 94       	inc	r14
    1cc8:	e1 0e       	add	r14, r17
    1cca:	81 2f       	mov	r24, r17
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	48 16       	cp	r4, r24
    1cd0:	59 06       	cpc	r5, r25
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <vfprintf+0x22e>
    1cd4:	14 19       	sub	r17, r4
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <vfprintf+0x230>
    1cd8:	ee 24       	eor	r14, r14
    1cda:	e3 94       	inc	r14
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <vfprintf+0x230>
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	37 fe       	sbrs	r3, 7
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <vfprintf+0x240>
    1ce4:	14 14       	cp	r1, r4
    1ce6:	15 04       	cpc	r1, r5
    1ce8:	34 f4       	brge	.+12     	; 0x1cf6 <vfprintf+0x246>
    1cea:	c2 01       	movw	r24, r4
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <vfprintf+0x24a>
    1cf0:	85 e0       	ldi	r24, 0x05	; 5
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vfprintf+0x24a>
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	21 10       	cpse	r2, r1
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	11 23       	and	r17, r17
    1d00:	31 f0       	breq	.+12     	; 0x1d0e <vfprintf+0x25e>
    1d02:	21 2f       	mov	r18, r17
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	2f 2d       	mov	r18, r15
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	82 17       	cp	r24, r18
    1d14:	93 07       	cpc	r25, r19
    1d16:	14 f4       	brge	.+4      	; 0x1d1c <vfprintf+0x26c>
    1d18:	f8 1a       	sub	r15, r24
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <vfprintf+0x26e>
    1d1c:	f1 2c       	mov	r15, r1
    1d1e:	83 2d       	mov	r24, r3
    1d20:	89 70       	andi	r24, 0x09	; 9
    1d22:	41 f4       	brne	.+16     	; 0x1d34 <vfprintf+0x284>
    1d24:	ff 20       	and	r15, r15
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <vfprintf+0x284>
    1d28:	b6 01       	movw	r22, r12
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	6e d5       	rcall	.+2780   	; 0x280c <fputc>
    1d30:	fa 94       	dec	r15
    1d32:	f8 cf       	rjmp	.-16     	; 0x1d24 <vfprintf+0x274>
    1d34:	22 20       	and	r2, r2
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <vfprintf+0x290>
    1d38:	b6 01       	movw	r22, r12
    1d3a:	82 2d       	mov	r24, r2
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	66 d5       	rcall	.+2764   	; 0x280c <fputc>
    1d40:	33 fc       	sbrc	r3, 3
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <vfprintf+0x2a4>
    1d44:	ff 20       	and	r15, r15
    1d46:	31 f0       	breq	.+12     	; 0x1d54 <vfprintf+0x2a4>
    1d48:	b6 01       	movw	r22, r12
    1d4a:	80 e3       	ldi	r24, 0x30	; 48
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	5e d5       	rcall	.+2748   	; 0x280c <fputc>
    1d50:	fa 94       	dec	r15
    1d52:	f8 cf       	rjmp	.-16     	; 0x1d44 <vfprintf+0x294>
    1d54:	37 fe       	sbrs	r3, 7
    1d56:	58 c0       	rjmp	.+176    	; 0x1e08 <vfprintf+0x358>
    1d58:	94 2d       	mov	r25, r4
    1d5a:	85 2d       	mov	r24, r5
    1d5c:	57 fe       	sbrs	r5, 7
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x2b4>
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	29 2e       	mov	r2, r25
    1d66:	38 2e       	mov	r3, r24
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	a2 01       	movw	r20, r4
    1d6e:	4e 19       	sub	r20, r14
    1d70:	51 09       	sbc	r21, r1
    1d72:	5d 87       	std	Y+13, r21	; 0x0d
    1d74:	4c 87       	std	Y+12, r20	; 0x0c
    1d76:	a2 01       	movw	r20, r4
    1d78:	42 19       	sub	r20, r2
    1d7a:	53 09       	sbc	r21, r3
    1d7c:	5f 87       	std	Y+15, r21	; 0x0f
    1d7e:	4e 87       	std	Y+14, r20	; 0x0e
    1d80:	61 2f       	mov	r22, r17
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	44 27       	eor	r20, r20
    1d86:	55 27       	eor	r21, r21
    1d88:	46 1b       	sub	r20, r22
    1d8a:	57 0b       	sbc	r21, r23
    1d8c:	59 8b       	std	Y+17, r21	; 0x11
    1d8e:	48 8b       	std	Y+16, r20	; 0x10
    1d90:	5f ef       	ldi	r21, 0xFF	; 255
    1d92:	25 16       	cp	r2, r21
    1d94:	35 06       	cpc	r3, r21
    1d96:	41 f4       	brne	.+16     	; 0x1da8 <vfprintf+0x2f8>
    1d98:	b6 01       	movw	r22, r12
    1d9a:	8e e2       	ldi	r24, 0x2E	; 46
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	2a 8b       	std	Y+18, r18	; 0x12
    1da0:	3b 8b       	std	Y+19, r19	; 0x13
    1da2:	34 d5       	rcall	.+2664   	; 0x280c <fputc>
    1da4:	3b 89       	ldd	r19, Y+19	; 0x13
    1da6:	2a 89       	ldd	r18, Y+18	; 0x12
    1da8:	42 14       	cp	r4, r2
    1daa:	53 04       	cpc	r5, r3
    1dac:	6c f0       	brlt	.+26     	; 0x1dc8 <vfprintf+0x318>
    1dae:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db0:	5d 85       	ldd	r21, Y+13	; 0x0d
    1db2:	42 15       	cp	r20, r2
    1db4:	53 05       	cpc	r21, r3
    1db6:	44 f4       	brge	.+16     	; 0x1dc8 <vfprintf+0x318>
    1db8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dba:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	e6 0d       	add	r30, r6
    1dc2:	f7 1d       	adc	r31, r7
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <vfprintf+0x31a>
    1dc8:	80 e3       	ldi	r24, 0x30	; 48
    1dca:	51 e0       	ldi	r21, 0x01	; 1
    1dcc:	25 1a       	sub	r2, r21
    1dce:	31 08       	sbc	r3, r1
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	48 89       	ldd	r20, Y+16	; 0x10
    1dd6:	59 89       	ldd	r21, Y+17	; 0x11
    1dd8:	24 16       	cp	r2, r20
    1dda:	35 06       	cpc	r3, r21
    1ddc:	44 f0       	brlt	.+16     	; 0x1dee <vfprintf+0x33e>
    1dde:	b6 01       	movw	r22, r12
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	2a 8b       	std	Y+18, r18	; 0x12
    1de4:	3b 8b       	std	Y+19, r19	; 0x13
    1de6:	12 d5       	rcall	.+2596   	; 0x280c <fputc>
    1de8:	2a 89       	ldd	r18, Y+18	; 0x12
    1dea:	3b 89       	ldd	r19, Y+19	; 0x13
    1dec:	d1 cf       	rjmp	.-94     	; 0x1d90 <vfprintf+0x2e0>
    1dee:	24 14       	cp	r2, r4
    1df0:	35 04       	cpc	r3, r5
    1df2:	39 f4       	brne	.+14     	; 0x1e02 <vfprintf+0x352>
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	96 33       	cpi	r25, 0x36	; 54
    1df8:	18 f4       	brcc	.+6      	; 0x1e00 <vfprintf+0x350>
    1dfa:	95 33       	cpi	r25, 0x35	; 53
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <vfprintf+0x352>
    1dfe:	04 ff       	sbrs	r16, 4
    1e00:	81 e3       	ldi	r24, 0x31	; 49
    1e02:	b6 01       	movw	r22, r12
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	45 c0       	rjmp	.+138    	; 0x1e92 <vfprintf+0x3e2>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	81 33       	cpi	r24, 0x31	; 49
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <vfprintf+0x360>
    1e0e:	0f 7e       	andi	r16, 0xEF	; 239
    1e10:	b6 01       	movw	r22, r12
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	fb d4       	rcall	.+2550   	; 0x280c <fputc>
    1e16:	11 11       	cpse	r17, r1
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <vfprintf+0x374>
    1e1a:	34 fc       	sbrc	r3, 4
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <vfprintf+0x39a>
    1e1e:	85 e6       	ldi	r24, 0x65	; 101
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	15 c0       	rjmp	.+42     	; 0x1e4e <vfprintf+0x39e>
    1e24:	b6 01       	movw	r22, r12
    1e26:	8e e2       	ldi	r24, 0x2E	; 46
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	f0 d4       	rcall	.+2528   	; 0x280c <fputc>
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	ee 24       	eor	r14, r14
    1e30:	e3 94       	inc	r14
    1e32:	e8 0e       	add	r14, r24
    1e34:	f3 01       	movw	r30, r6
    1e36:	e8 0f       	add	r30, r24
    1e38:	f1 1d       	adc	r31, r1
    1e3a:	80 81       	ld	r24, Z
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	e5 d4       	rcall	.+2506   	; 0x280c <fputc>
    1e42:	11 50       	subi	r17, 0x01	; 1
    1e44:	8e 2d       	mov	r24, r14
    1e46:	99 f7       	brne	.-26     	; 0x1e2e <vfprintf+0x37e>
    1e48:	e8 cf       	rjmp	.-48     	; 0x1e1a <vfprintf+0x36a>
    1e4a:	85 e4       	ldi	r24, 0x45	; 69
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	b6 01       	movw	r22, r12
    1e50:	dd d4       	rcall	.+2490   	; 0x280c <fputc>
    1e52:	57 fc       	sbrc	r5, 7
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <vfprintf+0x3b0>
    1e56:	41 14       	cp	r4, r1
    1e58:	51 04       	cpc	r5, r1
    1e5a:	39 f4       	brne	.+14     	; 0x1e6a <vfprintf+0x3ba>
    1e5c:	04 ff       	sbrs	r16, 4
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <vfprintf+0x3ba>
    1e60:	51 94       	neg	r5
    1e62:	41 94       	neg	r4
    1e64:	51 08       	sbc	r5, r1
    1e66:	8d e2       	ldi	r24, 0x2D	; 45
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <vfprintf+0x3bc>
    1e6a:	8b e2       	ldi	r24, 0x2B	; 43
    1e6c:	b6 01       	movw	r22, r12
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	cd d4       	rcall	.+2458   	; 0x280c <fputc>
    1e72:	80 e3       	ldi	r24, 0x30	; 48
    1e74:	9a e0       	ldi	r25, 0x0A	; 10
    1e76:	49 16       	cp	r4, r25
    1e78:	51 04       	cpc	r5, r1
    1e7a:	2c f0       	brlt	.+10     	; 0x1e86 <vfprintf+0x3d6>
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	5a e0       	ldi	r21, 0x0A	; 10
    1e80:	45 1a       	sub	r4, r21
    1e82:	51 08       	sbc	r5, r1
    1e84:	f7 cf       	rjmp	.-18     	; 0x1e74 <vfprintf+0x3c4>
    1e86:	b6 01       	movw	r22, r12
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	c0 d4       	rcall	.+2432   	; 0x280c <fputc>
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	c2 01       	movw	r24, r4
    1e90:	c0 96       	adiw	r24, 0x30	; 48
    1e92:	bc d4       	rcall	.+2424   	; 0x280c <fputc>
    1e94:	4c c1       	rjmp	.+664    	; 0x212e <vfprintf+0x67e>
    1e96:	83 36       	cpi	r24, 0x63	; 99
    1e98:	31 f0       	breq	.+12     	; 0x1ea6 <vfprintf+0x3f6>
    1e9a:	83 37       	cpi	r24, 0x73	; 115
    1e9c:	79 f0       	breq	.+30     	; 0x1ebc <vfprintf+0x40c>
    1e9e:	83 35       	cpi	r24, 0x53	; 83
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <vfprintf+0x3f4>
    1ea2:	54 c0       	rjmp	.+168    	; 0x1f4c <vfprintf+0x49c>
    1ea4:	20 c0       	rjmp	.+64     	; 0x1ee6 <vfprintf+0x436>
    1ea6:	52 01       	movw	r10, r4
    1ea8:	e2 e0       	ldi	r30, 0x02	; 2
    1eaa:	ae 0e       	add	r10, r30
    1eac:	b1 1c       	adc	r11, r1
    1eae:	f2 01       	movw	r30, r4
    1eb0:	80 81       	ld	r24, Z
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	01 e0       	ldi	r16, 0x01	; 1
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	23 01       	movw	r4, r6
    1eba:	13 c0       	rjmp	.+38     	; 0x1ee2 <vfprintf+0x432>
    1ebc:	52 01       	movw	r10, r4
    1ebe:	f2 e0       	ldi	r31, 0x02	; 2
    1ec0:	af 0e       	add	r10, r31
    1ec2:	b1 1c       	adc	r11, r1
    1ec4:	f2 01       	movw	r30, r4
    1ec6:	40 80       	ld	r4, Z
    1ec8:	51 80       	ldd	r5, Z+1	; 0x01
    1eca:	26 ff       	sbrs	r18, 6
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <vfprintf+0x424>
    1ece:	61 2f       	mov	r22, r17
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x428>
    1ed4:	6f ef       	ldi	r22, 0xFF	; 255
    1ed6:	7f ef       	ldi	r23, 0xFF	; 255
    1ed8:	c2 01       	movw	r24, r4
    1eda:	2a 8b       	std	Y+18, r18	; 0x12
    1edc:	4b d4       	rcall	.+2198   	; 0x2774 <strnlen>
    1ede:	8c 01       	movw	r16, r24
    1ee0:	2a 89       	ldd	r18, Y+18	; 0x12
    1ee2:	2f 77       	andi	r18, 0x7F	; 127
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <vfprintf+0x45e>
    1ee6:	52 01       	movw	r10, r4
    1ee8:	f2 e0       	ldi	r31, 0x02	; 2
    1eea:	af 0e       	add	r10, r31
    1eec:	b1 1c       	adc	r11, r1
    1eee:	f2 01       	movw	r30, r4
    1ef0:	40 80       	ld	r4, Z
    1ef2:	51 80       	ldd	r5, Z+1	; 0x01
    1ef4:	26 ff       	sbrs	r18, 6
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <vfprintf+0x44e>
    1ef8:	61 2f       	mov	r22, r17
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <vfprintf+0x452>
    1efe:	6f ef       	ldi	r22, 0xFF	; 255
    1f00:	7f ef       	ldi	r23, 0xFF	; 255
    1f02:	c2 01       	movw	r24, r4
    1f04:	2a 8b       	std	Y+18, r18	; 0x12
    1f06:	f6 d3       	rcall	.+2028   	; 0x26f4 <strnlen_P>
    1f08:	8c 01       	movw	r16, r24
    1f0a:	2a 89       	ldd	r18, Y+18	; 0x12
    1f0c:	20 68       	ori	r18, 0x80	; 128
    1f0e:	32 2e       	mov	r3, r18
    1f10:	23 fd       	sbrc	r18, 3
    1f12:	18 c0       	rjmp	.+48     	; 0x1f44 <vfprintf+0x494>
    1f14:	8f 2d       	mov	r24, r15
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	08 17       	cp	r16, r24
    1f1a:	19 07       	cpc	r17, r25
    1f1c:	98 f4       	brcc	.+38     	; 0x1f44 <vfprintf+0x494>
    1f1e:	b6 01       	movw	r22, r12
    1f20:	80 e2       	ldi	r24, 0x20	; 32
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	73 d4       	rcall	.+2278   	; 0x280c <fputc>
    1f26:	fa 94       	dec	r15
    1f28:	f5 cf       	rjmp	.-22     	; 0x1f14 <vfprintf+0x464>
    1f2a:	f2 01       	movw	r30, r4
    1f2c:	37 fc       	sbrc	r3, 7
    1f2e:	85 91       	lpm	r24, Z+
    1f30:	37 fe       	sbrs	r3, 7
    1f32:	81 91       	ld	r24, Z+
    1f34:	2f 01       	movw	r4, r30
    1f36:	b6 01       	movw	r22, r12
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	68 d4       	rcall	.+2256   	; 0x280c <fputc>
    1f3c:	f1 10       	cpse	r15, r1
    1f3e:	fa 94       	dec	r15
    1f40:	01 50       	subi	r16, 0x01	; 1
    1f42:	11 09       	sbc	r17, r1
    1f44:	01 15       	cp	r16, r1
    1f46:	11 05       	cpc	r17, r1
    1f48:	81 f7       	brne	.-32     	; 0x1f2a <vfprintf+0x47a>
    1f4a:	f1 c0       	rjmp	.+482    	; 0x212e <vfprintf+0x67e>
    1f4c:	84 36       	cpi	r24, 0x64	; 100
    1f4e:	11 f0       	breq	.+4      	; 0x1f54 <vfprintf+0x4a4>
    1f50:	89 36       	cpi	r24, 0x69	; 105
    1f52:	51 f5       	brne	.+84     	; 0x1fa8 <vfprintf+0x4f8>
    1f54:	52 01       	movw	r10, r4
    1f56:	27 ff       	sbrs	r18, 7
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <vfprintf+0x4bc>
    1f5a:	f4 e0       	ldi	r31, 0x04	; 4
    1f5c:	af 0e       	add	r10, r31
    1f5e:	b1 1c       	adc	r11, r1
    1f60:	f2 01       	movw	r30, r4
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	0a c0       	rjmp	.+20     	; 0x1f80 <vfprintf+0x4d0>
    1f6c:	f2 e0       	ldi	r31, 0x02	; 2
    1f6e:	af 0e       	add	r10, r31
    1f70:	b1 1c       	adc	r11, r1
    1f72:	f2 01       	movw	r30, r4
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	07 2e       	mov	r0, r23
    1f7a:	00 0c       	add	r0, r0
    1f7c:	88 0b       	sbc	r24, r24
    1f7e:	99 0b       	sbc	r25, r25
    1f80:	2f 76       	andi	r18, 0x6F	; 111
    1f82:	32 2e       	mov	r3, r18
    1f84:	97 ff       	sbrs	r25, 7
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <vfprintf+0x4ea>
    1f88:	90 95       	com	r25
    1f8a:	80 95       	com	r24
    1f8c:	70 95       	com	r23
    1f8e:	61 95       	neg	r22
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	8f 4f       	sbci	r24, 0xFF	; 255
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	20 68       	ori	r18, 0x80	; 128
    1f98:	32 2e       	mov	r3, r18
    1f9a:	2a e0       	ldi	r18, 0x0A	; 10
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	a3 01       	movw	r20, r6
    1fa0:	6d d4       	rcall	.+2266   	; 0x287c <__ultoa_invert>
    1fa2:	e8 2e       	mov	r14, r24
    1fa4:	e6 18       	sub	r14, r6
    1fa6:	3e c0       	rjmp	.+124    	; 0x2024 <vfprintf+0x574>
    1fa8:	02 2f       	mov	r16, r18
    1faa:	85 37       	cpi	r24, 0x75	; 117
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0x506>
    1fae:	0f 7e       	andi	r16, 0xEF	; 239
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	1d c0       	rjmp	.+58     	; 0x1ff0 <vfprintf+0x540>
    1fb6:	09 7f       	andi	r16, 0xF9	; 249
    1fb8:	8f 36       	cpi	r24, 0x6F	; 111
    1fba:	91 f0       	breq	.+36     	; 0x1fe0 <vfprintf+0x530>
    1fbc:	18 f4       	brcc	.+6      	; 0x1fc4 <vfprintf+0x514>
    1fbe:	88 35       	cpi	r24, 0x58	; 88
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <vfprintf+0x528>
    1fc2:	be c0       	rjmp	.+380    	; 0x2140 <vfprintf+0x690>
    1fc4:	80 37       	cpi	r24, 0x70	; 112
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <vfprintf+0x51e>
    1fc8:	88 37       	cpi	r24, 0x78	; 120
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <vfprintf+0x520>
    1fcc:	b9 c0       	rjmp	.+370    	; 0x2140 <vfprintf+0x690>
    1fce:	00 61       	ori	r16, 0x10	; 16
    1fd0:	04 ff       	sbrs	r16, 4
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x536>
    1fd4:	04 60       	ori	r16, 0x04	; 4
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <vfprintf+0x536>
    1fd8:	24 ff       	sbrs	r18, 4
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <vfprintf+0x53c>
    1fdc:	06 60       	ori	r16, 0x06	; 6
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <vfprintf+0x53c>
    1fe0:	28 e0       	ldi	r18, 0x08	; 8
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <vfprintf+0x540>
    1fe6:	20 e1       	ldi	r18, 0x10	; 16
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x540>
    1fec:	20 e1       	ldi	r18, 0x10	; 16
    1fee:	32 e0       	ldi	r19, 0x02	; 2
    1ff0:	52 01       	movw	r10, r4
    1ff2:	07 ff       	sbrs	r16, 7
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <vfprintf+0x558>
    1ff6:	f4 e0       	ldi	r31, 0x04	; 4
    1ff8:	af 0e       	add	r10, r31
    1ffa:	b1 1c       	adc	r11, r1
    1ffc:	f2 01       	movw	r30, r4
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <vfprintf+0x568>
    2008:	f2 e0       	ldi	r31, 0x02	; 2
    200a:	af 0e       	add	r10, r31
    200c:	b1 1c       	adc	r11, r1
    200e:	f2 01       	movw	r30, r4
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a3 01       	movw	r20, r6
    201a:	30 d4       	rcall	.+2144   	; 0x287c <__ultoa_invert>
    201c:	e8 2e       	mov	r14, r24
    201e:	e6 18       	sub	r14, r6
    2020:	0f 77       	andi	r16, 0x7F	; 127
    2022:	30 2e       	mov	r3, r16
    2024:	36 fe       	sbrs	r3, 6
    2026:	0b c0       	rjmp	.+22     	; 0x203e <vfprintf+0x58e>
    2028:	33 2d       	mov	r19, r3
    202a:	3e 7f       	andi	r19, 0xFE	; 254
    202c:	e1 16       	cp	r14, r17
    202e:	50 f4       	brcc	.+20     	; 0x2044 <vfprintf+0x594>
    2030:	34 fe       	sbrs	r3, 4
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <vfprintf+0x598>
    2034:	32 fc       	sbrc	r3, 2
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <vfprintf+0x598>
    2038:	33 2d       	mov	r19, r3
    203a:	3e 7e       	andi	r19, 0xEE	; 238
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <vfprintf+0x598>
    203e:	0e 2d       	mov	r16, r14
    2040:	33 2d       	mov	r19, r3
    2042:	03 c0       	rjmp	.+6      	; 0x204a <vfprintf+0x59a>
    2044:	0e 2d       	mov	r16, r14
    2046:	01 c0       	rjmp	.+2      	; 0x204a <vfprintf+0x59a>
    2048:	01 2f       	mov	r16, r17
    204a:	34 ff       	sbrs	r19, 4
    204c:	0c c0       	rjmp	.+24     	; 0x2066 <vfprintf+0x5b6>
    204e:	fe 01       	movw	r30, r28
    2050:	ee 0d       	add	r30, r14
    2052:	f1 1d       	adc	r31, r1
    2054:	80 81       	ld	r24, Z
    2056:	80 33       	cpi	r24, 0x30	; 48
    2058:	11 f4       	brne	.+4      	; 0x205e <vfprintf+0x5ae>
    205a:	39 7e       	andi	r19, 0xE9	; 233
    205c:	08 c0       	rjmp	.+16     	; 0x206e <vfprintf+0x5be>
    205e:	32 ff       	sbrs	r19, 2
    2060:	05 c0       	rjmp	.+10     	; 0x206c <vfprintf+0x5bc>
    2062:	0e 5f       	subi	r16, 0xFE	; 254
    2064:	04 c0       	rjmp	.+8      	; 0x206e <vfprintf+0x5be>
    2066:	83 2f       	mov	r24, r19
    2068:	86 78       	andi	r24, 0x86	; 134
    206a:	09 f0       	breq	.+2      	; 0x206e <vfprintf+0x5be>
    206c:	0f 5f       	subi	r16, 0xFF	; 255
    206e:	33 fd       	sbrc	r19, 3
    2070:	12 c0       	rjmp	.+36     	; 0x2096 <vfprintf+0x5e6>
    2072:	30 ff       	sbrs	r19, 0
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <vfprintf+0x5d2>
    2076:	1e 2d       	mov	r17, r14
    2078:	0f 15       	cp	r16, r15
    207a:	18 f4       	brcc	.+6      	; 0x2082 <vfprintf+0x5d2>
    207c:	1f 0d       	add	r17, r15
    207e:	10 1b       	sub	r17, r16
    2080:	0f 2d       	mov	r16, r15
    2082:	0f 15       	cp	r16, r15
    2084:	60 f4       	brcc	.+24     	; 0x209e <vfprintf+0x5ee>
    2086:	b6 01       	movw	r22, r12
    2088:	80 e2       	ldi	r24, 0x20	; 32
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	3b 8b       	std	Y+19, r19	; 0x13
    208e:	be d3       	rcall	.+1916   	; 0x280c <fputc>
    2090:	0f 5f       	subi	r16, 0xFF	; 255
    2092:	3b 89       	ldd	r19, Y+19	; 0x13
    2094:	f6 cf       	rjmp	.-20     	; 0x2082 <vfprintf+0x5d2>
    2096:	0f 15       	cp	r16, r15
    2098:	10 f4       	brcc	.+4      	; 0x209e <vfprintf+0x5ee>
    209a:	f0 1a       	sub	r15, r16
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <vfprintf+0x5f0>
    209e:	f1 2c       	mov	r15, r1
    20a0:	34 ff       	sbrs	r19, 4
    20a2:	11 c0       	rjmp	.+34     	; 0x20c6 <vfprintf+0x616>
    20a4:	b6 01       	movw	r22, r12
    20a6:	80 e3       	ldi	r24, 0x30	; 48
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	3b 8b       	std	Y+19, r19	; 0x13
    20ac:	af d3       	rcall	.+1886   	; 0x280c <fputc>
    20ae:	3b 89       	ldd	r19, Y+19	; 0x13
    20b0:	32 ff       	sbrs	r19, 2
    20b2:	16 c0       	rjmp	.+44     	; 0x20e0 <vfprintf+0x630>
    20b4:	31 fd       	sbrc	r19, 1
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <vfprintf+0x60e>
    20b8:	88 e7       	ldi	r24, 0x78	; 120
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x612>
    20be:	88 e5       	ldi	r24, 0x58	; 88
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	b6 01       	movw	r22, r12
    20c4:	0c c0       	rjmp	.+24     	; 0x20de <vfprintf+0x62e>
    20c6:	83 2f       	mov	r24, r19
    20c8:	86 78       	andi	r24, 0x86	; 134
    20ca:	51 f0       	breq	.+20     	; 0x20e0 <vfprintf+0x630>
    20cc:	31 ff       	sbrs	r19, 1
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <vfprintf+0x624>
    20d0:	8b e2       	ldi	r24, 0x2B	; 43
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <vfprintf+0x626>
    20d4:	80 e2       	ldi	r24, 0x20	; 32
    20d6:	37 fd       	sbrc	r19, 7
    20d8:	8d e2       	ldi	r24, 0x2D	; 45
    20da:	b6 01       	movw	r22, r12
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	96 d3       	rcall	.+1836   	; 0x280c <fputc>
    20e0:	e1 16       	cp	r14, r17
    20e2:	30 f4       	brcc	.+12     	; 0x20f0 <vfprintf+0x640>
    20e4:	b6 01       	movw	r22, r12
    20e6:	80 e3       	ldi	r24, 0x30	; 48
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	90 d3       	rcall	.+1824   	; 0x280c <fputc>
    20ec:	11 50       	subi	r17, 0x01	; 1
    20ee:	f8 cf       	rjmp	.-16     	; 0x20e0 <vfprintf+0x630>
    20f0:	ea 94       	dec	r14
    20f2:	f3 01       	movw	r30, r6
    20f4:	ee 0d       	add	r30, r14
    20f6:	f1 1d       	adc	r31, r1
    20f8:	80 81       	ld	r24, Z
    20fa:	b6 01       	movw	r22, r12
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	86 d3       	rcall	.+1804   	; 0x280c <fputc>
    2100:	e1 10       	cpse	r14, r1
    2102:	f6 cf       	rjmp	.-20     	; 0x20f0 <vfprintf+0x640>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <vfprintf+0x67e>
    2106:	f4 e0       	ldi	r31, 0x04	; 4
    2108:	ff 15       	cp	r31, r15
    210a:	48 f5       	brcc	.+82     	; 0x215e <vfprintf+0x6ae>
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	f8 1a       	sub	r15, r24
    2110:	33 fe       	sbrs	r3, 3
    2112:	1d c0       	rjmp	.+58     	; 0x214e <vfprintf+0x69e>
    2114:	21 10       	cpse	r2, r1
    2116:	24 c0       	rjmp	.+72     	; 0x2160 <vfprintf+0x6b0>
    2118:	03 ff       	sbrs	r16, 3
    211a:	27 c0       	rjmp	.+78     	; 0x216a <vfprintf+0x6ba>
    211c:	0c e8       	ldi	r16, 0x8C	; 140
    211e:	10 e0       	ldi	r17, 0x00	; 0
    2120:	f3 2d       	mov	r31, r3
    2122:	f0 71       	andi	r31, 0x10	; 16
    2124:	3f 2e       	mov	r3, r31
    2126:	f8 01       	movw	r30, r16
    2128:	84 91       	lpm	r24, Z
    212a:	81 11       	cpse	r24, r1
    212c:	21 c0       	rjmp	.+66     	; 0x2170 <vfprintf+0x6c0>
    212e:	ff 20       	and	r15, r15
    2130:	09 f4       	brne	.+2      	; 0x2134 <vfprintf+0x684>
    2132:	fd cc       	rjmp	.-1542   	; 0x1b2e <vfprintf+0x7e>
    2134:	b6 01       	movw	r22, r12
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	68 d3       	rcall	.+1744   	; 0x280c <fputc>
    213c:	fa 94       	dec	r15
    213e:	f7 cf       	rjmp	.-18     	; 0x212e <vfprintf+0x67e>
    2140:	f6 01       	movw	r30, r12
    2142:	86 81       	ldd	r24, Z+6	; 0x06
    2144:	97 81       	ldd	r25, Z+7	; 0x07
    2146:	23 c0       	rjmp	.+70     	; 0x218e <vfprintf+0x6de>
    2148:	8f ef       	ldi	r24, 0xFF	; 255
    214a:	9f ef       	ldi	r25, 0xFF	; 255
    214c:	20 c0       	rjmp	.+64     	; 0x218e <vfprintf+0x6de>
    214e:	b6 01       	movw	r22, r12
    2150:	80 e2       	ldi	r24, 0x20	; 32
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	5b d3       	rcall	.+1718   	; 0x280c <fputc>
    2156:	fa 94       	dec	r15
    2158:	f1 10       	cpse	r15, r1
    215a:	f9 cf       	rjmp	.-14     	; 0x214e <vfprintf+0x69e>
    215c:	db cf       	rjmp	.-74     	; 0x2114 <vfprintf+0x664>
    215e:	f1 2c       	mov	r15, r1
    2160:	b6 01       	movw	r22, r12
    2162:	82 2d       	mov	r24, r2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	52 d3       	rcall	.+1700   	; 0x280c <fputc>
    2168:	d7 cf       	rjmp	.-82     	; 0x2118 <vfprintf+0x668>
    216a:	00 e9       	ldi	r16, 0x90	; 144
    216c:	10 e0       	ldi	r17, 0x00	; 0
    216e:	d8 cf       	rjmp	.-80     	; 0x2120 <vfprintf+0x670>
    2170:	31 10       	cpse	r3, r1
    2172:	80 52       	subi	r24, 0x20	; 32
    2174:	b6 01       	movw	r22, r12
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	49 d3       	rcall	.+1682   	; 0x280c <fputc>
    217a:	0f 5f       	subi	r16, 0xFF	; 255
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	d3 cf       	rjmp	.-90     	; 0x2126 <vfprintf+0x676>
    2180:	23 e0       	ldi	r18, 0x03	; 3
    2182:	2f 15       	cp	r18, r15
    2184:	10 f4       	brcc	.+4      	; 0x218a <vfprintf+0x6da>
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	c2 cf       	rjmp	.-124    	; 0x210e <vfprintf+0x65e>
    218a:	f1 2c       	mov	r15, r1
    218c:	c5 cf       	rjmp	.-118    	; 0x2118 <vfprintf+0x668>
    218e:	63 96       	adiw	r28, 0x13	; 19
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	9f 90       	pop	r9
    21b0:	8f 90       	pop	r8
    21b2:	7f 90       	pop	r7
    21b4:	6f 90       	pop	r6
    21b6:	5f 90       	pop	r5
    21b8:	4f 90       	pop	r4
    21ba:	3f 90       	pop	r3
    21bc:	2f 90       	pop	r2
    21be:	08 95       	ret

000021c0 <__divmodhi4>:
    21c0:	97 fb       	bst	r25, 7
    21c2:	07 2e       	mov	r0, r23
    21c4:	16 f4       	brtc	.+4      	; 0x21ca <__divmodhi4+0xa>
    21c6:	00 94       	com	r0
    21c8:	06 d0       	rcall	.+12     	; 0x21d6 <__divmodhi4_neg1>
    21ca:	77 fd       	sbrc	r23, 7
    21cc:	08 d0       	rcall	.+16     	; 0x21de <__divmodhi4_neg2>
    21ce:	62 d0       	rcall	.+196    	; 0x2294 <__udivmodhi4>
    21d0:	07 fc       	sbrc	r0, 7
    21d2:	05 d0       	rcall	.+10     	; 0x21de <__divmodhi4_neg2>
    21d4:	3e f4       	brtc	.+14     	; 0x21e4 <__divmodhi4_exit>

000021d6 <__divmodhi4_neg1>:
    21d6:	90 95       	com	r25
    21d8:	81 95       	neg	r24
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	08 95       	ret

000021de <__divmodhi4_neg2>:
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255

000021e4 <__divmodhi4_exit>:
    21e4:	08 95       	ret

000021e6 <__udivmodsi4>:
    21e6:	a1 e2       	ldi	r26, 0x21	; 33
    21e8:	1a 2e       	mov	r1, r26
    21ea:	aa 1b       	sub	r26, r26
    21ec:	bb 1b       	sub	r27, r27
    21ee:	fd 01       	movw	r30, r26
    21f0:	0d c0       	rjmp	.+26     	; 0x220c <__udivmodsi4_ep>

000021f2 <__udivmodsi4_loop>:
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	ee 1f       	adc	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	a2 17       	cp	r26, r18
    21fc:	b3 07       	cpc	r27, r19
    21fe:	e4 07       	cpc	r30, r20
    2200:	f5 07       	cpc	r31, r21
    2202:	20 f0       	brcs	.+8      	; 0x220c <__udivmodsi4_ep>
    2204:	a2 1b       	sub	r26, r18
    2206:	b3 0b       	sbc	r27, r19
    2208:	e4 0b       	sbc	r30, r20
    220a:	f5 0b       	sbc	r31, r21

0000220c <__udivmodsi4_ep>:
    220c:	66 1f       	adc	r22, r22
    220e:	77 1f       	adc	r23, r23
    2210:	88 1f       	adc	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	1a 94       	dec	r1
    2216:	69 f7       	brne	.-38     	; 0x21f2 <__udivmodsi4_loop>
    2218:	60 95       	com	r22
    221a:	70 95       	com	r23
    221c:	80 95       	com	r24
    221e:	90 95       	com	r25
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	bd 01       	movw	r22, r26
    2226:	cf 01       	movw	r24, r30
    2228:	08 95       	ret

0000222a <__divmodsi4>:
    222a:	05 2e       	mov	r0, r21
    222c:	97 fb       	bst	r25, 7
    222e:	16 f4       	brtc	.+4      	; 0x2234 <__divmodsi4+0xa>
    2230:	00 94       	com	r0
    2232:	0f d0       	rcall	.+30     	; 0x2252 <__negsi2>
    2234:	57 fd       	sbrc	r21, 7
    2236:	05 d0       	rcall	.+10     	; 0x2242 <__divmodsi4_neg2>
    2238:	d6 df       	rcall	.-84     	; 0x21e6 <__udivmodsi4>
    223a:	07 fc       	sbrc	r0, 7
    223c:	02 d0       	rcall	.+4      	; 0x2242 <__divmodsi4_neg2>
    223e:	46 f4       	brtc	.+16     	; 0x2250 <__divmodsi4_exit>
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <__negsi2>

00002242 <__divmodsi4_neg2>:
    2242:	50 95       	com	r21
    2244:	40 95       	com	r20
    2246:	30 95       	com	r19
    2248:	21 95       	neg	r18
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	4f 4f       	sbci	r20, 0xFF	; 255
    224e:	5f 4f       	sbci	r21, 0xFF	; 255

00002250 <__divmodsi4_exit>:
    2250:	08 95       	ret

00002252 <__negsi2>:
    2252:	90 95       	com	r25
    2254:	80 95       	com	r24
    2256:	70 95       	com	r23
    2258:	61 95       	neg	r22
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	08 95       	ret

00002262 <__umulhisi3>:
    2262:	a2 9f       	mul	r26, r18
    2264:	b0 01       	movw	r22, r0
    2266:	b3 9f       	mul	r27, r19
    2268:	c0 01       	movw	r24, r0
    226a:	a3 9f       	mul	r26, r19
    226c:	70 0d       	add	r23, r0
    226e:	81 1d       	adc	r24, r1
    2270:	11 24       	eor	r1, r1
    2272:	91 1d       	adc	r25, r1
    2274:	b2 9f       	mul	r27, r18
    2276:	70 0d       	add	r23, r0
    2278:	81 1d       	adc	r24, r1
    227a:	11 24       	eor	r1, r1
    227c:	91 1d       	adc	r25, r1
    227e:	08 95       	ret

00002280 <__muluhisi3>:
    2280:	f0 df       	rcall	.-32     	; 0x2262 <__umulhisi3>
    2282:	a5 9f       	mul	r26, r21
    2284:	90 0d       	add	r25, r0
    2286:	b4 9f       	mul	r27, r20
    2288:	90 0d       	add	r25, r0
    228a:	a4 9f       	mul	r26, r20
    228c:	80 0d       	add	r24, r0
    228e:	91 1d       	adc	r25, r1
    2290:	11 24       	eor	r1, r1
    2292:	08 95       	ret

00002294 <__udivmodhi4>:
    2294:	aa 1b       	sub	r26, r26
    2296:	bb 1b       	sub	r27, r27
    2298:	51 e1       	ldi	r21, 0x11	; 17
    229a:	07 c0       	rjmp	.+14     	; 0x22aa <__udivmodhi4_ep>

0000229c <__udivmodhi4_loop>:
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	a6 17       	cp	r26, r22
    22a2:	b7 07       	cpc	r27, r23
    22a4:	10 f0       	brcs	.+4      	; 0x22aa <__udivmodhi4_ep>
    22a6:	a6 1b       	sub	r26, r22
    22a8:	b7 0b       	sbc	r27, r23

000022aa <__udivmodhi4_ep>:
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	5a 95       	dec	r21
    22b0:	a9 f7       	brne	.-22     	; 0x229c <__udivmodhi4_loop>
    22b2:	80 95       	com	r24
    22b4:	90 95       	com	r25
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	08 95       	ret

000022bc <strtol>:
    22bc:	2f 92       	push	r2
    22be:	3f 92       	push	r3
    22c0:	4f 92       	push	r4
    22c2:	5f 92       	push	r5
    22c4:	6f 92       	push	r6
    22c6:	7f 92       	push	r7
    22c8:	8f 92       	push	r8
    22ca:	9f 92       	push	r9
    22cc:	af 92       	push	r10
    22ce:	bf 92       	push	r11
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	5c 01       	movw	r10, r24
    22e2:	6b 01       	movw	r12, r22
    22e4:	7a 01       	movw	r14, r20
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	19 f0       	breq	.+6      	; 0x22f2 <strtol+0x36>
    22ec:	fb 01       	movw	r30, r22
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	e1 14       	cp	r14, r1
    22f4:	f1 04       	cpc	r15, r1
    22f6:	29 f0       	breq	.+10     	; 0x2302 <strtol+0x46>
    22f8:	c7 01       	movw	r24, r14
    22fa:	02 97       	sbiw	r24, 0x02	; 2
    22fc:	83 97       	sbiw	r24, 0x23	; 35
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <strtol+0x46>
    2300:	ee c0       	rjmp	.+476    	; 0x24de <strtol+0x222>
    2302:	e5 01       	movw	r28, r10
    2304:	21 96       	adiw	r28, 0x01	; 1
    2306:	f5 01       	movw	r30, r10
    2308:	10 81       	ld	r17, Z
    230a:	81 2f       	mov	r24, r17
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	ea d1       	rcall	.+980    	; 0x26e4 <isspace>
    2310:	89 2b       	or	r24, r25
    2312:	11 f0       	breq	.+4      	; 0x2318 <strtol+0x5c>
    2314:	5e 01       	movw	r10, r28
    2316:	f5 cf       	rjmp	.-22     	; 0x2302 <strtol+0x46>
    2318:	1d 32       	cpi	r17, 0x2D	; 45
    231a:	29 f4       	brne	.+10     	; 0x2326 <strtol+0x6a>
    231c:	21 96       	adiw	r28, 0x01	; 1
    231e:	f5 01       	movw	r30, r10
    2320:	11 81       	ldd	r17, Z+1	; 0x01
    2322:	01 e0       	ldi	r16, 0x01	; 1
    2324:	07 c0       	rjmp	.+14     	; 0x2334 <strtol+0x78>
    2326:	1b 32       	cpi	r17, 0x2B	; 43
    2328:	21 f4       	brne	.+8      	; 0x2332 <strtol+0x76>
    232a:	e5 01       	movw	r28, r10
    232c:	22 96       	adiw	r28, 0x02	; 2
    232e:	f5 01       	movw	r30, r10
    2330:	11 81       	ldd	r17, Z+1	; 0x01
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	e1 14       	cp	r14, r1
    2336:	f1 04       	cpc	r15, r1
    2338:	59 f1       	breq	.+86     	; 0x2390 <strtol+0xd4>
    233a:	f0 e1       	ldi	r31, 0x10	; 16
    233c:	ef 16       	cp	r14, r31
    233e:	f1 04       	cpc	r15, r1
    2340:	61 f4       	brne	.+24     	; 0x235a <strtol+0x9e>
    2342:	10 33       	cpi	r17, 0x30	; 48
    2344:	e1 f4       	brne	.+56     	; 0x237e <strtol+0xc2>
    2346:	88 81       	ld	r24, Y
    2348:	8f 7d       	andi	r24, 0xDF	; 223
    234a:	88 35       	cpi	r24, 0x58	; 88
    234c:	69 f5       	brne	.+90     	; 0x23a8 <strtol+0xec>
    234e:	19 81       	ldd	r17, Y+1	; 0x01
    2350:	22 96       	adiw	r28, 0x02	; 2
    2352:	02 60       	ori	r16, 0x02	; 2
    2354:	70 e1       	ldi	r23, 0x10	; 16
    2356:	e7 2e       	mov	r14, r23
    2358:	f1 2c       	mov	r15, r1
    235a:	88 e0       	ldi	r24, 0x08	; 8
    235c:	e8 16       	cp	r14, r24
    235e:	f1 04       	cpc	r15, r1
    2360:	39 f1       	breq	.+78     	; 0x23b0 <strtol+0xf4>
    2362:	2c f4       	brge	.+10     	; 0x236e <strtol+0xb2>
    2364:	f2 e0       	ldi	r31, 0x02	; 2
    2366:	ef 16       	cp	r14, r31
    2368:	f1 04       	cpc	r15, r1
    236a:	c1 f1       	breq	.+112    	; 0x23dc <strtol+0x120>
    236c:	2a c0       	rjmp	.+84     	; 0x23c2 <strtol+0x106>
    236e:	8a e0       	ldi	r24, 0x0A	; 10
    2370:	e8 16       	cp	r14, r24
    2372:	f1 04       	cpc	r15, r1
    2374:	79 f0       	breq	.+30     	; 0x2394 <strtol+0xd8>
    2376:	e0 e1       	ldi	r30, 0x10	; 16
    2378:	ee 16       	cp	r14, r30
    237a:	f1 04       	cpc	r15, r1
    237c:	11 f5       	brne	.+68     	; 0x23c2 <strtol+0x106>
    237e:	50 e1       	ldi	r21, 0x10	; 16
    2380:	e5 2e       	mov	r14, r21
    2382:	f1 2c       	mov	r15, r1
    2384:	81 2c       	mov	r8, r1
    2386:	91 2c       	mov	r9, r1
    2388:	a1 2c       	mov	r10, r1
    238a:	68 e0       	ldi	r22, 0x08	; 8
    238c:	b6 2e       	mov	r11, r22
    238e:	2b c0       	rjmp	.+86     	; 0x23e6 <strtol+0x12a>
    2390:	10 33       	cpi	r17, 0x30	; 48
    2392:	c9 f2       	breq	.-78     	; 0x2346 <strtol+0x8a>
    2394:	3a e0       	ldi	r19, 0x0A	; 10
    2396:	e3 2e       	mov	r14, r19
    2398:	f1 2c       	mov	r15, r1
    239a:	4c ec       	ldi	r20, 0xCC	; 204
    239c:	84 2e       	mov	r8, r20
    239e:	98 2c       	mov	r9, r8
    23a0:	a8 2c       	mov	r10, r8
    23a2:	4c e0       	ldi	r20, 0x0C	; 12
    23a4:	b4 2e       	mov	r11, r20
    23a6:	1f c0       	rjmp	.+62     	; 0x23e6 <strtol+0x12a>
    23a8:	10 e3       	ldi	r17, 0x30	; 48
    23aa:	e1 14       	cp	r14, r1
    23ac:	f1 04       	cpc	r15, r1
    23ae:	a9 f6       	brne	.-86     	; 0x235a <strtol+0x9e>
    23b0:	98 e0       	ldi	r25, 0x08	; 8
    23b2:	e9 2e       	mov	r14, r25
    23b4:	f1 2c       	mov	r15, r1
    23b6:	81 2c       	mov	r8, r1
    23b8:	91 2c       	mov	r9, r1
    23ba:	a1 2c       	mov	r10, r1
    23bc:	20 e1       	ldi	r18, 0x10	; 16
    23be:	b2 2e       	mov	r11, r18
    23c0:	12 c0       	rjmp	.+36     	; 0x23e6 <strtol+0x12a>
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e8       	ldi	r25, 0x80	; 128
    23ca:	97 01       	movw	r18, r14
    23cc:	0f 2c       	mov	r0, r15
    23ce:	00 0c       	add	r0, r0
    23d0:	44 0b       	sbc	r20, r20
    23d2:	55 0b       	sbc	r21, r21
    23d4:	08 df       	rcall	.-496    	; 0x21e6 <__udivmodsi4>
    23d6:	49 01       	movw	r8, r18
    23d8:	5a 01       	movw	r10, r20
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <strtol+0x12a>
    23dc:	81 2c       	mov	r8, r1
    23de:	91 2c       	mov	r9, r1
    23e0:	a1 2c       	mov	r10, r1
    23e2:	80 e4       	ldi	r24, 0x40	; 64
    23e4:	b8 2e       	mov	r11, r24
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	a9 01       	movw	r20, r18
    23ee:	27 01       	movw	r4, r14
    23f0:	0f 2c       	mov	r0, r15
    23f2:	00 0c       	add	r0, r0
    23f4:	66 08       	sbc	r6, r6
    23f6:	77 08       	sbc	r7, r7
    23f8:	1e 01       	movw	r2, r28
    23fa:	e0 ed       	ldi	r30, 0xD0	; 208
    23fc:	e1 0f       	add	r30, r17
    23fe:	ea 30       	cpi	r30, 0x0A	; 10
    2400:	60 f0       	brcs	.+24     	; 0x241a <strtol+0x15e>
    2402:	8f eb       	ldi	r24, 0xBF	; 191
    2404:	81 0f       	add	r24, r17
    2406:	8a 31       	cpi	r24, 0x1A	; 26
    2408:	10 f4       	brcc	.+4      	; 0x240e <strtol+0x152>
    240a:	e9 ec       	ldi	r30, 0xC9	; 201
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <strtol+0x15c>
    240e:	8f e9       	ldi	r24, 0x9F	; 159
    2410:	81 0f       	add	r24, r17
    2412:	8a 31       	cpi	r24, 0x1A	; 26
    2414:	20 f5       	brcc	.+72     	; 0x245e <strtol+0x1a2>
    2416:	e9 ea       	ldi	r30, 0xA9	; 169
    2418:	e1 0f       	add	r30, r17
    241a:	8e 2f       	mov	r24, r30
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	8e 15       	cp	r24, r14
    2420:	9f 05       	cpc	r25, r15
    2422:	ec f4       	brge	.+58     	; 0x245e <strtol+0x1a2>
    2424:	67 fd       	sbrc	r22, 7
    2426:	17 c0       	rjmp	.+46     	; 0x2456 <strtol+0x19a>
    2428:	82 16       	cp	r8, r18
    242a:	93 06       	cpc	r9, r19
    242c:	a4 06       	cpc	r10, r20
    242e:	b5 06       	cpc	r11, r21
    2430:	88 f0       	brcs	.+34     	; 0x2454 <strtol+0x198>
    2432:	c3 01       	movw	r24, r6
    2434:	b2 01       	movw	r22, r4
    2436:	88 d2       	rcall	.+1296   	; 0x2948 <__mulsi3>
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	2e 0f       	add	r18, r30
    243e:	31 1d       	adc	r19, r1
    2440:	41 1d       	adc	r20, r1
    2442:	51 1d       	adc	r21, r1
    2444:	21 30       	cpi	r18, 0x01	; 1
    2446:	31 05       	cpc	r19, r1
    2448:	41 05       	cpc	r20, r1
    244a:	f0 e8       	ldi	r31, 0x80	; 128
    244c:	5f 07       	cpc	r21, r31
    244e:	10 f4       	brcc	.+4      	; 0x2454 <strtol+0x198>
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <strtol+0x19a>
    2454:	6f ef       	ldi	r22, 0xFF	; 255
    2456:	21 96       	adiw	r28, 0x01	; 1
    2458:	f1 01       	movw	r30, r2
    245a:	10 81       	ld	r17, Z
    245c:	cd cf       	rjmp	.-102    	; 0x23f8 <strtol+0x13c>
    245e:	80 2f       	mov	r24, r16
    2460:	81 70       	andi	r24, 0x01	; 1
    2462:	c1 14       	cp	r12, r1
    2464:	d1 04       	cpc	r13, r1
    2466:	71 f0       	breq	.+28     	; 0x2484 <strtol+0x1c8>
    2468:	66 23       	and	r22, r22
    246a:	29 f0       	breq	.+10     	; 0x2476 <strtol+0x1ba>
    246c:	21 97       	sbiw	r28, 0x01	; 1
    246e:	f6 01       	movw	r30, r12
    2470:	d1 83       	std	Z+1, r29	; 0x01
    2472:	c0 83       	st	Z, r28
    2474:	07 c0       	rjmp	.+14     	; 0x2484 <strtol+0x1c8>
    2476:	01 ff       	sbrs	r16, 1
    2478:	19 c0       	rjmp	.+50     	; 0x24ac <strtol+0x1f0>
    247a:	22 97       	sbiw	r28, 0x02	; 2
    247c:	f6 01       	movw	r30, r12
    247e:	d1 83       	std	Z+1, r29	; 0x01
    2480:	c0 83       	st	Z, r28
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <strtol+0x1f0>
    2484:	67 ff       	sbrs	r22, 7
    2486:	12 c0       	rjmp	.+36     	; 0x24ac <strtol+0x1f0>
    2488:	81 11       	cpse	r24, r1
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <strtol+0x1da>
    248c:	2f ef       	ldi	r18, 0xFF	; 255
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f ef       	ldi	r20, 0xFF	; 255
    2492:	5f e7       	ldi	r21, 0x7F	; 127
    2494:	04 c0       	rjmp	.+8      	; 0x249e <strtol+0x1e2>
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e8       	ldi	r21, 0x80	; 128
    249e:	82 e2       	ldi	r24, 0x22	; 34
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	90 93 4c 07 	sts	0x074C, r25
    24a6:	80 93 4b 07 	sts	0x074B, r24
    24aa:	16 c0       	rjmp	.+44     	; 0x24d8 <strtol+0x21c>
    24ac:	88 23       	and	r24, r24
    24ae:	41 f0       	breq	.+16     	; 0x24c0 <strtol+0x204>
    24b0:	50 95       	com	r21
    24b2:	40 95       	com	r20
    24b4:	30 95       	com	r19
    24b6:	21 95       	neg	r18
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	4f 4f       	sbci	r20, 0xFF	; 255
    24bc:	5f 4f       	sbci	r21, 0xFF	; 255
    24be:	0c c0       	rjmp	.+24     	; 0x24d8 <strtol+0x21c>
    24c0:	57 ff       	sbrs	r21, 7
    24c2:	0a c0       	rjmp	.+20     	; 0x24d8 <strtol+0x21c>
    24c4:	82 e2       	ldi	r24, 0x22	; 34
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	90 93 4c 07 	sts	0x074C, r25
    24cc:	80 93 4b 07 	sts	0x074B, r24
    24d0:	2f ef       	ldi	r18, 0xFF	; 255
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f ef       	ldi	r20, 0xFF	; 255
    24d6:	5f e7       	ldi	r21, 0x7F	; 127
    24d8:	b9 01       	movw	r22, r18
    24da:	ca 01       	movw	r24, r20
    24dc:	04 c0       	rjmp	.+8      	; 0x24e6 <strtol+0x22a>
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	ff 90       	pop	r15
    24f0:	ef 90       	pop	r14
    24f2:	df 90       	pop	r13
    24f4:	cf 90       	pop	r12
    24f6:	bf 90       	pop	r11
    24f8:	af 90       	pop	r10
    24fa:	9f 90       	pop	r9
    24fc:	8f 90       	pop	r8
    24fe:	7f 90       	pop	r7
    2500:	6f 90       	pop	r6
    2502:	5f 90       	pop	r5
    2504:	4f 90       	pop	r4
    2506:	3f 90       	pop	r3
    2508:	2f 90       	pop	r2
    250a:	08 95       	ret

0000250c <__ftoa_engine>:
    250c:	28 30       	cpi	r18, 0x08	; 8
    250e:	08 f0       	brcs	.+2      	; 0x2512 <__ftoa_engine+0x6>
    2510:	27 e0       	ldi	r18, 0x07	; 7
    2512:	33 27       	eor	r19, r19
    2514:	da 01       	movw	r26, r20
    2516:	99 0f       	add	r25, r25
    2518:	31 1d       	adc	r19, r1
    251a:	87 fd       	sbrc	r24, 7
    251c:	91 60       	ori	r25, 0x01	; 1
    251e:	00 96       	adiw	r24, 0x00	; 0
    2520:	61 05       	cpc	r22, r1
    2522:	71 05       	cpc	r23, r1
    2524:	39 f4       	brne	.+14     	; 0x2534 <__ftoa_engine+0x28>
    2526:	32 60       	ori	r19, 0x02	; 2
    2528:	2e 5f       	subi	r18, 0xFE	; 254
    252a:	3d 93       	st	X+, r19
    252c:	30 e3       	ldi	r19, 0x30	; 48
    252e:	2a 95       	dec	r18
    2530:	e1 f7       	brne	.-8      	; 0x252a <__ftoa_engine+0x1e>
    2532:	08 95       	ret
    2534:	9f 3f       	cpi	r25, 0xFF	; 255
    2536:	30 f0       	brcs	.+12     	; 0x2544 <__ftoa_engine+0x38>
    2538:	80 38       	cpi	r24, 0x80	; 128
    253a:	71 05       	cpc	r23, r1
    253c:	61 05       	cpc	r22, r1
    253e:	09 f0       	breq	.+2      	; 0x2542 <__ftoa_engine+0x36>
    2540:	3c 5f       	subi	r19, 0xFC	; 252
    2542:	3c 5f       	subi	r19, 0xFC	; 252
    2544:	3d 93       	st	X+, r19
    2546:	91 30       	cpi	r25, 0x01	; 1
    2548:	08 f0       	brcs	.+2      	; 0x254c <__ftoa_engine+0x40>
    254a:	80 68       	ori	r24, 0x80	; 128
    254c:	91 1d       	adc	r25, r1
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	1f 93       	push	r17
    2554:	0f 93       	push	r16
    2556:	ff 92       	push	r15
    2558:	ef 92       	push	r14
    255a:	19 2f       	mov	r17, r25
    255c:	98 7f       	andi	r25, 0xF8	; 248
    255e:	96 95       	lsr	r25
    2560:	e9 2f       	mov	r30, r25
    2562:	96 95       	lsr	r25
    2564:	96 95       	lsr	r25
    2566:	e9 0f       	add	r30, r25
    2568:	ff 27       	eor	r31, r31
    256a:	e2 51       	subi	r30, 0x12	; 18
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	99 27       	eor	r25, r25
    2570:	33 27       	eor	r19, r19
    2572:	ee 24       	eor	r14, r14
    2574:	ff 24       	eor	r15, r15
    2576:	a7 01       	movw	r20, r14
    2578:	e7 01       	movw	r28, r14
    257a:	05 90       	lpm	r0, Z+
    257c:	08 94       	sec
    257e:	07 94       	ror	r0
    2580:	28 f4       	brcc	.+10     	; 0x258c <__ftoa_engine+0x80>
    2582:	36 0f       	add	r19, r22
    2584:	e7 1e       	adc	r14, r23
    2586:	f8 1e       	adc	r15, r24
    2588:	49 1f       	adc	r20, r25
    258a:	51 1d       	adc	r21, r1
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	88 1f       	adc	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	06 94       	lsr	r0
    2596:	a1 f7       	brne	.-24     	; 0x2580 <__ftoa_engine+0x74>
    2598:	05 90       	lpm	r0, Z+
    259a:	07 94       	ror	r0
    259c:	28 f4       	brcc	.+10     	; 0x25a8 <__ftoa_engine+0x9c>
    259e:	e7 0e       	add	r14, r23
    25a0:	f8 1e       	adc	r15, r24
    25a2:	49 1f       	adc	r20, r25
    25a4:	56 1f       	adc	r21, r22
    25a6:	c1 1d       	adc	r28, r1
    25a8:	77 0f       	add	r23, r23
    25aa:	88 1f       	adc	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	66 1f       	adc	r22, r22
    25b0:	06 94       	lsr	r0
    25b2:	a1 f7       	brne	.-24     	; 0x259c <__ftoa_engine+0x90>
    25b4:	05 90       	lpm	r0, Z+
    25b6:	07 94       	ror	r0
    25b8:	28 f4       	brcc	.+10     	; 0x25c4 <__ftoa_engine+0xb8>
    25ba:	f8 0e       	add	r15, r24
    25bc:	49 1f       	adc	r20, r25
    25be:	56 1f       	adc	r21, r22
    25c0:	c7 1f       	adc	r28, r23
    25c2:	d1 1d       	adc	r29, r1
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	66 1f       	adc	r22, r22
    25ca:	77 1f       	adc	r23, r23
    25cc:	06 94       	lsr	r0
    25ce:	a1 f7       	brne	.-24     	; 0x25b8 <__ftoa_engine+0xac>
    25d0:	05 90       	lpm	r0, Z+
    25d2:	07 94       	ror	r0
    25d4:	20 f4       	brcc	.+8      	; 0x25de <__ftoa_engine+0xd2>
    25d6:	49 0f       	add	r20, r25
    25d8:	56 1f       	adc	r21, r22
    25da:	c7 1f       	adc	r28, r23
    25dc:	d8 1f       	adc	r29, r24
    25de:	99 0f       	add	r25, r25
    25e0:	66 1f       	adc	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	06 94       	lsr	r0
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <__ftoa_engine+0xc8>
    25ea:	84 91       	lpm	r24, Z
    25ec:	10 95       	com	r17
    25ee:	17 70       	andi	r17, 0x07	; 7
    25f0:	41 f0       	breq	.+16     	; 0x2602 <__ftoa_engine+0xf6>
    25f2:	d6 95       	lsr	r29
    25f4:	c7 95       	ror	r28
    25f6:	57 95       	ror	r21
    25f8:	47 95       	ror	r20
    25fa:	f7 94       	ror	r15
    25fc:	e7 94       	ror	r14
    25fe:	1a 95       	dec	r17
    2600:	c1 f7       	brne	.-16     	; 0x25f2 <__ftoa_engine+0xe6>
    2602:	e4 e9       	ldi	r30, 0x94	; 148
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	68 94       	set
    2608:	15 90       	lpm	r1, Z+
    260a:	15 91       	lpm	r17, Z+
    260c:	35 91       	lpm	r19, Z+
    260e:	65 91       	lpm	r22, Z+
    2610:	95 91       	lpm	r25, Z+
    2612:	05 90       	lpm	r0, Z+
    2614:	7f e2       	ldi	r23, 0x2F	; 47
    2616:	73 95       	inc	r23
    2618:	e1 18       	sub	r14, r1
    261a:	f1 0a       	sbc	r15, r17
    261c:	43 0b       	sbc	r20, r19
    261e:	56 0b       	sbc	r21, r22
    2620:	c9 0b       	sbc	r28, r25
    2622:	d0 09       	sbc	r29, r0
    2624:	c0 f7       	brcc	.-16     	; 0x2616 <__ftoa_engine+0x10a>
    2626:	e1 0c       	add	r14, r1
    2628:	f1 1e       	adc	r15, r17
    262a:	43 1f       	adc	r20, r19
    262c:	56 1f       	adc	r21, r22
    262e:	c9 1f       	adc	r28, r25
    2630:	d0 1d       	adc	r29, r0
    2632:	7e f4       	brtc	.+30     	; 0x2652 <__ftoa_engine+0x146>
    2634:	70 33       	cpi	r23, 0x30	; 48
    2636:	11 f4       	brne	.+4      	; 0x263c <__ftoa_engine+0x130>
    2638:	8a 95       	dec	r24
    263a:	e6 cf       	rjmp	.-52     	; 0x2608 <__ftoa_engine+0xfc>
    263c:	e8 94       	clt
    263e:	01 50       	subi	r16, 0x01	; 1
    2640:	30 f0       	brcs	.+12     	; 0x264e <__ftoa_engine+0x142>
    2642:	08 0f       	add	r16, r24
    2644:	0a f4       	brpl	.+2      	; 0x2648 <__ftoa_engine+0x13c>
    2646:	00 27       	eor	r16, r16
    2648:	02 17       	cp	r16, r18
    264a:	08 f4       	brcc	.+2      	; 0x264e <__ftoa_engine+0x142>
    264c:	20 2f       	mov	r18, r16
    264e:	23 95       	inc	r18
    2650:	02 2f       	mov	r16, r18
    2652:	7a 33       	cpi	r23, 0x3A	; 58
    2654:	28 f0       	brcs	.+10     	; 0x2660 <__ftoa_engine+0x154>
    2656:	79 e3       	ldi	r23, 0x39	; 57
    2658:	7d 93       	st	X+, r23
    265a:	2a 95       	dec	r18
    265c:	e9 f7       	brne	.-6      	; 0x2658 <__ftoa_engine+0x14c>
    265e:	10 c0       	rjmp	.+32     	; 0x2680 <__ftoa_engine+0x174>
    2660:	7d 93       	st	X+, r23
    2662:	2a 95       	dec	r18
    2664:	89 f6       	brne	.-94     	; 0x2608 <__ftoa_engine+0xfc>
    2666:	06 94       	lsr	r0
    2668:	97 95       	ror	r25
    266a:	67 95       	ror	r22
    266c:	37 95       	ror	r19
    266e:	17 95       	ror	r17
    2670:	17 94       	ror	r1
    2672:	e1 18       	sub	r14, r1
    2674:	f1 0a       	sbc	r15, r17
    2676:	43 0b       	sbc	r20, r19
    2678:	56 0b       	sbc	r21, r22
    267a:	c9 0b       	sbc	r28, r25
    267c:	d0 09       	sbc	r29, r0
    267e:	98 f0       	brcs	.+38     	; 0x26a6 <__ftoa_engine+0x19a>
    2680:	23 95       	inc	r18
    2682:	7e 91       	ld	r23, -X
    2684:	73 95       	inc	r23
    2686:	7a 33       	cpi	r23, 0x3A	; 58
    2688:	08 f0       	brcs	.+2      	; 0x268c <__ftoa_engine+0x180>
    268a:	70 e3       	ldi	r23, 0x30	; 48
    268c:	7c 93       	st	X, r23
    268e:	20 13       	cpse	r18, r16
    2690:	b8 f7       	brcc	.-18     	; 0x2680 <__ftoa_engine+0x174>
    2692:	7e 91       	ld	r23, -X
    2694:	70 61       	ori	r23, 0x10	; 16
    2696:	7d 93       	st	X+, r23
    2698:	30 f0       	brcs	.+12     	; 0x26a6 <__ftoa_engine+0x19a>
    269a:	83 95       	inc	r24
    269c:	71 e3       	ldi	r23, 0x31	; 49
    269e:	7d 93       	st	X+, r23
    26a0:	70 e3       	ldi	r23, 0x30	; 48
    26a2:	2a 95       	dec	r18
    26a4:	e1 f7       	brne	.-8      	; 0x269e <__ftoa_engine+0x192>
    26a6:	11 24       	eor	r1, r1
    26a8:	ef 90       	pop	r14
    26aa:	ff 90       	pop	r15
    26ac:	0f 91       	pop	r16
    26ae:	1f 91       	pop	r17
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	99 27       	eor	r25, r25
    26b6:	87 fd       	sbrc	r24, 7
    26b8:	90 95       	com	r25
    26ba:	08 95       	ret

000026bc <isalnum>:
    26bc:	91 11       	cpse	r25, r1
    26be:	06 c0       	rjmp	.+12     	; 0x26cc <__ctype_isfalse>
    26c0:	80 53       	subi	r24, 0x30	; 48
    26c2:	8a 50       	subi	r24, 0x0A	; 10
    26c4:	10 f0       	brcs	.+4      	; 0x26ca <isalnum+0xe>
    26c6:	86 5c       	subi	r24, 0xC6	; 198
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <isalpha>
    26ca:	08 95       	ret

000026cc <__ctype_isfalse>:
    26cc:	99 27       	eor	r25, r25
    26ce:	88 27       	eor	r24, r24

000026d0 <__ctype_istrue>:
    26d0:	08 95       	ret

000026d2 <isupper>:
    26d2:	85 fd       	sbrc	r24, 5
    26d4:	fb cf       	rjmp	.-10     	; 0x26cc <__ctype_isfalse>

000026d6 <isalpha>:
    26d6:	80 62       	ori	r24, 0x20	; 32

000026d8 <islower>:
    26d8:	91 11       	cpse	r25, r1
    26da:	f8 cf       	rjmp	.-16     	; 0x26cc <__ctype_isfalse>
    26dc:	81 56       	subi	r24, 0x61	; 97
    26de:	8a 51       	subi	r24, 0x1A	; 26
    26e0:	e0 f7       	brcc	.-8      	; 0x26da <islower+0x2>
    26e2:	08 95       	ret

000026e4 <isspace>:
    26e4:	91 11       	cpse	r25, r1
    26e6:	f2 cf       	rjmp	.-28     	; 0x26cc <__ctype_isfalse>
    26e8:	80 32       	cpi	r24, 0x20	; 32
    26ea:	19 f0       	breq	.+6      	; 0x26f2 <isspace+0xe>
    26ec:	89 50       	subi	r24, 0x09	; 9
    26ee:	85 50       	subi	r24, 0x05	; 5
    26f0:	d0 f7       	brcc	.-12     	; 0x26e6 <isspace+0x2>
    26f2:	08 95       	ret

000026f4 <strnlen_P>:
    26f4:	fc 01       	movw	r30, r24
    26f6:	05 90       	lpm	r0, Z+
    26f8:	61 50       	subi	r22, 0x01	; 1
    26fa:	70 40       	sbci	r23, 0x00	; 0
    26fc:	01 10       	cpse	r0, r1
    26fe:	d8 f7       	brcc	.-10     	; 0x26f6 <strnlen_P+0x2>
    2700:	80 95       	com	r24
    2702:	90 95       	com	r25
    2704:	8e 0f       	add	r24, r30
    2706:	9f 1f       	adc	r25, r31
    2708:	08 95       	ret

0000270a <strncasecmp>:
    270a:	fb 01       	movw	r30, r22
    270c:	dc 01       	movw	r26, r24
    270e:	41 50       	subi	r20, 0x01	; 1
    2710:	50 40       	sbci	r21, 0x00	; 0
    2712:	88 f0       	brcs	.+34     	; 0x2736 <strncasecmp+0x2c>
    2714:	8d 91       	ld	r24, X+
    2716:	81 34       	cpi	r24, 0x41	; 65
    2718:	1c f0       	brlt	.+6      	; 0x2720 <strncasecmp+0x16>
    271a:	8b 35       	cpi	r24, 0x5B	; 91
    271c:	0c f4       	brge	.+2      	; 0x2720 <strncasecmp+0x16>
    271e:	80 5e       	subi	r24, 0xE0	; 224
    2720:	61 91       	ld	r22, Z+
    2722:	61 34       	cpi	r22, 0x41	; 65
    2724:	1c f0       	brlt	.+6      	; 0x272c <strncasecmp+0x22>
    2726:	6b 35       	cpi	r22, 0x5B	; 91
    2728:	0c f4       	brge	.+2      	; 0x272c <strncasecmp+0x22>
    272a:	60 5e       	subi	r22, 0xE0	; 224
    272c:	86 1b       	sub	r24, r22
    272e:	61 11       	cpse	r22, r1
    2730:	71 f3       	breq	.-36     	; 0x270e <strncasecmp+0x4>
    2732:	99 0b       	sbc	r25, r25
    2734:	08 95       	ret
    2736:	88 1b       	sub	r24, r24
    2738:	fc cf       	rjmp	.-8      	; 0x2732 <strncasecmp+0x28>

0000273a <strncmp>:
    273a:	fb 01       	movw	r30, r22
    273c:	dc 01       	movw	r26, r24
    273e:	41 50       	subi	r20, 0x01	; 1
    2740:	50 40       	sbci	r21, 0x00	; 0
    2742:	30 f0       	brcs	.+12     	; 0x2750 <strncmp+0x16>
    2744:	8d 91       	ld	r24, X+
    2746:	01 90       	ld	r0, Z+
    2748:	80 19       	sub	r24, r0
    274a:	19 f4       	brne	.+6      	; 0x2752 <strncmp+0x18>
    274c:	00 20       	and	r0, r0
    274e:	b9 f7       	brne	.-18     	; 0x273e <strncmp+0x4>
    2750:	88 1b       	sub	r24, r24
    2752:	99 0b       	sbc	r25, r25
    2754:	08 95       	ret

00002756 <strncpy>:
    2756:	fb 01       	movw	r30, r22
    2758:	dc 01       	movw	r26, r24
    275a:	41 50       	subi	r20, 0x01	; 1
    275c:	50 40       	sbci	r21, 0x00	; 0
    275e:	48 f0       	brcs	.+18     	; 0x2772 <strncpy+0x1c>
    2760:	01 90       	ld	r0, Z+
    2762:	0d 92       	st	X+, r0
    2764:	00 20       	and	r0, r0
    2766:	c9 f7       	brne	.-14     	; 0x275a <strncpy+0x4>
    2768:	01 c0       	rjmp	.+2      	; 0x276c <strncpy+0x16>
    276a:	1d 92       	st	X+, r1
    276c:	41 50       	subi	r20, 0x01	; 1
    276e:	50 40       	sbci	r21, 0x00	; 0
    2770:	e0 f7       	brcc	.-8      	; 0x276a <strncpy+0x14>
    2772:	08 95       	ret

00002774 <strnlen>:
    2774:	fc 01       	movw	r30, r24
    2776:	61 50       	subi	r22, 0x01	; 1
    2778:	70 40       	sbci	r23, 0x00	; 0
    277a:	01 90       	ld	r0, Z+
    277c:	01 10       	cpse	r0, r1
    277e:	d8 f7       	brcc	.-10     	; 0x2776 <strnlen+0x2>
    2780:	80 95       	com	r24
    2782:	90 95       	com	r25
    2784:	8e 0f       	add	r24, r30
    2786:	9f 1f       	adc	r25, r31
    2788:	08 95       	ret

0000278a <strstr>:
    278a:	fb 01       	movw	r30, r22
    278c:	51 91       	ld	r21, Z+
    278e:	55 23       	and	r21, r21
    2790:	a9 f0       	breq	.+42     	; 0x27bc <strstr+0x32>
    2792:	bf 01       	movw	r22, r30
    2794:	dc 01       	movw	r26, r24
    2796:	4d 91       	ld	r20, X+
    2798:	45 17       	cp	r20, r21
    279a:	41 11       	cpse	r20, r1
    279c:	e1 f7       	brne	.-8      	; 0x2796 <strstr+0xc>
    279e:	59 f4       	brne	.+22     	; 0x27b6 <strstr+0x2c>
    27a0:	cd 01       	movw	r24, r26
    27a2:	01 90       	ld	r0, Z+
    27a4:	00 20       	and	r0, r0
    27a6:	49 f0       	breq	.+18     	; 0x27ba <strstr+0x30>
    27a8:	4d 91       	ld	r20, X+
    27aa:	40 15       	cp	r20, r0
    27ac:	41 11       	cpse	r20, r1
    27ae:	c9 f3       	breq	.-14     	; 0x27a2 <strstr+0x18>
    27b0:	fb 01       	movw	r30, r22
    27b2:	41 11       	cpse	r20, r1
    27b4:	ef cf       	rjmp	.-34     	; 0x2794 <strstr+0xa>
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	08 95       	ret

000027be <strtok_r>:
    27be:	fa 01       	movw	r30, r20
    27c0:	a1 91       	ld	r26, Z+
    27c2:	b0 81       	ld	r27, Z
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	19 f4       	brne	.+6      	; 0x27ce <strtok_r+0x10>
    27c8:	10 97       	sbiw	r26, 0x00	; 0
    27ca:	e1 f0       	breq	.+56     	; 0x2804 <strtok_r+0x46>
    27cc:	cd 01       	movw	r24, r26
    27ce:	dc 01       	movw	r26, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0d 90       	ld	r0, X+
    27d4:	00 20       	and	r0, r0
    27d6:	11 f4       	brne	.+4      	; 0x27dc <strtok_r+0x1e>
    27d8:	c0 01       	movw	r24, r0
    27da:	13 c0       	rjmp	.+38     	; 0x2802 <strtok_r+0x44>
    27dc:	fb 01       	movw	r30, r22
    27de:	21 91       	ld	r18, Z+
    27e0:	22 23       	and	r18, r18
    27e2:	19 f0       	breq	.+6      	; 0x27ea <strtok_r+0x2c>
    27e4:	20 15       	cp	r18, r0
    27e6:	d9 f7       	brne	.-10     	; 0x27de <strtok_r+0x20>
    27e8:	f3 cf       	rjmp	.-26     	; 0x27d0 <strtok_r+0x12>
    27ea:	fb 01       	movw	r30, r22
    27ec:	21 91       	ld	r18, Z+
    27ee:	20 15       	cp	r18, r0
    27f0:	19 f4       	brne	.+6      	; 0x27f8 <strtok_r+0x3a>
    27f2:	1e 92       	st	-X, r1
    27f4:	11 96       	adiw	r26, 0x01	; 1
    27f6:	06 c0       	rjmp	.+12     	; 0x2804 <strtok_r+0x46>
    27f8:	22 23       	and	r18, r18
    27fa:	c1 f7       	brne	.-16     	; 0x27ec <strtok_r+0x2e>
    27fc:	0d 90       	ld	r0, X+
    27fe:	00 20       	and	r0, r0
    2800:	a1 f7       	brne	.-24     	; 0x27ea <strtok_r+0x2c>
    2802:	d0 01       	movw	r26, r0
    2804:	fa 01       	movw	r30, r20
    2806:	a1 93       	st	Z+, r26
    2808:	b0 83       	st	Z, r27
    280a:	08 95       	ret

0000280c <fputc>:
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	fb 01       	movw	r30, r22
    2816:	23 81       	ldd	r18, Z+3	; 0x03
    2818:	21 fd       	sbrc	r18, 1
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <fputc+0x16>
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	28 c0       	rjmp	.+80     	; 0x2872 <fputc+0x66>
    2822:	22 ff       	sbrs	r18, 2
    2824:	16 c0       	rjmp	.+44     	; 0x2852 <fputc+0x46>
    2826:	46 81       	ldd	r20, Z+6	; 0x06
    2828:	57 81       	ldd	r21, Z+7	; 0x07
    282a:	24 81       	ldd	r18, Z+4	; 0x04
    282c:	35 81       	ldd	r19, Z+5	; 0x05
    282e:	42 17       	cp	r20, r18
    2830:	53 07       	cpc	r21, r19
    2832:	44 f4       	brge	.+16     	; 0x2844 <fputc+0x38>
    2834:	a0 81       	ld	r26, Z
    2836:	b1 81       	ldd	r27, Z+1	; 0x01
    2838:	9d 01       	movw	r18, r26
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	31 83       	std	Z+1, r19	; 0x01
    2840:	20 83       	st	Z, r18
    2842:	8c 93       	st	X, r24
    2844:	26 81       	ldd	r18, Z+6	; 0x06
    2846:	37 81       	ldd	r19, Z+7	; 0x07
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	37 83       	std	Z+7, r19	; 0x07
    284e:	26 83       	std	Z+6, r18	; 0x06
    2850:	10 c0       	rjmp	.+32     	; 0x2872 <fputc+0x66>
    2852:	eb 01       	movw	r28, r22
    2854:	09 2f       	mov	r16, r25
    2856:	18 2f       	mov	r17, r24
    2858:	00 84       	ldd	r0, Z+8	; 0x08
    285a:	f1 85       	ldd	r31, Z+9	; 0x09
    285c:	e0 2d       	mov	r30, r0
    285e:	09 95       	icall
    2860:	89 2b       	or	r24, r25
    2862:	e1 f6       	brne	.-72     	; 0x281c <fputc+0x10>
    2864:	8e 81       	ldd	r24, Y+6	; 0x06
    2866:	9f 81       	ldd	r25, Y+7	; 0x07
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	9f 83       	std	Y+7, r25	; 0x07
    286c:	8e 83       	std	Y+6, r24	; 0x06
    286e:	81 2f       	mov	r24, r17
    2870:	90 2f       	mov	r25, r16
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <__ultoa_invert>:
    287c:	fa 01       	movw	r30, r20
    287e:	aa 27       	eor	r26, r26
    2880:	28 30       	cpi	r18, 0x08	; 8
    2882:	51 f1       	breq	.+84     	; 0x28d8 <__ultoa_invert+0x5c>
    2884:	20 31       	cpi	r18, 0x10	; 16
    2886:	81 f1       	breq	.+96     	; 0x28e8 <__ultoa_invert+0x6c>
    2888:	e8 94       	clt
    288a:	6f 93       	push	r22
    288c:	6e 7f       	andi	r22, 0xFE	; 254
    288e:	6e 5f       	subi	r22, 0xFE	; 254
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	8f 4f       	sbci	r24, 0xFF	; 255
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	af 4f       	sbci	r26, 0xFF	; 255
    2898:	b1 e0       	ldi	r27, 0x01	; 1
    289a:	3e d0       	rcall	.+124    	; 0x2918 <__ultoa_invert+0x9c>
    289c:	b4 e0       	ldi	r27, 0x04	; 4
    289e:	3c d0       	rcall	.+120    	; 0x2918 <__ultoa_invert+0x9c>
    28a0:	67 0f       	add	r22, r23
    28a2:	78 1f       	adc	r23, r24
    28a4:	89 1f       	adc	r24, r25
    28a6:	9a 1f       	adc	r25, r26
    28a8:	a1 1d       	adc	r26, r1
    28aa:	68 0f       	add	r22, r24
    28ac:	79 1f       	adc	r23, r25
    28ae:	8a 1f       	adc	r24, r26
    28b0:	91 1d       	adc	r25, r1
    28b2:	a1 1d       	adc	r26, r1
    28b4:	6a 0f       	add	r22, r26
    28b6:	71 1d       	adc	r23, r1
    28b8:	81 1d       	adc	r24, r1
    28ba:	91 1d       	adc	r25, r1
    28bc:	a1 1d       	adc	r26, r1
    28be:	20 d0       	rcall	.+64     	; 0x2900 <__ultoa_invert+0x84>
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__ultoa_invert+0x48>
    28c2:	68 94       	set
    28c4:	3f 91       	pop	r19
    28c6:	2a e0       	ldi	r18, 0x0A	; 10
    28c8:	26 9f       	mul	r18, r22
    28ca:	11 24       	eor	r1, r1
    28cc:	30 19       	sub	r19, r0
    28ce:	30 5d       	subi	r19, 0xD0	; 208
    28d0:	31 93       	st	Z+, r19
    28d2:	de f6       	brtc	.-74     	; 0x288a <__ultoa_invert+0xe>
    28d4:	cf 01       	movw	r24, r30
    28d6:	08 95       	ret
    28d8:	46 2f       	mov	r20, r22
    28da:	47 70       	andi	r20, 0x07	; 7
    28dc:	40 5d       	subi	r20, 0xD0	; 208
    28de:	41 93       	st	Z+, r20
    28e0:	b3 e0       	ldi	r27, 0x03	; 3
    28e2:	0f d0       	rcall	.+30     	; 0x2902 <__ultoa_invert+0x86>
    28e4:	c9 f7       	brne	.-14     	; 0x28d8 <__ultoa_invert+0x5c>
    28e6:	f6 cf       	rjmp	.-20     	; 0x28d4 <__ultoa_invert+0x58>
    28e8:	46 2f       	mov	r20, r22
    28ea:	4f 70       	andi	r20, 0x0F	; 15
    28ec:	40 5d       	subi	r20, 0xD0	; 208
    28ee:	4a 33       	cpi	r20, 0x3A	; 58
    28f0:	18 f0       	brcs	.+6      	; 0x28f8 <__ultoa_invert+0x7c>
    28f2:	49 5d       	subi	r20, 0xD9	; 217
    28f4:	31 fd       	sbrc	r19, 1
    28f6:	40 52       	subi	r20, 0x20	; 32
    28f8:	41 93       	st	Z+, r20
    28fa:	02 d0       	rcall	.+4      	; 0x2900 <__ultoa_invert+0x84>
    28fc:	a9 f7       	brne	.-22     	; 0x28e8 <__ultoa_invert+0x6c>
    28fe:	ea cf       	rjmp	.-44     	; 0x28d4 <__ultoa_invert+0x58>
    2900:	b4 e0       	ldi	r27, 0x04	; 4
    2902:	a6 95       	lsr	r26
    2904:	97 95       	ror	r25
    2906:	87 95       	ror	r24
    2908:	77 95       	ror	r23
    290a:	67 95       	ror	r22
    290c:	ba 95       	dec	r27
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__ultoa_invert+0x86>
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	61 05       	cpc	r22, r1
    2914:	71 05       	cpc	r23, r1
    2916:	08 95       	ret
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	0a 2e       	mov	r0, r26
    291e:	06 94       	lsr	r0
    2920:	57 95       	ror	r21
    2922:	47 95       	ror	r20
    2924:	37 95       	ror	r19
    2926:	27 95       	ror	r18
    2928:	ba 95       	dec	r27
    292a:	c9 f7       	brne	.-14     	; 0x291e <__ultoa_invert+0xa2>
    292c:	62 0f       	add	r22, r18
    292e:	73 1f       	adc	r23, r19
    2930:	84 1f       	adc	r24, r20
    2932:	95 1f       	adc	r25, r21
    2934:	a0 1d       	adc	r26, r0
    2936:	08 95       	ret

00002938 <eeprom_read_byte>:
    2938:	f9 99       	sbic	0x1f, 1	; 31
    293a:	fe cf       	rjmp	.-4      	; 0x2938 <eeprom_read_byte>
    293c:	92 bd       	out	0x22, r25	; 34
    293e:	81 bd       	out	0x21, r24	; 33
    2940:	f8 9a       	sbi	0x1f, 0	; 31
    2942:	99 27       	eor	r25, r25
    2944:	80 b5       	in	r24, 0x20	; 32
    2946:	08 95       	ret

00002948 <__mulsi3>:
    2948:	db 01       	movw	r26, r22
    294a:	8f 93       	push	r24
    294c:	9f 93       	push	r25
    294e:	98 dc       	rcall	.-1744   	; 0x2280 <__muluhisi3>
    2950:	bf 91       	pop	r27
    2952:	af 91       	pop	r26
    2954:	a2 9f       	mul	r26, r18
    2956:	80 0d       	add	r24, r0
    2958:	91 1d       	adc	r25, r1
    295a:	a3 9f       	mul	r26, r19
    295c:	90 0d       	add	r25, r0
    295e:	b2 9f       	mul	r27, r18
    2960:	90 0d       	add	r25, r0
    2962:	11 24       	eor	r1, r1
    2964:	08 95       	ret

00002966 <_exit>:
    2966:	f8 94       	cli

00002968 <__stop_program>:
    2968:	ff cf       	rjmp	.-2      	; 0x2968 <__stop_program>
