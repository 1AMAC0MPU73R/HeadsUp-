
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  0000382c  000038c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000382c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800170  00800170  00003930  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230e  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094d  00000000  00000000  00005ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fa1  00000000  00000000  0000681f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  000087c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b381  00000000  00000000  00008fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118a  00000000  00000000  00014359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000154e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c39  00000000  00000000  0001568b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c0       	rjmp	.+398    	; 0x190 <__ctors_end>
       2:	00 00       	nop
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	ec c0       	rjmp	.+472    	; 0x1e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ea c0       	rjmp	.+468    	; 0x1e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c4       	rjmp	.+2234   	; 0x8cc <__vector_4>
      12:	00 00       	nop
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	e4 c0       	rjmp	.+456    	; 0x1e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e0 c0       	rjmp	.+448    	; 0x1e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	de c0       	rjmp	.+444    	; 0x1e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	dc c0       	rjmp	.+440    	; 0x1e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	da c0       	rjmp	.+436    	; 0x1e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	d4 c0       	rjmp	.+424    	; 0x1e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d2 c0       	rjmp	.+420    	; 0x1e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d0 c0       	rjmp	.+416    	; 0x1e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ce c0       	rjmp	.+412    	; 0x1e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	cc c0       	rjmp	.+408    	; 0x1e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ca c0       	rjmp	.+404    	; 0x1e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c8 c0       	rjmp	.+400    	; 0x1e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	c6 c0       	rjmp	.+396    	; 0x1e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	c4 c0       	rjmp	.+392    	; 0x1e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c2 c0       	rjmp	.+388    	; 0x1e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c0 c0       	rjmp	.+384    	; 0x1e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	be c0       	rjmp	.+380    	; 0x1e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	bc c0       	rjmp	.+376    	; 0x1e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ba c0       	rjmp	.+372    	; 0x1e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b8 c0       	rjmp	.+368    	; 0x1e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	b6 c0       	rjmp	.+364    	; 0x1e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	b4 c0       	rjmp	.+360    	; 0x1e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b2 c0       	rjmp	.+356    	; 0x1e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b0 c0       	rjmp	.+352    	; 0x1e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	ae c0       	rjmp	.+348    	; 0x1e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	ac c0       	rjmp	.+344    	; 0x1e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2177>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_start>:
     18e:	7b 07       	cpc	r23, r27

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d0 e4       	ldi	r29, 0x40	; 64
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	ec e2       	ldi	r30, 0x2C	; 44
     1a4:	f8 e3       	ldi	r31, 0x38	; 56
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a0 37       	cpi	r26, 0x70	; 112
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a0 e7       	ldi	r26, 0x70	; 112
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a4 37       	cpi	r26, 0x74	; 116
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>

000001c6 <__do_global_ctors>:
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	c8 ec       	ldi	r28, 0xC8	; 200
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__do_global_ctors+0x10>
     1ce:	21 97       	sbiw	r28, 0x01	; 1
     1d0:	fe 01       	movw	r30, r28
     1d2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__tablejump2__>
     1d6:	c7 3c       	cpi	r28, 0xC7	; 199
     1d8:	d1 07       	cpc	r29, r17
     1da:	c9 f7       	brne	.-14     	; 0x1ce <__do_global_ctors+0x8>
     1dc:	6a d1       	rcall	.+724    	; 0x4b2 <main>
     1de:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <_ZN3batC1Ev>:
#include "bat.h"


bat::bat(){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <_ZN3batC1Ev+0x6>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9a 83       	std	Y+2, r25	; 0x02
     1f0:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX |= (1 << REFS1) | (1 << MUX0);	// MUX0 picks ADC1 Pin
     1f2:	8c e7       	ldi	r24, 0x7C	; 124
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2c e7       	ldi	r18, 0x7C	; 124
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	21 68       	ori	r18, 0x81	; 129
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// Enable ADC prescaler  to 64 (125KHz @ 8 MHz)
     204:	8a e7       	ldi	r24, 0x7A	; 122
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2a e7       	ldi	r18, 0x7A	; 122
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	26 60       	ori	r18, 0x06	; 6
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
	DIDR0 |= (1 << ADC1D);	// Disable digital input buffer on ADC1 pin
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2e e7       	ldi	r18, 0x7E	; 126
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	22 60       	ori	r18, 0x02	; 2
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
	
}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN3bat6ENABLEEv>:


void bat::ENABLE(){
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <_ZN3bat6ENABLEEv+0x6>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= ( 1 << ADEN );
     240:	8a e7       	ldi	r24, 0x7A	; 122
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	2a e7       	ldi	r18, 0x7A	; 122
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	20 81       	ld	r18, Z
     24c:	20 68       	ori	r18, 0x80	; 128
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
	//_delay_ms( 200 );
	ADCSRA |= ( 1 << ADSC );
     252:	8a e7       	ldi	r24, 0x7A	; 122
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	2a e7       	ldi	r18, 0x7A	; 122
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	f9 01       	movw	r30, r18
     25c:	20 81       	ld	r18, Z
     25e:	20 64       	ori	r18, 0x40	; 64
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18

}
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <_ZN3bat7DISABLEEv>:


void bat::DISABLE(){
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	00 d0       	rcall	.+0      	; 0x274 <_ZN3bat7DISABLEEv+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~( 1 << ADEN );
     27c:	8a e7       	ldi	r24, 0x7A	; 122
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2a e7       	ldi	r18, 0x7A	; 122
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	2f 77       	andi	r18, 0x7F	; 127
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <_ZN3bat3getEv>:

unsigned char bat::get(){
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	2d 97       	sbiw	r28, 0x0d	; 13
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	99 87       	std	Y+9, r25	; 0x09
     2b6:	88 87       	std	Y+8, r24	; 0x08
	
	adc_out adoCurrent;
	uint8_t valBatteryLevel;
	uint16_t minADCpercent = 0x02DA;
     2b8:	8a ed       	ldi	r24, 0xDA	; 218
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
	uint16_t adcdifference = 0x0125;
     2c0:	85 e2       	ldi	r24, 0x25	; 37
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	9c 83       	std	Y+4, r25	; 0x04
     2c6:	8b 83       	std	Y+3, r24	; 0x03
	
	ENABLE();
     2c8:	88 85       	ldd	r24, Y+8	; 0x08
     2ca:	99 85       	ldd	r25, Y+9	; 0x09
     2cc:	b2 df       	rcall	.-156    	; 0x232 <_ZN3bat6ENABLEEv>
	loop_until_bit_is_clear(ADCSRA, ADSC);
     2ce:	8a e7       	ldi	r24, 0x7A	; 122
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	80 74       	andi	r24, 0x40	; 64
     2dc:	99 27       	eor	r25, r25
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	89 2b       	or	r24, r25
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <_ZN3bat3getEv+0x4e>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	22 23       	and	r18, r18
     2e8:	91 f7       	brne	.-28     	; 0x2ce <_ZN3bat3getEv+0x36>
	adoCurrent = ADC - minADCpercent;
     2ea:	88 e7       	ldi	r24, 0x78	; 120
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	a9 01       	movw	r20, r18
     2fa:	48 1b       	sub	r20, r24
     2fc:	59 0b       	sbc	r21, r25
     2fe:	ca 01       	movw	r24, r20
     300:	9e 83       	std	Y+6, r25	; 0x06
     302:	8d 83       	std	Y+5, r24	; 0x05
	DISABLE();
     304:	88 85       	ldd	r24, Y+8	; 0x08
     306:	99 85       	ldd	r25, Y+9	; 0x09
     308:	b2 df       	rcall	.-156    	; 0x26e <_ZN3bat7DISABLEEv>
	
	valBatteryLevel = (( uint32_t )adoCurrent * 100 ) / adcdifference;
     30a:	8d 81       	ldd	r24, Y+5	; 0x05
     30c:	9e 81       	ldd	r25, Y+6	; 0x06
     30e:	9c 01       	movw	r18, r24
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	84 e6       	ldi	r24, 0x64	; 100
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	dc 01       	movw	r26, r24
     31a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__muluhisi3>
     31e:	7b 01       	movw	r14, r22
     320:	8c 01       	movw	r16, r24
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	9c 81       	ldd	r25, Y+4	; 0x04
     326:	9c 01       	movw	r18, r24
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	c8 01       	movw	r24, r16
     32e:	b7 01       	movw	r22, r14
     330:	0e 94 2f 1a 	call	0x345e	; 0x345e <__udivmodsi4>
     334:	da 01       	movw	r26, r20
     336:	c9 01       	movw	r24, r18
     338:	8f 83       	std	Y+7, r24	; 0x07
	return (( valBatteryLevel / 10 ) << 4 ) | ( valBatteryLevel % 10 );
     33a:	9f 81       	ldd	r25, Y+7	; 0x07
     33c:	8d ec       	ldi	r24, 0xCD	; 205
     33e:	98 9f       	mul	r25, r24
     340:	81 2d       	mov	r24, r1
     342:	11 24       	eor	r1, r1
     344:	86 95       	lsr	r24
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	82 95       	swap	r24
     350:	92 95       	swap	r25
     352:	90 7f       	andi	r25, 0xF0	; 240
     354:	98 27       	eor	r25, r24
     356:	80 7f       	andi	r24, 0xF0	; 240
     358:	98 27       	eor	r25, r24
     35a:	38 2f       	mov	r19, r24
     35c:	9f 81       	ldd	r25, Y+7	; 0x07
     35e:	8d ec       	ldi	r24, 0xCD	; 205
     360:	98 9f       	mul	r25, r24
     362:	81 2d       	mov	r24, r1
     364:	11 24       	eor	r1, r1
     366:	86 95       	lsr	r24
     368:	86 95       	lsr	r24
     36a:	86 95       	lsr	r24
     36c:	88 0f       	add	r24, r24
     36e:	28 2f       	mov	r18, r24
     370:	22 0f       	add	r18, r18
     372:	22 0f       	add	r18, r18
     374:	82 0f       	add	r24, r18
     376:	59 2f       	mov	r21, r25
     378:	58 1b       	sub	r21, r24
     37a:	85 2f       	mov	r24, r21
     37c:	83 2b       	or	r24, r19
	
     37e:	2d 96       	adiw	r28, 0x0d	; 13
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     398:	2f 92       	push	r2
     39a:	3f 92       	push	r3
     39c:	4f 92       	push	r4
     39e:	5f 92       	push	r5
     3a0:	6f 92       	push	r6
     3a2:	7f 92       	push	r7
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	29 97       	sbiw	r28, 0x09	; 9
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	99 87       	std	Y+9, r25	; 0x09
     3ce:	88 87       	std	Y+8, r24	; 0x08
     3d0:	88 85       	ldd	r24, Y+8	; 0x08
     3d2:	99 85       	ldd	r25, Y+9	; 0x09
     3d4:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN3rtc8get_timeEv>
     3d8:	a2 2e       	mov	r10, r18
     3da:	b3 2e       	mov	r11, r19
     3dc:	c4 2e       	mov	r12, r20
     3de:	d5 2e       	mov	r13, r21
     3e0:	e6 2e       	mov	r14, r22
     3e2:	f7 2e       	mov	r15, r23
     3e4:	08 2f       	mov	r16, r24
     3e6:	19 2f       	mov	r17, r25
     3e8:	2a 2d       	mov	r18, r10
     3ea:	3b 2d       	mov	r19, r11
     3ec:	4c 2d       	mov	r20, r12
     3ee:	5d 2d       	mov	r21, r13
     3f0:	6e 2d       	mov	r22, r14
     3f2:	7f 2d       	mov	r23, r15
     3f4:	80 2f       	mov	r24, r16
     3f6:	91 2f       	mov	r25, r17
     3f8:	29 83       	std	Y+1, r18	; 0x01
     3fa:	3a 83       	std	Y+2, r19	; 0x02
     3fc:	4b 83       	std	Y+3, r20	; 0x03
     3fe:	5c 83       	std	Y+4, r21	; 0x04
     400:	6d 83       	std	Y+5, r22	; 0x05
     402:	7e 83       	std	Y+6, r23	; 0x06
     404:	8f 83       	std	Y+7, r24	; 0x07
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	5a 81       	ldd	r21, Y+2	; 0x02
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	4b 81       	ldd	r20, Y+3	; 0x03
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	3c 81       	ldd	r19, Y+4	; 0x04
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	2d 81       	ldd	r18, Y+5	; 0x05
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	26 2e       	mov	r2, r22
     424:	35 2e       	mov	r3, r21
     426:	44 2e       	mov	r4, r20
     428:	53 2e       	mov	r5, r19
     42a:	62 2e       	mov	r6, r18
     42c:	79 2e       	mov	r7, r25
     42e:	88 2e       	mov	r8, r24
     430:	a2 2c       	mov	r10, r2
     432:	b3 2c       	mov	r11, r3
     434:	c4 2c       	mov	r12, r4
     436:	d5 2c       	mov	r13, r5
     438:	e6 2c       	mov	r14, r6
     43a:	f7 2c       	mov	r15, r7
     43c:	08 2d       	mov	r16, r8
     43e:	19 2d       	mov	r17, r9
     440:	2a 2d       	mov	r18, r10
     442:	3b 2d       	mov	r19, r11
     444:	4c 2d       	mov	r20, r12
     446:	5d 2d       	mov	r21, r13
     448:	6e 2d       	mov	r22, r14
     44a:	7f 2d       	mov	r23, r15
     44c:	80 2f       	mov	r24, r16
     44e:	91 2f       	mov	r25, r17
     450:	29 96       	adiw	r28, 0x09	; 9
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	7f 90       	pop	r7
     476:	6f 90       	pop	r6
     478:	5f 90       	pop	r5
     47a:	4f 90       	pop	r4
     47c:	3f 90       	pop	r3
     47e:	2f 90       	pop	r2
     480:	08 95       	ret

00000482 <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <_ZN3rtc3setEP8rtc_time+0x6>
     488:	00 d0       	rcall	.+0      	; 0x48a <_ZN3rtc3setEP8rtc_time+0x8>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	7c 83       	std	Y+4, r23	; 0x04
     494:	6b 83       	std	Y+3, r22	; 0x03
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	3c 81       	ldd	r19, Y+4	; 0x04
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	b9 01       	movw	r22, r18
     4a0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN3rtc8set_timeEP8rtc_time>
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <main>:
bat batLiPo;
led ledAlarm;
rtc_time rtmCurrent{0x50, 0x59, 0x72, 0x02, 0x11, 0x04, 0x16};


int main(){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	28 97       	sbiw	r28, 0x08	; 8
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61

	rtc_alarm rtaAlarm0 { 0x00, 0x00, 0x80, 0x80 };
     4ca:	19 82       	std	Y+1, r1	; 0x01
     4cc:	1a 82       	std	Y+2, r1	; 0x02
     4ce:	80 e8       	ldi	r24, 0x80	; 128
     4d0:	8b 83       	std	Y+3, r24	; 0x03
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	8c 83       	std	Y+4, r24	; 0x04
	rtc_alarm rtaAlarm1 { 0x80, 0x80, 0x80, 0x80 };
     4d6:	80 e8       	ldi	r24, 0x80	; 128
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	80 e8       	ldi	r24, 0x80	; 128
     4dc:	8e 83       	std	Y+6, r24	; 0x06
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	8f 83       	std	Y+7, r24	; 0x07
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	88 87       	std	Y+8, r24	; 0x08

	
	HeadsUp_Init();
     4e6:	26 d0       	rcall	.+76     	; 0x534 <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	ab 81       	ldd	r26, Y+3	; 0x03
     4ee:	bc 81       	ldd	r27, Y+4	; 0x04
     4f0:	8c 01       	movw	r16, r24
     4f2:	9d 01       	movw	r18, r26
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 e7       	ldi	r24, 0x70	; 112
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	af 81       	ldd	r26, Y+7	; 0x07
     506:	b8 85       	ldd	r27, Y+8	; 0x08
     508:	8c 01       	movw	r16, r24
     50a:	9d 01       	movw	r18, r26
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	80 e7       	ldi	r24, 0x70	; 112
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN3rtc5alarmEhh9rtc_alarm>

	Menu_Main();
     518:	83 d3       	rcall	.+1798   	; 0xc20 <_Z9Menu_Mainv>
	
	return 0;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0

}
     51e:	28 96       	adiw	r28, 0x08	; 8
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <_Z12HeadsUp_Initv>:


void HeadsUp_Init(){
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	60 97       	sbiw	r28, 0x10	; 16
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char uchCurrentTime[ LCD_LINE_SIZE ] ;
	
	
	Test_On_PortA0();
     554:	a0 d0       	rcall	.+320    	; 0x696 <_Z14Test_On_PortA0v>
	
	rtcDS.set(&rtmCurrent);
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	80 e7       	ldi	r24, 0x70	; 112
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	91 df       	rcall	.-222    	; 0x482 <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT2();
     560:	66 d0       	rcall	.+204    	; 0x62e <_Z13Enable_PCINT2v>
	Enable_PCINT3();
     562:	31 d0       	rcall	.+98     	; 0x5c6 <_Z13Enable_PCINT3v>
	sei();
     564:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmCurrent, uchCurrentTime, LCD_LINE_SIZE );
     566:	68 94       	set
     568:	cc 24       	eor	r12, r12
     56a:	c4 f8       	bld	r12, 4
     56c:	d1 2c       	mov	r13, r1
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	7c 01       	movw	r14, r24
     574:	00 91 00 01 	lds	r16, 0x0100
     578:	10 91 01 01 	lds	r17, 0x0101
     57c:	20 91 02 01 	lds	r18, 0x0102
     580:	30 91 03 01 	lds	r19, 0x0103
     584:	40 91 04 01 	lds	r20, 0x0104
     588:	50 91 05 01 	lds	r21, 0x0105
     58c:	60 91 06 01 	lds	r22, 0x0106
     590:	80 e7       	ldi	r24, 0x70	; 112
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( uchCurrentTime , LCD_LINE_TOP );
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	bc 01       	movw	r22, r24
     5a0:	81 e7       	ldi	r24, 0x71	; 113
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_ZN3lcd5printEPhh>

}
     5a8:	60 96       	adiw	r28, 0x10	; 16
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	08 95       	ret

000005c6 <_Z13Enable_PCINT3v>:


void Enable_PCINT3(){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA3 );
     5ce:	81 e2       	ldi	r24, 0x21	; 33
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	21 e2       	ldi	r18, 0x21	; 33
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	27 7f       	andi	r18, 0xF7	; 247
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA3;
     5e0:	82 e2       	ldi	r24, 0x22	; 34
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	22 e2       	ldi	r18, 0x22	; 34
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	28 60       	ori	r18, 0x08	; 8
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     5f2:	88 e6       	ldi	r24, 0x68	; 104
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	28 e6       	ldi	r18, 0x68	; 104
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	21 60       	ori	r18, 0x01	; 1
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT3;
     604:	8b e6       	ldi	r24, 0x6B	; 107
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	2b e6       	ldi	r18, 0x6B	; 107
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	f9 01       	movw	r30, r18
     60e:	20 81       	ld	r18, Z
     610:	28 60       	ori	r18, 0x08	; 8
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     616:	8b e3       	ldi	r24, 0x3B	; 59
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	2b e3       	ldi	r18, 0x3B	; 59
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	21 60       	ori	r18, 0x01	; 1
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18

}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_Z13Enable_PCINT2v>:


void Enable_PCINT2(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA2 );
     636:	81 e2       	ldi	r24, 0x21	; 33
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	21 e2       	ldi	r18, 0x21	; 33
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	2b 7f       	andi	r18, 0xFB	; 251
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA2;
     648:	82 e2       	ldi	r24, 0x22	; 34
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	22 e2       	ldi	r18, 0x22	; 34
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	24 60       	ori	r18, 0x04	; 4
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     65a:	88 e6       	ldi	r24, 0x68	; 104
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	28 e6       	ldi	r18, 0x68	; 104
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	21 60       	ori	r18, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT2;
     66c:	8b e6       	ldi	r24, 0x6B	; 107
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2b e6       	ldi	r18, 0x6B	; 107
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	24 60       	ori	r18, 0x04	; 4
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     67e:	8b e3       	ldi	r24, 0x3B	; 59
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	2b e3       	ldi	r18, 0x3B	; 59
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	21 60       	ori	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18

}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	6c 97       	sbiw	r28, 0x1c	; 28
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     6aa:	81 e2       	ldi	r24, 0x21	; 33
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	21 e2       	ldi	r18, 0x21	; 33
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	21 60       	ori	r18, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	22 e2       	ldi	r18, 0x22	; 34
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	21 60       	ori	r18, 0x01	; 1
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	aa e7       	ldi	r26, 0x7A	; 122
     6d4:	b3 e4       	ldi	r27, 0x43	; 67
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	ab 83       	std	Y+3, r26	; 0x03
     6dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4a e7       	ldi	r20, 0x7A	; 122
     6e4:	53 e4       	ldi	r21, 0x43	; 67
     6e6:	69 81       	ldd	r22, Y+1	; 0x01
     6e8:	7a 81       	ldd	r23, Y+2	; 0x02
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	8d 83       	std	Y+5, r24	; 0x05
     6f8:	9e 83       	std	Y+6, r25	; 0x06
     6fa:	af 83       	std	Y+7, r26	; 0x07
     6fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	5f e3       	ldi	r21, 0x3F	; 63
     706:	6d 81       	ldd	r22, Y+5	; 0x05
     708:	7e 81       	ldd	r23, Y+6	; 0x06
     70a:	8f 81       	ldd	r24, Y+7	; 0x07
     70c:	98 85       	ldd	r25, Y+8	; 0x08
     70e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	2c f4       	brge	.+10     	; 0x720 <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9a 87       	std	Y+10, r25	; 0x0a
     71c:	89 87       	std	Y+9, r24	; 0x09
     71e:	3f c0       	rjmp	.+126    	; 0x79e <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	4f e7       	ldi	r20, 0x7F	; 127
     726:	57 e4       	ldi	r21, 0x47	; 71
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	4c f5       	brge	.+82     	; 0x78a <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e2       	ldi	r20, 0x20	; 32
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	69 81       	ldd	r22, Y+1	; 0x01
     742:	7a 81       	ldd	r23, Y+2	; 0x02
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9a 87       	std	Y+10, r25	; 0x0a
     75e:	89 87       	std	Y+9, r24	; 0x09
     760:	0f c0       	rjmp	.+30     	; 0x780 <_Z14Test_On_PortA0v+0xea>
     762:	89 e1       	ldi	r24, 0x19	; 25
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	9c 87       	std	Y+12, r25	; 0x0c
     768:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     76a:	8b 85       	ldd	r24, Y+11	; 0x0b
     76c:	9c 85       	ldd	r25, Y+12	; 0x0c
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <_Z14Test_On_PortA0v+0xd8>
     772:	9c 87       	std	Y+12, r25	; 0x0c
     774:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     776:	89 85       	ldd	r24, Y+9	; 0x09
     778:	9a 85       	ldd	r25, Y+10	; 0x0a
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	9a 87       	std	Y+10, r25	; 0x0a
     77e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     780:	89 85       	ldd	r24, Y+9	; 0x09
     782:	9a 85       	ldd	r25, Y+10	; 0x0a
     784:	89 2b       	or	r24, r25
     786:	69 f7       	brne	.-38     	; 0x762 <_Z14Test_On_PortA0v+0xcc>
     788:	14 c0       	rjmp	.+40     	; 0x7b2 <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78a:	6d 81       	ldd	r22, Y+5	; 0x05
     78c:	7e 81       	ldd	r23, Y+6	; 0x06
     78e:	8f 81       	ldd	r24, Y+7	; 0x07
     790:	98 85       	ldd	r25, Y+8	; 0x08
     792:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9a 87       	std	Y+10, r25	; 0x0a
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a2:	9e 87       	std	Y+14, r25	; 0x0e
     7a4:	8d 87       	std	Y+13, r24	; 0x0d
     7a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <_Z14Test_On_PortA0v+0x114>
     7ae:	9e 87       	std	Y+14, r25	; 0x0e
     7b0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     7b2:	82 e2       	ldi	r24, 0x22	; 34
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	22 e2       	ldi	r18, 0x22	; 34
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	2e 7f       	andi	r18, 0xFE	; 254
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	aa e7       	ldi	r26, 0x7A	; 122
     7ca:	b3 e4       	ldi	r27, 0x43	; 67
     7cc:	8f 87       	std	Y+15, r24	; 0x0f
     7ce:	98 8b       	std	Y+16, r25	; 0x10
     7d0:	a9 8b       	std	Y+17, r26	; 0x11
     7d2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	4a e7       	ldi	r20, 0x7A	; 122
     7da:	53 e4       	ldi	r21, 0x43	; 67
     7dc:	6f 85       	ldd	r22, Y+15	; 0x0f
     7de:	78 89       	ldd	r23, Y+16	; 0x10
     7e0:	89 89       	ldd	r24, Y+17	; 0x11
     7e2:	9a 89       	ldd	r25, Y+18	; 0x12
     7e4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	8b 8b       	std	Y+19, r24	; 0x13
     7ee:	9c 8b       	std	Y+20, r25	; 0x14
     7f0:	ad 8b       	std	Y+21, r26	; 0x15
     7f2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e8       	ldi	r20, 0x80	; 128
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	6b 89       	ldd	r22, Y+19	; 0x13
     7fe:	7c 89       	ldd	r23, Y+20	; 0x14
     800:	8d 89       	ldd	r24, Y+21	; 0x15
     802:	9e 89       	ldd	r25, Y+22	; 0x16
     804:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     808:	88 23       	and	r24, r24
     80a:	2c f4       	brge	.+10     	; 0x816 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	98 8f       	std	Y+24, r25	; 0x18
     812:	8f 8b       	std	Y+23, r24	; 0x17
     814:	3f c0       	rjmp	.+126    	; 0x894 <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	6b 89       	ldd	r22, Y+19	; 0x13
     820:	7c 89       	ldd	r23, Y+20	; 0x14
     822:	8d 89       	ldd	r24, Y+21	; 0x15
     824:	9e 89       	ldd	r25, Y+22	; 0x16
     826:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	4c f5       	brge	.+82     	; 0x880 <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	51 e4       	ldi	r21, 0x41	; 65
     836:	6f 85       	ldd	r22, Y+15	; 0x0f
     838:	78 89       	ldd	r23, Y+16	; 0x10
     83a:	89 89       	ldd	r24, Y+17	; 0x11
     83c:	9a 89       	ldd	r25, Y+18	; 0x12
     83e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	bc 01       	movw	r22, r24
     848:	cd 01       	movw	r24, r26
     84a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	98 8f       	std	Y+24, r25	; 0x18
     854:	8f 8b       	std	Y+23, r24	; 0x17
     856:	0f c0       	rjmp	.+30     	; 0x876 <_Z14Test_On_PortA0v+0x1e0>
     858:	89 e1       	ldi	r24, 0x19	; 25
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9a 8f       	std	Y+26, r25	; 0x1a
     85e:	89 8f       	std	Y+25, r24	; 0x19
     860:	89 8d       	ldd	r24, Y+25	; 0x19
     862:	9a 8d       	ldd	r25, Y+26	; 0x1a
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <_Z14Test_On_PortA0v+0x1ce>
     868:	9a 8f       	std	Y+26, r25	; 0x1a
     86a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86c:	8f 89       	ldd	r24, Y+23	; 0x17
     86e:	98 8d       	ldd	r25, Y+24	; 0x18
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	98 8f       	std	Y+24, r25	; 0x18
     874:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     876:	8f 89       	ldd	r24, Y+23	; 0x17
     878:	98 8d       	ldd	r25, Y+24	; 0x18
     87a:	89 2b       	or	r24, r25
     87c:	69 f7       	brne	.-38     	; 0x858 <_Z14Test_On_PortA0v+0x1c2>
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     880:	6b 89       	ldd	r22, Y+19	; 0x13
     882:	7c 89       	ldd	r23, Y+20	; 0x14
     884:	8d 89       	ldd	r24, Y+21	; 0x15
     886:	9e 89       	ldd	r25, Y+22	; 0x16
     888:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	98 8f       	std	Y+24, r25	; 0x18
     892:	8f 8b       	std	Y+23, r24	; 0x17
     894:	8f 89       	ldd	r24, Y+23	; 0x17
     896:	98 8d       	ldd	r25, Y+24	; 0x18
     898:	9c 8f       	std	Y+28, r25	; 0x1c
     89a:	8b 8f       	std	Y+27, r24	; 0x1b
     89c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     89e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <_Z14Test_On_PortA0v+0x20a>
     8a4:	9c 8f       	std	Y+28, r25	; 0x1c
     8a6:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     8a8:	82 e2       	ldi	r24, 0x22	; 34
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	22 e2       	ldi	r18, 0x22	; 34
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	21 60       	ori	r18, 0x01	; 1
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
	
}
     8ba:	6c 96       	adiw	r28, 0x1c	; 28
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <__vector_4>:


ISR( PCINT0_vect ){
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	00 90 5f 00 	lds	r0, 0x005F
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	00 90 5b 00 	lds	r0, 0x005B
     8dc:	0f 92       	push	r0
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	a0 97       	sbiw	r28, 0x20	; 32
     910:	de bf       	out	0x3e, r29	; 62
     912:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	uint8_t valCounter{ 100 };
     914:	84 e6       	ldi	r24, 0x64	; 100
     916:	89 83       	std	Y+1, r24	; 0x01
	uint8_t valIDelta{ valCounter / 100 };
     918:	99 81       	ldd	r25, Y+1	; 0x01
     91a:	89 e2       	ldi	r24, 0x29	; 41
     91c:	98 9f       	mul	r25, r24
     91e:	81 2d       	mov	r24, r1
     920:	11 24       	eor	r1, r1
     922:	82 95       	swap	r24
     924:	8f 70       	andi	r24, 0x0F	; 15
     926:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t valI{ 0 };
     928:	1a 82       	std	Y+2, r1	; 0x02

	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     92a:	80 91 20 00 	lds	r24, 0x0020
     92e:	88 a3       	std	Y+32, r24	; 0x20
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     930:	88 a1       	ldd	r24, Y+32	; 0x20
     932:	88 2f       	mov	r24, r24
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	88 70       	andi	r24, 0x08	; 8
     938:	99 27       	eor	r25, r25
     93a:	89 2b       	or	r24, r25
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_4+0x74>
     93e:	1e c1       	rjmp	.+572    	; 0xb7c <__vector_4+0x2b0>
		DDRA |= 1 << PORTA4;
     940:	81 e2       	ldi	r24, 0x21	; 33
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	21 e2       	ldi	r18, 0x21	; 33
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	20 61       	ori	r18, 0x10	; 16
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     952:	82 e2       	ldi	r24, 0x22	; 34
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	22 e2       	ldi	r18, 0x22	; 34
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	20 61       	ori	r18, 0x10	; 16
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	aa e7       	ldi	r26, 0x7A	; 122
     96a:	b3 e4       	ldi	r27, 0x43	; 67
     96c:	8c 83       	std	Y+4, r24	; 0x04
     96e:	9d 83       	std	Y+5, r25	; 0x05
     970:	ae 83       	std	Y+6, r26	; 0x06
     972:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	4a e7       	ldi	r20, 0x7A	; 122
     97a:	53 e4       	ldi	r21, 0x43	; 67
     97c:	6c 81       	ldd	r22, Y+4	; 0x04
     97e:	7d 81       	ldd	r23, Y+5	; 0x05
     980:	8e 81       	ldd	r24, Y+6	; 0x06
     982:	9f 81       	ldd	r25, Y+7	; 0x07
     984:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	88 87       	std	Y+8, r24	; 0x08
     98e:	99 87       	std	Y+9, r25	; 0x09
     990:	aa 87       	std	Y+10, r26	; 0x0a
     992:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e8       	ldi	r20, 0x80	; 128
     99a:	5f e3       	ldi	r21, 0x3F	; 63
     99c:	68 85       	ldd	r22, Y+8	; 0x08
     99e:	79 85       	ldd	r23, Y+9	; 0x09
     9a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     9a4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     9a8:	88 23       	and	r24, r24
     9aa:	2c f4       	brge	.+10     	; 0x9b6 <__vector_4+0xea>
		__ticks = 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	9d 87       	std	Y+13, r25	; 0x0d
     9b2:	8c 87       	std	Y+12, r24	; 0x0c
     9b4:	3f c0       	rjmp	.+126    	; 0xa34 <__vector_4+0x168>
	else if (__tmp > 65535)
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	3f ef       	ldi	r19, 0xFF	; 255
     9ba:	4f e7       	ldi	r20, 0x7F	; 127
     9bc:	57 e4       	ldi	r21, 0x47	; 71
     9be:	68 85       	ldd	r22, Y+8	; 0x08
     9c0:	79 85       	ldd	r23, Y+9	; 0x09
     9c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9c6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     9ca:	18 16       	cp	r1, r24
     9cc:	4c f5       	brge	.+82     	; 0xa20 <__vector_4+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e2       	ldi	r20, 0x20	; 32
     9d4:	51 e4       	ldi	r21, 0x41	; 65
     9d6:	6c 81       	ldd	r22, Y+4	; 0x04
     9d8:	7d 81       	ldd	r23, Y+5	; 0x05
     9da:	8e 81       	ldd	r24, Y+6	; 0x06
     9dc:	9f 81       	ldd	r25, Y+7	; 0x07
     9de:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	9d 87       	std	Y+13, r25	; 0x0d
     9f4:	8c 87       	std	Y+12, r24	; 0x0c
     9f6:	0f c0       	rjmp	.+30     	; 0xa16 <__vector_4+0x14a>
     9f8:	89 e1       	ldi	r24, 0x19	; 25
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9f 87       	std	Y+15, r25	; 0x0f
     9fe:	8e 87       	std	Y+14, r24	; 0x0e
     a00:	8e 85       	ldd	r24, Y+14	; 0x0e
     a02:	9f 85       	ldd	r25, Y+15	; 0x0f
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <__vector_4+0x138>
     a08:	9f 87       	std	Y+15, r25	; 0x0f
     a0a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	9d 87       	std	Y+13, r25	; 0x0d
     a14:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a16:	8c 85       	ldd	r24, Y+12	; 0x0c
     a18:	9d 85       	ldd	r25, Y+13	; 0x0d
     a1a:	89 2b       	or	r24, r25
     a1c:	69 f7       	brne	.-38     	; 0x9f8 <__vector_4+0x12c>
     a1e:	14 c0       	rjmp	.+40     	; 0xa48 <__vector_4+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a20:	68 85       	ldd	r22, Y+8	; 0x08
     a22:	79 85       	ldd	r23, Y+9	; 0x09
     a24:	8a 85       	ldd	r24, Y+10	; 0x0a
     a26:	9b 85       	ldd	r25, Y+11	; 0x0b
     a28:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	9d 87       	std	Y+13, r25	; 0x0d
     a32:	8c 87       	std	Y+12, r24	; 0x0c
     a34:	8c 85       	ldd	r24, Y+12	; 0x0c
     a36:	9d 85       	ldd	r25, Y+13	; 0x0d
     a38:	99 8b       	std	Y+17, r25	; 0x11
     a3a:	88 8b       	std	Y+16, r24	; 0x10
     a3c:	88 89       	ldd	r24, Y+16	; 0x10
     a3e:	99 89       	ldd	r25, Y+17	; 0x11
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <__vector_4+0x174>
     a44:	99 8b       	std	Y+17, r25	; 0x11
     a46:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
     a48:	82 e2       	ldi	r24, 0x22	; 34
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	22 e2       	ldi	r18, 0x22	; 34
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	2f 7e       	andi	r18, 0xEF	; 239
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
		do{
			ledAlarm.set( valI );
     a5a:	6a 81       	ldd	r22, Y+2	; 0x02
     a5c:	83 e7       	ldi	r24, 0x73	; 115
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN3led3setEh>
			valI = valI + valIDelta;
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	89 0f       	add	r24, r25
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a8 ec       	ldi	r26, 0xC8	; 200
     a72:	b2 e4       	ldi	r27, 0x42	; 66
     a74:	8a 8b       	std	Y+18, r24	; 0x12
     a76:	9b 8b       	std	Y+19, r25	; 0x13
     a78:	ac 8b       	std	Y+20, r26	; 0x14
     a7a:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	4a e7       	ldi	r20, 0x7A	; 122
     a82:	53 e4       	ldi	r21, 0x43	; 67
     a84:	6a 89       	ldd	r22, Y+18	; 0x12
     a86:	7b 89       	ldd	r23, Y+19	; 0x13
     a88:	8c 89       	ldd	r24, Y+20	; 0x14
     a8a:	9d 89       	ldd	r25, Y+21	; 0x15
     a8c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     a90:	dc 01       	movw	r26, r24
     a92:	cb 01       	movw	r24, r22
     a94:	8e 8b       	std	Y+22, r24	; 0x16
     a96:	9f 8b       	std	Y+23, r25	; 0x17
     a98:	a8 8f       	std	Y+24, r26	; 0x18
     a9a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e8       	ldi	r20, 0x80	; 128
     aa2:	5f e3       	ldi	r21, 0x3F	; 63
     aa4:	6e 89       	ldd	r22, Y+22	; 0x16
     aa6:	7f 89       	ldd	r23, Y+23	; 0x17
     aa8:	88 8d       	ldd	r24, Y+24	; 0x18
     aaa:	99 8d       	ldd	r25, Y+25	; 0x19
     aac:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     ab0:	88 23       	and	r24, r24
     ab2:	2c f4       	brge	.+10     	; 0xabe <__vector_4+0x1f2>
		__ticks = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	9b 8f       	std	Y+27, r25	; 0x1b
     aba:	8a 8f       	std	Y+26, r24	; 0x1a
     abc:	3f c0       	rjmp	.+126    	; 0xb3c <__vector_4+0x270>
	else if (__tmp > 65535)
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	3f ef       	ldi	r19, 0xFF	; 255
     ac2:	4f e7       	ldi	r20, 0x7F	; 127
     ac4:	57 e4       	ldi	r21, 0x47	; 71
     ac6:	6e 89       	ldd	r22, Y+22	; 0x16
     ac8:	7f 89       	ldd	r23, Y+23	; 0x17
     aca:	88 8d       	ldd	r24, Y+24	; 0x18
     acc:	99 8d       	ldd	r25, Y+25	; 0x19
     ace:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     ad2:	18 16       	cp	r1, r24
     ad4:	4c f5       	brge	.+82     	; 0xb28 <__vector_4+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e2       	ldi	r20, 0x20	; 32
     adc:	51 e4       	ldi	r21, 0x41	; 65
     ade:	6a 89       	ldd	r22, Y+18	; 0x12
     ae0:	7b 89       	ldd	r23, Y+19	; 0x13
     ae2:	8c 89       	ldd	r24, Y+20	; 0x14
     ae4:	9d 89       	ldd	r25, Y+21	; 0x15
     ae6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	9b 8f       	std	Y+27, r25	; 0x1b
     afc:	8a 8f       	std	Y+26, r24	; 0x1a
     afe:	0f c0       	rjmp	.+30     	; 0xb1e <__vector_4+0x252>
     b00:	89 e1       	ldi	r24, 0x19	; 25
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	9d 8f       	std	Y+29, r25	; 0x1d
     b06:	8c 8f       	std	Y+28, r24	; 0x1c
     b08:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <__vector_4+0x240>
     b10:	9d 8f       	std	Y+29, r25	; 0x1d
     b12:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b16:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9b 8f       	std	Y+27, r25	; 0x1b
     b1c:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b20:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b22:	89 2b       	or	r24, r25
     b24:	69 f7       	brne	.-38     	; 0xb00 <__vector_4+0x234>
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <__vector_4+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b28:	6e 89       	ldd	r22, Y+22	; 0x16
     b2a:	7f 89       	ldd	r23, Y+23	; 0x17
     b2c:	88 8d       	ldd	r24, Y+24	; 0x18
     b2e:	99 8d       	ldd	r25, Y+25	; 0x19
     b30:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	9b 8f       	std	Y+27, r25	; 0x1b
     b3a:	8a 8f       	std	Y+26, r24	; 0x1a
     b3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b40:	9f 8f       	std	Y+31, r25	; 0x1f
     b42:	8e 8f       	std	Y+30, r24	; 0x1e
     b44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b46:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <__vector_4+0x27c>
     b4c:	9f 8f       	std	Y+31, r25	; 0x1f
     b4e:	8e 8f       	std	Y+30, r24	; 0x1e
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
		DDRA |= 1 << PORTA4;
		PORTA |= ( 1 << PINA4);
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
		do{
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	81 50       	subi	r24, 0x01	; 1
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	99 81       	ldd	r25, Y+1	; 0x01
     b5a:	99 23       	and	r25, r25
     b5c:	09 f4       	brne	.+2      	; 0xb60 <__vector_4+0x294>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	88 23       	and	r24, r24
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_4+0x29a>
     b64:	7a cf       	rjmp	.-268    	; 0xa5a <__vector_4+0x18e>
			ledAlarm.set( valI );
			valI = valI + valIDelta;
			_delay_ms( 100 );
		}while( --valCounter );
		ledAlarm.set( 0 );
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	83 e7       	ldi	r24, 0x73	; 115
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN3led3setEh>
		rtcDS.clear_interupt( RTC_ALARM_0 );
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e7       	ldi	r24, 0x70	; 112
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 57 14 	call	0x28ae	; 0x28ae <_ZN3rtc14clear_interuptEh>
     b7a:	2d c0       	rjmp	.+90     	; 0xbd6 <__vector_4+0x30a>
	}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
     b7c:	88 a1       	ldd	r24, Y+32	; 0x20
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	84 70       	andi	r24, 0x04	; 4
     b84:	99 27       	eor	r25, r25
     b86:	89 2b       	or	r24, r25
     b88:	31 f5       	brne	.+76     	; 0xbd6 <__vector_4+0x30a>
		rtmCurrent = rtcDS.get();
     b8a:	80 e7       	ldi	r24, 0x70	; 112
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	04 dc       	rcall	.-2040   	; 0x398 <_ZN3rtc3getEv>
     b90:	a2 2e       	mov	r10, r18
     b92:	b3 2e       	mov	r11, r19
     b94:	c4 2e       	mov	r12, r20
     b96:	d5 2e       	mov	r13, r21
     b98:	e6 2e       	mov	r14, r22
     b9a:	f7 2e       	mov	r15, r23
     b9c:	08 2f       	mov	r16, r24
     b9e:	19 2f       	mov	r17, r25
     ba0:	2a 2d       	mov	r18, r10
     ba2:	3b 2d       	mov	r19, r11
     ba4:	4c 2d       	mov	r20, r12
     ba6:	5d 2d       	mov	r21, r13
     ba8:	6e 2d       	mov	r22, r14
     baa:	7f 2d       	mov	r23, r15
     bac:	80 2f       	mov	r24, r16
     bae:	91 2f       	mov	r25, r17
     bb0:	20 93 00 01 	sts	0x0100, r18
     bb4:	30 93 01 01 	sts	0x0101, r19
     bb8:	40 93 02 01 	sts	0x0102, r20
     bbc:	50 93 03 01 	sts	0x0103, r21
     bc0:	60 93 04 01 	sts	0x0104, r22
     bc4:	70 93 05 01 	sts	0x0105, r23
     bc8:	80 93 06 01 	sts	0x0106, r24
		rtcDS.clear_interupt( RTC_ALARM_1 );
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	80 e7       	ldi	r24, 0x70	; 112
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 57 14 	call	0x28ae	; 0x28ae <_ZN3rtc14clear_interuptEh>
	}
	
}
     bd6:	a0 96       	adiw	r28, 0x20	; 32
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	0f 90       	pop	r0
     c10:	00 92 5b 00 	sts	0x005B, r0
     c14:	0f 90       	pop	r0
     c16:	00 92 5f 00 	sts	0x005F, r0
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <_Z9Menu_Mainv>:


void Menu_Main(){
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	e5 97       	sbiw	r28, 0x35	; 53
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrMenuTop[LCD_LINE_SIZE];
	unsigned char chrMenuBot[LCD_LINE_SIZE]{ 'A', 'L', 'R', 'M', '|', 'B', 'A', 'T', '9', '3', '%', '|', 'O', 'P', 'T', 'S' };
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	e7 e0       	ldi	r30, 0x07	; 7
     c44:	f1 e0       	ldi	r31, 0x01	; 1
     c46:	de 01       	movw	r26, r28
     c48:	94 96       	adiw	r26, 0x24	; 36
     c4a:	01 90       	ld	r0, Z+
     c4c:	0d 92       	st	X+, r0
     c4e:	8a 95       	dec	r24
     c50:	e1 f7       	brne	.-8      	; 0xc4a <_Z9Menu_Mainv+0x2a>
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
     c52:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t valCursorState{ CURSOR_OFF };
     c54:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursorDivider{ 0 };
     c56:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t valBatUpdate{ 0 };
     c58:	1c 82       	std	Y+4, r1	; 0x04
     c5a:	1b 82       	std	Y+3, r1	; 0x03
	
	
	lcdNHD.print( chrMenuBot , LCD_LINE_BOTTOM );
     c5c:	ce 01       	movw	r24, r28
     c5e:	84 96       	adiw	r24, 0x24	; 36
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	bc 01       	movw	r22, r24
     c64:	81 e7       	ldi	r24, 0x71	; 113
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	cb d6       	rcall	.+3478   	; 0x1a00 <_ZN3lcd5printEPhh>
	
	for(;;){
		rtcDS.rtm_to_char( rtmCurrent, chrMenuTop, LCD_LINE_SIZE );
     c6a:	ce 01       	movw	r24, r28
     c6c:	44 96       	adiw	r24, 0x14	; 20
     c6e:	68 94       	set
     c70:	cc 24       	eor	r12, r12
     c72:	c4 f8       	bld	r12, 4
     c74:	d1 2c       	mov	r13, r1
     c76:	7c 01       	movw	r14, r24
     c78:	00 91 00 01 	lds	r16, 0x0100
     c7c:	10 91 01 01 	lds	r17, 0x0101
     c80:	20 91 02 01 	lds	r18, 0x0102
     c84:	30 91 03 01 	lds	r19, 0x0103
     c88:	40 91 04 01 	lds	r20, 0x0104
     c8c:	50 91 05 01 	lds	r21, 0x0105
     c90:	60 91 06 01 	lds	r22, 0x0106
     c94:	80 e7       	ldi	r24, 0x70	; 112
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrMenuTop , LCD_LINE_TOP );
     c9c:	ce 01       	movw	r24, r28
     c9e:	44 96       	adiw	r24, 0x14	; 20
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	bc 01       	movw	r22, r24
     ca4:	81 e7       	ldi	r24, 0x71	; 113
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	ab d6       	rcall	.+3414   	; 0x1a00 <_ZN3lcd5printEPhh>
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	2a e0       	ldi	r18, 0x0A	; 10
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	b9 01       	movw	r22, r18
     cb8:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodhi4>
     cbc:	8a 83       	std	Y+2, r24	; 0x02
		if( valCursorDivider == 0 ){
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	88 23       	and	r24, r24
     cc2:	19 f4       	brne	.+6      	; 0xcca <_Z9Menu_Mainv+0xaa>
					valCursorState = ~valCursorState;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	80 95       	com	r24
     cc8:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if( valCursorState == CURSOR_OFF ){
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	88 23       	and	r24, r24
     cce:	81 f4       	brne	.+32     	; 0xcf0 <_Z9Menu_Mainv+0xd0>
			chrMenuBot[0] = 'A';
     cd0:	81 e4       	ldi	r24, 0x41	; 65
     cd2:	8c a3       	std	Y+36, r24	; 0x24
			chrMenuBot[1] = 'L';
     cd4:	8c e4       	ldi	r24, 0x4C	; 76
     cd6:	8d a3       	std	Y+37, r24	; 0x25
			chrMenuBot[2] = 'R';
     cd8:	82 e5       	ldi	r24, 0x52	; 82
     cda:	8e a3       	std	Y+38, r24	; 0x26
			chrMenuBot[3] = 'M';
     cdc:	8d e4       	ldi	r24, 0x4D	; 77
     cde:	8f a3       	std	Y+39, r24	; 0x27
			chrMenuBot[12] = 'O';
     ce0:	8f e4       	ldi	r24, 0x4F	; 79
     ce2:	88 ab       	std	Y+48, r24	; 0x30
			chrMenuBot[13] = 'P';
     ce4:	80 e5       	ldi	r24, 0x50	; 80
     ce6:	89 ab       	std	Y+49, r24	; 0x31
			chrMenuBot[14] = 'T';
     ce8:	84 e5       	ldi	r24, 0x54	; 84
     cea:	8a ab       	std	Y+50, r24	; 0x32
			chrMenuBot[15] = 'S';
     cec:	83 e5       	ldi	r24, 0x53	; 83
     cee:	8b ab       	std	Y+51, r24	; 0x33
		}
		
		if( valMenuState == MAIN_STATE_ALARMS ){
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	88 23       	and	r24, r24
     cf4:	a1 f4       	brne	.+40     	; 0xd1e <_Z9Menu_Mainv+0xfe>
			if( valCursorState == CURSOR_ON ){
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	39 f5       	brne	.+78     	; 0xd4a <_Z9Menu_Mainv+0x12a>
				chrMenuBot[0] = '_';
     cfc:	8f e5       	ldi	r24, 0x5F	; 95
     cfe:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[1] = '_';
     d00:	8f e5       	ldi	r24, 0x5F	; 95
     d02:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[2] = '_';
     d04:	8f e5       	ldi	r24, 0x5F	; 95
     d06:	8e a3       	std	Y+38, r24	; 0x26
				chrMenuBot[3] = '_';
     d08:	8f e5       	ldi	r24, 0x5F	; 95
     d0a:	8f a3       	std	Y+39, r24	; 0x27
				chrMenuBot[12] = 'O';
     d0c:	8f e4       	ldi	r24, 0x4F	; 79
     d0e:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[13] = 'P';
     d10:	80 e5       	ldi	r24, 0x50	; 80
     d12:	89 ab       	std	Y+49, r24	; 0x31
				chrMenuBot[14] = 'T';
     d14:	84 e5       	ldi	r24, 0x54	; 84
     d16:	8a ab       	std	Y+50, r24	; 0x32
				chrMenuBot[15] = 'S';
     d18:	83 e5       	ldi	r24, 0x53	; 83
     d1a:	8b ab       	std	Y+51, r24	; 0x33
     d1c:	16 c0       	rjmp	.+44     	; 0xd4a <_Z9Menu_Mainv+0x12a>
			}
		}else if( valMenuState == MAIN_STATE_SETTINGS ){
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	99 f4       	brne	.+38     	; 0xd4a <_Z9Menu_Mainv+0x12a>
			if( valCursorState == CURSOR_ON ){
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	81 f4       	brne	.+32     	; 0xd4a <_Z9Menu_Mainv+0x12a>
				chrMenuBot[0] = '_';
     d2a:	8f e5       	ldi	r24, 0x5F	; 95
     d2c:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[1] = '_';
     d2e:	8f e5       	ldi	r24, 0x5F	; 95
     d30:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[2] = '_';
     d32:	8f e5       	ldi	r24, 0x5F	; 95
     d34:	8e a3       	std	Y+38, r24	; 0x26
				chrMenuBot[3] = '_';
     d36:	8f e5       	ldi	r24, 0x5F	; 95
     d38:	8f a3       	std	Y+39, r24	; 0x27
				chrMenuBot[12] = '#';
     d3a:	83 e2       	ldi	r24, 0x23	; 35
     d3c:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[13] = '#';
     d3e:	83 e2       	ldi	r24, 0x23	; 35
     d40:	89 ab       	std	Y+49, r24	; 0x31
				chrMenuBot[14] = '#';
     d42:	83 e2       	ldi	r24, 0x23	; 35
     d44:	8a ab       	std	Y+50, r24	; 0x32
				chrMenuBot[15] = '#';
     d46:	83 e2       	ldi	r24, 0x23	; 35
     d48:	8b ab       	std	Y+51, r24	; 0x33
			}
		}
		
		if( valBatUpdate == 0 ){
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	89 2b       	or	r24, r25
     d50:	a9 f4       	brne	.+42     	; 0xd7c <_Z9Menu_Mainv+0x15c>
			chrMenuBot[8] = ( batLiPo.get() >> 4 ) + 0x30;
     d52:	82 e7       	ldi	r24, 0x72	; 114
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	a0 da       	rcall	.-2752   	; 0x298 <_ZN3bat3getEv>
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	95 95       	asr	r25
     d5e:	87 95       	ror	r24
     d60:	95 95       	asr	r25
     d62:	87 95       	ror	r24
     d64:	95 95       	asr	r25
     d66:	87 95       	ror	r24
     d68:	95 95       	asr	r25
     d6a:	87 95       	ror	r24
     d6c:	80 5d       	subi	r24, 0xD0	; 208
     d6e:	8c a7       	std	Y+44, r24	; 0x2c
			chrMenuBot[9] = ( batLiPo.get() & 0x0F ) + 0x30;
     d70:	82 e7       	ldi	r24, 0x72	; 114
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	91 da       	rcall	.-2782   	; 0x298 <_ZN3bat3getEv>
     d76:	8f 70       	andi	r24, 0x0F	; 15
     d78:	80 5d       	subi	r24, 0xD0	; 208
     d7a:	8d a7       	std	Y+45, r24	; 0x2d
		}
		valBatUpdate = ( valBatUpdate + 1 ) % 100;
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	ac 01       	movw	r20, r24
     d82:	4f 5f       	subi	r20, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	ca 01       	movw	r24, r20
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	9c 01       	movw	r18, r24
     d92:	ab e7       	ldi	r26, 0x7B	; 123
     d94:	b4 e1       	ldi	r27, 0x14	; 20
     d96:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__umulhisi3>
     d9a:	9c 01       	movw	r18, r24
     d9c:	36 95       	lsr	r19
     d9e:	27 95       	ror	r18
     da0:	64 e6       	ldi	r22, 0x64	; 100
     da2:	62 9f       	mul	r22, r18
     da4:	c0 01       	movw	r24, r0
     da6:	63 9f       	mul	r22, r19
     da8:	90 0d       	add	r25, r0
     daa:	11 24       	eor	r1, r1
     dac:	9a 01       	movw	r18, r20
     dae:	28 1b       	sub	r18, r24
     db0:	39 0b       	sbc	r19, r25
     db2:	c9 01       	movw	r24, r18
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03

		
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
     db8:	ce 01       	movw	r24, r28
     dba:	84 96       	adiw	r24, 0x24	; 36
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	bc 01       	movw	r22, r24
     dc0:	81 e7       	ldi	r24, 0x71	; 113
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	1d d6       	rcall	.+3130   	; 0x1a00 <_ZN3lcd5printEPhh>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a8 e4       	ldi	r26, 0x48	; 72
     dcc:	b2 e4       	ldi	r27, 0x42	; 66
     dce:	8e 83       	std	Y+6, r24	; 0x06
     dd0:	9f 83       	std	Y+7, r25	; 0x07
     dd2:	a8 87       	std	Y+8, r26	; 0x08
     dd4:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4a e7       	ldi	r20, 0x7A	; 122
     ddc:	53 e4       	ldi	r21, 0x43	; 67
     dde:	6e 81       	ldd	r22, Y+6	; 0x06
     de0:	7f 81       	ldd	r23, Y+7	; 0x07
     de2:	88 85       	ldd	r24, Y+8	; 0x08
     de4:	99 85       	ldd	r25, Y+9	; 0x09
     de6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8a 87       	std	Y+10, r24	; 0x0a
     df0:	9b 87       	std	Y+11, r25	; 0x0b
     df2:	ac 87       	std	Y+12, r26	; 0x0c
     df4:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	6a 85       	ldd	r22, Y+10	; 0x0a
     e00:	7b 85       	ldd	r23, Y+11	; 0x0b
     e02:	8c 85       	ldd	r24, Y+12	; 0x0c
     e04:	9d 85       	ldd	r25, Y+13	; 0x0d
     e06:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <_Z9Menu_Mainv+0x1f8>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9f 87       	std	Y+15, r25	; 0x0f
     e14:	8e 87       	std	Y+14, r24	; 0x0e
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <_Z9Menu_Mainv+0x276>
	else if (__tmp > 65535)
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	6a 85       	ldd	r22, Y+10	; 0x0a
     e22:	7b 85       	ldd	r23, Y+11	; 0x0b
     e24:	8c 85       	ldd	r24, Y+12	; 0x0c
     e26:	9d 85       	ldd	r25, Y+13	; 0x0d
     e28:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <_Z9Menu_Mainv+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e2       	ldi	r20, 0x20	; 32
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	6e 81       	ldd	r22, Y+6	; 0x06
     e3a:	7f 81       	ldd	r23, Y+7	; 0x07
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	99 85       	ldd	r25, Y+9	; 0x09
     e40:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9f 87       	std	Y+15, r25	; 0x0f
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <_Z9Menu_Mainv+0x258>
     e5a:	89 e1       	ldi	r24, 0x19	; 25
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	99 8b       	std	Y+17, r25	; 0x11
     e60:	88 8b       	std	Y+16, r24	; 0x10
     e62:	88 89       	ldd	r24, Y+16	; 0x10
     e64:	99 89       	ldd	r25, Y+17	; 0x11
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <_Z9Menu_Mainv+0x246>
     e6a:	99 8b       	std	Y+17, r25	; 0x11
     e6c:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e70:	9f 85       	ldd	r25, Y+15	; 0x0f
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9f 87       	std	Y+15, r25	; 0x0f
     e76:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	8e 85       	ldd	r24, Y+14	; 0x0e
     e7a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e7c:	89 2b       	or	r24, r25
     e7e:	69 f7       	brne	.-38     	; 0xe5a <_Z9Menu_Mainv+0x23a>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <_Z9Menu_Mainv+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6a 85       	ldd	r22, Y+10	; 0x0a
     e84:	7b 85       	ldd	r23, Y+11	; 0x0b
     e86:	8c 85       	ldd	r24, Y+12	; 0x0c
     e88:	9d 85       	ldd	r25, Y+13	; 0x0d
     e8a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9f 87       	std	Y+15, r25	; 0x0f
     e94:	8e 87       	std	Y+14, r24	; 0x0e
     e96:	8e 85       	ldd	r24, Y+14	; 0x0e
     e98:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9a:	9b 8b       	std	Y+19, r25	; 0x13
     e9c:	8a 8b       	std	Y+18, r24	; 0x12
     e9e:	8a 89       	ldd	r24, Y+18	; 0x12
     ea0:	9b 89       	ldd	r25, Y+19	; 0x13
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <_Z9Menu_Mainv+0x282>
     ea6:	9b 8b       	std	Y+19, r25	; 0x13
     ea8:	8a 8b       	std	Y+18, r24	; 0x12
		_delay_ms(50);
	}
     eaa:	df ce       	rjmp	.-578    	; 0xc6a <_Z9Menu_Mainv+0x4a>

00000eac <_Z41__static_initialization_and_destruction_0ii>:
	
}
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <_Z41__static_initialization_and_destruction_0ii+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <_Z41__static_initialization_and_destruction_0ii+0x8>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	7c 83       	std	Y+4, r23	; 0x04
     ebe:	6b 83       	std	Y+3, r22	; 0x03
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	81 f4       	brne	.+32     	; 0xee8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	61 f4       	brne	.+24     	; 0xee8 <_Z41__static_initialization_and_destruction_0ii+0x3c>

 
#include "headsup.h"


rtc rtcDS;
     ed0:	80 e7       	ldi	r24, 0x70	; 112
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	98 d7       	rcall	.+3888   	; 0x1e06 <_ZN3rtcC1Ev>
lcd lcdNHD;
     ed6:	81 e7       	ldi	r24, 0x71	; 113
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	19 d0       	rcall	.+50     	; 0xf0e <_ZN3lcdC1Ev>
bat batLiPo;
     edc:	82 e7       	ldi	r24, 0x72	; 114
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	81 d9       	rcall	.-3326   	; 0x1e4 <_ZN3batC1Ev>
led ledAlarm;
     ee2:	83 e7       	ldi	r24, 0x73	; 115
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	9d d6       	rcall	.+3386   	; 0x1c22 <_ZN3ledC1Ev>
		
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
		_delay_ms(50);
	}
	
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <_GLOBAL__sub_I_rtcDS>:
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	7f ef       	ldi	r23, 0xFF	; 255
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	d2 df       	rcall	.-92     	; 0xeac <_Z41__static_initialization_and_destruction_0ii>
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <_ZN3lcdC1Ev>:
}

void lcd::TWI_CLEAR_ENABLE_ACK()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	60 97       	sbiw	r28, 0x10	; 16
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	98 8b       	std	Y+16, r25	; 0x10
     f24:	8f 87       	std	Y+15, r24	; 0x0f
     f26:	8f 85       	ldd	r24, Y+15	; 0x0f
     f28:	98 89       	ldd	r25, Y+16	; 0x10
     f2a:	81 d0       	rcall	.+258    	; 0x102e <_ZN3lcd8TWI_INITEv>
     f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2e:	98 89       	ldd	r25, Y+16	; 0x10
     f30:	87 d2       	rcall	.+1294   	; 0x1440 <_ZN3lcd4INITEv>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a0 ea       	ldi	r26, 0xA0	; 160
     f38:	b1 e4       	ldi	r27, 0x41	; 65
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	ab 83       	std	Y+3, r26	; 0x03
     f40:	bc 83       	std	Y+4, r27	; 0x04
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a e7       	ldi	r20, 0x7A	; 122
     f48:	53 e4       	ldi	r21, 0x43	; 67
     f4a:	69 81       	ldd	r22, Y+1	; 0x01
     f4c:	7a 81       	ldd	r23, Y+2	; 0x02
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	af 83       	std	Y+7, r26	; 0x07
     f60:	b8 87       	std	Y+8, r27	; 0x08
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	6d 81       	ldd	r22, Y+5	; 0x05
     f6c:	7e 81       	ldd	r23, Y+6	; 0x06
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
     f70:	98 85       	ldd	r25, Y+8	; 0x08
     f72:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
     f76:	88 23       	and	r24, r24
     f78:	2c f4       	brge	.+10     	; 0xf84 <_ZN3lcdC1Ev+0x76>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9a 87       	std	Y+10, r25	; 0x0a
     f80:	89 87       	std	Y+9, r24	; 0x09
     f82:	3f c0       	rjmp	.+126    	; 0x1002 <_ZN3lcdC1Ev+0xf4>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	6d 81       	ldd	r22, Y+5	; 0x05
     f8e:	7e 81       	ldd	r23, Y+6	; 0x06
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	98 85       	ldd	r25, Y+8	; 0x08
     f94:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
     f98:	18 16       	cp	r1, r24
     f9a:	4c f5       	brge	.+82     	; 0xfee <_ZN3lcdC1Ev+0xe0>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	69 81       	ldd	r22, Y+1	; 0x01
     fa6:	7a 81       	ldd	r23, Y+2	; 0x02
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9a 87       	std	Y+10, r25	; 0x0a
     fc2:	89 87       	std	Y+9, r24	; 0x09
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <_ZN3lcdC1Ev+0xd6>
     fc6:	89 e1       	ldi	r24, 0x19	; 25
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
     fce:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <_ZN3lcdC1Ev+0xc4>
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	9a 87       	std	Y+10, r25	; 0x0a
     fe2:	89 87       	std	Y+9, r24	; 0x09
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	89 2b       	or	r24, r25
     fea:	69 f7       	brne	.-38     	; 0xfc6 <_ZN3lcdC1Ev+0xb8>
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <_ZN3lcdC1Ev+0x108>
     fee:	6d 81       	ldd	r22, Y+5	; 0x05
     ff0:	7e 81       	ldd	r23, Y+6	; 0x06
     ff2:	8f 81       	ldd	r24, Y+7	; 0x07
     ff4:	98 85       	ldd	r25, Y+8	; 0x08
     ff6:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9a 87       	std	Y+10, r25	; 0x0a
    1000:	89 87       	std	Y+9, r24	; 0x09
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	9e 87       	std	Y+14, r25	; 0x0e
    1008:	8d 87       	std	Y+13, r24	; 0x0d
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <_ZN3lcdC1Ev+0x100>
    1012:	9e 87       	std	Y+14, r25	; 0x0e
    1014:	8d 87       	std	Y+13, r24	; 0x0d
    1016:	8f 85       	ldd	r24, Y+15	; 0x0f
    1018:	98 89       	ldd	r25, Y+16	; 0x10
    101a:	49 d4       	rcall	.+2194   	; 0x18ae <_ZN3lcd12SHOW_WELCOMEEv>
    101c:	60 96       	adiw	r28, 0x10	; 16
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <_ZN3lcd8TWI_INITEv>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <_ZN3lcd8TWI_INITEv+0x6>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	84 e6       	ldi	r24, 0x64	; 100
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	24 e6       	ldi	r18, 0x64	; 100
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	f9 01       	movw	r30, r18
    1046:	20 81       	ld	r18, Z
    1048:	2f 77       	andi	r18, 0x7F	; 127
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	8c eb       	ldi	r24, 0xBC	; 188
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2c eb       	ldi	r18, 0xBC	; 188
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	f9 01       	movw	r30, r18
    1058:	20 81       	ld	r18, Z
    105a:	2e 7f       	andi	r18, 0xFE	; 254
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
    1060:	88 eb       	ldi	r24, 0xB8	; 184
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	89 eb       	ldi	r24, 0xB9	; 185
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	29 eb       	ldi	r18, 0xB9	; 185
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	2d 7f       	andi	r18, 0xFD	; 253
    1078:	fc 01       	movw	r30, r24
    107a:	20 83       	st	Z, r18
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <_ZN3lcd16TWI_CHECK_STATUSEh>:
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2a 97       	sbiw	r28, 0x0a	; 10
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6b 83       	std	Y+3, r22	; 0x03
    10a0:	89 eb       	ldi	r24, 0xB9	; 185
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	2a 96       	adiw	r28, 0x0a	; 10
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <_ZN3lcd16TWI_CLEAR_ENABLEEv>:
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <_ZN3lcd16TWI_CLEAR_ENABLEEv+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	8c eb       	ldi	r24, 0xBC	; 188
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	24 e8       	ldi	r18, 0x84	; 132
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 83       	st	Z, r18
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <_ZN3lcd8TWI_STOPEv+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    10ea:	8c eb       	ldi	r24, 0xBC	; 188
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	24 e9       	ldi	r18, 0x94	; 148
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
	
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <_ZN3lcd9TWI_STARTEv>:

void lcd::TWI_START(){
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	00 d0       	rcall	.+0      	; 0x1104 <_ZN3lcd9TWI_STARTEv+0x6>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    110c:	8c eb       	ldi	r24, 0xBC	; 188
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	24 ea       	ldi	r18, 0xA4	; 164
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
    1116:	00 00       	nop
    1118:	8c eb       	ldi	r24, 0xBC	; 188
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	80 95       	com	r24
    1122:	88 1f       	adc	r24, r24
    1124:	88 27       	eor	r24, r24
    1126:	88 1f       	adc	r24, r24
    1128:	88 23       	and	r24, r24
    112a:	b1 f7       	brne	.-20     	; 0x1118 <_ZN3lcd9TWI_STARTEv+0x1a>
	TWI_CHECK_STATUS(LCD_TW_START);
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	68 e0       	ldi	r22, 0x08	; 8
    1132:	a9 df       	rcall	.-174    	; 0x1086 <_ZN3lcd16TWI_CHECK_STATUSEh>
	
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <_ZN3lcd12TWI_TRANSMITEhh>:

void lcd::TWI_TRANSMIT(uint8_t TwiData, uint8_t StatusCode){
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	00 d0       	rcall	.+0      	; 0x1144 <_ZN3lcd12TWI_TRANSMITEhh+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <_ZN3lcd12TWI_TRANSMITEhh+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6b 83       	std	Y+3, r22	; 0x03
    1150:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
    1152:	8b eb       	ldi	r24, 0xBB	; 187
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	2b 81       	ldd	r18, Y+3	; 0x03
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
	/*After TWDR is loaded with LCD_SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the LCD_SLA+W present in TWDR*/
	TWI_CLEAR_ENABLE();
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	ac df       	rcall	.-168    	; 0x10ba <_ZN3lcd16TWI_CLEAR_ENABLEEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
    1162:	00 00       	nop
    1164:	8c eb       	ldi	r24, 0xBC	; 188
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	80 95       	com	r24
    116e:	88 1f       	adc	r24, r24
    1170:	88 27       	eor	r24, r24
    1172:	88 1f       	adc	r24, r24
    1174:	88 23       	and	r24, r24
    1176:	b1 f7       	brne	.-20     	; 0x1164 <_ZN3lcd12TWI_TRANSMITEhh+0x26>
	TWI_CHECK_STATUS(StatusCode);	// works!!
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	6c 81       	ldd	r22, Y+4	; 0x04
    117e:	83 df       	rcall	.-250    	; 0x1086 <_ZN3lcd16TWI_CHECK_STATUSEh>

}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <_ZN3lcd4SHOWEPh>:


void lcd::SHOW(unsigned char* text){
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	00 d0       	rcall	.+0      	; 0x1194 <_ZN3lcd4SHOWEPh+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <_ZN3lcd4SHOWEPh+0x8>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <_ZN3lcd4SHOWEPh+0xa>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	7e 83       	std	Y+6, r23	; 0x06
    11a2:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_START();
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	aa df       	rcall	.-172    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	48 e1       	ldi	r20, 0x18	; 24
    11b0:	6c e7       	ldi	r22, 0x7C	; 124
    11b2:	c5 df       	rcall	.-118    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	48 e2       	ldi	r20, 0x28	; 40
    11ba:	60 e4       	ldi	r22, 0x40	; 64
    11bc:	c0 df       	rcall	.-128    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    11be:	1a 82       	std	Y+2, r1	; 0x02
    11c0:	19 82       	std	Y+1, r1	; 0x01
    11c2:	13 c0       	rjmp	.+38     	; 0x11ea <_ZN3lcd4SHOWEPh+0x5c>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 81       	ld	r18, Z
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	48 e2       	ldi	r20, 0x28	; 40
    11d2:	62 2f       	mov	r22, r18
    11d4:	b4 df       	rcall	.-152    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
		++text;
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_START();
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	40 97       	sbiw	r24, 0x10	; 16
    11f0:	4c f3       	brlt	.-46     	; 0x11c4 <_ZN3lcd4SHOWEPh+0x36>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	72 df       	rcall	.-284    	; 0x10dc <_ZN3lcd8TWI_STOPEv>
	
}
    11f8:	26 96       	adiw	r28, 0x06	; 6
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <_ZN3lcd17SELECT_LCD_LINE_1Ev>:


void lcd::SELECT_LCD_LINE_1(){
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <_ZN3lcd17SELECT_LCD_LINE_1Ev+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	70 df       	rcall	.-288    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	48 e1       	ldi	r20, 0x18	; 24
    1224:	6c e7       	ldi	r22, 0x7C	; 124
    1226:	8b df       	rcall	.-234    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	48 e2       	ldi	r20, 0x28	; 40
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	86 df       	rcall	.-244    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_1,LCD_TW_MT_DATA_ACK);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	48 e2       	ldi	r20, 0x28	; 40
    1238:	60 e8       	ldi	r22, 0x80	; 128
    123a:	81 df       	rcall	.-254    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	4d df       	rcall	.-358    	; 0x10dc <_ZN3lcd8TWI_STOPEv>
}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <_ZN3lcd17SELECT_LCD_LINE_2Ev>:


void lcd::SELECT_LCD_LINE_2(){
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <_ZN3lcd17SELECT_LCD_LINE_2Ev+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	4f df       	rcall	.-354    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	48 e1       	ldi	r20, 0x18	; 24
    1266:	6c e7       	ldi	r22, 0x7C	; 124
    1268:	6a df       	rcall	.-300    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	48 e2       	ldi	r20, 0x28	; 40
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	65 df       	rcall	.-310    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_2,LCD_TW_MT_DATA_ACK);
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	48 e2       	ldi	r20, 0x28	; 40
    127a:	60 ec       	ldi	r22, 0xC0	; 192
    127c:	60 df       	rcall	.-320    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	2c df       	rcall	.-424    	; 0x10dc <_ZN3lcd8TWI_STOPEv>
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	60 97       	sbiw	r28, 0x10	; 16
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	98 8b       	std	Y+16, r25	; 0x10
    12a4:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_START();
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	98 89       	ldd	r25, Y+16	; 0x10
    12aa:	29 df       	rcall	.-430    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	98 89       	ldd	r25, Y+16	; 0x10
    12b0:	48 e1       	ldi	r20, 0x18	; 24
    12b2:	6c e7       	ldi	r22, 0x7C	; 124
    12b4:	44 df       	rcall	.-376    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);;
    12b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b8:	98 89       	ldd	r25, Y+16	; 0x10
    12ba:	48 e2       	ldi	r20, 0x28	; 40
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	3f df       	rcall	.-386    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);		//go to instructino table 0
    12c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c2:	98 89       	ldd	r25, Y+16	; 0x10
    12c4:	48 e2       	ldi	r20, 0x28	; 40
    12c6:	68 e3       	ldi	r22, 0x38	; 56
    12c8:	3a df       	rcall	.-396    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x40,LCD_TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	98 89       	ldd	r25, Y+16	; 0x10
    12ce:	48 e2       	ldi	r20, 0x28	; 40
    12d0:	60 e4       	ldi	r22, 0x40	; 64
    12d2:	35 df       	rcall	.-406    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    12d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d6:	98 89       	ldd	r25, Y+16	; 0x10
    12d8:	01 df       	rcall	.-510    	; 0x10dc <_ZN3lcd8TWI_STOPEv>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a0 e2       	ldi	r26, 0x20	; 32
    12e0:	b1 e4       	ldi	r27, 0x41	; 65
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	ab 83       	std	Y+3, r26	; 0x03
    12e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a e7       	ldi	r20, 0x7A	; 122
    12f0:	53 e4       	ldi	r21, 0x43	; 67
    12f2:	69 81       	ldd	r22, Y+1	; 0x01
    12f4:	7a 81       	ldd	r23, Y+2	; 0x02
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	af 83       	std	Y+7, r26	; 0x07
    1308:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	6d 81       	ldd	r22, Y+5	; 0x05
    1314:	7e 81       	ldd	r23, Y+6	; 0x06
    1316:	8f 81       	ldd	r24, Y+7	; 0x07
    1318:	98 85       	ldd	r25, Y+8	; 0x08
    131a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9a 87       	std	Y+10, r25	; 0x0a
    1328:	89 87       	std	Y+9, r24	; 0x09
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	6d 81       	ldd	r22, Y+5	; 0x05
    1336:	7e 81       	ldd	r23, Y+6	; 0x06
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    1340:	18 16       	cp	r1, r24
    1342:	4c f5       	brge	.+82     	; 0x1396 <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e2       	ldi	r20, 0x20	; 32
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	69 81       	ldd	r22, Y+1	; 0x01
    134e:	7a 81       	ldd	r23, Y+2	; 0x02
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9a 87       	std	Y+10, r25	; 0x0a
    136a:	89 87       	std	Y+9, r24	; 0x09
    136c:	0f c0       	rjmp	.+30     	; 0x138c <_ZN3lcd5CGRAMEv+0xfe>
    136e:	89 e1       	ldi	r24, 0x19	; 25
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	8b 87       	std	Y+11, r24	; 0x0b
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
    1378:	9c 85       	ldd	r25, Y+12	; 0x0c
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <_ZN3lcd5CGRAMEv+0xec>
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9a 87       	std	Y+10, r25	; 0x0a
    138a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	89 2b       	or	r24, r25
    1392:	69 f7       	brne	.-38     	; 0x136e <_ZN3lcd5CGRAMEv+0xe0>
    1394:	14 c0       	rjmp	.+40     	; 0x13be <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	6d 81       	ldd	r22, Y+5	; 0x05
    1398:	7e 81       	ldd	r23, Y+6	; 0x06
    139a:	8f 81       	ldd	r24, Y+7	; 0x07
    139c:	98 85       	ldd	r25, Y+8	; 0x08
    139e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9a 87       	std	Y+10, r25	; 0x0a
    13a8:	89 87       	std	Y+9, r24	; 0x09
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	9e 87       	std	Y+14, r25	; 0x0e
    13b0:	8d 87       	std	Y+13, r24	; 0x0d
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <_ZN3lcd5CGRAMEv+0x128>
    13ba:	9e 87       	std	Y+14, r25	; 0x0e
    13bc:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_START();
    13be:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c0:	98 89       	ldd	r25, Y+16	; 0x10
    13c2:	9d de       	rcall	.-710    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	98 89       	ldd	r25, Y+16	; 0x10
    13c8:	48 e1       	ldi	r20, 0x18	; 24
    13ca:	6c e7       	ldi	r22, 0x7C	; 124
    13cc:	b8 de       	rcall	.-656    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	98 89       	ldd	r25, Y+16	; 0x10
    13d2:	48 e2       	ldi	r20, 0x28	; 40
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	b3 de       	rcall	.-666    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//write to first CGRAM address
    13d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13da:	98 89       	ldd	r25, Y+16	; 0x10
    13dc:	48 e2       	ldi	r20, 0x28	; 40
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	ae de       	rcall	.-676    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x1E,LCD_TW_MT_DATA_ACK);
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	48 e2       	ldi	r20, 0x28	; 40
    13e8:	6e e1       	ldi	r22, 0x1E	; 30
    13ea:	a9 de       	rcall	.-686    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x18,LCD_TW_MT_DATA_ACK);
    13ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ee:	98 89       	ldd	r25, Y+16	; 0x10
    13f0:	48 e2       	ldi	r20, 0x28	; 40
    13f2:	68 e1       	ldi	r22, 0x18	; 24
    13f4:	a4 de       	rcall	.-696    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	98 89       	ldd	r25, Y+16	; 0x10
    13fa:	48 e2       	ldi	r20, 0x28	; 40
    13fc:	64 e1       	ldi	r22, 0x14	; 20
    13fe:	9f de       	rcall	.-706    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x12,LCD_TW_MT_DATA_ACK);
    1400:	8f 85       	ldd	r24, Y+15	; 0x0f
    1402:	98 89       	ldd	r25, Y+16	; 0x10
    1404:	48 e2       	ldi	r20, 0x28	; 40
    1406:	62 e1       	ldi	r22, 0x12	; 18
    1408:	9a de       	rcall	.-716    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    140a:	8f 85       	ldd	r24, Y+15	; 0x0f
    140c:	98 89       	ldd	r25, Y+16	; 0x10
    140e:	48 e2       	ldi	r20, 0x28	; 40
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	95 de       	rcall	.-726    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	98 89       	ldd	r25, Y+16	; 0x10
    1418:	48 e2       	ldi	r20, 0x28	; 40
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	90 de       	rcall	.-736    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//8 bytes per character
    141e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1420:	98 89       	ldd	r25, Y+16	; 0x10
    1422:	48 e2       	ldi	r20, 0x28	; 40
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	8b de       	rcall	.-746    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    1428:	8f 85       	ldd	r24, Y+15	; 0x0f
    142a:	98 89       	ldd	r25, Y+16	; 0x10
    142c:	57 de       	rcall	.-850    	; 0x10dc <_ZN3lcd8TWI_STOPEv>
}
    142e:	60 96       	adiw	r28, 0x10	; 16
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <_ZN3lcd4INITEv>:

void lcd::INIT()
{
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	ea 97       	sbiw	r28, 0x3a	; 58
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	9a af       	std	Y+58, r25	; 0x3a
    1456:	89 af       	std	Y+57, r24	; 0x39
	TWI_START();
    1458:	89 ad       	ldd	r24, Y+57	; 0x39
    145a:	9a ad       	ldd	r25, Y+58	; 0x3a
    145c:	50 de       	rcall	.-864    	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    145e:	89 ad       	ldd	r24, Y+57	; 0x39
    1460:	9a ad       	ldd	r25, Y+58	; 0x3a
    1462:	48 e1       	ldi	r20, 0x18	; 24
    1464:	6c e7       	ldi	r22, 0x7C	; 124
    1466:	6b de       	rcall	.-810    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1468:	89 ad       	ldd	r24, Y+57	; 0x39
    146a:	9a ad       	ldd	r25, Y+58	; 0x3a
    146c:	48 e2       	ldi	r20, 0x28	; 40
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	66 de       	rcall	.-820    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1472:	89 ad       	ldd	r24, Y+57	; 0x39
    1474:	9a ad       	ldd	r25, Y+58	; 0x3a
    1476:	48 e2       	ldi	r20, 0x28	; 40
    1478:	68 e3       	ldi	r22, 0x38	; 56
    147a:	61 de       	rcall	.-830    	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a8 ec       	ldi	r26, 0xC8	; 200
    1482:	b2 e4       	ldi	r27, 0x42	; 66
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	ab 83       	std	Y+3, r26	; 0x03
    148a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4a e7       	ldi	r20, 0x7A	; 122
    1492:	53 e4       	ldi	r21, 0x43	; 67
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	7a 81       	ldd	r23, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	af 83       	std	Y+7, r26	; 0x07
    14aa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	6d 81       	ldd	r22, Y+5	; 0x05
    14b6:	7e 81       	ldd	r23, Y+6	; 0x06
    14b8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ba:	98 85       	ldd	r25, Y+8	; 0x08
    14bc:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <_ZN3lcd4INITEv+0x8e>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9a 87       	std	Y+10, r25	; 0x0a
    14ca:	89 87       	std	Y+9, r24	; 0x09
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <_ZN3lcd4INITEv+0x10c>
	else if (__tmp > 65535)
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	3f ef       	ldi	r19, 0xFF	; 255
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	57 e4       	ldi	r21, 0x47	; 71
    14d6:	6d 81       	ldd	r22, Y+5	; 0x05
    14d8:	7e 81       	ldd	r23, Y+6	; 0x06
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	98 85       	ldd	r25, Y+8	; 0x08
    14de:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <_ZN3lcd4INITEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e2       	ldi	r20, 0x20	; 32
    14ec:	51 e4       	ldi	r21, 0x41	; 65
    14ee:	69 81       	ldd	r22, Y+1	; 0x01
    14f0:	7a 81       	ldd	r23, Y+2	; 0x02
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9a 87       	std	Y+10, r25	; 0x0a
    150c:	89 87       	std	Y+9, r24	; 0x09
    150e:	0f c0       	rjmp	.+30     	; 0x152e <_ZN3lcd4INITEv+0xee>
    1510:	89 e1       	ldi	r24, 0x19	; 25
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	8b 87       	std	Y+11, r24	; 0x0b
    1518:	8b 85       	ldd	r24, Y+11	; 0x0b
    151a:	9c 85       	ldd	r25, Y+12	; 0x0c
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <_ZN3lcd4INITEv+0xdc>
    1520:	9c 87       	std	Y+12, r25	; 0x0c
    1522:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9a 87       	std	Y+10, r25	; 0x0a
    152c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	89 2b       	or	r24, r25
    1534:	69 f7       	brne	.-38     	; 0x1510 <_ZN3lcd4INITEv+0xd0>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <_ZN3lcd4INITEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6d 81       	ldd	r22, Y+5	; 0x05
    153a:	7e 81       	ldd	r23, Y+6	; 0x06
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9a 87       	std	Y+10, r25	; 0x0a
    154a:	89 87       	std	Y+9, r24	; 0x09
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	9e 87       	std	Y+14, r25	; 0x0e
    1552:	8d 87       	std	Y+13, r24	; 0x0d
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <_ZN3lcd4INITEv+0x118>
    155c:	9e 87       	std	Y+14, r25	; 0x0e
    155e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);						// Use Extended instruction set
    1560:	89 ad       	ldd	r24, Y+57	; 0x39
    1562:	9a ad       	ldd	r25, Y+58	; 0x3a
    1564:	48 e2       	ldi	r20, 0x28	; 40
    1566:	69 e3       	ldi	r22, 0x39	; 57
    1568:	ea dd       	rcall	.-1068   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a8 ec       	ldi	r26, 0xC8	; 200
    1570:	b2 e4       	ldi	r27, 0x42	; 66
    1572:	8f 87       	std	Y+15, r24	; 0x0f
    1574:	98 8b       	std	Y+16, r25	; 0x10
    1576:	a9 8b       	std	Y+17, r26	; 0x11
    1578:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a e7       	ldi	r20, 0x7A	; 122
    1580:	53 e4       	ldi	r21, 0x43	; 67
    1582:	6f 85       	ldd	r22, Y+15	; 0x0f
    1584:	78 89       	ldd	r23, Y+16	; 0x10
    1586:	89 89       	ldd	r24, Y+17	; 0x11
    1588:	9a 89       	ldd	r25, Y+18	; 0x12
    158a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	9c 8b       	std	Y+20, r25	; 0x14
    1596:	ad 8b       	std	Y+21, r26	; 0x15
    1598:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	6b 89       	ldd	r22, Y+19	; 0x13
    15a4:	7c 89       	ldd	r23, Y+20	; 0x14
    15a6:	8d 89       	ldd	r24, Y+21	; 0x15
    15a8:	9e 89       	ldd	r25, Y+22	; 0x16
    15aa:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <_ZN3lcd4INITEv+0x17c>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	98 8f       	std	Y+24, r25	; 0x18
    15b8:	8f 8b       	std	Y+23, r24	; 0x17
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <_ZN3lcd4INITEv+0x1fa>
	else if (__tmp > 65535)
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	6b 89       	ldd	r22, Y+19	; 0x13
    15c6:	7c 89       	ldd	r23, Y+20	; 0x14
    15c8:	8d 89       	ldd	r24, Y+21	; 0x15
    15ca:	9e 89       	ldd	r25, Y+22	; 0x16
    15cc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <_ZN3lcd4INITEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    15de:	78 89       	ldd	r23, Y+16	; 0x10
    15e0:	89 89       	ldd	r24, Y+17	; 0x11
    15e2:	9a 89       	ldd	r25, Y+18	; 0x12
    15e4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	98 8f       	std	Y+24, r25	; 0x18
    15fa:	8f 8b       	std	Y+23, r24	; 0x17
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <_ZN3lcd4INITEv+0x1dc>
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9a 8f       	std	Y+26, r25	; 0x1a
    1604:	89 8f       	std	Y+25, r24	; 0x19
    1606:	89 8d       	ldd	r24, Y+25	; 0x19
    1608:	9a 8d       	ldd	r25, Y+26	; 0x1a
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <_ZN3lcd4INITEv+0x1ca>
    160e:	9a 8f       	std	Y+26, r25	; 0x1a
    1610:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8f 89       	ldd	r24, Y+23	; 0x17
    1614:	98 8d       	ldd	r25, Y+24	; 0x18
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	98 8f       	std	Y+24, r25	; 0x18
    161a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8f 89       	ldd	r24, Y+23	; 0x17
    161e:	98 8d       	ldd	r25, Y+24	; 0x18
    1620:	89 2b       	or	r24, r25
    1622:	69 f7       	brne	.-38     	; 0x15fe <_ZN3lcd4INITEv+0x1be>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <_ZN3lcd4INITEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6b 89       	ldd	r22, Y+19	; 0x13
    1628:	7c 89       	ldd	r23, Y+20	; 0x14
    162a:	8d 89       	ldd	r24, Y+21	; 0x15
    162c:	9e 89       	ldd	r25, Y+22	; 0x16
    162e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	98 8f       	std	Y+24, r25	; 0x18
    1638:	8f 8b       	std	Y+23, r24	; 0x17
    163a:	8f 89       	ldd	r24, Y+23	; 0x17
    163c:	98 8d       	ldd	r25, Y+24	; 0x18
    163e:	9c 8f       	std	Y+28, r25	; 0x1c
    1640:	8b 8f       	std	Y+27, r24	; 0x1b
    1642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <_ZN3lcd4INITEv+0x206>
    164a:	9c 8f       	std	Y+28, r25	; 0x1c
    164c:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);						// Set Internal Osc Freq
    164e:	89 ad       	ldd	r24, Y+57	; 0x39
    1650:	9a ad       	ldd	r25, Y+58	; 0x3a
    1652:	48 e2       	ldi	r20, 0x28	; 40
    1654:	64 e1       	ldi	r22, 0x14	; 20
    1656:	73 dd       	rcall	.-1306   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x78,LCD_TW_MT_DATA_ACK);						// Contrast Set
    1658:	89 ad       	ldd	r24, Y+57	; 0x39
    165a:	9a ad       	ldd	r25, Y+58	; 0x3a
    165c:	48 e2       	ldi	r20, 0x28	; 40
    165e:	68 e7       	ldi	r22, 0x78	; 120
    1660:	6e dd       	rcall	.-1316   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x5D,LCD_TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1662:	89 ad       	ldd	r24, Y+57	; 0x39
    1664:	9a ad       	ldd	r25, Y+58	; 0x3a
    1666:	48 e2       	ldi	r20, 0x28	; 40
    1668:	6d e5       	ldi	r22, 0x5D	; 93
    166a:	69 dd       	rcall	.-1326   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x6D,LCD_TW_MT_DATA_ACK);						// Follower Control
    166c:	89 ad       	ldd	r24, Y+57	; 0x39
    166e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1670:	48 e2       	ldi	r20, 0x28	; 40
    1672:	6d e6       	ldi	r22, 0x6D	; 109
    1674:	64 dd       	rcall	.-1336   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x0C,LCD_TW_MT_DATA_ACK);						// Display On/Off
    1676:	89 ad       	ldd	r24, Y+57	; 0x39
    1678:	9a ad       	ldd	r25, Y+58	; 0x3a
    167a:	48 e2       	ldi	r20, 0x28	; 40
    167c:	6c e0       	ldi	r22, 0x0C	; 12
    167e:	5f dd       	rcall	.-1346   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);						// Clear Display
    1680:	89 ad       	ldd	r24, Y+57	; 0x39
    1682:	9a ad       	ldd	r25, Y+58	; 0x3a
    1684:	48 e2       	ldi	r20, 0x28	; 40
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	5a dd       	rcall	.-1356   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x06,LCD_TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    168a:	89 ad       	ldd	r24, Y+57	; 0x39
    168c:	9a ad       	ldd	r25, Y+58	; 0x3a
    168e:	48 e2       	ldi	r20, 0x28	; 40
    1690:	66 e0       	ldi	r22, 0x06	; 6
    1692:	55 dd       	rcall	.-1366   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a8 ec       	ldi	r26, 0xC8	; 200
    169a:	b2 e4       	ldi	r27, 0x42	; 66
    169c:	8d 8f       	std	Y+29, r24	; 0x1d
    169e:	9e 8f       	std	Y+30, r25	; 0x1e
    16a0:	af 8f       	std	Y+31, r26	; 0x1f
    16a2:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a e7       	ldi	r20, 0x7A	; 122
    16aa:	53 e4       	ldi	r21, 0x43	; 67
    16ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16ae:	7e 8d       	ldd	r23, Y+30	; 0x1e
    16b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b2:	98 a1       	ldd	r25, Y+32	; 0x20
    16b4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	89 a3       	std	Y+33, r24	; 0x21
    16be:	9a a3       	std	Y+34, r25	; 0x22
    16c0:	ab a3       	std	Y+35, r26	; 0x23
    16c2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	69 a1       	ldd	r22, Y+33	; 0x21
    16ce:	7a a1       	ldd	r23, Y+34	; 0x22
    16d0:	8b a1       	ldd	r24, Y+35	; 0x23
    16d2:	9c a1       	ldd	r25, Y+36	; 0x24
    16d4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <_ZN3lcd4INITEv+0x2a6>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e a3       	std	Y+38, r25	; 0x26
    16e2:	8d a3       	std	Y+37, r24	; 0x25
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <_ZN3lcd4INITEv+0x324>
	else if (__tmp > 65535)
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	69 a1       	ldd	r22, Y+33	; 0x21
    16f0:	7a a1       	ldd	r23, Y+34	; 0x22
    16f2:	8b a1       	ldd	r24, Y+35	; 0x23
    16f4:	9c a1       	ldd	r25, Y+36	; 0x24
    16f6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <_ZN3lcd4INITEv+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1708:	7e 8d       	ldd	r23, Y+30	; 0x1e
    170a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170c:	98 a1       	ldd	r25, Y+32	; 0x20
    170e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e a3       	std	Y+38, r25	; 0x26
    1724:	8d a3       	std	Y+37, r24	; 0x25
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <_ZN3lcd4INITEv+0x306>
    1728:	89 e1       	ldi	r24, 0x19	; 25
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	98 a7       	std	Y+40, r25	; 0x28
    172e:	8f a3       	std	Y+39, r24	; 0x27
    1730:	8f a1       	ldd	r24, Y+39	; 0x27
    1732:	98 a5       	ldd	r25, Y+40	; 0x28
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <_ZN3lcd4INITEv+0x2f4>
    1738:	98 a7       	std	Y+40, r25	; 0x28
    173a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8d a1       	ldd	r24, Y+37	; 0x25
    173e:	9e a1       	ldd	r25, Y+38	; 0x26
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9e a3       	std	Y+38, r25	; 0x26
    1744:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	89 2b       	or	r24, r25
    174c:	69 f7       	brne	.-38     	; 0x1728 <_ZN3lcd4INITEv+0x2e8>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <_ZN3lcd4INITEv+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	69 a1       	ldd	r22, Y+33	; 0x21
    1752:	7a a1       	ldd	r23, Y+34	; 0x22
    1754:	8b a1       	ldd	r24, Y+35	; 0x23
    1756:	9c a1       	ldd	r25, Y+36	; 0x24
    1758:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e a3       	std	Y+38, r25	; 0x26
    1762:	8d a3       	std	Y+37, r24	; 0x25
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	9a a7       	std	Y+42, r25	; 0x2a
    176a:	89 a7       	std	Y+41, r24	; 0x29
    176c:	89 a5       	ldd	r24, Y+41	; 0x29
    176e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <_ZN3lcd4INITEv+0x330>
    1774:	9a a7       	std	Y+42, r25	; 0x2a
    1776:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    1778:	89 ad       	ldd	r24, Y+57	; 0x39
    177a:	9a ad       	ldd	r25, Y+58	; 0x3a
    177c:	af dc       	rcall	.-1698   	; 0x10dc <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    177e:	89 ad       	ldd	r24, Y+57	; 0x39
    1780:	9a ad       	ldd	r25, Y+58	; 0x3a
    1782:	85 dd       	rcall	.-1270   	; 0x128e <_ZN3lcd5CGRAMEv>

	TWI_START();
    1784:	89 ad       	ldd	r24, Y+57	; 0x39
    1786:	9a ad       	ldd	r25, Y+58	; 0x3a
    1788:	ba dc       	rcall	.-1676   	; 0x10fe <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    178a:	89 ad       	ldd	r24, Y+57	; 0x39
    178c:	9a ad       	ldd	r25, Y+58	; 0x3a
    178e:	48 e1       	ldi	r20, 0x18	; 24
    1790:	6c e7       	ldi	r22, 0x7C	; 124
    1792:	d5 dc       	rcall	.-1622   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1794:	89 ad       	ldd	r24, Y+57	; 0x39
    1796:	9a ad       	ldd	r25, Y+58	; 0x3a
    1798:	48 e2       	ldi	r20, 0x28	; 40
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	d0 dc       	rcall	.-1632   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);
    179e:	89 ad       	ldd	r24, Y+57	; 0x39
    17a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    17a2:	48 e2       	ldi	r20, 0x28	; 40
    17a4:	69 e3       	ldi	r22, 0x39	; 57
    17a6:	cb dc       	rcall	.-1642   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    17a8:	89 ad       	ldd	r24, Y+57	; 0x39
    17aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ac:	48 e2       	ldi	r20, 0x28	; 40
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	c6 dc       	rcall	.-1652   	; 0x113e <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    17b2:	89 ad       	ldd	r24, Y+57	; 0x39
    17b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    17b6:	92 dc       	rcall	.-1756   	; 0x10dc <_ZN3lcd8TWI_STOPEv>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a8 ec       	ldi	r26, 0xC8	; 200
    17be:	b2 e4       	ldi	r27, 0x42	; 66
    17c0:	8b a7       	std	Y+43, r24	; 0x2b
    17c2:	9c a7       	std	Y+44, r25	; 0x2c
    17c4:	ad a7       	std	Y+45, r26	; 0x2d
    17c6:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a e7       	ldi	r20, 0x7A	; 122
    17ce:	53 e4       	ldi	r21, 0x43	; 67
    17d0:	6b a5       	ldd	r22, Y+43	; 0x2b
    17d2:	7c a5       	ldd	r23, Y+44	; 0x2c
    17d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f a7       	std	Y+47, r24	; 0x2f
    17e2:	98 ab       	std	Y+48, r25	; 0x30
    17e4:	a9 ab       	std	Y+49, r26	; 0x31
    17e6:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	6f a5       	ldd	r22, Y+47	; 0x2f
    17f2:	78 a9       	ldd	r23, Y+48	; 0x30
    17f4:	89 a9       	ldd	r24, Y+49	; 0x31
    17f6:	9a a9       	ldd	r25, Y+50	; 0x32
    17f8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <_ZN3lcd4INITEv+0x3ca>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c ab       	std	Y+52, r25	; 0x34
    1806:	8b ab       	std	Y+51, r24	; 0x33
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <_ZN3lcd4INITEv+0x448>
	else if (__tmp > 65535)
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	6f a5       	ldd	r22, Y+47	; 0x2f
    1814:	78 a9       	ldd	r23, Y+48	; 0x30
    1816:	89 a9       	ldd	r24, Y+49	; 0x31
    1818:	9a a9       	ldd	r25, Y+50	; 0x32
    181a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <_ZN3lcd4INITEv+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	6b a5       	ldd	r22, Y+43	; 0x2b
    182c:	7c a5       	ldd	r23, Y+44	; 0x2c
    182e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1830:	9e a5       	ldd	r25, Y+46	; 0x2e
    1832:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9c ab       	std	Y+52, r25	; 0x34
    1848:	8b ab       	std	Y+51, r24	; 0x33
    184a:	0f c0       	rjmp	.+30     	; 0x186a <_ZN3lcd4INITEv+0x42a>
    184c:	89 e1       	ldi	r24, 0x19	; 25
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9e ab       	std	Y+54, r25	; 0x36
    1852:	8d ab       	std	Y+53, r24	; 0x35
    1854:	8d a9       	ldd	r24, Y+53	; 0x35
    1856:	9e a9       	ldd	r25, Y+54	; 0x36
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <_ZN3lcd4INITEv+0x418>
    185c:	9e ab       	std	Y+54, r25	; 0x36
    185e:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8b a9       	ldd	r24, Y+51	; 0x33
    1862:	9c a9       	ldd	r25, Y+52	; 0x34
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9c ab       	std	Y+52, r25	; 0x34
    1868:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8b a9       	ldd	r24, Y+51	; 0x33
    186c:	9c a9       	ldd	r25, Y+52	; 0x34
    186e:	89 2b       	or	r24, r25
    1870:	69 f7       	brne	.-38     	; 0x184c <_ZN3lcd4INITEv+0x40c>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <_ZN3lcd4INITEv+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f a5       	ldd	r22, Y+47	; 0x2f
    1876:	78 a9       	ldd	r23, Y+48	; 0x30
    1878:	89 a9       	ldd	r24, Y+49	; 0x31
    187a:	9a a9       	ldd	r25, Y+50	; 0x32
    187c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c ab       	std	Y+52, r25	; 0x34
    1886:	8b ab       	std	Y+51, r24	; 0x33
    1888:	8b a9       	ldd	r24, Y+51	; 0x33
    188a:	9c a9       	ldd	r25, Y+52	; 0x34
    188c:	98 af       	std	Y+56, r25	; 0x38
    188e:	8f ab       	std	Y+55, r24	; 0x37
    1890:	8f a9       	ldd	r24, Y+55	; 0x37
    1892:	98 ad       	ldd	r25, Y+56	; 0x38
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <_ZN3lcd4INITEv+0x454>
    1898:	98 af       	std	Y+56, r25	; 0x38
    189a:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    189c:	ea 96       	adiw	r28, 0x3a	; 58
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <_ZN3lcd12SHOW_WELCOMEEv>:

void lcd::SHOW_WELCOME(){
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	e0 97       	sbiw	r28, 0x30	; 48
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	98 ab       	std	Y+48, r25	; 0x30
    18c4:	8f a7       	std	Y+47, r24	; 0x2f
	
	unsigned char cucWELCOME_TEXT_1[ LCD_LINE_SIZE ]{ ' ', '-', '-', ' ', 'H', 'e', 'a', 'd', 's', 'U', 'p', '!', ' ', '-', '-', ' ' };
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	e7 e1       	ldi	r30, 0x17	; 23
    18ca:	f1 e0       	ldi	r31, 0x01	; 1
    18cc:	de 01       	movw	r26, r28
    18ce:	1f 96       	adiw	r26, 0x0f	; 15
    18d0:	01 90       	ld	r0, Z+
    18d2:	0d 92       	st	X+, r0
    18d4:	8a 95       	dec	r24
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <_ZN3lcd12SHOW_WELCOMEEv+0x22>
	unsigned char cucWELCOME_TEXT_2[ LCD_LINE_SIZE ]{ 'S', 'l', 'e', 'e', 'p', ' ', 'E', 'n', 'v', 'i', 'r', 'o', 'm', 'e', 'n', 't' };
    18d8:	80 e1       	ldi	r24, 0x10	; 16
    18da:	e7 e2       	ldi	r30, 0x27	; 39
    18dc:	f1 e0       	ldi	r31, 0x01	; 1
    18de:	de 01       	movw	r26, r28
    18e0:	5f 96       	adiw	r26, 0x1f	; 31
    18e2:	01 90       	ld	r0, Z+
    18e4:	0d 92       	st	X+, r0
    18e6:	8a 95       	dec	r24
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <_ZN3lcd12SHOW_WELCOMEEv+0x34>
	
		
	print( cucWELCOME_TEXT_1, LCD_LINE_TOP );
    18ea:	9e 01       	movw	r18, r28
    18ec:	21 5f       	subi	r18, 0xF1	; 241
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f2:	98 a9       	ldd	r25, Y+48	; 0x30
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	b9 01       	movw	r22, r18
    18f8:	83 d0       	rcall	.+262    	; 0x1a00 <_ZN3lcd5printEPhh>
	print( cucWELCOME_TEXT_2, LCD_LINE_BOTTOM );
    18fa:	9e 01       	movw	r18, r28
    18fc:	21 5e       	subi	r18, 0xE1	; 225
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	8f a5       	ldd	r24, Y+47	; 0x2f
    1902:	98 a9       	ldd	r25, Y+48	; 0x30
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	b9 01       	movw	r22, r18
    1908:	7b d0       	rcall	.+246    	; 0x1a00 <_ZN3lcd5printEPhh>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	aa e7       	ldi	r26, 0x7A	; 122
    1910:	b4 e4       	ldi	r27, 0x44	; 68
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	ab 83       	std	Y+3, r26	; 0x03
    1918:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	69 81       	ldd	r22, Y+1	; 0x01
    1924:	7a 81       	ldd	r23, Y+2	; 0x02
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	af 83       	std	Y+7, r26	; 0x07
    1938:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	6d 81       	ldd	r22, Y+5	; 0x05
    1944:	7e 81       	ldd	r23, Y+6	; 0x06
    1946:	8f 81       	ldd	r24, Y+7	; 0x07
    1948:	98 85       	ldd	r25, Y+8	; 0x08
    194a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__cmpsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <_ZN3lcd12SHOW_WELCOMEEv+0xae>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9a 87       	std	Y+10, r25	; 0x0a
    1958:	89 87       	std	Y+9, r24	; 0x09
    195a:	3f c0       	rjmp	.+126    	; 0x19da <_ZN3lcd12SHOW_WELCOMEEv+0x12c>
	else if (__tmp > 65535)
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	6d 81       	ldd	r22, Y+5	; 0x05
    1966:	7e 81       	ldd	r23, Y+6	; 0x06
    1968:	8f 81       	ldd	r24, Y+7	; 0x07
    196a:	98 85       	ldd	r25, Y+8	; 0x08
    196c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    1970:	18 16       	cp	r1, r24
    1972:	4c f5       	brge	.+82     	; 0x19c6 <_ZN3lcd12SHOW_WELCOMEEv+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	69 81       	ldd	r22, Y+1	; 0x01
    197e:	7a 81       	ldd	r23, Y+2	; 0x02
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9a 87       	std	Y+10, r25	; 0x0a
    199a:	89 87       	std	Y+9, r24	; 0x09
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <_ZN3lcd12SHOW_WELCOMEEv+0x10e>
    199e:	89 e1       	ldi	r24, 0x19	; 25
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9c 87       	std	Y+12, r25	; 0x0c
    19a4:	8b 87       	std	Y+11, r24	; 0x0b
    19a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <_ZN3lcd12SHOW_WELCOMEEv+0xfc>
    19ae:	9c 87       	std	Y+12, r25	; 0x0c
    19b0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	9a 87       	std	Y+10, r25	; 0x0a
    19ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	89 2b       	or	r24, r25
    19c2:	69 f7       	brne	.-38     	; 0x199e <_ZN3lcd12SHOW_WELCOMEEv+0xf0>
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <_ZN3lcd12SHOW_WELCOMEEv+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	6d 81       	ldd	r22, Y+5	; 0x05
    19c8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	98 85       	ldd	r25, Y+8	; 0x08
    19ce:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9a 87       	std	Y+10, r25	; 0x0a
    19d8:	89 87       	std	Y+9, r24	; 0x09
    19da:	89 85       	ldd	r24, Y+9	; 0x09
    19dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19de:	9e 87       	std	Y+14, r25	; 0x0e
    19e0:	8d 87       	std	Y+13, r24	; 0x0d
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <_ZN3lcd12SHOW_WELCOMEEv+0x138>
    19ea:	9e 87       	std	Y+14, r25	; 0x0e
    19ec:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms( 1000 );

}
    19ee:	e0 96       	adiw	r28, 0x30	; 48
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	a1 97       	sbiw	r28, 0x21	; 33
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	9e 8f       	std	Y+30, r25	; 0x1e
    1a16:	8d 8f       	std	Y+29, r24	; 0x1d
    1a18:	78 a3       	std	Y+32, r23	; 0x20
    1a1a:	6f 8f       	std	Y+31, r22	; 0x1f
    1a1c:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LCD_LINE_TOP ){
    1a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a20:	88 23       	and	r24, r24
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <_ZN3lcd5printEPhh+0x26>
    1a24:	79 c0       	rjmp	.+242    	; 0x1b18 <_ZN3lcd5printEPhh+0x118>
		SELECT_LCD_LINE_1();
    1a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a2a:	ef db       	rcall	.-2082   	; 0x120a <_ZN3lcd17SELECT_LCD_LINE_1Ev>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e2       	ldi	r26, 0x20	; 32
    1a32:	b1 e4       	ldi	r27, 0x41	; 65
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	ab 83       	std	Y+3, r26	; 0x03
    1a3a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	53 e4       	ldi	r21, 0x43	; 67
    1a44:	69 81       	ldd	r22, Y+1	; 0x01
    1a46:	7a 81       	ldd	r23, Y+2	; 0x02
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	af 83       	std	Y+7, r26	; 0x07
    1a5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	6d 81       	ldd	r22, Y+5	; 0x05
    1a66:	7e 81       	ldd	r23, Y+6	; 0x06
    1a68:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6a:	98 85       	ldd	r25, Y+8	; 0x08
    1a6c:	ac d7       	rcall	.+3928   	; 0x29c6 <__cmpsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <_ZN3lcd5printEPhh+0x7c>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9a 87       	std	Y+10, r25	; 0x0a
    1a78:	89 87       	std	Y+9, r24	; 0x09
    1a7a:	3d c0       	rjmp	.+122    	; 0x1af6 <_ZN3lcd5printEPhh+0xf6>
	else if (__tmp > 65535)
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	6d 81       	ldd	r22, Y+5	; 0x05
    1a86:	7e 81       	ldd	r23, Y+6	; 0x06
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	44 f5       	brge	.+80     	; 0x1ae4 <_ZN3lcd5printEPhh+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	f6 d7       	rcall	.+4076   	; 0x2a9e <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9a 87       	std	Y+10, r25	; 0x0a
    1ab8:	89 87       	std	Y+9, r24	; 0x09
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <_ZN3lcd5printEPhh+0xda>
    1abc:	89 e1       	ldi	r24, 0x19	; 25
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 87       	std	Y+12, r25	; 0x0c
    1ac2:	8b 87       	std	Y+11, r24	; 0x0b
    1ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <_ZN3lcd5printEPhh+0xc8>
    1acc:	9c 87       	std	Y+12, r25	; 0x0c
    1ace:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9a 87       	std	Y+10, r25	; 0x0a
    1ad8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	89 2b       	or	r24, r25
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <_ZN3lcd5printEPhh+0xbc>
    1ae2:	13 c0       	rjmp	.+38     	; 0x1b0a <_ZN3lcd5printEPhh+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aea:	98 85       	ldd	r25, Y+8	; 0x08
    1aec:	d8 d7       	rcall	.+4016   	; 0x2a9e <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9a 87       	std	Y+10, r25	; 0x0a
    1af4:	89 87       	std	Y+9, r24	; 0x09
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	9e 87       	std	Y+14, r25	; 0x0e
    1afc:	8d 87       	std	Y+13, r24	; 0x0d
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <_ZN3lcd5printEPhh+0x102>
    1b06:	9e 87       	std	Y+14, r25	; 0x0e
    1b08:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		SHOW(text);
    1b0a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1b0c:	38 a1       	ldd	r19, Y+32	; 0x20
    1b0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b12:	b9 01       	movw	r22, r18
    1b14:	3c db       	rcall	.-2440   	; 0x118e <_ZN3lcd4SHOWEPh>
    1b16:	7c c0       	rjmp	.+248    	; 0x1c10 <_ZN3lcd5printEPhh+0x210>
	}else if( valLine == LCD_LINE_BOTTOM ){
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <_ZN3lcd5printEPhh+0x120>
    1b1e:	78 c0       	rjmp	.+240    	; 0x1c10 <_ZN3lcd5printEPhh+0x210>
		SELECT_LCD_LINE_2();
    1b20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b24:	93 db       	rcall	.-2266   	; 0x124c <_ZN3lcd17SELECT_LCD_LINE_2Ev>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e2       	ldi	r26, 0x20	; 32
    1b2c:	b1 e4       	ldi	r27, 0x41	; 65
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	98 8b       	std	Y+16, r25	; 0x10
    1b32:	a9 8b       	std	Y+17, r26	; 0x11
    1b34:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b40:	78 89       	ldd	r23, Y+16	; 0x10
    1b42:	89 89       	ldd	r24, Y+17	; 0x11
    1b44:	9a 89       	ldd	r25, Y+18	; 0x12
    1b46:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8b 8b       	std	Y+19, r24	; 0x13
    1b50:	9c 8b       	std	Y+20, r25	; 0x14
    1b52:	ad 8b       	std	Y+21, r26	; 0x15
    1b54:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	6b 89       	ldd	r22, Y+19	; 0x13
    1b60:	7c 89       	ldd	r23, Y+20	; 0x14
    1b62:	8d 89       	ldd	r24, Y+21	; 0x15
    1b64:	9e 89       	ldd	r25, Y+22	; 0x16
    1b66:	2f d7       	rcall	.+3678   	; 0x29c6 <__cmpsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <_ZN3lcd5printEPhh+0x176>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	98 8f       	std	Y+24, r25	; 0x18
    1b72:	8f 8b       	std	Y+23, r24	; 0x17
    1b74:	3d c0       	rjmp	.+122    	; 0x1bf0 <_ZN3lcd5printEPhh+0x1f0>
	else if (__tmp > 65535)
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	6b 89       	ldd	r22, Y+19	; 0x13
    1b80:	7c 89       	ldd	r23, Y+20	; 0x14
    1b82:	8d 89       	ldd	r24, Y+21	; 0x15
    1b84:	9e 89       	ldd	r25, Y+22	; 0x16
    1b86:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__gesf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	44 f5       	brge	.+80     	; 0x1bde <_ZN3lcd5printEPhh+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b98:	78 89       	ldd	r23, Y+16	; 0x10
    1b9a:	89 89       	ldd	r24, Y+17	; 0x11
    1b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	79 d7       	rcall	.+3826   	; 0x2a9e <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	98 8f       	std	Y+24, r25	; 0x18
    1bb2:	8f 8b       	std	Y+23, r24	; 0x17
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <_ZN3lcd5printEPhh+0x1d4>
    1bb6:	89 e1       	ldi	r24, 0x19	; 25
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9a 8f       	std	Y+26, r25	; 0x1a
    1bbc:	89 8f       	std	Y+25, r24	; 0x19
    1bbe:	89 8d       	ldd	r24, Y+25	; 0x19
    1bc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <_ZN3lcd5printEPhh+0x1c2>
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	98 8f       	std	Y+24, r25	; 0x18
    1bd2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	89 2b       	or	r24, r25
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <_ZN3lcd5printEPhh+0x1b6>
    1bdc:	13 c0       	rjmp	.+38     	; 0x1c04 <_ZN3lcd5printEPhh+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6b 89       	ldd	r22, Y+19	; 0x13
    1be0:	7c 89       	ldd	r23, Y+20	; 0x14
    1be2:	8d 89       	ldd	r24, Y+21	; 0x15
    1be4:	9e 89       	ldd	r25, Y+22	; 0x16
    1be6:	5b d7       	rcall	.+3766   	; 0x2a9e <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	98 8f       	std	Y+24, r25	; 0x18
    1bee:	8f 8b       	std	Y+23, r24	; 0x17
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	9c 8f       	std	Y+28, r25	; 0x1c
    1bf6:	8b 8f       	std	Y+27, r24	; 0x1b
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <_ZN3lcd5printEPhh+0x1fc>
    1c00:	9c 8f       	std	Y+28, r25	; 0x1c
    1c02:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		SHOW(text);
    1c04:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1c06:	38 a1       	ldd	r19, Y+32	; 0x20
    1c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	bf da       	rcall	.-2690   	; 0x118e <_ZN3lcd4SHOWEPh>
	}
		
}
    1c10:	a1 96       	adiw	r28, 0x21	; 33
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <_ZN3ledC1Ev>:

void led::DISABLE(){
	
	set( 0 );

}
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <_ZN3ledC1Ev+0x6>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	80 eb       	ldi	r24, 0xB0	; 176
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	20 eb       	ldi	r18, 0xB0	; 176
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	f9 01       	movw	r30, r18
    1c3a:	20 81       	ld	r18, Z
    1c3c:	29 6a       	ori	r18, 0xA9	; 169
    1c3e:	fc 01       	movw	r30, r24
    1c40:	20 83       	st	Z, r18
    1c42:	80 e8       	ldi	r24, 0x80	; 128
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	20 e8       	ldi	r18, 0x80	; 128
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	29 6a       	ori	r18, 0xA9	; 169
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	09 d0       	rcall	.+18     	; 0x1c6c <_ZN3led6ENABLEEv>
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	24 d0       	rcall	.+72     	; 0x1caa <_ZN3led3setEh>
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <_ZN3led6ENABLEEv>:
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <_ZN3led6ENABLEEv+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	8a e2       	ldi	r24, 0x2A	; 42
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	2a e2       	ldi	r18, 0x2A	; 42
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	f9 01       	movw	r30, r18
    1c84:	20 81       	ld	r18, Z
    1c86:	20 6f       	ori	r18, 0xF0	; 240
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
    1c8c:	81 e8       	ldi	r24, 0x81	; 129
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	fc 01       	movw	r30, r24
    1c94:	20 83       	st	Z, r18
    1c96:	81 eb       	ldi	r24, 0xB1	; 177
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <_ZN3led3setEh>:

void led::set( uint8_t ledLevel ) {
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <_ZN3led3setEh+0xa>
    1cb4:	1f 92       	push	r1
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
	
	ledLevel = ( ledLevel < 100 ) ? ledLevel : 100;
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	85 36       	cpi	r24, 0x65	; 101
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <_ZN3led3setEh+0x1e>
    1cc6:	84 e6       	ldi	r24, 0x64	; 100
    1cc8:	8b 83       	std	Y+3, r24	; 0x03

	OCR1A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    1cca:	08 e8       	ldi	r16, 0x88	; 136
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0c d7       	rcall	.+3608   	; 0x2af6 <__floatunsisf>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	48 ec       	ldi	r20, 0xC8	; 200
    1ce8:	52 e4       	ldi	r21, 0x42	; 66
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	6f d6       	rcall	.+3294   	; 0x29ce <__divsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	53 e4       	ldi	r21, 0x43	; 67
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	b0 d7       	rcall	.+3936   	; 0x2c62 <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	c9 d6       	rcall	.+3474   	; 0x2a9e <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
	OCR1B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    1d16:	0a e8       	ldi	r16, 0x8A	; 138
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e0       	ldi	r26, 0x00	; 0
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	e6 d6       	rcall	.+3532   	; 0x2af6 <__floatunsisf>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	48 ec       	ldi	r20, 0xC8	; 200
    1d34:	52 e4       	ldi	r21, 0x42	; 66
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	49 d6       	rcall	.+3218   	; 0x29ce <__divsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	53 e4       	ldi	r21, 0x43	; 67
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	8a d7       	rcall	.+3860   	; 0x2c62 <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	a3 d6       	rcall	.+3398   	; 0x2a9e <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
	OCR2A = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    1d62:	03 eb       	ldi	r16, 0xB3	; 179
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	c0 d6       	rcall	.+3456   	; 0x2af6 <__floatunsisf>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	48 ec       	ldi	r20, 0xC8	; 200
    1d80:	52 e4       	ldi	r21, 0x42	; 66
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	23 d6       	rcall	.+3142   	; 0x29ce <__divsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	53 e4       	ldi	r21, 0x43	; 67
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	64 d7       	rcall	.+3784   	; 0x2c62 <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	7d d6       	rcall	.+3322   	; 0x2a9e <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 83       	st	Z, r24
	OCR2B = ( static_cast<double>( ledLevel ) / 100 ) * 255;
    1dac:	04 eb       	ldi	r16, 0xB4	; 180
    1dae:	10 e0       	ldi	r17, 0x00	; 0
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	9b d6       	rcall	.+3382   	; 0x2af6 <__floatunsisf>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	48 ec       	ldi	r20, 0xC8	; 200
    1dca:	52 e4       	ldi	r21, 0x42	; 66
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	fe d5       	rcall	.+3068   	; 0x29ce <__divsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	3f d7       	rcall	.+3710   	; 0x2c62 <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	58 d6       	rcall	.+3248   	; 0x2a9e <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24


    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <_ZN3rtcC1Ev>:
#include <avr/io.h>
#include <util/delay.h>
#include "rtc.h"


rtc::rtc(){
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	9e 87       	std	Y+14, r25	; 0x0e
    1e1c:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t valCmd_Enable_W { 0x00 };
    1e1e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCmd_Init_Control { 0x04 };
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t valCmd_Zero { 0x00 };
    1e24:	1d 82       	std	Y+5, r1	; 0x05
	rtc_time rtmInital { 0x00, 0x00, 0x52, 0x01, 0x01, 0x01, 0x00 };
    1e26:	87 e0       	ldi	r24, 0x07	; 7
    1e28:	e7 e3       	ldi	r30, 0x37	; 55
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	de 01       	movw	r26, r28
    1e2e:	16 96       	adiw	r26, 0x06	; 6
    1e30:	01 90       	ld	r0, Z+
    1e32:	0d 92       	st	X+, r0
    1e34:	8a 95       	dec	r24
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <_ZN3rtcC1Ev+0x2a>


	i2c_init();    // Establish I2C connection
    1e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3c:	6a d0       	rcall	.+212    	; 0x1f12 <_ZN3rtc8i2c_initEv>
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
    1e3e:	ae 01       	movw	r20, r28
    1e40:	4d 5f       	subi	r20, 0xFD	; 253
    1e42:	5f 4f       	sbci	r21, 0xFF	; 255
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	21 e0       	ldi	r18, 0x01	; 1
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	6f e0       	ldi	r22, 0x0F	; 15
    1e4e:	eb d0       	rcall	.+470    	; 0x2026 <_ZN3rtc11write_blockEhPhj>
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    1e50:	1a 82       	std	Y+2, r1	; 0x02
    1e52:	19 82       	std	Y+1, r1	; 0x01
    1e54:	0e c0       	rjmp	.+28     	; 0x1e72 <_ZN3rtcC1Ev+0x6c>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
    1e56:	69 81       	ldd	r22, Y+1	; 0x01
    1e58:	ae 01       	movw	r20, r28
    1e5a:	4b 5f       	subi	r20, 0xFB	; 251
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	21 e0       	ldi	r18, 0x01	; 1
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	df d0       	rcall	.+446    	; 0x2026 <_ZN3rtc11write_blockEhPhj>

	i2c_init();    // Establish I2C connection
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	41 97       	sbiw	r24, 0x11	; 17
    1e78:	70 f3       	brcs	.-36     	; 0x1e56 <_ZN3rtcC1Ev+0x50>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
	}
	
	write_block( RTC_ADDR_CON, &valCmd_Init_Control, 1 );	// Set exclusive interrupt behavior
    1e7a:	ae 01       	movw	r20, r28
    1e7c:	4c 5f       	subi	r20, 0xFC	; 252
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	6f e0       	ldi	r22, 0x0F	; 15
    1e8a:	cd d0       	rcall	.+410    	; 0x2026 <_ZN3rtc11write_blockEhPhj>
	
	set_time(&rtmInital);    	// Initialize the time
    1e8c:	9e 01       	movw	r18, r28
    1e8e:	2a 5f       	subi	r18, 0xFA	; 250
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	b9 01       	movw	r22, r18
    1e98:	aa d1       	rcall	.+852    	; 0x21ee <_ZN3rtc8set_timeEP8rtc_time>
	
}
    1e9a:	2e 96       	adiw	r28, 0x0e	; 14
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret

00001eac <_ZN3rtc10spi_selectEv>:


void rtc::spi_select( ) {
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <_ZN3rtc10spi_selectEv+0x6>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= ( 1 << CPHA );
    1eba:	8c e4       	ldi	r24, 0x4C	; 76
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	2c e4       	ldi	r18, 0x4C	; 76
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	20 81       	ld	r18, Z
    1ec6:	24 60       	ori	r18, 0x04	; 4
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
	PORTB |= ( 1 << SS_PIN );
    1ecc:	85 e2       	ldi	r24, 0x25	; 37
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	25 e2       	ldi	r18, 0x25	; 37
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	20 81       	ld	r18, Z
    1ed8:	20 61       	ori	r18, 0x10	; 16
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 83       	st	Z, r18

}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <_ZN3rtc12spi_deselectEv>:

/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void rtc::spi_deselect( ){
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <_ZN3rtc12spi_deselectEv+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= ~( 1 << SS_PIN );
    1ef6:	85 e2       	ldi	r24, 0x25	; 37
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	25 e2       	ldi	r18, 0x25	; 37
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	f9 01       	movw	r30, r18
    1f00:	20 81       	ld	r18, Z
    1f02:	2f 7e       	andi	r18, 0xEF	; 239
    1f04:	fc 01       	movw	r30, r24
    1f06:	20 83       	st	Z, r18

}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <_ZN3rtc8i2c_initEv>:


void rtc::i2c_init( ){
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <_ZN3rtc8i2c_initEv+0x6>
    1f18:	1f 92       	push	r1
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	9b 83       	std	Y+3, r25	; 0x03
    1f20:	8a 83       	std	Y+2, r24	; 0x02

	char IOReg;

	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    1f22:	84 e2       	ldi	r24, 0x24	; 36
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	20 eb       	ldi	r18, 0xB0	; 176
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 83       	st	Z, r18
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );	// POSSIBLE ERROR: PULLING DATA HIGH
    1f2c:	8c e4       	ldi	r24, 0x4C	; 76
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	21 e5       	ldi	r18, 0x51	; 81
    1f32:	fc 01       	movw	r30, r24
    1f34:	20 83       	st	Z, r18
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
    1f36:	8d e4       	ldi	r24, 0x4D	; 77
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	80 81       	ld	r24, Z
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
    1f40:	8e e4       	ldi	r24, 0x4E	; 78
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	80 81       	ld	r24, Z
    1f48:	89 83       	std	Y+1, r24	; 0x01

	spi_deselect( );
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	cc df       	rcall	.-104    	; 0x1ee8 <_ZN3rtc12spi_deselectEv>
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <_ZN3rtc19spi_master_transmitEh>:


// This routine exchanges 1 byte with the SPI port. 
unsigned char rtc::spi_master_transmit( unsigned char cData )
{
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <_ZN3rtc19spi_master_transmitEh+0x6>
    1f62:	1f 92       	push	r1
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	6b 83       	std	Y+3, r22	; 0x03

	SPDR  = cData;	// Set Pointer to beginning of String
    1f6e:	8e e4       	ldi	r24, 0x4E	; 78
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	fc 01       	movw	r30, r24
    1f76:	20 83       	st	Z, r18
	/* wait until Char is sent */
	while ( ! (SPSR & ( 1 << SPIF ))){
    1f78:	00 00       	nop
    1f7a:	8d e4       	ldi	r24, 0x4D	; 77
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	fc 01       	movw	r30, r24
    1f80:	80 81       	ld	r24, Z
    1f82:	80 95       	com	r24
    1f84:	88 1f       	adc	r24, r24
    1f86:	88 27       	eor	r24, r24
    1f88:	88 1f       	adc	r24, r24
    1f8a:	88 23       	and	r24, r24
    1f8c:	b1 f7       	brne	.-20     	; 0x1f7a <_ZN3rtc19spi_master_transmitEh+0x1e>
		;	
	}

	return SPDR;
    1f8e:	8e e4       	ldi	r24, 0x4E	; 78
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 81       	ld	r24, Z
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	08 95       	ret

00001fa2 <_ZN3rtc10read_blockEhPhj>:

/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	27 97       	sbiw	r28, 0x07	; 7
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	6b 83       	std	Y+3, r22	; 0x03
    1fc0:	5d 83       	std	Y+5, r21	; 0x05
    1fc2:	4c 83       	std	Y+4, r20	; 0x04
    1fc4:	3f 83       	std	Y+7, r19	; 0x07
    1fc6:	2e 83       	std	Y+6, r18	; 0x06
	
	spi_select( );
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	6f df       	rcall	.-290    	; 0x1eac <_ZN3rtc10spi_selectEv>

	spi_master_transmit( cAddr );
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	6b 81       	ldd	r22, Y+3	; 0x03
    1fd4:	c3 df       	rcall	.-122    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1fd6:	0c c0       	rjmp	.+24     	; 0x1ff0 <_ZN3rtc10read_blockEhPhj+0x4e>
		*pBuffer++ = spi_master_transmit( 0 );
    1fd8:	0c 81       	ldd	r16, Y+4	; 0x04
    1fda:	1d 81       	ldd	r17, Y+5	; 0x05
    1fdc:	c8 01       	movw	r24, r16
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	9d 83       	std	Y+5, r25	; 0x05
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	b8 df       	rcall	.-144    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
	
	spi_select( );

	spi_master_transmit( cAddr );
	while( iCount-- ){
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff4:	9c 01       	movw	r18, r24
    1ff6:	21 50       	subi	r18, 0x01	; 1
    1ff8:	31 09       	sbc	r19, r1
    1ffa:	3f 83       	std	Y+7, r19	; 0x07
    1ffc:	2e 83       	std	Y+6, r18	; 0x06
    1ffe:	21 e0       	ldi	r18, 0x01	; 1
    2000:	89 2b       	or	r24, r25
    2002:	09 f4       	brne	.+2      	; 0x2006 <_ZN3rtc10read_blockEhPhj+0x64>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	22 23       	and	r18, r18
    2008:	39 f7       	brne	.-50     	; 0x1fd8 <_ZN3rtc10read_blockEhPhj+0x36>
		*pBuffer++ = spi_master_transmit( 0 );
	}

	spi_deselect();
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	6c df       	rcall	.-296    	; 0x1ee8 <_ZN3rtc12spi_deselectEv>

}
    2010:	27 96       	adiw	r28, 0x07	; 7
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	08 95       	ret

00002026 <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	29 97       	sbiw	r28, 0x09	; 9
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	6d 83       	std	Y+5, r22	; 0x05
    2040:	5f 83       	std	Y+7, r21	; 0x07
    2042:	4e 83       	std	Y+6, r20	; 0x06
    2044:	39 87       	std	Y+9, r19	; 0x09
    2046:	28 87       	std	Y+8, r18	; 0x08
	
	unsigned char uchTempControlA { 0x00 };
    2048:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char uchTempControlB { 0x00 };
    204a:	19 82       	std	Y+1, r1	; 0x01
	
	
	read_block( RTC_ADDR_CON, &uchTempControlA, 1 );
    204c:	ae 01       	movw	r20, r28
    204e:	4e 5f       	subi	r20, 0xFE	; 254
    2050:	5f 4f       	sbci	r21, 0xFF	; 255
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	21 e0       	ldi	r18, 0x01	; 1
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	6f e0       	ldi	r22, 0x0F	; 15
    205c:	a2 df       	rcall	.-188    	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
	if( ! (( uchTempControlA & 0x03 ) == 0x00 )){
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	83 70       	andi	r24, 0x03	; 3
    2066:	99 27       	eor	r25, r25
    2068:	89 2b       	or	r24, r25
    206a:	89 f0       	breq	.+34     	; 0x208e <_ZN3rtc11write_blockEhPhj+0x68>
		uchTempControlB = uchTempControlA & 0xFC;
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	8c 7f       	andi	r24, 0xFC	; 252
    2070:	89 83       	std	Y+1, r24	; 0x01
		spi_select( );
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	1a df       	rcall	.-460    	; 0x1eac <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	6f e8       	ldi	r22, 0x8F	; 143
    207e:	6e df       	rcall	.-292    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlB );
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	69 81       	ldd	r22, Y+1	; 0x01
    2086:	6a df       	rcall	.-300    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	2d df       	rcall	.-422    	; 0x1ee8 <_ZN3rtc12spi_deselectEv>
	}
	
	spi_select( );
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	0c df       	rcall	.-488    	; 0x1eac <_ZN3rtc10spi_selectEv>

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	20 e8       	ldi	r18, 0x80	; 128
    2098:	28 0f       	add	r18, r24
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	62 2f       	mov	r22, r18
    20a0:	5d df       	rcall	.-326    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <_ZN3rtc11write_blockEhPhj+0x98>
		spi_master_transmit( *pBuffer++ );
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	9c 01       	movw	r18, r24
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	3f 83       	std	Y+7, r19	; 0x07
    20b0:	2e 83       	std	Y+6, r18	; 0x06
    20b2:	fc 01       	movw	r30, r24
    20b4:	20 81       	ld	r18, Z
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	62 2f       	mov	r22, r18
    20bc:	4f df       	rcall	.-354    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
	}
	
	spi_select( );

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
	while( iCount-- ){
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	99 85       	ldd	r25, Y+9	; 0x09
    20c2:	9c 01       	movw	r18, r24
    20c4:	21 50       	subi	r18, 0x01	; 1
    20c6:	31 09       	sbc	r19, r1
    20c8:	39 87       	std	Y+9, r19	; 0x09
    20ca:	28 87       	std	Y+8, r18	; 0x08
    20cc:	21 e0       	ldi	r18, 0x01	; 1
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <_ZN3rtc11write_blockEhPhj+0xae>
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	22 23       	and	r18, r18
    20d6:	31 f7       	brne	.-52     	; 0x20a4 <_ZN3rtc11write_blockEhPhj+0x7e>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	05 df       	rcall	.-502    	; 0x1ee8 <_ZN3rtc12spi_deselectEv>
	
	if( ! ( iAddr == RTC_ADDR_CON )){
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	8f 30       	cpi	r24, 0x0F	; 15
    20e2:	79 f0       	breq	.+30     	; 0x2102 <_ZN3rtc11write_blockEhPhj+0xdc>
		spi_select( );
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	e1 de       	rcall	.-574    	; 0x1eac <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	6f e8       	ldi	r22, 0x8F	; 143
    20f0:	35 df       	rcall	.-406    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlA );
    20f2:	2a 81       	ldd	r18, Y+2	; 0x02
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	62 2f       	mov	r22, r18
    20fa:	30 df       	rcall	.-416    	; 0x1f5c <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	f3 de       	rcall	.-538    	; 0x1ee8 <_ZN3rtc12spi_deselectEv>
	}
}
    2102:	29 96       	adiw	r28, 0x09	; 9
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	08 95       	ret

00002114 <_ZN3rtc8get_timeEv>:


rtc_time rtc::get_time( ){
    2114:	2f 92       	push	r2
    2116:	3f 92       	push	r3
    2118:	4f 92       	push	r4
    211a:	5f 92       	push	r5
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	60 97       	sbiw	r28, 0x10	; 16
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	98 8b       	std	Y+16, r25	; 0x10
    214a:	8f 87       	std	Y+15, r24	; 0x0f

	rtc_time rtmToConvert;


	read_block( RTC_ADDR_START, ( unsigned char * )&rtmToConvert, sizeof( rtc_time ));
    214c:	ae 01       	movw	r20, r28
    214e:	48 5f       	subi	r20, 0xF8	; 248
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	98 89       	ldd	r25, Y+16	; 0x10
    2156:	27 e0       	ldi	r18, 0x07	; 7
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	22 df       	rcall	.-444    	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>

	return rtmToConvert;
    215e:	27 e0       	ldi	r18, 0x07	; 7
    2160:	fe 01       	movw	r30, r28
    2162:	38 96       	adiw	r30, 0x08	; 8
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	dc 01       	movw	r26, r24
    216a:	01 90       	ld	r0, Z+
    216c:	0d 92       	st	X+, r0
    216e:	2a 95       	dec	r18
    2170:	e1 f7       	brne	.-8      	; 0x216a <_ZN3rtc8get_timeEv+0x56>
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	69 81       	ldd	r22, Y+1	; 0x01
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	5a 81       	ldd	r21, Y+2	; 0x02
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	4b 81       	ldd	r20, Y+3	; 0x03
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3c 81       	ldd	r19, Y+4	; 0x04
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	2d 81       	ldd	r18, Y+5	; 0x05
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	8f 81       	ldd	r24, Y+7	; 0x07
    218e:	26 2e       	mov	r2, r22
    2190:	35 2e       	mov	r3, r21
    2192:	44 2e       	mov	r4, r20
    2194:	53 2e       	mov	r5, r19
    2196:	62 2e       	mov	r6, r18
    2198:	79 2e       	mov	r7, r25
    219a:	88 2e       	mov	r8, r24
    219c:	a2 2c       	mov	r10, r2
    219e:	b3 2c       	mov	r11, r3
    21a0:	c4 2c       	mov	r12, r4
    21a2:	d5 2c       	mov	r13, r5
    21a4:	e6 2c       	mov	r14, r6
    21a6:	f7 2c       	mov	r15, r7
    21a8:	08 2d       	mov	r16, r8
    21aa:	19 2d       	mov	r17, r9
}
    21ac:	2a 2d       	mov	r18, r10
    21ae:	3b 2d       	mov	r19, r11
    21b0:	4c 2d       	mov	r20, r12
    21b2:	5d 2d       	mov	r21, r13
    21b4:	6e 2d       	mov	r22, r14
    21b6:	7f 2d       	mov	r23, r15
    21b8:	80 2f       	mov	r24, r16
    21ba:	91 2f       	mov	r25, r17
    21bc:	60 96       	adiw	r28, 0x10	; 16
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	bf 90       	pop	r11
    21da:	af 90       	pop	r10
    21dc:	9f 90       	pop	r9
    21de:	8f 90       	pop	r8
    21e0:	7f 90       	pop	r7
    21e2:	6f 90       	pop	r6
    21e4:	5f 90       	pop	r5
    21e6:	4f 90       	pop	r4
    21e8:	3f 90       	pop	r3
    21ea:	2f 90       	pop	r2
    21ec:	08 95       	ret

000021ee <_ZN3rtc8set_timeEP8rtc_time>:


void rtc::set_time( rtc_time* rtmSetTime ){
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <_ZN3rtc8set_timeEP8rtc_time+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <_ZN3rtc8set_timeEP8rtc_time+0x8>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	7c 83       	std	Y+4, r23	; 0x04
    2200:	6b 83       	std	Y+3, r22	; 0x03

	write_block( RTC_ADDR_START, ( unsigned char * )rtmSetTime, sizeof(rtc_time));
    2202:	4b 81       	ldd	r20, Y+3	; 0x03
    2204:	5c 81       	ldd	r21, Y+4	; 0x04
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	27 e0       	ldi	r18, 0x07	; 7
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	0a df       	rcall	.-492    	; 0x2026 <_ZN3rtc11write_blockEhPhj>
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <_ZN3rtc11rtm_to_charE8rtc_timePhj>:


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	a6 97       	sbiw	r28, 0x26	; 38
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	9b 8f       	std	Y+27, r25	; 0x1b
    2242:	8a 8f       	std	Y+26, r24	; 0x1a
    2244:	0c 8f       	std	Y+28, r16	; 0x1c
    2246:	1d 8f       	std	Y+29, r17	; 0x1d
    2248:	2e 8f       	std	Y+30, r18	; 0x1e
    224a:	3f 8f       	std	Y+31, r19	; 0x1f
    224c:	48 a3       	std	Y+32, r20	; 0x20
    224e:	59 a3       	std	Y+33, r21	; 0x21
    2250:	6a a3       	std	Y+34, r22	; 0x22
    2252:	fc a2       	std	Y+36, r15	; 0x24
    2254:	eb a2       	std	Y+35, r14	; 0x23
    2256:	de a2       	std	Y+38, r13	; 0x26
    2258:	cd a2       	std	Y+37, r12	; 0x25
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
	uchTimeOut[valTextOffset + 15] = valDates >> 8;

	memcpy( uchToReturn, uchTimeOut, valCharLen );

}
    225a:	0d b7       	in	r16, 0x3d	; 61
    225c:	1e b7       	in	r17, 0x3e	; 62
    225e:	8d b7       	in	r24, 0x3d	; 61
    2260:	9e b7       	in	r25, 0x3e	; 62
    2262:	7c 01       	movw	r14, r24
}


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
	
	unsigned char uchTimeOut[ valCharLen ];
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9d 83       	std	Y+5, r25	; 0x05
    226c:	8c 83       	std	Y+4, r24	; 0x04
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	2d b7       	in	r18, 0x3d	; 61
    2272:	3e b7       	in	r19, 0x3e	; 62
    2274:	28 1b       	sub	r18, r24
    2276:	39 0b       	sbc	r19, r25
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	3e bf       	out	0x3e, r19	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	2d bf       	out	0x3d, r18	; 61
    2282:	8d b7       	in	r24, 0x3d	; 61
    2284:	9e b7       	in	r25, 0x3e	; 62
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	9f 83       	std	Y+7, r25	; 0x07
    228a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t valTimeLength = RTC_DISP_LEN;
    228c:	80 e1       	ldi	r24, 0x10	; 16
    228e:	88 87       	std	Y+8, r24	; 0x08
	unsigned int valTextOffset = ( valCharLen - valTimeLength ) / 2;
    2290:	88 85       	ldd	r24, Y+8	; 0x08
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	2d a1       	ldd	r18, Y+37	; 0x25
    2298:	3e a1       	ldd	r19, Y+38	; 0x26
    229a:	a9 01       	movw	r20, r18
    229c:	48 1b       	sub	r20, r24
    229e:	59 0b       	sbc	r21, r25
    22a0:	ca 01       	movw	r24, r20
    22a2:	96 95       	lsr	r25
    22a4:	87 95       	ror	r24
    22a6:	9a 87       	std	Y+10, r25	; 0x0a
    22a8:	89 87       	std	Y+9, r24	; 0x09
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    22aa:	1b 82       	std	Y+3, r1	; 0x03
    22ac:	1a 82       	std	Y+2, r1	; 0x02
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
		uchTimeOut[valN] = ' ';
    22b0:	2e 81       	ldd	r18, Y+6	; 0x06
    22b2:	3f 81       	ldd	r19, Y+7	; 0x07
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	82 0f       	add	r24, r18
    22ba:	93 1f       	adc	r25, r19
    22bc:	20 e2       	ldi	r18, 0x20	; 32
    22be:	fc 01       	movw	r30, r24
    22c0:	20 83       	st	Z, r18
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	2a 81       	ldd	r18, Y+2	; 0x02
    22ce:	3b 81       	ldd	r19, Y+3	; 0x03
    22d0:	8d a1       	ldd	r24, Y+37	; 0x25
    22d2:	9e a1       	ldd	r25, Y+38	; 0x26
    22d4:	28 17       	cp	r18, r24
    22d6:	39 07       	cpc	r19, r25
    22d8:	58 f3       	brcs	.-42     	; 0x22b0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
		uchTimeOut[valN] = ' ';
	}

	valMins &= 0x0000;
    22da:	1c 86       	std	Y+12, r1	; 0x0c
    22dc:	1b 86       	std	Y+11, r1	; 0x0b
	valMins |= (( rtmToConvert.ucMinutes & 0xF0 ) + 0x0300 ) << 4;
    22de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	80 7f       	andi	r24, 0xF0	; 240
    22e6:	99 27       	eor	r25, r25
    22e8:	9d 5f       	subi	r25, 0xFD	; 253
    22ea:	82 95       	swap	r24
    22ec:	92 95       	swap	r25
    22ee:	90 7f       	andi	r25, 0xF0	; 240
    22f0:	98 27       	eor	r25, r24
    22f2:	80 7f       	andi	r24, 0xF0	; 240
    22f4:	98 27       	eor	r25, r24
    22f6:	9c 01       	movw	r18, r24
    22f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fc:	82 2b       	or	r24, r18
    22fe:	93 2b       	or	r25, r19
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	8b 87       	std	Y+11, r24	; 0x0b
	valMins |= ( rtmToConvert.ucMinutes & 0x0F) + 0x0030;
    2304:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	8f 70       	andi	r24, 0x0F	; 15
    230c:	99 27       	eor	r25, r25
    230e:	c0 96       	adiw	r24, 0x30	; 48
    2310:	9c 01       	movw	r18, r24
    2312:	8b 85       	ldd	r24, Y+11	; 0x0b
    2314:	9c 85       	ldd	r25, Y+12	; 0x0c
    2316:	82 2b       	or	r24, r18
    2318:	93 2b       	or	r25, r19
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	8b 87       	std	Y+11, r24	; 0x0b
	valHours &= 0x0000;
    231e:	1e 86       	std	Y+14, r1	; 0x0e
    2320:	1d 86       	std	Y+13, r1	; 0x0d
	valHours |= (( rtmToConvert.ucHours & 0x10 ) + 0x0300 ) << 4;
    2322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	80 71       	andi	r24, 0x10	; 16
    232a:	99 27       	eor	r25, r25
    232c:	9d 5f       	subi	r25, 0xFD	; 253
    232e:	82 95       	swap	r24
    2330:	92 95       	swap	r25
    2332:	90 7f       	andi	r25, 0xF0	; 240
    2334:	98 27       	eor	r25, r24
    2336:	80 7f       	andi	r24, 0xF0	; 240
    2338:	98 27       	eor	r25, r24
    233a:	9c 01       	movw	r18, r24
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	82 2b       	or	r24, r18
    2342:	93 2b       	or	r25, r19
    2344:	9e 87       	std	Y+14, r25	; 0x0e
    2346:	8d 87       	std	Y+13, r24	; 0x0d
	valHours |= ( rtmToConvert.ucHours & 0x0F) + 0x0030;
    2348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	8f 70       	andi	r24, 0x0F	; 15
    2350:	99 27       	eor	r25, r25
    2352:	c0 96       	adiw	r24, 0x30	; 48
    2354:	9c 01       	movw	r18, r24
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	82 2b       	or	r24, r18
    235c:	93 2b       	or	r25, r19
    235e:	9e 87       	std	Y+14, r25	; 0x0e
    2360:	8d 87       	std	Y+13, r24	; 0x0d
	if(( rtmToConvert.ucHours & RTC_12PM ) == RTC_12AM ){
    2362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	80 76       	andi	r24, 0x60	; 96
    236a:	99 27       	eor	r25, r25
    236c:	80 34       	cpi	r24, 0x40	; 64
    236e:	91 05       	cpc	r25, r1
    2370:	19 f4       	brne	.+6      	; 0x2378 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
		valAMPM = 'A';
    2372:	81 e4       	ldi	r24, 0x41	; 65
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	02 c0       	rjmp	.+4      	; 0x237c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
	}else{
		valAMPM = 'P';
    2378:	80 e5       	ldi	r24, 0x50	; 80
    237a:	89 83       	std	Y+1, r24	; 0x01
	}
	valDay &= 0x00;
    237c:	1f 86       	std	Y+15, r1	; 0x0f
	valDays &= 0x00000000;
    237e:	19 8a       	std	Y+17, r1	; 0x11
    2380:	18 8a       	std	Y+16, r1	; 0x10
	valDay = ((( rtmToConvert.ucDay >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucDay ) & 0x0F );
    2382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2384:	82 95       	swap	r24
    2386:	8f 70       	andi	r24, 0x0F	; 15
    2388:	88 0f       	add	r24, r24
    238a:	98 2f       	mov	r25, r24
    238c:	99 0f       	add	r25, r25
    238e:	99 0f       	add	r25, r25
    2390:	98 0f       	add	r25, r24
    2392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2394:	8f 70       	andi	r24, 0x0F	; 15
    2396:	89 0f       	add	r24, r25
    2398:	8f 87       	std	Y+15, r24	; 0x0f
	valDays = chrDays[(( valDay == 0 ) ? 0 : valDay - 1 ) * 2];
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	88 23       	and	r24, r24
    239e:	39 f0       	breq	.+14     	; 0x23ae <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    23a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	8e 59       	subi	r24, 0x9E	; 158
    23b4:	9e 4f       	sbci	r25, 0xFE	; 254
    23b6:	fc 01       	movw	r30, r24
    23b8:	80 81       	ld	r24, Z
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	99 8b       	std	Y+17, r25	; 0x11
    23c0:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 1] << 8;
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	88 23       	and	r24, r24
    23c6:	41 f0       	breq	.+16     	; 0x23d8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    23c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	8e 59       	subi	r24, 0x9E	; 158
    23de:	9e 4f       	sbci	r25, 0xFE	; 254
    23e0:	fc 01       	movw	r30, r24
    23e2:	80 81       	ld	r24, Z
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	98 2f       	mov	r25, r24
    23ea:	88 27       	eor	r24, r24
    23ec:	9c 01       	movw	r18, r24
    23ee:	88 89       	ldd	r24, Y+16	; 0x10
    23f0:	99 89       	ldd	r25, Y+17	; 0x11
    23f2:	82 2b       	or	r24, r18
    23f4:	93 2b       	or	r25, r19
    23f6:	99 8b       	std	Y+17, r25	; 0x11
    23f8:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= (( uint16_t )( chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 2])) << 16;
    23fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fc:	88 23       	and	r24, r24
    23fe:	31 f0       	breq	.+12     	; 0x240c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    2400:	8f 85       	ldd	r24, Y+15	; 0x0f
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	8e 59       	subi	r24, 0x9E	; 158
    2412:	9e 4f       	sbci	r25, 0xFE	; 254
    2414:	fc 01       	movw	r30, r24
    2416:	80 81       	ld	r24, Z
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	99 27       	eor	r25, r25
    241e:	88 27       	eor	r24, r24
    2420:	28 89       	ldd	r18, Y+16	; 0x10
    2422:	39 89       	ldd	r19, Y+17	; 0x11
    2424:	82 2b       	or	r24, r18
    2426:	93 2b       	or	r25, r19
    2428:	99 8b       	std	Y+17, r25	; 0x11
    242a:	88 8b       	std	Y+16, r24	; 0x10
	valMonth &= 0x00;
    242c:	1b 8a       	std	Y+19, r1	; 0x13
    242e:	1a 8a       	std	Y+18, r1	; 0x12
	valMonths &= 0x00000000;
    2430:	1c 8a       	std	Y+20, r1	; 0x14
    2432:	1d 8a       	std	Y+21, r1	; 0x15
    2434:	1e 8a       	std	Y+22, r1	; 0x16
    2436:	1f 8a       	std	Y+23, r1	; 0x17
	valMonth = ((( rtmToConvert.ucMonth >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucMonth ) & 0x0F );
    2438:	89 a1       	ldd	r24, Y+33	; 0x21
    243a:	82 95       	swap	r24
    243c:	8f 70       	andi	r24, 0x0F	; 15
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	99 27       	eor	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	9c 01       	movw	r18, r24
    244a:	22 0f       	add	r18, r18
    244c:	33 1f       	adc	r19, r19
    244e:	22 0f       	add	r18, r18
    2450:	33 1f       	adc	r19, r19
    2452:	28 0f       	add	r18, r24
    2454:	39 1f       	adc	r19, r25
    2456:	89 a1       	ldd	r24, Y+33	; 0x21
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	8f 70       	andi	r24, 0x0F	; 15
    245e:	99 27       	eor	r25, r25
    2460:	82 0f       	add	r24, r18
    2462:	93 1f       	adc	r25, r19
    2464:	9b 8b       	std	Y+19, r25	; 0x13
    2466:	8a 8b       	std	Y+18, r24	; 0x12
	valMonths = chrMonths[(( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3];
    2468:	8a 89       	ldd	r24, Y+18	; 0x12
    246a:	9b 89       	ldd	r25, Y+19	; 0x13
    246c:	89 2b       	or	r24, r25
    246e:	49 f0       	breq	.+18     	; 0x2482 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x262>
    2470:	2a 89       	ldd	r18, Y+18	; 0x12
    2472:	3b 89       	ldd	r19, Y+19	; 0x13
    2474:	c9 01       	movw	r24, r18
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	03 97       	sbiw	r24, 0x03	; 3
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x266>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	82 5c       	subi	r24, 0xC2	; 194
    2488:	9e 4f       	sbci	r25, 0xFE	; 254
    248a:	fc 01       	movw	r30, r24
    248c:	80 81       	ld	r24, Z
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e0       	ldi	r26, 0x00	; 0
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	8c 8b       	std	Y+20, r24	; 0x14
    2498:	9d 8b       	std	Y+21, r25	; 0x15
    249a:	ae 8b       	std	Y+22, r26	; 0x16
    249c:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 1] << 8;
    249e:	8a 89       	ldd	r24, Y+18	; 0x12
    24a0:	9b 89       	ldd	r25, Y+19	; 0x13
    24a2:	89 2b       	or	r24, r25
    24a4:	49 f0       	breq	.+18     	; 0x24b8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x298>
    24a6:	2a 89       	ldd	r18, Y+18	; 0x12
    24a8:	3b 89       	ldd	r19, Y+19	; 0x13
    24aa:	c9 01       	movw	r24, r18
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	82 0f       	add	r24, r18
    24b2:	93 1f       	adc	r25, r19
    24b4:	02 97       	sbiw	r24, 0x02	; 2
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x29c>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	82 5c       	subi	r24, 0xC2	; 194
    24be:	9e 4f       	sbci	r25, 0xFE	; 254
    24c0:	fc 01       	movw	r30, r24
    24c2:	80 81       	ld	r24, Z
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	98 2f       	mov	r25, r24
    24ca:	88 27       	eor	r24, r24
    24cc:	09 2e       	mov	r0, r25
    24ce:	00 0c       	add	r0, r0
    24d0:	aa 0b       	sbc	r26, r26
    24d2:	bb 0b       	sbc	r27, r27
    24d4:	2c 89       	ldd	r18, Y+20	; 0x14
    24d6:	3d 89       	ldd	r19, Y+21	; 0x15
    24d8:	4e 89       	ldd	r20, Y+22	; 0x16
    24da:	5f 89       	ldd	r21, Y+23	; 0x17
    24dc:	82 2b       	or	r24, r18
    24de:	93 2b       	or	r25, r19
    24e0:	a4 2b       	or	r26, r20
    24e2:	b5 2b       	or	r27, r21
    24e4:	8c 8b       	std	Y+20, r24	; 0x14
    24e6:	9d 8b       	std	Y+21, r25	; 0x15
    24e8:	ae 8b       	std	Y+22, r26	; 0x16
    24ea:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= (( uint32_t )( chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 2])) << 16;
    24ec:	8a 89       	ldd	r24, Y+18	; 0x12
    24ee:	9b 89       	ldd	r25, Y+19	; 0x13
    24f0:	89 2b       	or	r24, r25
    24f2:	49 f0       	breq	.+18     	; 0x2506 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e6>
    24f4:	2a 89       	ldd	r18, Y+18	; 0x12
    24f6:	3b 89       	ldd	r19, Y+19	; 0x13
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	82 0f       	add	r24, r18
    2500:	93 1f       	adc	r25, r19
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	02 c0       	rjmp	.+4      	; 0x250a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2ea>
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	82 5c       	subi	r24, 0xC2	; 194
    250c:	9e 4f       	sbci	r25, 0xFE	; 254
    250e:	fc 01       	movw	r30, r24
    2510:	80 81       	ld	r24, Z
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	dc 01       	movw	r26, r24
    251c:	99 27       	eor	r25, r25
    251e:	88 27       	eor	r24, r24
    2520:	2c 89       	ldd	r18, Y+20	; 0x14
    2522:	3d 89       	ldd	r19, Y+21	; 0x15
    2524:	4e 89       	ldd	r20, Y+22	; 0x16
    2526:	5f 89       	ldd	r21, Y+23	; 0x17
    2528:	82 2b       	or	r24, r18
    252a:	93 2b       	or	r25, r19
    252c:	a4 2b       	or	r26, r20
    252e:	b5 2b       	or	r27, r21
    2530:	8c 8b       	std	Y+20, r24	; 0x14
    2532:	9d 8b       	std	Y+21, r25	; 0x15
    2534:	ae 8b       	std	Y+22, r26	; 0x16
    2536:	bf 8b       	std	Y+23, r27	; 0x17
	valDates &= 0x0000;
    2538:	19 8e       	std	Y+25, r1	; 0x19
    253a:	18 8e       	std	Y+24, r1	; 0x18
	valDates |= (( rtmToConvert.ucDate & 0xF0 ) + 0x0300 ) << 4;
    253c:	88 a1       	ldd	r24, Y+32	; 0x20
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	80 7f       	andi	r24, 0xF0	; 240
    2544:	99 27       	eor	r25, r25
    2546:	9d 5f       	subi	r25, 0xFD	; 253
    2548:	82 95       	swap	r24
    254a:	92 95       	swap	r25
    254c:	90 7f       	andi	r25, 0xF0	; 240
    254e:	98 27       	eor	r25, r24
    2550:	80 7f       	andi	r24, 0xF0	; 240
    2552:	98 27       	eor	r25, r24
    2554:	9c 01       	movw	r18, r24
    2556:	88 8d       	ldd	r24, Y+24	; 0x18
    2558:	99 8d       	ldd	r25, Y+25	; 0x19
    255a:	82 2b       	or	r24, r18
    255c:	93 2b       	or	r25, r19
    255e:	99 8f       	std	Y+25, r25	; 0x19
    2560:	88 8f       	std	Y+24, r24	; 0x18
	valDates |= ( rtmToConvert.ucDate & 0x0F) + 0x0030;
    2562:	88 a1       	ldd	r24, Y+32	; 0x20
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	8f 70       	andi	r24, 0x0F	; 15
    256a:	99 27       	eor	r25, r25
    256c:	c0 96       	adiw	r24, 0x30	; 48
    256e:	9c 01       	movw	r18, r24
    2570:	88 8d       	ldd	r24, Y+24	; 0x18
    2572:	99 8d       	ldd	r25, Y+25	; 0x19
    2574:	82 2b       	or	r24, r18
    2576:	93 2b       	or	r25, r19
    2578:	99 8f       	std	Y+25, r25	; 0x19
    257a:	88 8f       	std	Y+24, r24	; 0x18
	
	uchTimeOut[valTextOffset] = valHours >> 8;
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	89 2f       	mov	r24, r25
    2582:	99 27       	eor	r25, r25
    2584:	48 2f       	mov	r20, r24
    2586:	2e 81       	ldd	r18, Y+6	; 0x06
    2588:	3f 81       	ldd	r19, Y+7	; 0x07
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	82 0f       	add	r24, r18
    2590:	93 1f       	adc	r25, r19
    2592:	fc 01       	movw	r30, r24
    2594:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 1] = valHours & 0x00FF;
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	4d 85       	ldd	r20, Y+13	; 0x0d
    259e:	2e 81       	ldd	r18, Y+6	; 0x06
    25a0:	3f 81       	ldd	r19, Y+7	; 0x07
    25a2:	82 0f       	add	r24, r18
    25a4:	93 1f       	adc	r25, r19
    25a6:	fc 01       	movw	r30, r24
    25a8:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 2] = ':';
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	02 96       	adiw	r24, 0x02	; 2
    25b0:	2e 81       	ldd	r18, Y+6	; 0x06
    25b2:	3f 81       	ldd	r19, Y+7	; 0x07
    25b4:	82 0f       	add	r24, r18
    25b6:	93 1f       	adc	r25, r19
    25b8:	2a e3       	ldi	r18, 0x3A	; 58
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 3] = valMins >> 8;
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	03 96       	adiw	r24, 0x03	; 3
    25c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    25c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    25c8:	23 2f       	mov	r18, r19
    25ca:	33 27       	eor	r19, r19
    25cc:	42 2f       	mov	r20, r18
    25ce:	2e 81       	ldd	r18, Y+6	; 0x06
    25d0:	3f 81       	ldd	r19, Y+7	; 0x07
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	fc 01       	movw	r30, r24
    25d8:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 4] = valMins & 0x00FF;
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	04 96       	adiw	r24, 0x04	; 4
    25e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    25e2:	2e 81       	ldd	r18, Y+6	; 0x06
    25e4:	3f 81       	ldd	r19, Y+7	; 0x07
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	fc 01       	movw	r30, r24
    25ec:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 5] = valAMPM;
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	05 96       	adiw	r24, 0x05	; 5
    25f4:	2e 81       	ldd	r18, Y+6	; 0x06
    25f6:	3f 81       	ldd	r19, Y+7	; 0x07
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	29 81       	ldd	r18, Y+1	; 0x01
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 6] = 'M';
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	06 96       	adiw	r24, 0x06	; 6
    2608:	2e 81       	ldd	r18, Y+6	; 0x06
    260a:	3f 81       	ldd	r19, Y+7	; 0x07
    260c:	82 0f       	add	r24, r18
    260e:	93 1f       	adc	r25, r19
    2610:	2d e4       	ldi	r18, 0x4D	; 77
    2612:	fc 01       	movw	r30, r24
    2614:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 7] = ' ';
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	9a 85       	ldd	r25, Y+10	; 0x0a
    261a:	07 96       	adiw	r24, 0x07	; 7
    261c:	2e 81       	ldd	r18, Y+6	; 0x06
    261e:	3f 81       	ldd	r19, Y+7	; 0x07
    2620:	82 0f       	add	r24, r18
    2622:	93 1f       	adc	r25, r19
    2624:	20 e2       	ldi	r18, 0x20	; 32
    2626:	fc 01       	movw	r30, r24
    2628:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 8] = valDays & 0xFF;
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	08 96       	adiw	r24, 0x08	; 8
    2630:	48 89       	ldd	r20, Y+16	; 0x10
    2632:	2e 81       	ldd	r18, Y+6	; 0x06
    2634:	3f 81       	ldd	r19, Y+7	; 0x07
    2636:	82 0f       	add	r24, r18
    2638:	93 1f       	adc	r25, r19
    263a:	fc 01       	movw	r30, r24
    263c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 9] = ( valDays >> 8 ) & 0xFF;
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	09 96       	adiw	r24, 0x09	; 9
    2644:	28 89       	ldd	r18, Y+16	; 0x10
    2646:	39 89       	ldd	r19, Y+17	; 0x11
    2648:	23 2f       	mov	r18, r19
    264a:	33 27       	eor	r19, r19
    264c:	42 2f       	mov	r20, r18
    264e:	2e 81       	ldd	r18, Y+6	; 0x06
    2650:	3f 81       	ldd	r19, Y+7	; 0x07
    2652:	82 0f       	add	r24, r18
    2654:	93 1f       	adc	r25, r19
    2656:	fc 01       	movw	r30, r24
    2658:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 10] = ',';
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	0a 96       	adiw	r24, 0x0a	; 10
    2660:	2e 81       	ldd	r18, Y+6	; 0x06
    2662:	3f 81       	ldd	r19, Y+7	; 0x07
    2664:	82 0f       	add	r24, r18
    2666:	93 1f       	adc	r25, r19
    2668:	2c e2       	ldi	r18, 0x2C	; 44
    266a:	fc 01       	movw	r30, r24
    266c:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 11] = valMonths & 0xFF;
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	0b 96       	adiw	r24, 0x0b	; 11
    2674:	4c 89       	ldd	r20, Y+20	; 0x14
    2676:	2e 81       	ldd	r18, Y+6	; 0x06
    2678:	3f 81       	ldd	r19, Y+7	; 0x07
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	fc 01       	movw	r30, r24
    2680:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 12] = ( valMonths >> 8 ) & 0xFF;
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	9c 01       	movw	r18, r24
    2688:	24 5f       	subi	r18, 0xF4	; 244
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	8c 89       	ldd	r24, Y+20	; 0x14
    268e:	9d 89       	ldd	r25, Y+21	; 0x15
    2690:	ae 89       	ldd	r26, Y+22	; 0x16
    2692:	bf 89       	ldd	r27, Y+23	; 0x17
    2694:	89 2f       	mov	r24, r25
    2696:	9a 2f       	mov	r25, r26
    2698:	ab 2f       	mov	r26, r27
    269a:	bb 27       	eor	r27, r27
    269c:	48 2f       	mov	r20, r24
    269e:	8e 81       	ldd	r24, Y+6	; 0x06
    26a0:	9f 81       	ldd	r25, Y+7	; 0x07
    26a2:	82 0f       	add	r24, r18
    26a4:	93 1f       	adc	r25, r19
    26a6:	fc 01       	movw	r30, r24
    26a8:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 13] = ( valMonths >> 16 ) & 0xFF;
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	9c 01       	movw	r18, r24
    26b0:	23 5f       	subi	r18, 0xF3	; 243
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	8c 89       	ldd	r24, Y+20	; 0x14
    26b6:	9d 89       	ldd	r25, Y+21	; 0x15
    26b8:	ae 89       	ldd	r26, Y+22	; 0x16
    26ba:	bf 89       	ldd	r27, Y+23	; 0x17
    26bc:	cd 01       	movw	r24, r26
    26be:	aa 27       	eor	r26, r26
    26c0:	bb 27       	eor	r27, r27
    26c2:	48 2f       	mov	r20, r24
    26c4:	8e 81       	ldd	r24, Y+6	; 0x06
    26c6:	9f 81       	ldd	r25, Y+7	; 0x07
    26c8:	82 0f       	add	r24, r18
    26ca:	93 1f       	adc	r25, r19
    26cc:	fc 01       	movw	r30, r24
    26ce:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	0e 96       	adiw	r24, 0x0e	; 14
    26d6:	48 8d       	ldd	r20, Y+24	; 0x18
    26d8:	2e 81       	ldd	r18, Y+6	; 0x06
    26da:	3f 81       	ldd	r19, Y+7	; 0x07
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	fc 01       	movw	r30, r24
    26e2:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 15] = valDates >> 8;
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0f 96       	adiw	r24, 0x0f	; 15
    26ea:	28 8d       	ldd	r18, Y+24	; 0x18
    26ec:	39 8d       	ldd	r19, Y+25	; 0x19
    26ee:	23 2f       	mov	r18, r19
    26f0:	33 27       	eor	r19, r19
    26f2:	42 2f       	mov	r20, r18
    26f4:	2e 81       	ldd	r18, Y+6	; 0x06
    26f6:	3f 81       	ldd	r19, Y+7	; 0x07
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	fc 01       	movw	r30, r24
    26fe:	40 83       	st	Z, r20

	memcpy( uchToReturn, uchTimeOut, valCharLen );
    2700:	2e 81       	ldd	r18, Y+6	; 0x06
    2702:	3f 81       	ldd	r19, Y+7	; 0x07
    2704:	4d a1       	ldd	r20, Y+37	; 0x25
    2706:	5e a1       	ldd	r21, Y+38	; 0x26
    2708:	8b a1       	ldd	r24, Y+35	; 0x23
    270a:	9c a1       	ldd	r25, Y+36	; 0x24
    270c:	b9 01       	movw	r22, r18
    270e:	e2 d7       	rcall	.+4036   	; 0x36d4 <memcpy>
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	fe be       	out	0x3e, r15	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	ed be       	out	0x3d, r14	; 61

}
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	1e bf       	out	0x3e, r17	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0d bf       	out	0x3d, r16	; 61
    2724:	a6 96       	adiw	r28, 0x26	; 38
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	08 95       	ret

00002742 <_ZN3rtc8alarm_onEh>:

void rtc::alarm_on( uint8_t valAlarm01 ){
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	00 d0       	rcall	.+0      	; 0x2748 <_ZN3rtc8alarm_onEh+0x6>
    2748:	00 d0       	rcall	.+0      	; 0x274a <_ZN3rtc8alarm_onEh+0x8>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9b 83       	std	Y+3, r25	; 0x03
    2750:	8a 83       	std	Y+2, r24	; 0x02
    2752:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    2754:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    2756:	8c 81       	ldd	r24, Y+4	; 0x04
    2758:	82 30       	cpi	r24, 0x02	; 2
    275a:	b1 f4       	brne	.+44     	; 0x2788 <_ZN3rtc8alarm_onEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	9b 81       	ldd	r25, Y+3	; 0x03
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	ae 01       	movw	r20, r28
    2766:	4f 5f       	subi	r20, 0xFF	; 255
    2768:	5f 4f       	sbci	r21, 0xFF	; 255
    276a:	6f e0       	ldi	r22, 0x0F	; 15
    276c:	1a dc       	rcall	.-1996   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x03;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	83 60       	ori	r24, 0x03	; 3
    2772:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	ae 01       	movw	r20, r28
    277e:	4f 5f       	subi	r20, 0xFF	; 255
    2780:	5f 4f       	sbci	r21, 0xFF	; 255
    2782:	6f e0       	ldi	r22, 0x0F	; 15
    2784:	50 dc       	rcall	.-1888   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
    2786:	31 c0       	rjmp	.+98     	; 0x27ea <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	88 23       	and	r24, r24
    278c:	b1 f4       	brne	.+44     	; 0x27ba <_ZN3rtc8alarm_onEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	21 e0       	ldi	r18, 0x01	; 1
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	ae 01       	movw	r20, r28
    2798:	4f 5f       	subi	r20, 0xFF	; 255
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	6f e0       	ldi	r22, 0x0F	; 15
    279e:	01 dc       	rcall	.-2046   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x01;
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	81 60       	ori	r24, 0x01	; 1
    27a4:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	21 e0       	ldi	r18, 0x01	; 1
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	ae 01       	movw	r20, r28
    27b0:	4f 5f       	subi	r20, 0xFF	; 255
    27b2:	5f 4f       	sbci	r21, 0xFF	; 255
    27b4:	6f e0       	ldi	r22, 0x0F	; 15
    27b6:	37 dc       	rcall	.-1938   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
    27b8:	18 c0       	rjmp	.+48     	; 0x27ea <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    27ba:	8c 81       	ldd	r24, Y+4	; 0x04
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	a9 f4       	brne	.+42     	; 0x27ea <_ZN3rtc8alarm_onEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	9b 81       	ldd	r25, Y+3	; 0x03
    27c4:	21 e0       	ldi	r18, 0x01	; 1
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	ae 01       	movw	r20, r28
    27ca:	4f 5f       	subi	r20, 0xFF	; 255
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
    27ce:	6f e0       	ldi	r22, 0x0F	; 15
    27d0:	e8 db       	rcall	.-2096   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x02;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	82 60       	ori	r24, 0x02	; 2
    27d6:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	ae 01       	movw	r20, r28
    27e2:	4f 5f       	subi	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	6f e0       	ldi	r22, 0x0F	; 15
    27e8:	1e dc       	rcall	.-1988   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
	}
	
}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN3rtc9alarm_offEh>:


void rtc::alarm_off( uint8_t valAlarm01 ){
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <_ZN3rtc9alarm_offEh+0x6>
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <_ZN3rtc9alarm_offEh+0x8>
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9b 83       	std	Y+3, r25	; 0x03
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    280a:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	82 30       	cpi	r24, 0x02	; 2
    2810:	b1 f4       	brne	.+44     	; 0x283e <_ZN3rtc9alarm_offEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	ae 01       	movw	r20, r28
    281c:	4f 5f       	subi	r20, 0xFF	; 255
    281e:	5f 4f       	sbci	r21, 0xFF	; 255
    2820:	6f e0       	ldi	r22, 0x0F	; 15
    2822:	bf db       	rcall	.-2178   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFC;
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	8c 7f       	andi	r24, 0xFC	; 252
    2828:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	9b 81       	ldd	r25, Y+3	; 0x03
    282e:	21 e0       	ldi	r18, 0x01	; 1
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	ae 01       	movw	r20, r28
    2834:	4f 5f       	subi	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	6f e0       	ldi	r22, 0x0F	; 15
    283a:	f5 db       	rcall	.-2070   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
    283c:	31 c0       	rjmp	.+98     	; 0x28a0 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	88 23       	and	r24, r24
    2842:	b1 f4       	brne	.+44     	; 0x2870 <_ZN3rtc9alarm_offEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	9b 81       	ldd	r25, Y+3	; 0x03
    2848:	21 e0       	ldi	r18, 0x01	; 1
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	ae 01       	movw	r20, r28
    284e:	4f 5f       	subi	r20, 0xFF	; 255
    2850:	5f 4f       	sbci	r21, 0xFF	; 255
    2852:	6f e0       	ldi	r22, 0x0F	; 15
    2854:	a6 db       	rcall	.-2228   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFE;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	8e 7f       	andi	r24, 0xFE	; 254
    285a:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	ae 01       	movw	r20, r28
    2866:	4f 5f       	subi	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	6f e0       	ldi	r22, 0x0F	; 15
    286c:	dc db       	rcall	.-2120   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
    286e:	18 c0       	rjmp	.+48     	; 0x28a0 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	a9 f4       	brne	.+42     	; 0x28a0 <_ZN3rtc9alarm_offEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	21 e0       	ldi	r18, 0x01	; 1
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	ae 01       	movw	r20, r28
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	6f e0       	ldi	r22, 0x0F	; 15
    2886:	8d db       	rcall	.-2278   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFD;
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	8d 7f       	andi	r24, 0xFD	; 253
    288c:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	9b 81       	ldd	r25, Y+3	; 0x03
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	ae 01       	movw	r20, r28
    2898:	4f 5f       	subi	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	6f e0       	ldi	r22, 0x0F	; 15
    289e:	c3 db       	rcall	.-2170   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
	}

}
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	08 95       	ret

000028ae <_ZN3rtc14clear_interuptEh>:


void rtc::clear_interupt( uint8_t valAlarm01 ){
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <_ZN3rtc14clear_interuptEh+0x6>
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <_ZN3rtc14clear_interuptEh+0x8>
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	9b 83       	std	Y+3, r25	; 0x03
    28bc:	8a 83       	std	Y+2, r24	; 0x02
    28be:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char chrNull;
	
	
	if( valAlarm01 == RTC_ALARM_0 ){
    28c0:	8c 81       	ldd	r24, Y+4	; 0x04
    28c2:	88 23       	and	r24, r24
    28c4:	51 f4       	brne	.+20     	; 0x28da <_ZN3rtc14clear_interuptEh+0x2c>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ca:	21 e0       	ldi	r18, 0x01	; 1
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	ae 01       	movw	r20, r28
    28d0:	4f 5f       	subi	r20, 0xFF	; 255
    28d2:	5f 4f       	sbci	r21, 0xFF	; 255
    28d4:	67 e0       	ldi	r22, 0x07	; 7
    28d6:	65 db       	rcall	.-2358   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
    28d8:	22 c0       	rjmp	.+68     	; 0x291e <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    28da:	8c 81       	ldd	r24, Y+4	; 0x04
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	51 f4       	brne	.+20     	; 0x28f4 <_ZN3rtc14clear_interuptEh+0x46>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	21 e0       	ldi	r18, 0x01	; 1
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	ae 01       	movw	r20, r28
    28ea:	4f 5f       	subi	r20, 0xFF	; 255
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	6b e0       	ldi	r22, 0x0B	; 11
    28f0:	58 db       	rcall	.-2384   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
    28f2:	15 c0       	rjmp	.+42     	; 0x291e <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_BOTH ){
    28f4:	8c 81       	ldd	r24, Y+4	; 0x04
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	91 f4       	brne	.+36     	; 0x291e <_ZN3rtc14clear_interuptEh+0x70>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	9b 81       	ldd	r25, Y+3	; 0x03
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	ae 01       	movw	r20, r28
    2904:	4f 5f       	subi	r20, 0xFF	; 255
    2906:	5f 4f       	sbci	r21, 0xFF	; 255
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	4b db       	rcall	.-2410   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	21 e0       	ldi	r18, 0x01	; 1
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	ae 01       	movw	r20, r28
    2916:	4f 5f       	subi	r20, 0xFF	; 255
    2918:	5f 4f       	sbci	r21, 0xFF	; 255
    291a:	6b e0       	ldi	r22, 0x0B	; 11
    291c:	42 db       	rcall	.-2428   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
	}
	
}
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <_ZN3rtc5alarmEhh9rtc_alarm>:


void rtc::alarm( uint8_t valGetSet, uint8_t valAlarm01, rtc_alarm rtaToSetOrGet ){
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	2a 97       	sbiw	r28, 0x0a	; 10
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	9c 83       	std	Y+4, r25	; 0x04
    2946:	8b 83       	std	Y+3, r24	; 0x03
    2948:	6d 83       	std	Y+5, r22	; 0x05
    294a:	4e 83       	std	Y+6, r20	; 0x06
    294c:	0f 83       	std	Y+7, r16	; 0x07
    294e:	18 87       	std	Y+8, r17	; 0x08
    2950:	29 87       	std	Y+9, r18	; 0x09
    2952:	3a 87       	std	Y+10, r19	; 0x0a
	
	unsigned char valAlarmAddress { 0x00 };
    2954:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uchTempControl { 0x00 };
    2956:	1a 82       	std	Y+2, r1	; 0x02


	if( !valAlarm01 ){
    2958:	8e 81       	ldd	r24, Y+6	; 0x06
    295a:	88 23       	and	r24, r24
    295c:	19 f4       	brne	.+6      	; 0x2964 <_ZN3rtc5alarmEhh9rtc_alarm+0x38>
			valAlarmAddress = RTC_ADDR_A0S;
    295e:	87 e0       	ldi	r24, 0x07	; 7
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	05 c0       	rjmp	.+10     	; 0x296e <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
	}else if( valAlarm01 ){
    2964:	8e 81       	ldd	r24, Y+6	; 0x06
    2966:	88 23       	and	r24, r24
    2968:	11 f0       	breq	.+4      	; 0x296e <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
		valAlarmAddress = RTC_ADDR_A1S;
    296a:	8b e0       	ldi	r24, 0x0B	; 11
    296c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( !valGetSet ){
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	88 23       	and	r24, r24
    2972:	51 f4       	brne	.+20     	; 0x2988 <_ZN3rtc5alarmEhh9rtc_alarm+0x5c>
		read_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    2974:	ae 01       	movw	r20, r28
    2976:	49 5f       	subi	r20, 0xF9	; 249
    2978:	5f 4f       	sbci	r21, 0xFF	; 255
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	24 e0       	ldi	r18, 0x04	; 4
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	69 81       	ldd	r22, Y+1	; 0x01
    2984:	0e db       	rcall	.-2532   	; 0x1fa2 <_ZN3rtc10read_blockEhPhj>
    2986:	14 c0       	rjmp	.+40     	; 0x29b0 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
	}else if( valGetSet ){
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	88 23       	and	r24, r24
    298c:	89 f0       	breq	.+34     	; 0x29b0 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
		alarm_off( valAlarm01 );
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	6e 81       	ldd	r22, Y+6	; 0x06
    2994:	31 df       	rcall	.-414    	; 0x27f8 <_ZN3rtc9alarm_offEh>
		write_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    2996:	ae 01       	movw	r20, r28
    2998:	49 5f       	subi	r20, 0xF9	; 249
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	24 e0       	ldi	r18, 0x04	; 4
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	69 81       	ldd	r22, Y+1	; 0x01
    29a6:	3f db       	rcall	.-2434   	; 0x2026 <_ZN3rtc11write_blockEhPhj>
		alarm_on( valAlarm01 );
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	6e 81       	ldd	r22, Y+6	; 0x06
    29ae:	c9 de       	rcall	.-622    	; 0x2742 <_ZN3rtc8alarm_onEh>
	}
}
    29b0:	2a 96       	adiw	r28, 0x0a	; 10
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

000029c6 <__cmpsf2>:
    29c6:	d4 d0       	rcall	.+424    	; 0x2b70 <__fp_cmp>
    29c8:	08 f4       	brcc	.+2      	; 0x29cc <__cmpsf2+0x6>
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	08 95       	ret

000029ce <__divsf3>:
    29ce:	0c d0       	rcall	.+24     	; 0x29e8 <__divsf3x>
    29d0:	0a c1       	rjmp	.+532    	; 0x2be6 <__fp_round>
    29d2:	02 d1       	rcall	.+516    	; 0x2bd8 <__fp_pscB>
    29d4:	40 f0       	brcs	.+16     	; 0x29e6 <__divsf3+0x18>
    29d6:	f9 d0       	rcall	.+498    	; 0x2bca <__fp_pscA>
    29d8:	30 f0       	brcs	.+12     	; 0x29e6 <__divsf3+0x18>
    29da:	21 f4       	brne	.+8      	; 0x29e4 <__divsf3+0x16>
    29dc:	5f 3f       	cpi	r21, 0xFF	; 255
    29de:	19 f0       	breq	.+6      	; 0x29e6 <__divsf3+0x18>
    29e0:	eb c0       	rjmp	.+470    	; 0x2bb8 <__fp_inf>
    29e2:	51 11       	cpse	r21, r1
    29e4:	34 c1       	rjmp	.+616    	; 0x2c4e <__fp_szero>
    29e6:	ee c0       	rjmp	.+476    	; 0x2bc4 <__fp_nan>

000029e8 <__divsf3x>:
    29e8:	0f d1       	rcall	.+542    	; 0x2c08 <__fp_split3>
    29ea:	98 f3       	brcs	.-26     	; 0x29d2 <__divsf3+0x4>

000029ec <__divsf3_pse>:
    29ec:	99 23       	and	r25, r25
    29ee:	c9 f3       	breq	.-14     	; 0x29e2 <__divsf3+0x14>
    29f0:	55 23       	and	r21, r21
    29f2:	b1 f3       	breq	.-20     	; 0x29e0 <__divsf3+0x12>
    29f4:	95 1b       	sub	r25, r21
    29f6:	55 0b       	sbc	r21, r21
    29f8:	bb 27       	eor	r27, r27
    29fa:	aa 27       	eor	r26, r26
    29fc:	62 17       	cp	r22, r18
    29fe:	73 07       	cpc	r23, r19
    2a00:	84 07       	cpc	r24, r20
    2a02:	38 f0       	brcs	.+14     	; 0x2a12 <__divsf3_pse+0x26>
    2a04:	9f 5f       	subi	r25, 0xFF	; 255
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	22 0f       	add	r18, r18
    2a0a:	33 1f       	adc	r19, r19
    2a0c:	44 1f       	adc	r20, r20
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	a9 f3       	breq	.-22     	; 0x29fc <__divsf3_pse+0x10>
    2a12:	33 d0       	rcall	.+102    	; 0x2a7a <__divsf3_pse+0x8e>
    2a14:	0e 2e       	mov	r0, r30
    2a16:	3a f0       	brmi	.+14     	; 0x2a26 <__divsf3_pse+0x3a>
    2a18:	e0 e8       	ldi	r30, 0x80	; 128
    2a1a:	30 d0       	rcall	.+96     	; 0x2a7c <__divsf3_pse+0x90>
    2a1c:	91 50       	subi	r25, 0x01	; 1
    2a1e:	50 40       	sbci	r21, 0x00	; 0
    2a20:	e6 95       	lsr	r30
    2a22:	00 1c       	adc	r0, r0
    2a24:	ca f7       	brpl	.-14     	; 0x2a18 <__divsf3_pse+0x2c>
    2a26:	29 d0       	rcall	.+82     	; 0x2a7a <__divsf3_pse+0x8e>
    2a28:	fe 2f       	mov	r31, r30
    2a2a:	27 d0       	rcall	.+78     	; 0x2a7a <__divsf3_pse+0x8e>
    2a2c:	66 0f       	add	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	88 1f       	adc	r24, r24
    2a32:	bb 1f       	adc	r27, r27
    2a34:	26 17       	cp	r18, r22
    2a36:	37 07       	cpc	r19, r23
    2a38:	48 07       	cpc	r20, r24
    2a3a:	ab 07       	cpc	r26, r27
    2a3c:	b0 e8       	ldi	r27, 0x80	; 128
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <__divsf3_pse+0x56>
    2a40:	bb 0b       	sbc	r27, r27
    2a42:	80 2d       	mov	r24, r0
    2a44:	bf 01       	movw	r22, r30
    2a46:	ff 27       	eor	r31, r31
    2a48:	93 58       	subi	r25, 0x83	; 131
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	2a f0       	brmi	.+10     	; 0x2a58 <__divsf3_pse+0x6c>
    2a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a50:	51 05       	cpc	r21, r1
    2a52:	68 f0       	brcs	.+26     	; 0x2a6e <__divsf3_pse+0x82>
    2a54:	b1 c0       	rjmp	.+354    	; 0x2bb8 <__fp_inf>
    2a56:	fb c0       	rjmp	.+502    	; 0x2c4e <__fp_szero>
    2a58:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5a:	ec f3       	brlt	.-6      	; 0x2a56 <__divsf3_pse+0x6a>
    2a5c:	98 3e       	cpi	r25, 0xE8	; 232
    2a5e:	dc f3       	brlt	.-10     	; 0x2a56 <__divsf3_pse+0x6a>
    2a60:	86 95       	lsr	r24
    2a62:	77 95       	ror	r23
    2a64:	67 95       	ror	r22
    2a66:	b7 95       	ror	r27
    2a68:	f7 95       	ror	r31
    2a6a:	9f 5f       	subi	r25, 0xFF	; 255
    2a6c:	c9 f7       	brne	.-14     	; 0x2a60 <__divsf3_pse+0x74>
    2a6e:	88 0f       	add	r24, r24
    2a70:	91 1d       	adc	r25, r1
    2a72:	96 95       	lsr	r25
    2a74:	87 95       	ror	r24
    2a76:	97 f9       	bld	r25, 7
    2a78:	08 95       	ret
    2a7a:	e1 e0       	ldi	r30, 0x01	; 1
    2a7c:	66 0f       	add	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	88 1f       	adc	r24, r24
    2a82:	bb 1f       	adc	r27, r27
    2a84:	62 17       	cp	r22, r18
    2a86:	73 07       	cpc	r23, r19
    2a88:	84 07       	cpc	r24, r20
    2a8a:	ba 07       	cpc	r27, r26
    2a8c:	20 f0       	brcs	.+8      	; 0x2a96 <__divsf3_pse+0xaa>
    2a8e:	62 1b       	sub	r22, r18
    2a90:	73 0b       	sbc	r23, r19
    2a92:	84 0b       	sbc	r24, r20
    2a94:	ba 0b       	sbc	r27, r26
    2a96:	ee 1f       	adc	r30, r30
    2a98:	88 f7       	brcc	.-30     	; 0x2a7c <__divsf3_pse+0x90>
    2a9a:	e0 95       	com	r30
    2a9c:	08 95       	ret

00002a9e <__fixunssfsi>:
    2a9e:	bc d0       	rcall	.+376    	; 0x2c18 <__fp_splitA>
    2aa0:	88 f0       	brcs	.+34     	; 0x2ac4 <__fixunssfsi+0x26>
    2aa2:	9f 57       	subi	r25, 0x7F	; 127
    2aa4:	90 f0       	brcs	.+36     	; 0x2aca <__fixunssfsi+0x2c>
    2aa6:	b9 2f       	mov	r27, r25
    2aa8:	99 27       	eor	r25, r25
    2aaa:	b7 51       	subi	r27, 0x17	; 23
    2aac:	a0 f0       	brcs	.+40     	; 0x2ad6 <__fixunssfsi+0x38>
    2aae:	d1 f0       	breq	.+52     	; 0x2ae4 <__fixunssfsi+0x46>
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	1a f0       	brmi	.+6      	; 0x2ac0 <__fixunssfsi+0x22>
    2aba:	ba 95       	dec	r27
    2abc:	c9 f7       	brne	.-14     	; 0x2ab0 <__fixunssfsi+0x12>
    2abe:	12 c0       	rjmp	.+36     	; 0x2ae4 <__fixunssfsi+0x46>
    2ac0:	b1 30       	cpi	r27, 0x01	; 1
    2ac2:	81 f0       	breq	.+32     	; 0x2ae4 <__fixunssfsi+0x46>
    2ac4:	c3 d0       	rcall	.+390    	; 0x2c4c <__fp_zero>
    2ac6:	b1 e0       	ldi	r27, 0x01	; 1
    2ac8:	08 95       	ret
    2aca:	c0 c0       	rjmp	.+384    	; 0x2c4c <__fp_zero>
    2acc:	67 2f       	mov	r22, r23
    2ace:	78 2f       	mov	r23, r24
    2ad0:	88 27       	eor	r24, r24
    2ad2:	b8 5f       	subi	r27, 0xF8	; 248
    2ad4:	39 f0       	breq	.+14     	; 0x2ae4 <__fixunssfsi+0x46>
    2ad6:	b9 3f       	cpi	r27, 0xF9	; 249
    2ad8:	cc f3       	brlt	.-14     	; 0x2acc <__fixunssfsi+0x2e>
    2ada:	86 95       	lsr	r24
    2adc:	77 95       	ror	r23
    2ade:	67 95       	ror	r22
    2ae0:	b3 95       	inc	r27
    2ae2:	d9 f7       	brne	.-10     	; 0x2ada <__fixunssfsi+0x3c>
    2ae4:	3e f4       	brtc	.+14     	; 0x2af4 <__fixunssfsi+0x56>
    2ae6:	90 95       	com	r25
    2ae8:	80 95       	com	r24
    2aea:	70 95       	com	r23
    2aec:	61 95       	neg	r22
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255
    2af0:	8f 4f       	sbci	r24, 0xFF	; 255
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	08 95       	ret

00002af6 <__floatunsisf>:
    2af6:	e8 94       	clt
    2af8:	09 c0       	rjmp	.+18     	; 0x2b0c <__floatsisf+0x12>

00002afa <__floatsisf>:
    2afa:	97 fb       	bst	r25, 7
    2afc:	3e f4       	brtc	.+14     	; 0x2b0c <__floatsisf+0x12>
    2afe:	90 95       	com	r25
    2b00:	80 95       	com	r24
    2b02:	70 95       	com	r23
    2b04:	61 95       	neg	r22
    2b06:	7f 4f       	sbci	r23, 0xFF	; 255
    2b08:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	99 23       	and	r25, r25
    2b0e:	a9 f0       	breq	.+42     	; 0x2b3a <__floatsisf+0x40>
    2b10:	f9 2f       	mov	r31, r25
    2b12:	96 e9       	ldi	r25, 0x96	; 150
    2b14:	bb 27       	eor	r27, r27
    2b16:	93 95       	inc	r25
    2b18:	f6 95       	lsr	r31
    2b1a:	87 95       	ror	r24
    2b1c:	77 95       	ror	r23
    2b1e:	67 95       	ror	r22
    2b20:	b7 95       	ror	r27
    2b22:	f1 11       	cpse	r31, r1
    2b24:	f8 cf       	rjmp	.-16     	; 0x2b16 <__floatsisf+0x1c>
    2b26:	fa f4       	brpl	.+62     	; 0x2b66 <__floatsisf+0x6c>
    2b28:	bb 0f       	add	r27, r27
    2b2a:	11 f4       	brne	.+4      	; 0x2b30 <__floatsisf+0x36>
    2b2c:	60 ff       	sbrs	r22, 0
    2b2e:	1b c0       	rjmp	.+54     	; 0x2b66 <__floatsisf+0x6c>
    2b30:	6f 5f       	subi	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	16 c0       	rjmp	.+44     	; 0x2b66 <__floatsisf+0x6c>
    2b3a:	88 23       	and	r24, r24
    2b3c:	11 f0       	breq	.+4      	; 0x2b42 <__floatsisf+0x48>
    2b3e:	96 e9       	ldi	r25, 0x96	; 150
    2b40:	11 c0       	rjmp	.+34     	; 0x2b64 <__floatsisf+0x6a>
    2b42:	77 23       	and	r23, r23
    2b44:	21 f0       	breq	.+8      	; 0x2b4e <__floatsisf+0x54>
    2b46:	9e e8       	ldi	r25, 0x8E	; 142
    2b48:	87 2f       	mov	r24, r23
    2b4a:	76 2f       	mov	r23, r22
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <__floatsisf+0x5e>
    2b4e:	66 23       	and	r22, r22
    2b50:	71 f0       	breq	.+28     	; 0x2b6e <__floatsisf+0x74>
    2b52:	96 e8       	ldi	r25, 0x86	; 134
    2b54:	86 2f       	mov	r24, r22
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	2a f0       	brmi	.+10     	; 0x2b66 <__floatsisf+0x6c>
    2b5c:	9a 95       	dec	r25
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	88 1f       	adc	r24, r24
    2b64:	da f7       	brpl	.-10     	; 0x2b5c <__floatsisf+0x62>
    2b66:	88 0f       	add	r24, r24
    2b68:	96 95       	lsr	r25
    2b6a:	87 95       	ror	r24
    2b6c:	97 f9       	bld	r25, 7
    2b6e:	08 95       	ret

00002b70 <__fp_cmp>:
    2b70:	99 0f       	add	r25, r25
    2b72:	00 08       	sbc	r0, r0
    2b74:	55 0f       	add	r21, r21
    2b76:	aa 0b       	sbc	r26, r26
    2b78:	e0 e8       	ldi	r30, 0x80	; 128
    2b7a:	fe ef       	ldi	r31, 0xFE	; 254
    2b7c:	16 16       	cp	r1, r22
    2b7e:	17 06       	cpc	r1, r23
    2b80:	e8 07       	cpc	r30, r24
    2b82:	f9 07       	cpc	r31, r25
    2b84:	c0 f0       	brcs	.+48     	; 0x2bb6 <__fp_cmp+0x46>
    2b86:	12 16       	cp	r1, r18
    2b88:	13 06       	cpc	r1, r19
    2b8a:	e4 07       	cpc	r30, r20
    2b8c:	f5 07       	cpc	r31, r21
    2b8e:	98 f0       	brcs	.+38     	; 0x2bb6 <__fp_cmp+0x46>
    2b90:	62 1b       	sub	r22, r18
    2b92:	73 0b       	sbc	r23, r19
    2b94:	84 0b       	sbc	r24, r20
    2b96:	95 0b       	sbc	r25, r21
    2b98:	39 f4       	brne	.+14     	; 0x2ba8 <__fp_cmp+0x38>
    2b9a:	0a 26       	eor	r0, r26
    2b9c:	61 f0       	breq	.+24     	; 0x2bb6 <__fp_cmp+0x46>
    2b9e:	23 2b       	or	r18, r19
    2ba0:	24 2b       	or	r18, r20
    2ba2:	25 2b       	or	r18, r21
    2ba4:	21 f4       	brne	.+8      	; 0x2bae <__fp_cmp+0x3e>
    2ba6:	08 95       	ret
    2ba8:	0a 26       	eor	r0, r26
    2baa:	09 f4       	brne	.+2      	; 0x2bae <__fp_cmp+0x3e>
    2bac:	a1 40       	sbci	r26, 0x01	; 1
    2bae:	a6 95       	lsr	r26
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	81 1d       	adc	r24, r1
    2bb4:	81 1d       	adc	r24, r1
    2bb6:	08 95       	ret

00002bb8 <__fp_inf>:
    2bb8:	97 f9       	bld	r25, 7
    2bba:	9f 67       	ori	r25, 0x7F	; 127
    2bbc:	80 e8       	ldi	r24, 0x80	; 128
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	08 95       	ret

00002bc4 <__fp_nan>:
    2bc4:	9f ef       	ldi	r25, 0xFF	; 255
    2bc6:	80 ec       	ldi	r24, 0xC0	; 192
    2bc8:	08 95       	ret

00002bca <__fp_pscA>:
    2bca:	00 24       	eor	r0, r0
    2bcc:	0a 94       	dec	r0
    2bce:	16 16       	cp	r1, r22
    2bd0:	17 06       	cpc	r1, r23
    2bd2:	18 06       	cpc	r1, r24
    2bd4:	09 06       	cpc	r0, r25
    2bd6:	08 95       	ret

00002bd8 <__fp_pscB>:
    2bd8:	00 24       	eor	r0, r0
    2bda:	0a 94       	dec	r0
    2bdc:	12 16       	cp	r1, r18
    2bde:	13 06       	cpc	r1, r19
    2be0:	14 06       	cpc	r1, r20
    2be2:	05 06       	cpc	r0, r21
    2be4:	08 95       	ret

00002be6 <__fp_round>:
    2be6:	09 2e       	mov	r0, r25
    2be8:	03 94       	inc	r0
    2bea:	00 0c       	add	r0, r0
    2bec:	11 f4       	brne	.+4      	; 0x2bf2 <__fp_round+0xc>
    2bee:	88 23       	and	r24, r24
    2bf0:	52 f0       	brmi	.+20     	; 0x2c06 <__fp_round+0x20>
    2bf2:	bb 0f       	add	r27, r27
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__fp_round+0x20>
    2bf6:	bf 2b       	or	r27, r31
    2bf8:	11 f4       	brne	.+4      	; 0x2bfe <__fp_round+0x18>
    2bfa:	60 ff       	sbrs	r22, 0
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <__fp_round+0x20>
    2bfe:	6f 5f       	subi	r22, 0xFF	; 255
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
    2c02:	8f 4f       	sbci	r24, 0xFF	; 255
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	08 95       	ret

00002c08 <__fp_split3>:
    2c08:	57 fd       	sbrc	r21, 7
    2c0a:	90 58       	subi	r25, 0x80	; 128
    2c0c:	44 0f       	add	r20, r20
    2c0e:	55 1f       	adc	r21, r21
    2c10:	59 f0       	breq	.+22     	; 0x2c28 <__fp_splitA+0x10>
    2c12:	5f 3f       	cpi	r21, 0xFF	; 255
    2c14:	71 f0       	breq	.+28     	; 0x2c32 <__fp_splitA+0x1a>
    2c16:	47 95       	ror	r20

00002c18 <__fp_splitA>:
    2c18:	88 0f       	add	r24, r24
    2c1a:	97 fb       	bst	r25, 7
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	61 f0       	breq	.+24     	; 0x2c38 <__fp_splitA+0x20>
    2c20:	9f 3f       	cpi	r25, 0xFF	; 255
    2c22:	79 f0       	breq	.+30     	; 0x2c42 <__fp_splitA+0x2a>
    2c24:	87 95       	ror	r24
    2c26:	08 95       	ret
    2c28:	12 16       	cp	r1, r18
    2c2a:	13 06       	cpc	r1, r19
    2c2c:	14 06       	cpc	r1, r20
    2c2e:	55 1f       	adc	r21, r21
    2c30:	f2 cf       	rjmp	.-28     	; 0x2c16 <__fp_split3+0xe>
    2c32:	46 95       	lsr	r20
    2c34:	f1 df       	rcall	.-30     	; 0x2c18 <__fp_splitA>
    2c36:	08 c0       	rjmp	.+16     	; 0x2c48 <__fp_splitA+0x30>
    2c38:	16 16       	cp	r1, r22
    2c3a:	17 06       	cpc	r1, r23
    2c3c:	18 06       	cpc	r1, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	f1 cf       	rjmp	.-30     	; 0x2c24 <__fp_splitA+0xc>
    2c42:	86 95       	lsr	r24
    2c44:	71 05       	cpc	r23, r1
    2c46:	61 05       	cpc	r22, r1
    2c48:	08 94       	sec
    2c4a:	08 95       	ret

00002c4c <__fp_zero>:
    2c4c:	e8 94       	clt

00002c4e <__fp_szero>:
    2c4e:	bb 27       	eor	r27, r27
    2c50:	66 27       	eor	r22, r22
    2c52:	77 27       	eor	r23, r23
    2c54:	cb 01       	movw	r24, r22
    2c56:	97 f9       	bld	r25, 7
    2c58:	08 95       	ret

00002c5a <__gesf2>:
    2c5a:	8a df       	rcall	.-236    	; 0x2b70 <__fp_cmp>
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <__gesf2+0x6>
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	08 95       	ret

00002c62 <__mulsf3>:
    2c62:	0b d0       	rcall	.+22     	; 0x2c7a <__mulsf3x>
    2c64:	c0 cf       	rjmp	.-128    	; 0x2be6 <__fp_round>
    2c66:	b1 df       	rcall	.-158    	; 0x2bca <__fp_pscA>
    2c68:	28 f0       	brcs	.+10     	; 0x2c74 <__mulsf3+0x12>
    2c6a:	b6 df       	rcall	.-148    	; 0x2bd8 <__fp_pscB>
    2c6c:	18 f0       	brcs	.+6      	; 0x2c74 <__mulsf3+0x12>
    2c6e:	95 23       	and	r25, r21
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <__mulsf3+0x12>
    2c72:	a2 cf       	rjmp	.-188    	; 0x2bb8 <__fp_inf>
    2c74:	a7 cf       	rjmp	.-178    	; 0x2bc4 <__fp_nan>
    2c76:	11 24       	eor	r1, r1
    2c78:	ea cf       	rjmp	.-44     	; 0x2c4e <__fp_szero>

00002c7a <__mulsf3x>:
    2c7a:	c6 df       	rcall	.-116    	; 0x2c08 <__fp_split3>
    2c7c:	a0 f3       	brcs	.-24     	; 0x2c66 <__mulsf3+0x4>

00002c7e <__mulsf3_pse>:
    2c7e:	95 9f       	mul	r25, r21
    2c80:	d1 f3       	breq	.-12     	; 0x2c76 <__mulsf3+0x14>
    2c82:	95 0f       	add	r25, r21
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	55 1f       	adc	r21, r21
    2c88:	62 9f       	mul	r22, r18
    2c8a:	f0 01       	movw	r30, r0
    2c8c:	72 9f       	mul	r23, r18
    2c8e:	bb 27       	eor	r27, r27
    2c90:	f0 0d       	add	r31, r0
    2c92:	b1 1d       	adc	r27, r1
    2c94:	63 9f       	mul	r22, r19
    2c96:	aa 27       	eor	r26, r26
    2c98:	f0 0d       	add	r31, r0
    2c9a:	b1 1d       	adc	r27, r1
    2c9c:	aa 1f       	adc	r26, r26
    2c9e:	64 9f       	mul	r22, r20
    2ca0:	66 27       	eor	r22, r22
    2ca2:	b0 0d       	add	r27, r0
    2ca4:	a1 1d       	adc	r26, r1
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	82 9f       	mul	r24, r18
    2caa:	22 27       	eor	r18, r18
    2cac:	b0 0d       	add	r27, r0
    2cae:	a1 1d       	adc	r26, r1
    2cb0:	62 1f       	adc	r22, r18
    2cb2:	73 9f       	mul	r23, r19
    2cb4:	b0 0d       	add	r27, r0
    2cb6:	a1 1d       	adc	r26, r1
    2cb8:	62 1f       	adc	r22, r18
    2cba:	83 9f       	mul	r24, r19
    2cbc:	a0 0d       	add	r26, r0
    2cbe:	61 1d       	adc	r22, r1
    2cc0:	22 1f       	adc	r18, r18
    2cc2:	74 9f       	mul	r23, r20
    2cc4:	33 27       	eor	r19, r19
    2cc6:	a0 0d       	add	r26, r0
    2cc8:	61 1d       	adc	r22, r1
    2cca:	23 1f       	adc	r18, r19
    2ccc:	84 9f       	mul	r24, r20
    2cce:	60 0d       	add	r22, r0
    2cd0:	21 1d       	adc	r18, r1
    2cd2:	82 2f       	mov	r24, r18
    2cd4:	76 2f       	mov	r23, r22
    2cd6:	6a 2f       	mov	r22, r26
    2cd8:	11 24       	eor	r1, r1
    2cda:	9f 57       	subi	r25, 0x7F	; 127
    2cdc:	50 40       	sbci	r21, 0x00	; 0
    2cde:	8a f0       	brmi	.+34     	; 0x2d02 <__mulsf3_pse+0x84>
    2ce0:	e1 f0       	breq	.+56     	; 0x2d1a <__mulsf3_pse+0x9c>
    2ce2:	88 23       	and	r24, r24
    2ce4:	4a f0       	brmi	.+18     	; 0x2cf8 <__mulsf3_pse+0x7a>
    2ce6:	ee 0f       	add	r30, r30
    2ce8:	ff 1f       	adc	r31, r31
    2cea:	bb 1f       	adc	r27, r27
    2cec:	66 1f       	adc	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	91 50       	subi	r25, 0x01	; 1
    2cf4:	50 40       	sbci	r21, 0x00	; 0
    2cf6:	a9 f7       	brne	.-22     	; 0x2ce2 <__mulsf3_pse+0x64>
    2cf8:	9e 3f       	cpi	r25, 0xFE	; 254
    2cfa:	51 05       	cpc	r21, r1
    2cfc:	70 f0       	brcs	.+28     	; 0x2d1a <__mulsf3_pse+0x9c>
    2cfe:	5c cf       	rjmp	.-328    	; 0x2bb8 <__fp_inf>
    2d00:	a6 cf       	rjmp	.-180    	; 0x2c4e <__fp_szero>
    2d02:	5f 3f       	cpi	r21, 0xFF	; 255
    2d04:	ec f3       	brlt	.-6      	; 0x2d00 <__mulsf3_pse+0x82>
    2d06:	98 3e       	cpi	r25, 0xE8	; 232
    2d08:	dc f3       	brlt	.-10     	; 0x2d00 <__mulsf3_pse+0x82>
    2d0a:	86 95       	lsr	r24
    2d0c:	77 95       	ror	r23
    2d0e:	67 95       	ror	r22
    2d10:	b7 95       	ror	r27
    2d12:	f7 95       	ror	r31
    2d14:	e7 95       	ror	r30
    2d16:	9f 5f       	subi	r25, 0xFF	; 255
    2d18:	c1 f7       	brne	.-16     	; 0x2d0a <__mulsf3_pse+0x8c>
    2d1a:	fe 2b       	or	r31, r30
    2d1c:	88 0f       	add	r24, r24
    2d1e:	91 1d       	adc	r25, r1
    2d20:	96 95       	lsr	r25
    2d22:	87 95       	ror	r24
    2d24:	97 f9       	bld	r25, 7
    2d26:	08 95       	ret

00002d28 <vfprintf>:
    2d28:	2f 92       	push	r2
    2d2a:	3f 92       	push	r3
    2d2c:	4f 92       	push	r4
    2d2e:	5f 92       	push	r5
    2d30:	6f 92       	push	r6
    2d32:	7f 92       	push	r7
    2d34:	8f 92       	push	r8
    2d36:	9f 92       	push	r9
    2d38:	af 92       	push	r10
    2d3a:	bf 92       	push	r11
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	63 97       	sbiw	r28, 0x13	; 19
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	6c 01       	movw	r12, r24
    2d5e:	4b 01       	movw	r8, r22
    2d60:	2a 01       	movw	r4, r20
    2d62:	fc 01       	movw	r30, r24
    2d64:	17 82       	std	Z+7, r1	; 0x07
    2d66:	16 82       	std	Z+6, r1	; 0x06
    2d68:	83 81       	ldd	r24, Z+3	; 0x03
    2d6a:	81 ff       	sbrs	r24, 1
    2d6c:	29 c3       	rjmp	.+1618   	; 0x33c0 <vfprintf+0x698>
    2d6e:	ae 01       	movw	r20, r28
    2d70:	4f 5f       	subi	r20, 0xFF	; 255
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	3a 01       	movw	r6, r20
    2d76:	f6 01       	movw	r30, r12
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	f4 01       	movw	r30, r8
    2d7c:	93 fd       	sbrc	r25, 3
    2d7e:	85 91       	lpm	r24, Z+
    2d80:	93 ff       	sbrs	r25, 3
    2d82:	81 91       	ld	r24, Z+
    2d84:	4f 01       	movw	r8, r30
    2d86:	88 23       	and	r24, r24
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <vfprintf+0x64>
    2d8a:	16 c3       	rjmp	.+1580   	; 0x33b8 <vfprintf+0x690>
    2d8c:	85 32       	cpi	r24, 0x25	; 37
    2d8e:	39 f4       	brne	.+14     	; 0x2d9e <vfprintf+0x76>
    2d90:	93 fd       	sbrc	r25, 3
    2d92:	85 91       	lpm	r24, Z+
    2d94:	93 ff       	sbrs	r25, 3
    2d96:	81 91       	ld	r24, Z+
    2d98:	4f 01       	movw	r8, r30
    2d9a:	85 32       	cpi	r24, 0x25	; 37
    2d9c:	31 f4       	brne	.+12     	; 0x2daa <vfprintf+0x82>
    2d9e:	b6 01       	movw	r22, r12
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	ac d4       	rcall	.+2392   	; 0x36fc <fputc>
    2da4:	52 01       	movw	r10, r4
    2da6:	25 01       	movw	r4, r10
    2da8:	e6 cf       	rjmp	.-52     	; 0x2d76 <vfprintf+0x4e>
    2daa:	10 e0       	ldi	r17, 0x00	; 0
    2dac:	f1 2c       	mov	r15, r1
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	20 32       	cpi	r18, 0x20	; 32
    2db2:	a0 f4       	brcc	.+40     	; 0x2ddc <vfprintf+0xb4>
    2db4:	8b 32       	cpi	r24, 0x2B	; 43
    2db6:	69 f0       	breq	.+26     	; 0x2dd2 <vfprintf+0xaa>
    2db8:	30 f4       	brcc	.+12     	; 0x2dc6 <vfprintf+0x9e>
    2dba:	80 32       	cpi	r24, 0x20	; 32
    2dbc:	59 f0       	breq	.+22     	; 0x2dd4 <vfprintf+0xac>
    2dbe:	83 32       	cpi	r24, 0x23	; 35
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <vfprintf+0xb4>
    2dc2:	20 61       	ori	r18, 0x10	; 16
    2dc4:	2c c0       	rjmp	.+88     	; 0x2e1e <vfprintf+0xf6>
    2dc6:	8d 32       	cpi	r24, 0x2D	; 45
    2dc8:	39 f0       	breq	.+14     	; 0x2dd8 <vfprintf+0xb0>
    2dca:	80 33       	cpi	r24, 0x30	; 48
    2dcc:	39 f4       	brne	.+14     	; 0x2ddc <vfprintf+0xb4>
    2dce:	21 60       	ori	r18, 0x01	; 1
    2dd0:	26 c0       	rjmp	.+76     	; 0x2e1e <vfprintf+0xf6>
    2dd2:	22 60       	ori	r18, 0x02	; 2
    2dd4:	24 60       	ori	r18, 0x04	; 4
    2dd6:	23 c0       	rjmp	.+70     	; 0x2e1e <vfprintf+0xf6>
    2dd8:	28 60       	ori	r18, 0x08	; 8
    2dda:	21 c0       	rjmp	.+66     	; 0x2e1e <vfprintf+0xf6>
    2ddc:	27 fd       	sbrc	r18, 7
    2dde:	27 c0       	rjmp	.+78     	; 0x2e2e <vfprintf+0x106>
    2de0:	30 ed       	ldi	r19, 0xD0	; 208
    2de2:	38 0f       	add	r19, r24
    2de4:	3a 30       	cpi	r19, 0x0A	; 10
    2de6:	78 f4       	brcc	.+30     	; 0x2e06 <vfprintf+0xde>
    2de8:	26 ff       	sbrs	r18, 6
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <vfprintf+0xd0>
    2dec:	fa e0       	ldi	r31, 0x0A	; 10
    2dee:	1f 9f       	mul	r17, r31
    2df0:	30 0d       	add	r19, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	13 2f       	mov	r17, r19
    2df6:	13 c0       	rjmp	.+38     	; 0x2e1e <vfprintf+0xf6>
    2df8:	4a e0       	ldi	r20, 0x0A	; 10
    2dfa:	f4 9e       	mul	r15, r20
    2dfc:	30 0d       	add	r19, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	f3 2e       	mov	r15, r19
    2e02:	20 62       	ori	r18, 0x20	; 32
    2e04:	0c c0       	rjmp	.+24     	; 0x2e1e <vfprintf+0xf6>
    2e06:	8e 32       	cpi	r24, 0x2E	; 46
    2e08:	21 f4       	brne	.+8      	; 0x2e12 <vfprintf+0xea>
    2e0a:	26 fd       	sbrc	r18, 6
    2e0c:	d5 c2       	rjmp	.+1450   	; 0x33b8 <vfprintf+0x690>
    2e0e:	20 64       	ori	r18, 0x40	; 64
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <vfprintf+0xf6>
    2e12:	8c 36       	cpi	r24, 0x6C	; 108
    2e14:	11 f4       	brne	.+4      	; 0x2e1a <vfprintf+0xf2>
    2e16:	20 68       	ori	r18, 0x80	; 128
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <vfprintf+0xf6>
    2e1a:	88 36       	cpi	r24, 0x68	; 104
    2e1c:	41 f4       	brne	.+16     	; 0x2e2e <vfprintf+0x106>
    2e1e:	f4 01       	movw	r30, r8
    2e20:	93 fd       	sbrc	r25, 3
    2e22:	85 91       	lpm	r24, Z+
    2e24:	93 ff       	sbrs	r25, 3
    2e26:	81 91       	ld	r24, Z+
    2e28:	4f 01       	movw	r8, r30
    2e2a:	81 11       	cpse	r24, r1
    2e2c:	c1 cf       	rjmp	.-126    	; 0x2db0 <vfprintf+0x88>
    2e2e:	9b eb       	ldi	r25, 0xBB	; 187
    2e30:	98 0f       	add	r25, r24
    2e32:	93 30       	cpi	r25, 0x03	; 3
    2e34:	18 f4       	brcc	.+6      	; 0x2e3c <vfprintf+0x114>
    2e36:	20 61       	ori	r18, 0x10	; 16
    2e38:	80 5e       	subi	r24, 0xE0	; 224
    2e3a:	06 c0       	rjmp	.+12     	; 0x2e48 <vfprintf+0x120>
    2e3c:	9b e9       	ldi	r25, 0x9B	; 155
    2e3e:	98 0f       	add	r25, r24
    2e40:	93 30       	cpi	r25, 0x03	; 3
    2e42:	08 f0       	brcs	.+2      	; 0x2e46 <vfprintf+0x11e>
    2e44:	64 c1       	rjmp	.+712    	; 0x310e <vfprintf+0x3e6>
    2e46:	2f 7e       	andi	r18, 0xEF	; 239
    2e48:	26 ff       	sbrs	r18, 6
    2e4a:	16 e0       	ldi	r17, 0x06	; 6
    2e4c:	2f 73       	andi	r18, 0x3F	; 63
    2e4e:	32 2e       	mov	r3, r18
    2e50:	85 36       	cpi	r24, 0x65	; 101
    2e52:	19 f4       	brne	.+6      	; 0x2e5a <vfprintf+0x132>
    2e54:	20 64       	ori	r18, 0x40	; 64
    2e56:	32 2e       	mov	r3, r18
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <vfprintf+0x142>
    2e5a:	86 36       	cpi	r24, 0x66	; 102
    2e5c:	21 f4       	brne	.+8      	; 0x2e66 <vfprintf+0x13e>
    2e5e:	f2 2f       	mov	r31, r18
    2e60:	f0 68       	ori	r31, 0x80	; 128
    2e62:	3f 2e       	mov	r3, r31
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x142>
    2e66:	11 11       	cpse	r17, r1
    2e68:	11 50       	subi	r17, 0x01	; 1
    2e6a:	37 fe       	sbrs	r3, 7
    2e6c:	07 c0       	rjmp	.+14     	; 0x2e7c <vfprintf+0x154>
    2e6e:	1c 33       	cpi	r17, 0x3C	; 60
    2e70:	50 f4       	brcc	.+20     	; 0x2e86 <vfprintf+0x15e>
    2e72:	ee 24       	eor	r14, r14
    2e74:	e3 94       	inc	r14
    2e76:	e1 0e       	add	r14, r17
    2e78:	27 e0       	ldi	r18, 0x07	; 7
    2e7a:	0b c0       	rjmp	.+22     	; 0x2e92 <vfprintf+0x16a>
    2e7c:	18 30       	cpi	r17, 0x08	; 8
    2e7e:	38 f0       	brcs	.+14     	; 0x2e8e <vfprintf+0x166>
    2e80:	27 e0       	ldi	r18, 0x07	; 7
    2e82:	17 e0       	ldi	r17, 0x07	; 7
    2e84:	05 c0       	rjmp	.+10     	; 0x2e90 <vfprintf+0x168>
    2e86:	27 e0       	ldi	r18, 0x07	; 7
    2e88:	4c e3       	ldi	r20, 0x3C	; 60
    2e8a:	e4 2e       	mov	r14, r20
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <vfprintf+0x16a>
    2e8e:	21 2f       	mov	r18, r17
    2e90:	e1 2c       	mov	r14, r1
    2e92:	52 01       	movw	r10, r4
    2e94:	44 e0       	ldi	r20, 0x04	; 4
    2e96:	a4 0e       	add	r10, r20
    2e98:	b1 1c       	adc	r11, r1
    2e9a:	f2 01       	movw	r30, r4
    2e9c:	60 81       	ld	r22, Z
    2e9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ea0:	82 81       	ldd	r24, Z+2	; 0x02
    2ea2:	93 81       	ldd	r25, Z+3	; 0x03
    2ea4:	0e 2d       	mov	r16, r14
    2ea6:	a3 01       	movw	r20, r6
    2ea8:	32 d3       	rcall	.+1636   	; 0x350e <__ftoa_engine>
    2eaa:	2c 01       	movw	r4, r24
    2eac:	09 81       	ldd	r16, Y+1	; 0x01
    2eae:	00 ff       	sbrs	r16, 0
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <vfprintf+0x18e>
    2eb2:	03 ff       	sbrs	r16, 3
    2eb4:	07 c0       	rjmp	.+14     	; 0x2ec4 <vfprintf+0x19c>
    2eb6:	31 fc       	sbrc	r3, 1
    2eb8:	08 c0       	rjmp	.+16     	; 0x2eca <vfprintf+0x1a2>
    2eba:	32 fe       	sbrs	r3, 2
    2ebc:	09 c0       	rjmp	.+18     	; 0x2ed0 <vfprintf+0x1a8>
    2ebe:	30 e2       	ldi	r19, 0x20	; 32
    2ec0:	23 2e       	mov	r2, r19
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <vfprintf+0x1aa>
    2ec4:	2d e2       	ldi	r18, 0x2D	; 45
    2ec6:	22 2e       	mov	r2, r18
    2ec8:	04 c0       	rjmp	.+8      	; 0x2ed2 <vfprintf+0x1aa>
    2eca:	9b e2       	ldi	r25, 0x2B	; 43
    2ecc:	29 2e       	mov	r2, r25
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <vfprintf+0x1aa>
    2ed0:	21 2c       	mov	r2, r1
    2ed2:	80 2f       	mov	r24, r16
    2ed4:	8c 70       	andi	r24, 0x0C	; 12
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <vfprintf+0x1b6>
    2ed8:	21 10       	cpse	r2, r1
    2eda:	51 c2       	rjmp	.+1186   	; 0x337e <vfprintf+0x656>
    2edc:	8d c2       	rjmp	.+1306   	; 0x33f8 <vfprintf+0x6d0>
    2ede:	37 fe       	sbrs	r3, 7
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <vfprintf+0x1d8>
    2ee2:	e4 0c       	add	r14, r4
    2ee4:	04 ff       	sbrs	r16, 4
    2ee6:	04 c0       	rjmp	.+8      	; 0x2ef0 <vfprintf+0x1c8>
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	81 33       	cpi	r24, 0x31	; 49
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <vfprintf+0x1c8>
    2eee:	ea 94       	dec	r14
    2ef0:	1e 14       	cp	r1, r14
    2ef2:	74 f5       	brge	.+92     	; 0x2f50 <vfprintf+0x228>
    2ef4:	f8 e0       	ldi	r31, 0x08	; 8
    2ef6:	fe 15       	cp	r31, r14
    2ef8:	78 f5       	brcc	.+94     	; 0x2f58 <vfprintf+0x230>
    2efa:	88 e0       	ldi	r24, 0x08	; 8
    2efc:	e8 2e       	mov	r14, r24
    2efe:	2c c0       	rjmp	.+88     	; 0x2f58 <vfprintf+0x230>
    2f00:	36 fc       	sbrc	r3, 6
    2f02:	2a c0       	rjmp	.+84     	; 0x2f58 <vfprintf+0x230>
    2f04:	81 2f       	mov	r24, r17
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	84 15       	cp	r24, r4
    2f0a:	95 05       	cpc	r25, r5
    2f0c:	9c f0       	brlt	.+38     	; 0x2f34 <vfprintf+0x20c>
    2f0e:	2c ef       	ldi	r18, 0xFC	; 252
    2f10:	42 16       	cp	r4, r18
    2f12:	2f ef       	ldi	r18, 0xFF	; 255
    2f14:	52 06       	cpc	r5, r18
    2f16:	74 f0       	brlt	.+28     	; 0x2f34 <vfprintf+0x20c>
    2f18:	43 2d       	mov	r20, r3
    2f1a:	40 68       	ori	r20, 0x80	; 128
    2f1c:	34 2e       	mov	r3, r20
    2f1e:	0a c0       	rjmp	.+20     	; 0x2f34 <vfprintf+0x20c>
    2f20:	e2 e0       	ldi	r30, 0x02	; 2
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	ec 0f       	add	r30, r28
    2f26:	fd 1f       	adc	r31, r29
    2f28:	e1 0f       	add	r30, r17
    2f2a:	f1 1d       	adc	r31, r1
    2f2c:	80 81       	ld	r24, Z
    2f2e:	80 33       	cpi	r24, 0x30	; 48
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <vfprintf+0x210>
    2f32:	11 50       	subi	r17, 0x01	; 1
    2f34:	11 11       	cpse	r17, r1
    2f36:	f4 cf       	rjmp	.-24     	; 0x2f20 <vfprintf+0x1f8>
    2f38:	37 fe       	sbrs	r3, 7
    2f3a:	0e c0       	rjmp	.+28     	; 0x2f58 <vfprintf+0x230>
    2f3c:	ee 24       	eor	r14, r14
    2f3e:	e3 94       	inc	r14
    2f40:	e1 0e       	add	r14, r17
    2f42:	81 2f       	mov	r24, r17
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	48 16       	cp	r4, r24
    2f48:	59 06       	cpc	r5, r25
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <vfprintf+0x22e>
    2f4c:	14 19       	sub	r17, r4
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <vfprintf+0x230>
    2f50:	ee 24       	eor	r14, r14
    2f52:	e3 94       	inc	r14
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <vfprintf+0x230>
    2f56:	10 e0       	ldi	r17, 0x00	; 0
    2f58:	37 fe       	sbrs	r3, 7
    2f5a:	06 c0       	rjmp	.+12     	; 0x2f68 <vfprintf+0x240>
    2f5c:	14 14       	cp	r1, r4
    2f5e:	15 04       	cpc	r1, r5
    2f60:	34 f4       	brge	.+12     	; 0x2f6e <vfprintf+0x246>
    2f62:	c2 01       	movw	r24, r4
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <vfprintf+0x24a>
    2f68:	85 e0       	ldi	r24, 0x05	; 5
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <vfprintf+0x24a>
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	21 10       	cpse	r2, r1
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	11 23       	and	r17, r17
    2f78:	31 f0       	breq	.+12     	; 0x2f86 <vfprintf+0x25e>
    2f7a:	21 2f       	mov	r18, r17
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	2f 2d       	mov	r18, r15
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	82 17       	cp	r24, r18
    2f8c:	93 07       	cpc	r25, r19
    2f8e:	14 f4       	brge	.+4      	; 0x2f94 <vfprintf+0x26c>
    2f90:	f8 1a       	sub	r15, r24
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <vfprintf+0x26e>
    2f94:	f1 2c       	mov	r15, r1
    2f96:	83 2d       	mov	r24, r3
    2f98:	89 70       	andi	r24, 0x09	; 9
    2f9a:	41 f4       	brne	.+16     	; 0x2fac <vfprintf+0x284>
    2f9c:	ff 20       	and	r15, r15
    2f9e:	31 f0       	breq	.+12     	; 0x2fac <vfprintf+0x284>
    2fa0:	b6 01       	movw	r22, r12
    2fa2:	80 e2       	ldi	r24, 0x20	; 32
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	aa d3       	rcall	.+1876   	; 0x36fc <fputc>
    2fa8:	fa 94       	dec	r15
    2faa:	f8 cf       	rjmp	.-16     	; 0x2f9c <vfprintf+0x274>
    2fac:	22 20       	and	r2, r2
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <vfprintf+0x290>
    2fb0:	b6 01       	movw	r22, r12
    2fb2:	82 2d       	mov	r24, r2
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a2 d3       	rcall	.+1860   	; 0x36fc <fputc>
    2fb8:	33 fc       	sbrc	r3, 3
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <vfprintf+0x2a4>
    2fbc:	ff 20       	and	r15, r15
    2fbe:	31 f0       	breq	.+12     	; 0x2fcc <vfprintf+0x2a4>
    2fc0:	b6 01       	movw	r22, r12
    2fc2:	80 e3       	ldi	r24, 0x30	; 48
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9a d3       	rcall	.+1844   	; 0x36fc <fputc>
    2fc8:	fa 94       	dec	r15
    2fca:	f8 cf       	rjmp	.-16     	; 0x2fbc <vfprintf+0x294>
    2fcc:	37 fe       	sbrs	r3, 7
    2fce:	58 c0       	rjmp	.+176    	; 0x3080 <vfprintf+0x358>
    2fd0:	94 2d       	mov	r25, r4
    2fd2:	85 2d       	mov	r24, r5
    2fd4:	57 fe       	sbrs	r5, 7
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <vfprintf+0x2b4>
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	29 2e       	mov	r2, r25
    2fde:	38 2e       	mov	r3, r24
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	a2 01       	movw	r20, r4
    2fe6:	4e 19       	sub	r20, r14
    2fe8:	51 09       	sbc	r21, r1
    2fea:	5d 87       	std	Y+13, r21	; 0x0d
    2fec:	4c 87       	std	Y+12, r20	; 0x0c
    2fee:	a2 01       	movw	r20, r4
    2ff0:	42 19       	sub	r20, r2
    2ff2:	53 09       	sbc	r21, r3
    2ff4:	5f 87       	std	Y+15, r21	; 0x0f
    2ff6:	4e 87       	std	Y+14, r20	; 0x0e
    2ff8:	61 2f       	mov	r22, r17
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	44 27       	eor	r20, r20
    2ffe:	55 27       	eor	r21, r21
    3000:	46 1b       	sub	r20, r22
    3002:	57 0b       	sbc	r21, r23
    3004:	59 8b       	std	Y+17, r21	; 0x11
    3006:	48 8b       	std	Y+16, r20	; 0x10
    3008:	5f ef       	ldi	r21, 0xFF	; 255
    300a:	25 16       	cp	r2, r21
    300c:	35 06       	cpc	r3, r21
    300e:	41 f4       	brne	.+16     	; 0x3020 <vfprintf+0x2f8>
    3010:	b6 01       	movw	r22, r12
    3012:	8e e2       	ldi	r24, 0x2E	; 46
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	2a 8b       	std	Y+18, r18	; 0x12
    3018:	3b 8b       	std	Y+19, r19	; 0x13
    301a:	70 d3       	rcall	.+1760   	; 0x36fc <fputc>
    301c:	3b 89       	ldd	r19, Y+19	; 0x13
    301e:	2a 89       	ldd	r18, Y+18	; 0x12
    3020:	42 14       	cp	r4, r2
    3022:	53 04       	cpc	r5, r3
    3024:	6c f0       	brlt	.+26     	; 0x3040 <vfprintf+0x318>
    3026:	4c 85       	ldd	r20, Y+12	; 0x0c
    3028:	5d 85       	ldd	r21, Y+13	; 0x0d
    302a:	42 15       	cp	r20, r2
    302c:	53 05       	cpc	r21, r3
    302e:	44 f4       	brge	.+16     	; 0x3040 <vfprintf+0x318>
    3030:	ee 85       	ldd	r30, Y+14	; 0x0e
    3032:	ff 85       	ldd	r31, Y+15	; 0x0f
    3034:	e2 0f       	add	r30, r18
    3036:	f3 1f       	adc	r31, r19
    3038:	e6 0d       	add	r30, r6
    303a:	f7 1d       	adc	r31, r7
    303c:	81 81       	ldd	r24, Z+1	; 0x01
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <vfprintf+0x31a>
    3040:	80 e3       	ldi	r24, 0x30	; 48
    3042:	51 e0       	ldi	r21, 0x01	; 1
    3044:	25 1a       	sub	r2, r21
    3046:	31 08       	sbc	r3, r1
    3048:	2f 5f       	subi	r18, 0xFF	; 255
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	48 89       	ldd	r20, Y+16	; 0x10
    304e:	59 89       	ldd	r21, Y+17	; 0x11
    3050:	24 16       	cp	r2, r20
    3052:	35 06       	cpc	r3, r21
    3054:	44 f0       	brlt	.+16     	; 0x3066 <vfprintf+0x33e>
    3056:	b6 01       	movw	r22, r12
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	2a 8b       	std	Y+18, r18	; 0x12
    305c:	3b 8b       	std	Y+19, r19	; 0x13
    305e:	4e d3       	rcall	.+1692   	; 0x36fc <fputc>
    3060:	2a 89       	ldd	r18, Y+18	; 0x12
    3062:	3b 89       	ldd	r19, Y+19	; 0x13
    3064:	d1 cf       	rjmp	.-94     	; 0x3008 <vfprintf+0x2e0>
    3066:	24 14       	cp	r2, r4
    3068:	35 04       	cpc	r3, r5
    306a:	39 f4       	brne	.+14     	; 0x307a <vfprintf+0x352>
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	96 33       	cpi	r25, 0x36	; 54
    3070:	18 f4       	brcc	.+6      	; 0x3078 <vfprintf+0x350>
    3072:	95 33       	cpi	r25, 0x35	; 53
    3074:	11 f4       	brne	.+4      	; 0x307a <vfprintf+0x352>
    3076:	04 ff       	sbrs	r16, 4
    3078:	81 e3       	ldi	r24, 0x31	; 49
    307a:	b6 01       	movw	r22, r12
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	45 c0       	rjmp	.+138    	; 0x310a <vfprintf+0x3e2>
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	81 33       	cpi	r24, 0x31	; 49
    3084:	09 f0       	breq	.+2      	; 0x3088 <vfprintf+0x360>
    3086:	0f 7e       	andi	r16, 0xEF	; 239
    3088:	b6 01       	movw	r22, r12
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	37 d3       	rcall	.+1646   	; 0x36fc <fputc>
    308e:	11 11       	cpse	r17, r1
    3090:	05 c0       	rjmp	.+10     	; 0x309c <vfprintf+0x374>
    3092:	34 fc       	sbrc	r3, 4
    3094:	16 c0       	rjmp	.+44     	; 0x30c2 <vfprintf+0x39a>
    3096:	85 e6       	ldi	r24, 0x65	; 101
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	15 c0       	rjmp	.+42     	; 0x30c6 <vfprintf+0x39e>
    309c:	b6 01       	movw	r22, r12
    309e:	8e e2       	ldi	r24, 0x2E	; 46
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	2c d3       	rcall	.+1624   	; 0x36fc <fputc>
    30a4:	82 e0       	ldi	r24, 0x02	; 2
    30a6:	ee 24       	eor	r14, r14
    30a8:	e3 94       	inc	r14
    30aa:	e8 0e       	add	r14, r24
    30ac:	f3 01       	movw	r30, r6
    30ae:	e8 0f       	add	r30, r24
    30b0:	f1 1d       	adc	r31, r1
    30b2:	80 81       	ld	r24, Z
    30b4:	b6 01       	movw	r22, r12
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	21 d3       	rcall	.+1602   	; 0x36fc <fputc>
    30ba:	11 50       	subi	r17, 0x01	; 1
    30bc:	8e 2d       	mov	r24, r14
    30be:	99 f7       	brne	.-26     	; 0x30a6 <vfprintf+0x37e>
    30c0:	e8 cf       	rjmp	.-48     	; 0x3092 <vfprintf+0x36a>
    30c2:	85 e4       	ldi	r24, 0x45	; 69
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	b6 01       	movw	r22, r12
    30c8:	19 d3       	rcall	.+1586   	; 0x36fc <fputc>
    30ca:	57 fc       	sbrc	r5, 7
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <vfprintf+0x3b0>
    30ce:	41 14       	cp	r4, r1
    30d0:	51 04       	cpc	r5, r1
    30d2:	39 f4       	brne	.+14     	; 0x30e2 <vfprintf+0x3ba>
    30d4:	04 ff       	sbrs	r16, 4
    30d6:	05 c0       	rjmp	.+10     	; 0x30e2 <vfprintf+0x3ba>
    30d8:	51 94       	neg	r5
    30da:	41 94       	neg	r4
    30dc:	51 08       	sbc	r5, r1
    30de:	8d e2       	ldi	r24, 0x2D	; 45
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <vfprintf+0x3bc>
    30e2:	8b e2       	ldi	r24, 0x2B	; 43
    30e4:	b6 01       	movw	r22, r12
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	09 d3       	rcall	.+1554   	; 0x36fc <fputc>
    30ea:	80 e3       	ldi	r24, 0x30	; 48
    30ec:	9a e0       	ldi	r25, 0x0A	; 10
    30ee:	49 16       	cp	r4, r25
    30f0:	51 04       	cpc	r5, r1
    30f2:	2c f0       	brlt	.+10     	; 0x30fe <vfprintf+0x3d6>
    30f4:	8f 5f       	subi	r24, 0xFF	; 255
    30f6:	5a e0       	ldi	r21, 0x0A	; 10
    30f8:	45 1a       	sub	r4, r21
    30fa:	51 08       	sbc	r5, r1
    30fc:	f7 cf       	rjmp	.-18     	; 0x30ec <vfprintf+0x3c4>
    30fe:	b6 01       	movw	r22, r12
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	fc d2       	rcall	.+1528   	; 0x36fc <fputc>
    3104:	b6 01       	movw	r22, r12
    3106:	c2 01       	movw	r24, r4
    3108:	c0 96       	adiw	r24, 0x30	; 48
    310a:	f8 d2       	rcall	.+1520   	; 0x36fc <fputc>
    310c:	4c c1       	rjmp	.+664    	; 0x33a6 <vfprintf+0x67e>
    310e:	83 36       	cpi	r24, 0x63	; 99
    3110:	31 f0       	breq	.+12     	; 0x311e <vfprintf+0x3f6>
    3112:	83 37       	cpi	r24, 0x73	; 115
    3114:	79 f0       	breq	.+30     	; 0x3134 <vfprintf+0x40c>
    3116:	83 35       	cpi	r24, 0x53	; 83
    3118:	09 f0       	breq	.+2      	; 0x311c <vfprintf+0x3f4>
    311a:	54 c0       	rjmp	.+168    	; 0x31c4 <vfprintf+0x49c>
    311c:	20 c0       	rjmp	.+64     	; 0x315e <vfprintf+0x436>
    311e:	52 01       	movw	r10, r4
    3120:	e2 e0       	ldi	r30, 0x02	; 2
    3122:	ae 0e       	add	r10, r30
    3124:	b1 1c       	adc	r11, r1
    3126:	f2 01       	movw	r30, r4
    3128:	80 81       	ld	r24, Z
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	01 e0       	ldi	r16, 0x01	; 1
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	23 01       	movw	r4, r6
    3132:	13 c0       	rjmp	.+38     	; 0x315a <vfprintf+0x432>
    3134:	52 01       	movw	r10, r4
    3136:	f2 e0       	ldi	r31, 0x02	; 2
    3138:	af 0e       	add	r10, r31
    313a:	b1 1c       	adc	r11, r1
    313c:	f2 01       	movw	r30, r4
    313e:	40 80       	ld	r4, Z
    3140:	51 80       	ldd	r5, Z+1	; 0x01
    3142:	26 ff       	sbrs	r18, 6
    3144:	03 c0       	rjmp	.+6      	; 0x314c <vfprintf+0x424>
    3146:	61 2f       	mov	r22, r17
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x428>
    314c:	6f ef       	ldi	r22, 0xFF	; 255
    314e:	7f ef       	ldi	r23, 0xFF	; 255
    3150:	c2 01       	movw	r24, r4
    3152:	2a 8b       	std	Y+18, r18	; 0x12
    3154:	c8 d2       	rcall	.+1424   	; 0x36e6 <strnlen>
    3156:	8c 01       	movw	r16, r24
    3158:	2a 89       	ldd	r18, Y+18	; 0x12
    315a:	2f 77       	andi	r18, 0x7F	; 127
    315c:	14 c0       	rjmp	.+40     	; 0x3186 <vfprintf+0x45e>
    315e:	52 01       	movw	r10, r4
    3160:	f2 e0       	ldi	r31, 0x02	; 2
    3162:	af 0e       	add	r10, r31
    3164:	b1 1c       	adc	r11, r1
    3166:	f2 01       	movw	r30, r4
    3168:	40 80       	ld	r4, Z
    316a:	51 80       	ldd	r5, Z+1	; 0x01
    316c:	26 ff       	sbrs	r18, 6
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <vfprintf+0x44e>
    3170:	61 2f       	mov	r22, r17
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	02 c0       	rjmp	.+4      	; 0x317a <vfprintf+0x452>
    3176:	6f ef       	ldi	r22, 0xFF	; 255
    3178:	7f ef       	ldi	r23, 0xFF	; 255
    317a:	c2 01       	movw	r24, r4
    317c:	2a 8b       	std	Y+18, r18	; 0x12
    317e:	9f d2       	rcall	.+1342   	; 0x36be <strnlen_P>
    3180:	8c 01       	movw	r16, r24
    3182:	2a 89       	ldd	r18, Y+18	; 0x12
    3184:	20 68       	ori	r18, 0x80	; 128
    3186:	32 2e       	mov	r3, r18
    3188:	23 fd       	sbrc	r18, 3
    318a:	18 c0       	rjmp	.+48     	; 0x31bc <vfprintf+0x494>
    318c:	8f 2d       	mov	r24, r15
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	08 17       	cp	r16, r24
    3192:	19 07       	cpc	r17, r25
    3194:	98 f4       	brcc	.+38     	; 0x31bc <vfprintf+0x494>
    3196:	b6 01       	movw	r22, r12
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	af d2       	rcall	.+1374   	; 0x36fc <fputc>
    319e:	fa 94       	dec	r15
    31a0:	f5 cf       	rjmp	.-22     	; 0x318c <vfprintf+0x464>
    31a2:	f2 01       	movw	r30, r4
    31a4:	37 fc       	sbrc	r3, 7
    31a6:	85 91       	lpm	r24, Z+
    31a8:	37 fe       	sbrs	r3, 7
    31aa:	81 91       	ld	r24, Z+
    31ac:	2f 01       	movw	r4, r30
    31ae:	b6 01       	movw	r22, r12
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	a4 d2       	rcall	.+1352   	; 0x36fc <fputc>
    31b4:	f1 10       	cpse	r15, r1
    31b6:	fa 94       	dec	r15
    31b8:	01 50       	subi	r16, 0x01	; 1
    31ba:	11 09       	sbc	r17, r1
    31bc:	01 15       	cp	r16, r1
    31be:	11 05       	cpc	r17, r1
    31c0:	81 f7       	brne	.-32     	; 0x31a2 <vfprintf+0x47a>
    31c2:	f1 c0       	rjmp	.+482    	; 0x33a6 <vfprintf+0x67e>
    31c4:	84 36       	cpi	r24, 0x64	; 100
    31c6:	11 f0       	breq	.+4      	; 0x31cc <vfprintf+0x4a4>
    31c8:	89 36       	cpi	r24, 0x69	; 105
    31ca:	51 f5       	brne	.+84     	; 0x3220 <vfprintf+0x4f8>
    31cc:	52 01       	movw	r10, r4
    31ce:	27 ff       	sbrs	r18, 7
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <vfprintf+0x4bc>
    31d2:	f4 e0       	ldi	r31, 0x04	; 4
    31d4:	af 0e       	add	r10, r31
    31d6:	b1 1c       	adc	r11, r1
    31d8:	f2 01       	movw	r30, r4
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	0a c0       	rjmp	.+20     	; 0x31f8 <vfprintf+0x4d0>
    31e4:	f2 e0       	ldi	r31, 0x02	; 2
    31e6:	af 0e       	add	r10, r31
    31e8:	b1 1c       	adc	r11, r1
    31ea:	f2 01       	movw	r30, r4
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	07 2e       	mov	r0, r23
    31f2:	00 0c       	add	r0, r0
    31f4:	88 0b       	sbc	r24, r24
    31f6:	99 0b       	sbc	r25, r25
    31f8:	2f 76       	andi	r18, 0x6F	; 111
    31fa:	32 2e       	mov	r3, r18
    31fc:	97 ff       	sbrs	r25, 7
    31fe:	09 c0       	rjmp	.+18     	; 0x3212 <vfprintf+0x4ea>
    3200:	90 95       	com	r25
    3202:	80 95       	com	r24
    3204:	70 95       	com	r23
    3206:	61 95       	neg	r22
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	8f 4f       	sbci	r24, 0xFF	; 255
    320c:	9f 4f       	sbci	r25, 0xFF	; 255
    320e:	20 68       	ori	r18, 0x80	; 128
    3210:	32 2e       	mov	r3, r18
    3212:	2a e0       	ldi	r18, 0x0A	; 10
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	a3 01       	movw	r20, r6
    3218:	a9 d2       	rcall	.+1362   	; 0x376c <__ultoa_invert>
    321a:	e8 2e       	mov	r14, r24
    321c:	e6 18       	sub	r14, r6
    321e:	3e c0       	rjmp	.+124    	; 0x329c <vfprintf+0x574>
    3220:	02 2f       	mov	r16, r18
    3222:	85 37       	cpi	r24, 0x75	; 117
    3224:	21 f4       	brne	.+8      	; 0x322e <vfprintf+0x506>
    3226:	0f 7e       	andi	r16, 0xEF	; 239
    3228:	2a e0       	ldi	r18, 0x0A	; 10
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	1d c0       	rjmp	.+58     	; 0x3268 <vfprintf+0x540>
    322e:	09 7f       	andi	r16, 0xF9	; 249
    3230:	8f 36       	cpi	r24, 0x6F	; 111
    3232:	91 f0       	breq	.+36     	; 0x3258 <vfprintf+0x530>
    3234:	18 f4       	brcc	.+6      	; 0x323c <vfprintf+0x514>
    3236:	88 35       	cpi	r24, 0x58	; 88
    3238:	59 f0       	breq	.+22     	; 0x3250 <vfprintf+0x528>
    323a:	be c0       	rjmp	.+380    	; 0x33b8 <vfprintf+0x690>
    323c:	80 37       	cpi	r24, 0x70	; 112
    323e:	19 f0       	breq	.+6      	; 0x3246 <vfprintf+0x51e>
    3240:	88 37       	cpi	r24, 0x78	; 120
    3242:	11 f0       	breq	.+4      	; 0x3248 <vfprintf+0x520>
    3244:	b9 c0       	rjmp	.+370    	; 0x33b8 <vfprintf+0x690>
    3246:	00 61       	ori	r16, 0x10	; 16
    3248:	04 ff       	sbrs	r16, 4
    324a:	09 c0       	rjmp	.+18     	; 0x325e <vfprintf+0x536>
    324c:	04 60       	ori	r16, 0x04	; 4
    324e:	07 c0       	rjmp	.+14     	; 0x325e <vfprintf+0x536>
    3250:	24 ff       	sbrs	r18, 4
    3252:	08 c0       	rjmp	.+16     	; 0x3264 <vfprintf+0x53c>
    3254:	06 60       	ori	r16, 0x06	; 6
    3256:	06 c0       	rjmp	.+12     	; 0x3264 <vfprintf+0x53c>
    3258:	28 e0       	ldi	r18, 0x08	; 8
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	05 c0       	rjmp	.+10     	; 0x3268 <vfprintf+0x540>
    325e:	20 e1       	ldi	r18, 0x10	; 16
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <vfprintf+0x540>
    3264:	20 e1       	ldi	r18, 0x10	; 16
    3266:	32 e0       	ldi	r19, 0x02	; 2
    3268:	52 01       	movw	r10, r4
    326a:	07 ff       	sbrs	r16, 7
    326c:	09 c0       	rjmp	.+18     	; 0x3280 <vfprintf+0x558>
    326e:	f4 e0       	ldi	r31, 0x04	; 4
    3270:	af 0e       	add	r10, r31
    3272:	b1 1c       	adc	r11, r1
    3274:	f2 01       	movw	r30, r4
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	08 c0       	rjmp	.+16     	; 0x3290 <vfprintf+0x568>
    3280:	f2 e0       	ldi	r31, 0x02	; 2
    3282:	af 0e       	add	r10, r31
    3284:	b1 1c       	adc	r11, r1
    3286:	f2 01       	movw	r30, r4
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	a3 01       	movw	r20, r6
    3292:	6c d2       	rcall	.+1240   	; 0x376c <__ultoa_invert>
    3294:	e8 2e       	mov	r14, r24
    3296:	e6 18       	sub	r14, r6
    3298:	0f 77       	andi	r16, 0x7F	; 127
    329a:	30 2e       	mov	r3, r16
    329c:	36 fe       	sbrs	r3, 6
    329e:	0b c0       	rjmp	.+22     	; 0x32b6 <vfprintf+0x58e>
    32a0:	33 2d       	mov	r19, r3
    32a2:	3e 7f       	andi	r19, 0xFE	; 254
    32a4:	e1 16       	cp	r14, r17
    32a6:	50 f4       	brcc	.+20     	; 0x32bc <vfprintf+0x594>
    32a8:	34 fe       	sbrs	r3, 4
    32aa:	0a c0       	rjmp	.+20     	; 0x32c0 <vfprintf+0x598>
    32ac:	32 fc       	sbrc	r3, 2
    32ae:	08 c0       	rjmp	.+16     	; 0x32c0 <vfprintf+0x598>
    32b0:	33 2d       	mov	r19, r3
    32b2:	3e 7e       	andi	r19, 0xEE	; 238
    32b4:	05 c0       	rjmp	.+10     	; 0x32c0 <vfprintf+0x598>
    32b6:	0e 2d       	mov	r16, r14
    32b8:	33 2d       	mov	r19, r3
    32ba:	03 c0       	rjmp	.+6      	; 0x32c2 <vfprintf+0x59a>
    32bc:	0e 2d       	mov	r16, r14
    32be:	01 c0       	rjmp	.+2      	; 0x32c2 <vfprintf+0x59a>
    32c0:	01 2f       	mov	r16, r17
    32c2:	34 ff       	sbrs	r19, 4
    32c4:	0c c0       	rjmp	.+24     	; 0x32de <vfprintf+0x5b6>
    32c6:	fe 01       	movw	r30, r28
    32c8:	ee 0d       	add	r30, r14
    32ca:	f1 1d       	adc	r31, r1
    32cc:	80 81       	ld	r24, Z
    32ce:	80 33       	cpi	r24, 0x30	; 48
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <vfprintf+0x5ae>
    32d2:	39 7e       	andi	r19, 0xE9	; 233
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <vfprintf+0x5be>
    32d6:	32 ff       	sbrs	r19, 2
    32d8:	05 c0       	rjmp	.+10     	; 0x32e4 <vfprintf+0x5bc>
    32da:	0e 5f       	subi	r16, 0xFE	; 254
    32dc:	04 c0       	rjmp	.+8      	; 0x32e6 <vfprintf+0x5be>
    32de:	83 2f       	mov	r24, r19
    32e0:	86 78       	andi	r24, 0x86	; 134
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <vfprintf+0x5be>
    32e4:	0f 5f       	subi	r16, 0xFF	; 255
    32e6:	33 fd       	sbrc	r19, 3
    32e8:	12 c0       	rjmp	.+36     	; 0x330e <vfprintf+0x5e6>
    32ea:	30 ff       	sbrs	r19, 0
    32ec:	06 c0       	rjmp	.+12     	; 0x32fa <vfprintf+0x5d2>
    32ee:	1e 2d       	mov	r17, r14
    32f0:	0f 15       	cp	r16, r15
    32f2:	18 f4       	brcc	.+6      	; 0x32fa <vfprintf+0x5d2>
    32f4:	1f 0d       	add	r17, r15
    32f6:	10 1b       	sub	r17, r16
    32f8:	0f 2d       	mov	r16, r15
    32fa:	0f 15       	cp	r16, r15
    32fc:	60 f4       	brcc	.+24     	; 0x3316 <vfprintf+0x5ee>
    32fe:	b6 01       	movw	r22, r12
    3300:	80 e2       	ldi	r24, 0x20	; 32
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	3b 8b       	std	Y+19, r19	; 0x13
    3306:	fa d1       	rcall	.+1012   	; 0x36fc <fputc>
    3308:	0f 5f       	subi	r16, 0xFF	; 255
    330a:	3b 89       	ldd	r19, Y+19	; 0x13
    330c:	f6 cf       	rjmp	.-20     	; 0x32fa <vfprintf+0x5d2>
    330e:	0f 15       	cp	r16, r15
    3310:	10 f4       	brcc	.+4      	; 0x3316 <vfprintf+0x5ee>
    3312:	f0 1a       	sub	r15, r16
    3314:	01 c0       	rjmp	.+2      	; 0x3318 <vfprintf+0x5f0>
    3316:	f1 2c       	mov	r15, r1
    3318:	34 ff       	sbrs	r19, 4
    331a:	11 c0       	rjmp	.+34     	; 0x333e <vfprintf+0x616>
    331c:	b6 01       	movw	r22, r12
    331e:	80 e3       	ldi	r24, 0x30	; 48
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	3b 8b       	std	Y+19, r19	; 0x13
    3324:	eb d1       	rcall	.+982    	; 0x36fc <fputc>
    3326:	3b 89       	ldd	r19, Y+19	; 0x13
    3328:	32 ff       	sbrs	r19, 2
    332a:	16 c0       	rjmp	.+44     	; 0x3358 <vfprintf+0x630>
    332c:	31 fd       	sbrc	r19, 1
    332e:	03 c0       	rjmp	.+6      	; 0x3336 <vfprintf+0x60e>
    3330:	88 e7       	ldi	r24, 0x78	; 120
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	02 c0       	rjmp	.+4      	; 0x333a <vfprintf+0x612>
    3336:	88 e5       	ldi	r24, 0x58	; 88
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	b6 01       	movw	r22, r12
    333c:	0c c0       	rjmp	.+24     	; 0x3356 <vfprintf+0x62e>
    333e:	83 2f       	mov	r24, r19
    3340:	86 78       	andi	r24, 0x86	; 134
    3342:	51 f0       	breq	.+20     	; 0x3358 <vfprintf+0x630>
    3344:	31 ff       	sbrs	r19, 1
    3346:	02 c0       	rjmp	.+4      	; 0x334c <vfprintf+0x624>
    3348:	8b e2       	ldi	r24, 0x2B	; 43
    334a:	01 c0       	rjmp	.+2      	; 0x334e <vfprintf+0x626>
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	37 fd       	sbrc	r19, 7
    3350:	8d e2       	ldi	r24, 0x2D	; 45
    3352:	b6 01       	movw	r22, r12
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	d2 d1       	rcall	.+932    	; 0x36fc <fputc>
    3358:	e1 16       	cp	r14, r17
    335a:	30 f4       	brcc	.+12     	; 0x3368 <vfprintf+0x640>
    335c:	b6 01       	movw	r22, r12
    335e:	80 e3       	ldi	r24, 0x30	; 48
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	cc d1       	rcall	.+920    	; 0x36fc <fputc>
    3364:	11 50       	subi	r17, 0x01	; 1
    3366:	f8 cf       	rjmp	.-16     	; 0x3358 <vfprintf+0x630>
    3368:	ea 94       	dec	r14
    336a:	f3 01       	movw	r30, r6
    336c:	ee 0d       	add	r30, r14
    336e:	f1 1d       	adc	r31, r1
    3370:	80 81       	ld	r24, Z
    3372:	b6 01       	movw	r22, r12
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	c2 d1       	rcall	.+900    	; 0x36fc <fputc>
    3378:	e1 10       	cpse	r14, r1
    337a:	f6 cf       	rjmp	.-20     	; 0x3368 <vfprintf+0x640>
    337c:	14 c0       	rjmp	.+40     	; 0x33a6 <vfprintf+0x67e>
    337e:	f4 e0       	ldi	r31, 0x04	; 4
    3380:	ff 15       	cp	r31, r15
    3382:	48 f5       	brcc	.+82     	; 0x33d6 <vfprintf+0x6ae>
    3384:	84 e0       	ldi	r24, 0x04	; 4
    3386:	f8 1a       	sub	r15, r24
    3388:	33 fe       	sbrs	r3, 3
    338a:	1d c0       	rjmp	.+58     	; 0x33c6 <vfprintf+0x69e>
    338c:	21 10       	cpse	r2, r1
    338e:	24 c0       	rjmp	.+72     	; 0x33d8 <vfprintf+0x6b0>
    3390:	03 ff       	sbrs	r16, 3
    3392:	27 c0       	rjmp	.+78     	; 0x33e2 <vfprintf+0x6ba>
    3394:	0c e8       	ldi	r16, 0x8C	; 140
    3396:	10 e0       	ldi	r17, 0x00	; 0
    3398:	f3 2d       	mov	r31, r3
    339a:	f0 71       	andi	r31, 0x10	; 16
    339c:	3f 2e       	mov	r3, r31
    339e:	f8 01       	movw	r30, r16
    33a0:	84 91       	lpm	r24, Z
    33a2:	81 11       	cpse	r24, r1
    33a4:	21 c0       	rjmp	.+66     	; 0x33e8 <vfprintf+0x6c0>
    33a6:	ff 20       	and	r15, r15
    33a8:	09 f4       	brne	.+2      	; 0x33ac <vfprintf+0x684>
    33aa:	fd cc       	rjmp	.-1542   	; 0x2da6 <vfprintf+0x7e>
    33ac:	b6 01       	movw	r22, r12
    33ae:	80 e2       	ldi	r24, 0x20	; 32
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	a4 d1       	rcall	.+840    	; 0x36fc <fputc>
    33b4:	fa 94       	dec	r15
    33b6:	f7 cf       	rjmp	.-18     	; 0x33a6 <vfprintf+0x67e>
    33b8:	f6 01       	movw	r30, r12
    33ba:	86 81       	ldd	r24, Z+6	; 0x06
    33bc:	97 81       	ldd	r25, Z+7	; 0x07
    33be:	23 c0       	rjmp	.+70     	; 0x3406 <vfprintf+0x6de>
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	9f ef       	ldi	r25, 0xFF	; 255
    33c4:	20 c0       	rjmp	.+64     	; 0x3406 <vfprintf+0x6de>
    33c6:	b6 01       	movw	r22, r12
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	97 d1       	rcall	.+814    	; 0x36fc <fputc>
    33ce:	fa 94       	dec	r15
    33d0:	f1 10       	cpse	r15, r1
    33d2:	f9 cf       	rjmp	.-14     	; 0x33c6 <vfprintf+0x69e>
    33d4:	db cf       	rjmp	.-74     	; 0x338c <vfprintf+0x664>
    33d6:	f1 2c       	mov	r15, r1
    33d8:	b6 01       	movw	r22, r12
    33da:	82 2d       	mov	r24, r2
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	8e d1       	rcall	.+796    	; 0x36fc <fputc>
    33e0:	d7 cf       	rjmp	.-82     	; 0x3390 <vfprintf+0x668>
    33e2:	00 e9       	ldi	r16, 0x90	; 144
    33e4:	10 e0       	ldi	r17, 0x00	; 0
    33e6:	d8 cf       	rjmp	.-80     	; 0x3398 <vfprintf+0x670>
    33e8:	31 10       	cpse	r3, r1
    33ea:	80 52       	subi	r24, 0x20	; 32
    33ec:	b6 01       	movw	r22, r12
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	85 d1       	rcall	.+778    	; 0x36fc <fputc>
    33f2:	0f 5f       	subi	r16, 0xFF	; 255
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	d3 cf       	rjmp	.-90     	; 0x339e <vfprintf+0x676>
    33f8:	23 e0       	ldi	r18, 0x03	; 3
    33fa:	2f 15       	cp	r18, r15
    33fc:	10 f4       	brcc	.+4      	; 0x3402 <vfprintf+0x6da>
    33fe:	83 e0       	ldi	r24, 0x03	; 3
    3400:	c2 cf       	rjmp	.-124    	; 0x3386 <vfprintf+0x65e>
    3402:	f1 2c       	mov	r15, r1
    3404:	c5 cf       	rjmp	.-118    	; 0x3390 <vfprintf+0x668>
    3406:	63 96       	adiw	r28, 0x13	; 19
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	ff 90       	pop	r15
    341c:	ef 90       	pop	r14
    341e:	df 90       	pop	r13
    3420:	cf 90       	pop	r12
    3422:	bf 90       	pop	r11
    3424:	af 90       	pop	r10
    3426:	9f 90       	pop	r9
    3428:	8f 90       	pop	r8
    342a:	7f 90       	pop	r7
    342c:	6f 90       	pop	r6
    342e:	5f 90       	pop	r5
    3430:	4f 90       	pop	r4
    3432:	3f 90       	pop	r3
    3434:	2f 90       	pop	r2
    3436:	08 95       	ret

00003438 <__divmodhi4>:
    3438:	97 fb       	bst	r25, 7
    343a:	07 2e       	mov	r0, r23
    343c:	16 f4       	brtc	.+4      	; 0x3442 <__divmodhi4+0xa>
    343e:	00 94       	com	r0
    3440:	06 d0       	rcall	.+12     	; 0x344e <__divmodhi4_neg1>
    3442:	77 fd       	sbrc	r23, 7
    3444:	08 d0       	rcall	.+16     	; 0x3456 <__divmodhi4_neg2>
    3446:	46 d0       	rcall	.+140    	; 0x34d4 <__udivmodhi4>
    3448:	07 fc       	sbrc	r0, 7
    344a:	05 d0       	rcall	.+10     	; 0x3456 <__divmodhi4_neg2>
    344c:	3e f4       	brtc	.+14     	; 0x345c <__divmodhi4_exit>

0000344e <__divmodhi4_neg1>:
    344e:	90 95       	com	r25
    3450:	81 95       	neg	r24
    3452:	9f 4f       	sbci	r25, 0xFF	; 255
    3454:	08 95       	ret

00003456 <__divmodhi4_neg2>:
    3456:	70 95       	com	r23
    3458:	61 95       	neg	r22
    345a:	7f 4f       	sbci	r23, 0xFF	; 255

0000345c <__divmodhi4_exit>:
    345c:	08 95       	ret

0000345e <__udivmodsi4>:
    345e:	a1 e2       	ldi	r26, 0x21	; 33
    3460:	1a 2e       	mov	r1, r26
    3462:	aa 1b       	sub	r26, r26
    3464:	bb 1b       	sub	r27, r27
    3466:	fd 01       	movw	r30, r26
    3468:	0d c0       	rjmp	.+26     	; 0x3484 <__udivmodsi4_ep>

0000346a <__udivmodsi4_loop>:
    346a:	aa 1f       	adc	r26, r26
    346c:	bb 1f       	adc	r27, r27
    346e:	ee 1f       	adc	r30, r30
    3470:	ff 1f       	adc	r31, r31
    3472:	a2 17       	cp	r26, r18
    3474:	b3 07       	cpc	r27, r19
    3476:	e4 07       	cpc	r30, r20
    3478:	f5 07       	cpc	r31, r21
    347a:	20 f0       	brcs	.+8      	; 0x3484 <__udivmodsi4_ep>
    347c:	a2 1b       	sub	r26, r18
    347e:	b3 0b       	sbc	r27, r19
    3480:	e4 0b       	sbc	r30, r20
    3482:	f5 0b       	sbc	r31, r21

00003484 <__udivmodsi4_ep>:
    3484:	66 1f       	adc	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	88 1f       	adc	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	1a 94       	dec	r1
    348e:	69 f7       	brne	.-38     	; 0x346a <__udivmodsi4_loop>
    3490:	60 95       	com	r22
    3492:	70 95       	com	r23
    3494:	80 95       	com	r24
    3496:	90 95       	com	r25
    3498:	9b 01       	movw	r18, r22
    349a:	ac 01       	movw	r20, r24
    349c:	bd 01       	movw	r22, r26
    349e:	cf 01       	movw	r24, r30
    34a0:	08 95       	ret

000034a2 <__umulhisi3>:
    34a2:	a2 9f       	mul	r26, r18
    34a4:	b0 01       	movw	r22, r0
    34a6:	b3 9f       	mul	r27, r19
    34a8:	c0 01       	movw	r24, r0
    34aa:	a3 9f       	mul	r26, r19
    34ac:	70 0d       	add	r23, r0
    34ae:	81 1d       	adc	r24, r1
    34b0:	11 24       	eor	r1, r1
    34b2:	91 1d       	adc	r25, r1
    34b4:	b2 9f       	mul	r27, r18
    34b6:	70 0d       	add	r23, r0
    34b8:	81 1d       	adc	r24, r1
    34ba:	11 24       	eor	r1, r1
    34bc:	91 1d       	adc	r25, r1
    34be:	08 95       	ret

000034c0 <__muluhisi3>:
    34c0:	f0 df       	rcall	.-32     	; 0x34a2 <__umulhisi3>
    34c2:	a5 9f       	mul	r26, r21
    34c4:	90 0d       	add	r25, r0
    34c6:	b4 9f       	mul	r27, r20
    34c8:	90 0d       	add	r25, r0
    34ca:	a4 9f       	mul	r26, r20
    34cc:	80 0d       	add	r24, r0
    34ce:	91 1d       	adc	r25, r1
    34d0:	11 24       	eor	r1, r1
    34d2:	08 95       	ret

000034d4 <__udivmodhi4>:
    34d4:	aa 1b       	sub	r26, r26
    34d6:	bb 1b       	sub	r27, r27
    34d8:	51 e1       	ldi	r21, 0x11	; 17
    34da:	07 c0       	rjmp	.+14     	; 0x34ea <__udivmodhi4_ep>

000034dc <__udivmodhi4_loop>:
    34dc:	aa 1f       	adc	r26, r26
    34de:	bb 1f       	adc	r27, r27
    34e0:	a6 17       	cp	r26, r22
    34e2:	b7 07       	cpc	r27, r23
    34e4:	10 f0       	brcs	.+4      	; 0x34ea <__udivmodhi4_ep>
    34e6:	a6 1b       	sub	r26, r22
    34e8:	b7 0b       	sbc	r27, r23

000034ea <__udivmodhi4_ep>:
    34ea:	88 1f       	adc	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	5a 95       	dec	r21
    34f0:	a9 f7       	brne	.-22     	; 0x34dc <__udivmodhi4_loop>
    34f2:	80 95       	com	r24
    34f4:	90 95       	com	r25
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	08 95       	ret

000034fc <__tablejump2__>:
    34fc:	ee 0f       	add	r30, r30
    34fe:	ff 1f       	adc	r31, r31
    3500:	00 24       	eor	r0, r0
    3502:	00 1c       	adc	r0, r0
    3504:	0b be       	out	0x3b, r0	; 59
    3506:	07 90       	elpm	r0, Z+
    3508:	f6 91       	elpm	r31, Z
    350a:	e0 2d       	mov	r30, r0
    350c:	09 94       	ijmp

0000350e <__ftoa_engine>:
    350e:	28 30       	cpi	r18, 0x08	; 8
    3510:	08 f0       	brcs	.+2      	; 0x3514 <__ftoa_engine+0x6>
    3512:	27 e0       	ldi	r18, 0x07	; 7
    3514:	33 27       	eor	r19, r19
    3516:	da 01       	movw	r26, r20
    3518:	99 0f       	add	r25, r25
    351a:	31 1d       	adc	r19, r1
    351c:	87 fd       	sbrc	r24, 7
    351e:	91 60       	ori	r25, 0x01	; 1
    3520:	00 96       	adiw	r24, 0x00	; 0
    3522:	61 05       	cpc	r22, r1
    3524:	71 05       	cpc	r23, r1
    3526:	39 f4       	brne	.+14     	; 0x3536 <__ftoa_engine+0x28>
    3528:	32 60       	ori	r19, 0x02	; 2
    352a:	2e 5f       	subi	r18, 0xFE	; 254
    352c:	3d 93       	st	X+, r19
    352e:	30 e3       	ldi	r19, 0x30	; 48
    3530:	2a 95       	dec	r18
    3532:	e1 f7       	brne	.-8      	; 0x352c <__ftoa_engine+0x1e>
    3534:	08 95       	ret
    3536:	9f 3f       	cpi	r25, 0xFF	; 255
    3538:	30 f0       	brcs	.+12     	; 0x3546 <__ftoa_engine+0x38>
    353a:	80 38       	cpi	r24, 0x80	; 128
    353c:	71 05       	cpc	r23, r1
    353e:	61 05       	cpc	r22, r1
    3540:	09 f0       	breq	.+2      	; 0x3544 <__ftoa_engine+0x36>
    3542:	3c 5f       	subi	r19, 0xFC	; 252
    3544:	3c 5f       	subi	r19, 0xFC	; 252
    3546:	3d 93       	st	X+, r19
    3548:	91 30       	cpi	r25, 0x01	; 1
    354a:	08 f0       	brcs	.+2      	; 0x354e <__ftoa_engine+0x40>
    354c:	80 68       	ori	r24, 0x80	; 128
    354e:	91 1d       	adc	r25, r1
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	1f 93       	push	r17
    3556:	0f 93       	push	r16
    3558:	ff 92       	push	r15
    355a:	ef 92       	push	r14
    355c:	19 2f       	mov	r17, r25
    355e:	98 7f       	andi	r25, 0xF8	; 248
    3560:	96 95       	lsr	r25
    3562:	e9 2f       	mov	r30, r25
    3564:	96 95       	lsr	r25
    3566:	96 95       	lsr	r25
    3568:	e9 0f       	add	r30, r25
    356a:	ff 27       	eor	r31, r31
    356c:	e2 51       	subi	r30, 0x12	; 18
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	99 27       	eor	r25, r25
    3572:	33 27       	eor	r19, r19
    3574:	ee 24       	eor	r14, r14
    3576:	ff 24       	eor	r15, r15
    3578:	a7 01       	movw	r20, r14
    357a:	e7 01       	movw	r28, r14
    357c:	05 90       	lpm	r0, Z+
    357e:	08 94       	sec
    3580:	07 94       	ror	r0
    3582:	28 f4       	brcc	.+10     	; 0x358e <__ftoa_engine+0x80>
    3584:	36 0f       	add	r19, r22
    3586:	e7 1e       	adc	r14, r23
    3588:	f8 1e       	adc	r15, r24
    358a:	49 1f       	adc	r20, r25
    358c:	51 1d       	adc	r21, r1
    358e:	66 0f       	add	r22, r22
    3590:	77 1f       	adc	r23, r23
    3592:	88 1f       	adc	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	06 94       	lsr	r0
    3598:	a1 f7       	brne	.-24     	; 0x3582 <__ftoa_engine+0x74>
    359a:	05 90       	lpm	r0, Z+
    359c:	07 94       	ror	r0
    359e:	28 f4       	brcc	.+10     	; 0x35aa <__ftoa_engine+0x9c>
    35a0:	e7 0e       	add	r14, r23
    35a2:	f8 1e       	adc	r15, r24
    35a4:	49 1f       	adc	r20, r25
    35a6:	56 1f       	adc	r21, r22
    35a8:	c1 1d       	adc	r28, r1
    35aa:	77 0f       	add	r23, r23
    35ac:	88 1f       	adc	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	66 1f       	adc	r22, r22
    35b2:	06 94       	lsr	r0
    35b4:	a1 f7       	brne	.-24     	; 0x359e <__ftoa_engine+0x90>
    35b6:	05 90       	lpm	r0, Z+
    35b8:	07 94       	ror	r0
    35ba:	28 f4       	brcc	.+10     	; 0x35c6 <__ftoa_engine+0xb8>
    35bc:	f8 0e       	add	r15, r24
    35be:	49 1f       	adc	r20, r25
    35c0:	56 1f       	adc	r21, r22
    35c2:	c7 1f       	adc	r28, r23
    35c4:	d1 1d       	adc	r29, r1
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	66 1f       	adc	r22, r22
    35cc:	77 1f       	adc	r23, r23
    35ce:	06 94       	lsr	r0
    35d0:	a1 f7       	brne	.-24     	; 0x35ba <__ftoa_engine+0xac>
    35d2:	05 90       	lpm	r0, Z+
    35d4:	07 94       	ror	r0
    35d6:	20 f4       	brcc	.+8      	; 0x35e0 <__ftoa_engine+0xd2>
    35d8:	49 0f       	add	r20, r25
    35da:	56 1f       	adc	r21, r22
    35dc:	c7 1f       	adc	r28, r23
    35de:	d8 1f       	adc	r29, r24
    35e0:	99 0f       	add	r25, r25
    35e2:	66 1f       	adc	r22, r22
    35e4:	77 1f       	adc	r23, r23
    35e6:	88 1f       	adc	r24, r24
    35e8:	06 94       	lsr	r0
    35ea:	a9 f7       	brne	.-22     	; 0x35d6 <__ftoa_engine+0xc8>
    35ec:	84 91       	lpm	r24, Z
    35ee:	10 95       	com	r17
    35f0:	17 70       	andi	r17, 0x07	; 7
    35f2:	41 f0       	breq	.+16     	; 0x3604 <__ftoa_engine+0xf6>
    35f4:	d6 95       	lsr	r29
    35f6:	c7 95       	ror	r28
    35f8:	57 95       	ror	r21
    35fa:	47 95       	ror	r20
    35fc:	f7 94       	ror	r15
    35fe:	e7 94       	ror	r14
    3600:	1a 95       	dec	r17
    3602:	c1 f7       	brne	.-16     	; 0x35f4 <__ftoa_engine+0xe6>
    3604:	e4 e9       	ldi	r30, 0x94	; 148
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	68 94       	set
    360a:	15 90       	lpm	r1, Z+
    360c:	15 91       	lpm	r17, Z+
    360e:	35 91       	lpm	r19, Z+
    3610:	65 91       	lpm	r22, Z+
    3612:	95 91       	lpm	r25, Z+
    3614:	05 90       	lpm	r0, Z+
    3616:	7f e2       	ldi	r23, 0x2F	; 47
    3618:	73 95       	inc	r23
    361a:	e1 18       	sub	r14, r1
    361c:	f1 0a       	sbc	r15, r17
    361e:	43 0b       	sbc	r20, r19
    3620:	56 0b       	sbc	r21, r22
    3622:	c9 0b       	sbc	r28, r25
    3624:	d0 09       	sbc	r29, r0
    3626:	c0 f7       	brcc	.-16     	; 0x3618 <__ftoa_engine+0x10a>
    3628:	e1 0c       	add	r14, r1
    362a:	f1 1e       	adc	r15, r17
    362c:	43 1f       	adc	r20, r19
    362e:	56 1f       	adc	r21, r22
    3630:	c9 1f       	adc	r28, r25
    3632:	d0 1d       	adc	r29, r0
    3634:	7e f4       	brtc	.+30     	; 0x3654 <__ftoa_engine+0x146>
    3636:	70 33       	cpi	r23, 0x30	; 48
    3638:	11 f4       	brne	.+4      	; 0x363e <__ftoa_engine+0x130>
    363a:	8a 95       	dec	r24
    363c:	e6 cf       	rjmp	.-52     	; 0x360a <__ftoa_engine+0xfc>
    363e:	e8 94       	clt
    3640:	01 50       	subi	r16, 0x01	; 1
    3642:	30 f0       	brcs	.+12     	; 0x3650 <__ftoa_engine+0x142>
    3644:	08 0f       	add	r16, r24
    3646:	0a f4       	brpl	.+2      	; 0x364a <__ftoa_engine+0x13c>
    3648:	00 27       	eor	r16, r16
    364a:	02 17       	cp	r16, r18
    364c:	08 f4       	brcc	.+2      	; 0x3650 <__ftoa_engine+0x142>
    364e:	20 2f       	mov	r18, r16
    3650:	23 95       	inc	r18
    3652:	02 2f       	mov	r16, r18
    3654:	7a 33       	cpi	r23, 0x3A	; 58
    3656:	28 f0       	brcs	.+10     	; 0x3662 <__ftoa_engine+0x154>
    3658:	79 e3       	ldi	r23, 0x39	; 57
    365a:	7d 93       	st	X+, r23
    365c:	2a 95       	dec	r18
    365e:	e9 f7       	brne	.-6      	; 0x365a <__ftoa_engine+0x14c>
    3660:	10 c0       	rjmp	.+32     	; 0x3682 <__ftoa_engine+0x174>
    3662:	7d 93       	st	X+, r23
    3664:	2a 95       	dec	r18
    3666:	89 f6       	brne	.-94     	; 0x360a <__ftoa_engine+0xfc>
    3668:	06 94       	lsr	r0
    366a:	97 95       	ror	r25
    366c:	67 95       	ror	r22
    366e:	37 95       	ror	r19
    3670:	17 95       	ror	r17
    3672:	17 94       	ror	r1
    3674:	e1 18       	sub	r14, r1
    3676:	f1 0a       	sbc	r15, r17
    3678:	43 0b       	sbc	r20, r19
    367a:	56 0b       	sbc	r21, r22
    367c:	c9 0b       	sbc	r28, r25
    367e:	d0 09       	sbc	r29, r0
    3680:	98 f0       	brcs	.+38     	; 0x36a8 <__ftoa_engine+0x19a>
    3682:	23 95       	inc	r18
    3684:	7e 91       	ld	r23, -X
    3686:	73 95       	inc	r23
    3688:	7a 33       	cpi	r23, 0x3A	; 58
    368a:	08 f0       	brcs	.+2      	; 0x368e <__ftoa_engine+0x180>
    368c:	70 e3       	ldi	r23, 0x30	; 48
    368e:	7c 93       	st	X, r23
    3690:	20 13       	cpse	r18, r16
    3692:	b8 f7       	brcc	.-18     	; 0x3682 <__ftoa_engine+0x174>
    3694:	7e 91       	ld	r23, -X
    3696:	70 61       	ori	r23, 0x10	; 16
    3698:	7d 93       	st	X+, r23
    369a:	30 f0       	brcs	.+12     	; 0x36a8 <__ftoa_engine+0x19a>
    369c:	83 95       	inc	r24
    369e:	71 e3       	ldi	r23, 0x31	; 49
    36a0:	7d 93       	st	X+, r23
    36a2:	70 e3       	ldi	r23, 0x30	; 48
    36a4:	2a 95       	dec	r18
    36a6:	e1 f7       	brne	.-8      	; 0x36a0 <__ftoa_engine+0x192>
    36a8:	11 24       	eor	r1, r1
    36aa:	ef 90       	pop	r14
    36ac:	ff 90       	pop	r15
    36ae:	0f 91       	pop	r16
    36b0:	1f 91       	pop	r17
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	99 27       	eor	r25, r25
    36b8:	87 fd       	sbrc	r24, 7
    36ba:	90 95       	com	r25
    36bc:	08 95       	ret

000036be <strnlen_P>:
    36be:	fc 01       	movw	r30, r24
    36c0:	05 90       	lpm	r0, Z+
    36c2:	61 50       	subi	r22, 0x01	; 1
    36c4:	70 40       	sbci	r23, 0x00	; 0
    36c6:	01 10       	cpse	r0, r1
    36c8:	d8 f7       	brcc	.-10     	; 0x36c0 <strnlen_P+0x2>
    36ca:	80 95       	com	r24
    36cc:	90 95       	com	r25
    36ce:	8e 0f       	add	r24, r30
    36d0:	9f 1f       	adc	r25, r31
    36d2:	08 95       	ret

000036d4 <memcpy>:
    36d4:	fb 01       	movw	r30, r22
    36d6:	dc 01       	movw	r26, r24
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <memcpy+0xa>
    36da:	01 90       	ld	r0, Z+
    36dc:	0d 92       	st	X+, r0
    36de:	41 50       	subi	r20, 0x01	; 1
    36e0:	50 40       	sbci	r21, 0x00	; 0
    36e2:	d8 f7       	brcc	.-10     	; 0x36da <memcpy+0x6>
    36e4:	08 95       	ret

000036e6 <strnlen>:
    36e6:	fc 01       	movw	r30, r24
    36e8:	61 50       	subi	r22, 0x01	; 1
    36ea:	70 40       	sbci	r23, 0x00	; 0
    36ec:	01 90       	ld	r0, Z+
    36ee:	01 10       	cpse	r0, r1
    36f0:	d8 f7       	brcc	.-10     	; 0x36e8 <strnlen+0x2>
    36f2:	80 95       	com	r24
    36f4:	90 95       	com	r25
    36f6:	8e 0f       	add	r24, r30
    36f8:	9f 1f       	adc	r25, r31
    36fa:	08 95       	ret

000036fc <fputc>:
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    3704:	fb 01       	movw	r30, r22
    3706:	23 81       	ldd	r18, Z+3	; 0x03
    3708:	21 fd       	sbrc	r18, 1
    370a:	03 c0       	rjmp	.+6      	; 0x3712 <fputc+0x16>
    370c:	8f ef       	ldi	r24, 0xFF	; 255
    370e:	9f ef       	ldi	r25, 0xFF	; 255
    3710:	28 c0       	rjmp	.+80     	; 0x3762 <fputc+0x66>
    3712:	22 ff       	sbrs	r18, 2
    3714:	16 c0       	rjmp	.+44     	; 0x3742 <fputc+0x46>
    3716:	46 81       	ldd	r20, Z+6	; 0x06
    3718:	57 81       	ldd	r21, Z+7	; 0x07
    371a:	24 81       	ldd	r18, Z+4	; 0x04
    371c:	35 81       	ldd	r19, Z+5	; 0x05
    371e:	42 17       	cp	r20, r18
    3720:	53 07       	cpc	r21, r19
    3722:	44 f4       	brge	.+16     	; 0x3734 <fputc+0x38>
    3724:	a0 81       	ld	r26, Z
    3726:	b1 81       	ldd	r27, Z+1	; 0x01
    3728:	9d 01       	movw	r18, r26
    372a:	2f 5f       	subi	r18, 0xFF	; 255
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	31 83       	std	Z+1, r19	; 0x01
    3730:	20 83       	st	Z, r18
    3732:	8c 93       	st	X, r24
    3734:	26 81       	ldd	r18, Z+6	; 0x06
    3736:	37 81       	ldd	r19, Z+7	; 0x07
    3738:	2f 5f       	subi	r18, 0xFF	; 255
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	37 83       	std	Z+7, r19	; 0x07
    373e:	26 83       	std	Z+6, r18	; 0x06
    3740:	10 c0       	rjmp	.+32     	; 0x3762 <fputc+0x66>
    3742:	eb 01       	movw	r28, r22
    3744:	09 2f       	mov	r16, r25
    3746:	18 2f       	mov	r17, r24
    3748:	00 84       	ldd	r0, Z+8	; 0x08
    374a:	f1 85       	ldd	r31, Z+9	; 0x09
    374c:	e0 2d       	mov	r30, r0
    374e:	09 95       	icall
    3750:	89 2b       	or	r24, r25
    3752:	e1 f6       	brne	.-72     	; 0x370c <fputc+0x10>
    3754:	8e 81       	ldd	r24, Y+6	; 0x06
    3756:	9f 81       	ldd	r25, Y+7	; 0x07
    3758:	01 96       	adiw	r24, 0x01	; 1
    375a:	9f 83       	std	Y+7, r25	; 0x07
    375c:	8e 83       	std	Y+6, r24	; 0x06
    375e:	81 2f       	mov	r24, r17
    3760:	90 2f       	mov	r25, r16
    3762:	df 91       	pop	r29
    3764:	cf 91       	pop	r28
    3766:	1f 91       	pop	r17
    3768:	0f 91       	pop	r16
    376a:	08 95       	ret

0000376c <__ultoa_invert>:
    376c:	fa 01       	movw	r30, r20
    376e:	aa 27       	eor	r26, r26
    3770:	28 30       	cpi	r18, 0x08	; 8
    3772:	51 f1       	breq	.+84     	; 0x37c8 <__ultoa_invert+0x5c>
    3774:	20 31       	cpi	r18, 0x10	; 16
    3776:	81 f1       	breq	.+96     	; 0x37d8 <__ultoa_invert+0x6c>
    3778:	e8 94       	clt
    377a:	6f 93       	push	r22
    377c:	6e 7f       	andi	r22, 0xFE	; 254
    377e:	6e 5f       	subi	r22, 0xFE	; 254
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	8f 4f       	sbci	r24, 0xFF	; 255
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	af 4f       	sbci	r26, 0xFF	; 255
    3788:	b1 e0       	ldi	r27, 0x01	; 1
    378a:	3e d0       	rcall	.+124    	; 0x3808 <__ultoa_invert+0x9c>
    378c:	b4 e0       	ldi	r27, 0x04	; 4
    378e:	3c d0       	rcall	.+120    	; 0x3808 <__ultoa_invert+0x9c>
    3790:	67 0f       	add	r22, r23
    3792:	78 1f       	adc	r23, r24
    3794:	89 1f       	adc	r24, r25
    3796:	9a 1f       	adc	r25, r26
    3798:	a1 1d       	adc	r26, r1
    379a:	68 0f       	add	r22, r24
    379c:	79 1f       	adc	r23, r25
    379e:	8a 1f       	adc	r24, r26
    37a0:	91 1d       	adc	r25, r1
    37a2:	a1 1d       	adc	r26, r1
    37a4:	6a 0f       	add	r22, r26
    37a6:	71 1d       	adc	r23, r1
    37a8:	81 1d       	adc	r24, r1
    37aa:	91 1d       	adc	r25, r1
    37ac:	a1 1d       	adc	r26, r1
    37ae:	20 d0       	rcall	.+64     	; 0x37f0 <__ultoa_invert+0x84>
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <__ultoa_invert+0x48>
    37b2:	68 94       	set
    37b4:	3f 91       	pop	r19
    37b6:	2a e0       	ldi	r18, 0x0A	; 10
    37b8:	26 9f       	mul	r18, r22
    37ba:	11 24       	eor	r1, r1
    37bc:	30 19       	sub	r19, r0
    37be:	30 5d       	subi	r19, 0xD0	; 208
    37c0:	31 93       	st	Z+, r19
    37c2:	de f6       	brtc	.-74     	; 0x377a <__ultoa_invert+0xe>
    37c4:	cf 01       	movw	r24, r30
    37c6:	08 95       	ret
    37c8:	46 2f       	mov	r20, r22
    37ca:	47 70       	andi	r20, 0x07	; 7
    37cc:	40 5d       	subi	r20, 0xD0	; 208
    37ce:	41 93       	st	Z+, r20
    37d0:	b3 e0       	ldi	r27, 0x03	; 3
    37d2:	0f d0       	rcall	.+30     	; 0x37f2 <__ultoa_invert+0x86>
    37d4:	c9 f7       	brne	.-14     	; 0x37c8 <__ultoa_invert+0x5c>
    37d6:	f6 cf       	rjmp	.-20     	; 0x37c4 <__ultoa_invert+0x58>
    37d8:	46 2f       	mov	r20, r22
    37da:	4f 70       	andi	r20, 0x0F	; 15
    37dc:	40 5d       	subi	r20, 0xD0	; 208
    37de:	4a 33       	cpi	r20, 0x3A	; 58
    37e0:	18 f0       	brcs	.+6      	; 0x37e8 <__ultoa_invert+0x7c>
    37e2:	49 5d       	subi	r20, 0xD9	; 217
    37e4:	31 fd       	sbrc	r19, 1
    37e6:	40 52       	subi	r20, 0x20	; 32
    37e8:	41 93       	st	Z+, r20
    37ea:	02 d0       	rcall	.+4      	; 0x37f0 <__ultoa_invert+0x84>
    37ec:	a9 f7       	brne	.-22     	; 0x37d8 <__ultoa_invert+0x6c>
    37ee:	ea cf       	rjmp	.-44     	; 0x37c4 <__ultoa_invert+0x58>
    37f0:	b4 e0       	ldi	r27, 0x04	; 4
    37f2:	a6 95       	lsr	r26
    37f4:	97 95       	ror	r25
    37f6:	87 95       	ror	r24
    37f8:	77 95       	ror	r23
    37fa:	67 95       	ror	r22
    37fc:	ba 95       	dec	r27
    37fe:	c9 f7       	brne	.-14     	; 0x37f2 <__ultoa_invert+0x86>
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	61 05       	cpc	r22, r1
    3804:	71 05       	cpc	r23, r1
    3806:	08 95       	ret
    3808:	9b 01       	movw	r18, r22
    380a:	ac 01       	movw	r20, r24
    380c:	0a 2e       	mov	r0, r26
    380e:	06 94       	lsr	r0
    3810:	57 95       	ror	r21
    3812:	47 95       	ror	r20
    3814:	37 95       	ror	r19
    3816:	27 95       	ror	r18
    3818:	ba 95       	dec	r27
    381a:	c9 f7       	brne	.-14     	; 0x380e <__ultoa_invert+0xa2>
    381c:	62 0f       	add	r22, r18
    381e:	73 1f       	adc	r23, r19
    3820:	84 1f       	adc	r24, r20
    3822:	95 1f       	adc	r25, r21
    3824:	a0 1d       	adc	r26, r0
    3826:	08 95       	ret

00003828 <_exit>:
    3828:	f8 94       	cli

0000382a <__stop_program>:
    382a:	ff cf       	rjmp	.-2      	; 0x382a <__stop_program>
