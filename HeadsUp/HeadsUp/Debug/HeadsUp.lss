
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000516  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c2  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	84 d0       	rcall	.+264    	; 0x1a2 <main>
  9a:	a1 c0       	rjmp	.+322    	; 0x1de <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z17ds1305_spi_selectv>:
*	with other devices, their Select routines should reset these
*	parameters to their value.
*	Raising the line enables the part
*/
void ds1305_spi_select() {
	SPCR |= (1<<CPHA);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<SS_PIN);
  a4:	2c 9a       	sbi	0x05, 4	; 5
  a6:	08 95       	ret

000000a8 <_Z19ds1305_spi_deselectv>:
/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void ds1305_spi_deselect() {
	PORTB &= ~(1<<SS_PIN);
  a8:	2c 98       	cbi	0x05, 4	; 5
  aa:	08 95       	ret

000000ac <_Z11ds1305_Initv>:
}

void ds1305_Init()
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	volatile char IOReg;
	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = (1<<DD_MOSI_PIN) | (1<<DD_SCK_PIN) | (1<<DD_SS_PIN);
  b6:	80 eb       	ldi	r24, 0xB0	; 176
  b8:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);	// POSSIBLE ERROR: PULLING DATA HIGH
  ba:	81 e5       	ldi	r24, 0x51	; 81
  bc:	8c bd       	out	0x2c, r24	; 44
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
  be:	8d b5       	in	r24, 0x2d	; 45
  c0:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	89 83       	std	Y+1, r24	; 0x01
	ds1305_spi_deselect();
  c6:	f0 df       	rcall	.-32     	; 0xa8 <_Z19ds1305_spi_deselectv>
}
  c8:	0f 90       	pop	r0
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <_Z18SPI_MasterTransmith>:
// This routine exchanges 1 byte with the SPI port. 
unsigned char SPI_MasterTransmit(unsigned char cData)
{
	// Set Pointer to beginning of String

	SPDR  = cData;
  d0:	8e bd       	out	0x2e, r24	; 46
	/* wait until Char is sent */
	while (!(SPSR & (1<<SPIF))){
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <_Z18SPI_MasterTransmith+0x2>
		;	
	}
	return SPDR;
  d8:	8e b5       	in	r24, 0x2e	; 46
}
  da:	08 95       	ret

000000dc <_Z16ds1305_ReadBlockhPhj>:
/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void ds1305_ReadBlock(unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount)
{
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	18 2f       	mov	r17, r24
  ea:	e6 2e       	mov	r14, r22
  ec:	f7 2e       	mov	r15, r23
  ee:	ea 01       	movw	r28, r20
	ds1305_spi_select();
  f0:	d6 df       	rcall	.-84     	; 0x9e <_Z17ds1305_spi_selectv>
	SPI_MasterTransmit(cAddr);
  f2:	81 2f       	mov	r24, r17
  f4:	ed df       	rcall	.-38     	; 0xd0 <_Z18SPI_MasterTransmith>
	while(iCount--)
  f6:	20 97       	sbiw	r28, 0x00	; 0
  f8:	49 f0       	breq	.+18     	; 0x10c <_Z16ds1305_ReadBlockhPhj+0x30>
  fa:	0e 2d       	mov	r16, r14
  fc:	1f 2d       	mov	r17, r15
	{
		*pBuffer++ = SPI_MasterTransmit(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e7 df       	rcall	.-50     	; 0xd0 <_Z18SPI_MasterTransmith>
 102:	f8 01       	movw	r30, r16
 104:	81 93       	st	Z+, r24
 106:	8f 01       	movw	r16, r30
 108:	21 97       	sbiw	r28, 0x01	; 1
*/
void ds1305_ReadBlock(unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount)
{
	ds1305_spi_select();
	SPI_MasterTransmit(cAddr);
	while(iCount--)
 10a:	c9 f7       	brne	.-14     	; 0xfe <_Z16ds1305_ReadBlockhPhj+0x22>
	{
		*pBuffer++ = SPI_MasterTransmit(0);
	}
	ds1305_spi_deselect();
 10c:	cd df       	rcall	.-102    	; 0xa8 <_Z19ds1305_spi_deselectv>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	08 95       	ret

0000011c <_Z17ds1305_WriteBlockhPhj>:
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void ds1305_WriteBlock(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount)
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	18 2f       	mov	r17, r24
 12a:	e6 2e       	mov	r14, r22
 12c:	f7 2e       	mov	r15, r23
 12e:	ea 01       	movw	r28, r20
	ds1305_spi_select();
 130:	b6 df       	rcall	.-148    	; 0x9e <_Z17ds1305_spi_selectv>
	SPI_MasterTransmit(iAddr + 0x80);
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	81 0f       	add	r24, r17
 136:	cc df       	rcall	.-104    	; 0xd0 <_Z18SPI_MasterTransmith>
	while(iCount--)
 138:	20 97       	sbiw	r28, 0x00	; 0
 13a:	41 f0       	breq	.+16     	; 0x14c <_Z17ds1305_WriteBlockhPhj+0x30>
 13c:	0e 2d       	mov	r16, r14
 13e:	1f 2d       	mov	r17, r15
	{
		SPI_MasterTransmit(*pBuffer++);
 140:	f8 01       	movw	r30, r16
 142:	81 91       	ld	r24, Z+
 144:	8f 01       	movw	r16, r30
 146:	c4 df       	rcall	.-120    	; 0xd0 <_Z18SPI_MasterTransmith>
 148:	21 97       	sbiw	r28, 0x01	; 1
*/
void ds1305_WriteBlock(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount)
{
	ds1305_spi_select();
	SPI_MasterTransmit(iAddr + 0x80);
	while(iCount--)
 14a:	d1 f7       	brne	.-12     	; 0x140 <_Z17ds1305_WriteBlockhPhj+0x24>
	{
		SPI_MasterTransmit(*pBuffer++);
	}
	ds1305_spi_deselect();
 14c:	ad df       	rcall	.-166    	; 0xa8 <_Z19ds1305_spi_deselectv>
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	08 95       	ret

0000015c <_Z14Test_On_PortA0v>:
void Start_RTC();


void Test_On_PortA0(){
	
	DDRA |= 0x01;
 15c:	08 9a       	sbi	0x01, 0	; 1
	
	PORTA |= ( 1 << PINA0);
 15e:	10 9a       	sbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	83 e2       	ldi	r24, 0x23	; 35
 162:	94 ef       	ldi	r25, 0xF4	; 244
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <_Z14Test_On_PortA0v+0x8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z14Test_On_PortA0v+0xe>
 16a:	00 00       	nop
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
 16c:	10 98       	cbi	0x02, 0	; 2
 16e:	83 e2       	ldi	r24, 0x23	; 35
 170:	94 ef       	ldi	r25, 0xF4	; 244
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <_Z14Test_On_PortA0v+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <_Z14Test_On_PortA0v+0x1c>
 178:	00 00       	nop
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
 17a:	10 9a       	sbi	0x02, 0	; 2
 17c:	08 95       	ret

0000017e <_Z9Start_RTCv>:
}


void Start_RTC(){
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t tc = 0;
 188:	19 82       	std	Y+1, r1	; 0x01


	ds1305_Init();
 18a:	90 df       	rcall	.-224    	; 0xac <_Z11ds1305_Initv>
	ds1305_WriteBlock(0x0F,&tc,1);	// Enable timer and unwrite protect memory
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	c1 df       	rcall	.-126    	; 0x11c <_Z17ds1305_WriteBlockhPhj>
	
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:


using namespace std;


int main(){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	27 97       	sbiw	r28, 0x07	; 7
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
	
	Test_On_PortA0();
 1b6:	d2 df       	rcall	.-92     	; 0x15c <_Z14Test_On_PortA0v>
	
	Start_RTC();
 1b8:	e2 df       	rcall	.-60     	; 0x17e <_Z9Start_RTCv>
	
	ds1305_Time dstTime;
	
	GetCurrentTime(&dstTime);
 1ba:	47 e0       	ldi	r20, 0x07	; 7
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	8a df       	rcall	.-236    	; 0xdc <_Z16ds1305_ReadBlockhPhj>

	return 0;	
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	27 96       	adiw	r28, 0x07	; 7
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
