
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00003160  000031f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800172  00800172  00003266  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d03  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000182b  00000000  00000000  00005823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00007050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c62  00000000  00000000  00007720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000efe  00000000  00000000  0000f382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00010280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000300b  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c0       	rjmp	.+398    	; 0x190 <__ctors_end>
       2:	00 00       	nop
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	ec c0       	rjmp	.+472    	; 0x1e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ea c0       	rjmp	.+468    	; 0x1e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	46 c3       	rjmp	.+1676   	; 0x69e <__vector_4>
      12:	00 00       	nop
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	e4 c0       	rjmp	.+456    	; 0x1e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e0 c0       	rjmp	.+448    	; 0x1e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	de c0       	rjmp	.+444    	; 0x1e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	dc c0       	rjmp	.+440    	; 0x1e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	da c0       	rjmp	.+436    	; 0x1e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	d4 c0       	rjmp	.+424    	; 0x1e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d2 c0       	rjmp	.+420    	; 0x1e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d0 c0       	rjmp	.+416    	; 0x1e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ce c0       	rjmp	.+412    	; 0x1e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	cc c0       	rjmp	.+408    	; 0x1e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ca c0       	rjmp	.+404    	; 0x1e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c8 c0       	rjmp	.+400    	; 0x1e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	c6 c0       	rjmp	.+396    	; 0x1e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	c4 c0       	rjmp	.+392    	; 0x1e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c2 c0       	rjmp	.+388    	; 0x1e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c0 c0       	rjmp	.+384    	; 0x1e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	be c0       	rjmp	.+380    	; 0x1e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	bc c0       	rjmp	.+376    	; 0x1e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ba c0       	rjmp	.+372    	; 0x1e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b8 c0       	rjmp	.+368    	; 0x1e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	b6 c0       	rjmp	.+364    	; 0x1e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	b4 c0       	rjmp	.+360    	; 0x1e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b2 c0       	rjmp	.+356    	; 0x1e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b0 c0       	rjmp	.+352    	; 0x1e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	ae c0       	rjmp	.+348    	; 0x1e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	ac c0       	rjmp	.+344    	; 0x1e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2177>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_start>:
     18e:	76 05       	cpc	r23, r6

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d0 e4       	ldi	r29, 0x40	; 64
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e0 e6       	ldi	r30, 0x60	; 96
     1a4:	f1 e3       	ldi	r31, 0x31	; 49
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a2 37       	cpi	r26, 0x72	; 114
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a2 e7       	ldi	r26, 0x72	; 114
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a4 37       	cpi	r26, 0x74	; 116
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>

000001c6 <__do_global_ctors>:
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	c8 ec       	ldi	r28, 0xC8	; 200
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__do_global_ctors+0x10>
     1ce:	21 97       	sbiw	r28, 0x01	; 1
     1d0:	fe 01       	movw	r30, r28
     1d2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__tablejump2__>
     1d6:	c7 3c       	cpi	r28, 0xC7	; 199
     1d8:	d1 07       	cpc	r29, r17
     1da:	c9 f7       	brne	.-14     	; 0x1ce <__do_global_ctors+0x8>
     1dc:	27 d4       	rcall	.+2126   	; 0xa2c <main>
     1de:	0c 94 ae 18 	jmp	0x315c	; 0x315c <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     1e4:	2f 92       	push	r2
     1e6:	3f 92       	push	r3
     1e8:	4f 92       	push	r4
     1ea:	5f 92       	push	r5
     1ec:	6f 92       	push	r6
     1ee:	7f 92       	push	r7
     1f0:	8f 92       	push	r8
     1f2:	9f 92       	push	r9
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	29 97       	sbiw	r28, 0x09	; 9
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	99 87       	std	Y+9, r25	; 0x09
     21a:	88 87       	std	Y+8, r24	; 0x08
     21c:	88 85       	ldd	r24, Y+8	; 0x08
     21e:	99 85       	ldd	r25, Y+9	; 0x09
     220:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN3rtc8get_timeEv>
     224:	a2 2e       	mov	r10, r18
     226:	b3 2e       	mov	r11, r19
     228:	c4 2e       	mov	r12, r20
     22a:	d5 2e       	mov	r13, r21
     22c:	e6 2e       	mov	r14, r22
     22e:	f7 2e       	mov	r15, r23
     230:	08 2f       	mov	r16, r24
     232:	19 2f       	mov	r17, r25
     234:	2a 2d       	mov	r18, r10
     236:	3b 2d       	mov	r19, r11
     238:	4c 2d       	mov	r20, r12
     23a:	5d 2d       	mov	r21, r13
     23c:	6e 2d       	mov	r22, r14
     23e:	7f 2d       	mov	r23, r15
     240:	80 2f       	mov	r24, r16
     242:	91 2f       	mov	r25, r17
     244:	29 83       	std	Y+1, r18	; 0x01
     246:	3a 83       	std	Y+2, r19	; 0x02
     248:	4b 83       	std	Y+3, r20	; 0x03
     24a:	5c 83       	std	Y+4, r21	; 0x04
     24c:	6d 83       	std	Y+5, r22	; 0x05
     24e:	7e 83       	std	Y+6, r23	; 0x06
     250:	8f 83       	std	Y+7, r24	; 0x07
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	5a 81       	ldd	r21, Y+2	; 0x02
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	4b 81       	ldd	r20, Y+3	; 0x03
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	3c 81       	ldd	r19, Y+4	; 0x04
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	2d 81       	ldd	r18, Y+5	; 0x05
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9e 81       	ldd	r25, Y+6	; 0x06
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	8f 81       	ldd	r24, Y+7	; 0x07
     26e:	26 2e       	mov	r2, r22
     270:	35 2e       	mov	r3, r21
     272:	44 2e       	mov	r4, r20
     274:	53 2e       	mov	r5, r19
     276:	62 2e       	mov	r6, r18
     278:	79 2e       	mov	r7, r25
     27a:	88 2e       	mov	r8, r24
     27c:	a2 2c       	mov	r10, r2
     27e:	b3 2c       	mov	r11, r3
     280:	c4 2c       	mov	r12, r4
     282:	d5 2c       	mov	r13, r5
     284:	e6 2c       	mov	r14, r6
     286:	f7 2c       	mov	r15, r7
     288:	08 2d       	mov	r16, r8
     28a:	19 2d       	mov	r17, r9
     28c:	2a 2d       	mov	r18, r10
     28e:	3b 2d       	mov	r19, r11
     290:	4c 2d       	mov	r20, r12
     292:	5d 2d       	mov	r21, r13
     294:	6e 2d       	mov	r22, r14
     296:	7f 2d       	mov	r23, r15
     298:	80 2f       	mov	r24, r16
     29a:	91 2f       	mov	r25, r17
     29c:	29 96       	adiw	r28, 0x09	; 9
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	bf 90       	pop	r11
     2ba:	af 90       	pop	r10
     2bc:	9f 90       	pop	r9
     2be:	8f 90       	pop	r8
     2c0:	7f 90       	pop	r7
     2c2:	6f 90       	pop	r6
     2c4:	5f 90       	pop	r5
     2c6:	4f 90       	pop	r4
     2c8:	3f 90       	pop	r3
     2ca:	2f 90       	pop	r2
     2cc:	08 95       	ret

000002ce <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <_ZN3rtc3setEP8rtc_time+0x6>
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <_ZN3rtc3setEP8rtc_time+0x8>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	7c 83       	std	Y+4, r23	; 0x04
     2e0:	6b 83       	std	Y+3, r22	; 0x03
     2e2:	2b 81       	ldd	r18, Y+3	; 0x03
     2e4:	3c 81       	ldd	r19, Y+4	; 0x04
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	b9 01       	movw	r22, r18
     2ec:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN3rtc8set_timeEP8rtc_time>
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_Z12HeadsUp_Initv>:
void Enable_PCINT2();
void Enable_PCINT3();
void Menu_Main();


void HeadsUp_Init(){
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	60 97       	sbiw	r28, 0x10	; 16
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char uchCurrentTime[ LINE_SIZE ] ;
	
	
	Test_On_PortA0();
     31e:	a4 d0       	rcall	.+328    	; 0x468 <_Z14Test_On_PortA0v>
	lcdNHD.test_LCD_Screen();
     320:	83 e7       	ldi	r24, 0x73	; 115
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN3lcd15test_LCD_ScreenEv>
	
	rtcDS.set(&rtmCurrent);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	82 e7       	ldi	r24, 0x72	; 114
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	ce df       	rcall	.-100    	; 0x2ce <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT2();
     332:	66 d0       	rcall	.+204    	; 0x400 <_Z13Enable_PCINT2v>
	Enable_PCINT3();
     334:	31 d0       	rcall	.+98     	; 0x398 <_Z13Enable_PCINT3v>
	sei();
     336:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmCurrent, uchCurrentTime, LINE_SIZE );
     338:	68 94       	set
     33a:	cc 24       	eor	r12, r12
     33c:	c4 f8       	bld	r12, 4
     33e:	d1 2c       	mov	r13, r1
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	7c 01       	movw	r14, r24
     346:	00 91 00 01 	lds	r16, 0x0100
     34a:	10 91 01 01 	lds	r17, 0x0101
     34e:	20 91 02 01 	lds	r18, 0x0102
     352:	30 91 03 01 	lds	r19, 0x0103
     356:	40 91 04 01 	lds	r20, 0x0104
     35a:	50 91 05 01 	lds	r21, 0x0105
     35e:	60 91 06 01 	lds	r22, 0x0106
     362:	82 e7       	ldi	r24, 0x72	; 114
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( uchCurrentTime , LINE_TOP );
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	bc 01       	movw	r22, r24
     372:	83 e7       	ldi	r24, 0x73	; 115
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN3lcd5printEPhh>

}
     37a:	60 96       	adiw	r28, 0x10	; 16
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	08 95       	ret

00000398 <_Z13Enable_PCINT3v>:


void Enable_PCINT3(){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA3 );
     3a0:	81 e2       	ldi	r24, 0x21	; 33
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	21 e2       	ldi	r18, 0x21	; 33
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	27 7f       	andi	r18, 0xF7	; 247
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA3;
     3b2:	82 e2       	ldi	r24, 0x22	; 34
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	22 e2       	ldi	r18, 0x22	; 34
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	28 60       	ori	r18, 0x08	; 8
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     3c4:	88 e6       	ldi	r24, 0x68	; 104
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	28 e6       	ldi	r18, 0x68	; 104
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	21 60       	ori	r18, 0x01	; 1
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT3;
     3d6:	8b e6       	ldi	r24, 0x6B	; 107
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	2b e6       	ldi	r18, 0x6B	; 107
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f9 01       	movw	r30, r18
     3e0:	20 81       	ld	r18, Z
     3e2:	28 60       	ori	r18, 0x08	; 8
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     3e8:	8b e3       	ldi	r24, 0x3B	; 59
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	2b e3       	ldi	r18, 0x3B	; 59
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	21 60       	ori	r18, 0x01	; 1
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18

}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <_Z13Enable_PCINT2v>:


void Enable_PCINT2(){
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA2 );
     408:	81 e2       	ldi	r24, 0x21	; 33
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	21 e2       	ldi	r18, 0x21	; 33
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	2b 7f       	andi	r18, 0xFB	; 251
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA2;
     41a:	82 e2       	ldi	r24, 0x22	; 34
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	22 e2       	ldi	r18, 0x22	; 34
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	20 81       	ld	r18, Z
     426:	24 60       	ori	r18, 0x04	; 4
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     42c:	88 e6       	ldi	r24, 0x68	; 104
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	28 e6       	ldi	r18, 0x68	; 104
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	21 60       	ori	r18, 0x01	; 1
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT2;
     43e:	8b e6       	ldi	r24, 0x6B	; 107
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	2b e6       	ldi	r18, 0x6B	; 107
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	24 60       	ori	r18, 0x04	; 4
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     450:	8b e3       	ldi	r24, 0x3B	; 59
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2b e3       	ldi	r18, 0x3B	; 59
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	21 60       	ori	r18, 0x01	; 1
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18

}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	6c 97       	sbiw	r28, 0x1c	; 28
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     47c:	81 e2       	ldi	r24, 0x21	; 33
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	21 e2       	ldi	r18, 0x21	; 33
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
     488:	21 60       	ori	r18, 0x01	; 1
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     48e:	82 e2       	ldi	r24, 0x22	; 34
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	22 e2       	ldi	r18, 0x22	; 34
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z
     49a:	21 60       	ori	r18, 0x01	; 1
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	aa e7       	ldi	r26, 0x7A	; 122
     4a6:	b3 e4       	ldi	r27, 0x43	; 67
     4a8:	89 83       	std	Y+1, r24	; 0x01
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	ab 83       	std	Y+3, r26	; 0x03
     4ae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4a e7       	ldi	r20, 0x7A	; 122
     4b6:	53 e4       	ldi	r21, 0x43	; 67
     4b8:	69 81       	ldd	r22, Y+1	; 0x01
     4ba:	7a 81       	ldd	r23, Y+2	; 0x02
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	8d 83       	std	Y+5, r24	; 0x05
     4ca:	9e 83       	std	Y+6, r25	; 0x06
     4cc:	af 83       	std	Y+7, r26	; 0x07
     4ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e8       	ldi	r20, 0x80	; 128
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	6d 81       	ldd	r22, Y+5	; 0x05
     4da:	7e 81       	ldd	r23, Y+6	; 0x06
     4dc:	8f 81       	ldd	r24, Y+7	; 0x07
     4de:	98 85       	ldd	r25, Y+8	; 0x08
     4e0:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     4e4:	88 23       	and	r24, r24
     4e6:	2c f4       	brge	.+10     	; 0x4f2 <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	9a 87       	std	Y+10, r25	; 0x0a
     4ee:	89 87       	std	Y+9, r24	; 0x09
     4f0:	3f c0       	rjmp	.+126    	; 0x570 <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	3f ef       	ldi	r19, 0xFF	; 255
     4f6:	4f e7       	ldi	r20, 0x7F	; 127
     4f8:	57 e4       	ldi	r21, 0x47	; 71
     4fa:	6d 81       	ldd	r22, Y+5	; 0x05
     4fc:	7e 81       	ldd	r23, Y+6	; 0x06
     4fe:	8f 81       	ldd	r24, Y+7	; 0x07
     500:	98 85       	ldd	r25, Y+8	; 0x08
     502:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     506:	18 16       	cp	r1, r24
     508:	4c f5       	brge	.+82     	; 0x55c <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e2       	ldi	r20, 0x20	; 32
     510:	51 e4       	ldi	r21, 0x41	; 65
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	bc 01       	movw	r22, r24
     524:	cd 01       	movw	r24, r26
     526:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	9a 87       	std	Y+10, r25	; 0x0a
     530:	89 87       	std	Y+9, r24	; 0x09
     532:	0f c0       	rjmp	.+30     	; 0x552 <_Z14Test_On_PortA0v+0xea>
     534:	89 e1       	ldi	r24, 0x19	; 25
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9c 87       	std	Y+12, r25	; 0x0c
     53a:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     53c:	8b 85       	ldd	r24, Y+11	; 0x0b
     53e:	9c 85       	ldd	r25, Y+12	; 0x0c
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <_Z14Test_On_PortA0v+0xd8>
     544:	9c 87       	std	Y+12, r25	; 0x0c
     546:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	89 85       	ldd	r24, Y+9	; 0x09
     54a:	9a 85       	ldd	r25, Y+10	; 0x0a
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	9a 87       	std	Y+10, r25	; 0x0a
     550:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     552:	89 85       	ldd	r24, Y+9	; 0x09
     554:	9a 85       	ldd	r25, Y+10	; 0x0a
     556:	89 2b       	or	r24, r25
     558:	69 f7       	brne	.-38     	; 0x534 <_Z14Test_On_PortA0v+0xcc>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55c:	6d 81       	ldd	r22, Y+5	; 0x05
     55e:	7e 81       	ldd	r23, Y+6	; 0x06
     560:	8f 81       	ldd	r24, Y+7	; 0x07
     562:	98 85       	ldd	r25, Y+8	; 0x08
     564:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	9a 87       	std	Y+10, r25	; 0x0a
     56e:	89 87       	std	Y+9, r24	; 0x09
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	9e 87       	std	Y+14, r25	; 0x0e
     576:	8d 87       	std	Y+13, r24	; 0x0d
     578:	8d 85       	ldd	r24, Y+13	; 0x0d
     57a:	9e 85       	ldd	r25, Y+14	; 0x0e
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <_Z14Test_On_PortA0v+0x114>
     580:	9e 87       	std	Y+14, r25	; 0x0e
     582:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     584:	82 e2       	ldi	r24, 0x22	; 34
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	22 e2       	ldi	r18, 0x22	; 34
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2e 7f       	andi	r18, 0xFE	; 254
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	aa e7       	ldi	r26, 0x7A	; 122
     59c:	b3 e4       	ldi	r27, 0x43	; 67
     59e:	8f 87       	std	Y+15, r24	; 0x0f
     5a0:	98 8b       	std	Y+16, r25	; 0x10
     5a2:	a9 8b       	std	Y+17, r26	; 0x11
     5a4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4a e7       	ldi	r20, 0x7A	; 122
     5ac:	53 e4       	ldi	r21, 0x43	; 67
     5ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     5b0:	78 89       	ldd	r23, Y+16	; 0x10
     5b2:	89 89       	ldd	r24, Y+17	; 0x11
     5b4:	9a 89       	ldd	r25, Y+18	; 0x12
     5b6:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	8b 8b       	std	Y+19, r24	; 0x13
     5c0:	9c 8b       	std	Y+20, r25	; 0x14
     5c2:	ad 8b       	std	Y+21, r26	; 0x15
     5c4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e8       	ldi	r20, 0x80	; 128
     5cc:	5f e3       	ldi	r21, 0x3F	; 63
     5ce:	6b 89       	ldd	r22, Y+19	; 0x13
     5d0:	7c 89       	ldd	r23, Y+20	; 0x14
     5d2:	8d 89       	ldd	r24, Y+21	; 0x15
     5d4:	9e 89       	ldd	r25, Y+22	; 0x16
     5d6:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     5da:	88 23       	and	r24, r24
     5dc:	2c f4       	brge	.+10     	; 0x5e8 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	98 8f       	std	Y+24, r25	; 0x18
     5e4:	8f 8b       	std	Y+23, r24	; 0x17
     5e6:	3f c0       	rjmp	.+126    	; 0x666 <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	3f ef       	ldi	r19, 0xFF	; 255
     5ec:	4f e7       	ldi	r20, 0x7F	; 127
     5ee:	57 e4       	ldi	r21, 0x47	; 71
     5f0:	6b 89       	ldd	r22, Y+19	; 0x13
     5f2:	7c 89       	ldd	r23, Y+20	; 0x14
     5f4:	8d 89       	ldd	r24, Y+21	; 0x15
     5f6:	9e 89       	ldd	r25, Y+22	; 0x16
     5f8:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	4c f5       	brge	.+82     	; 0x652 <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e2       	ldi	r20, 0x20	; 32
     606:	51 e4       	ldi	r21, 0x41	; 65
     608:	6f 85       	ldd	r22, Y+15	; 0x0f
     60a:	78 89       	ldd	r23, Y+16	; 0x10
     60c:	89 89       	ldd	r24, Y+17	; 0x11
     60e:	9a 89       	ldd	r25, Y+18	; 0x12
     610:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	98 8f       	std	Y+24, r25	; 0x18
     626:	8f 8b       	std	Y+23, r24	; 0x17
     628:	0f c0       	rjmp	.+30     	; 0x648 <_Z14Test_On_PortA0v+0x1e0>
     62a:	89 e1       	ldi	r24, 0x19	; 25
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9a 8f       	std	Y+26, r25	; 0x1a
     630:	89 8f       	std	Y+25, r24	; 0x19
     632:	89 8d       	ldd	r24, Y+25	; 0x19
     634:	9a 8d       	ldd	r25, Y+26	; 0x1a
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <_Z14Test_On_PortA0v+0x1ce>
     63a:	9a 8f       	std	Y+26, r25	; 0x1a
     63c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63e:	8f 89       	ldd	r24, Y+23	; 0x17
     640:	98 8d       	ldd	r25, Y+24	; 0x18
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	98 8f       	std	Y+24, r25	; 0x18
     646:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     648:	8f 89       	ldd	r24, Y+23	; 0x17
     64a:	98 8d       	ldd	r25, Y+24	; 0x18
     64c:	89 2b       	or	r24, r25
     64e:	69 f7       	brne	.-38     	; 0x62a <_Z14Test_On_PortA0v+0x1c2>
     650:	14 c0       	rjmp	.+40     	; 0x67a <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     652:	6b 89       	ldd	r22, Y+19	; 0x13
     654:	7c 89       	ldd	r23, Y+20	; 0x14
     656:	8d 89       	ldd	r24, Y+21	; 0x15
     658:	9e 89       	ldd	r25, Y+22	; 0x16
     65a:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	98 8f       	std	Y+24, r25	; 0x18
     664:	8f 8b       	std	Y+23, r24	; 0x17
     666:	8f 89       	ldd	r24, Y+23	; 0x17
     668:	98 8d       	ldd	r25, Y+24	; 0x18
     66a:	9c 8f       	std	Y+28, r25	; 0x1c
     66c:	8b 8f       	std	Y+27, r24	; 0x1b
     66e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     670:	9c 8d       	ldd	r25, Y+28	; 0x1c
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <_Z14Test_On_PortA0v+0x20a>
     676:	9c 8f       	std	Y+28, r25	; 0x1c
     678:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     67a:	82 e2       	ldi	r24, 0x22	; 34
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	22 e2       	ldi	r18, 0x22	; 34
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	21 60       	ori	r18, 0x01	; 1
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
	
}
     68c:	6c 96       	adiw	r28, 0x1c	; 28
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <__vector_4>:


ISR( PCINT0_vect ){	
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	00 90 5f 00 	lds	r0, 0x005F
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	00 90 5b 00 	lds	r0, 0x005B
     6ae:	0f 92       	push	r0
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	2f 93       	push	r18
     6c2:	3f 93       	push	r19
     6c4:	4f 93       	push	r20
     6c6:	5f 93       	push	r21
     6c8:	6f 93       	push	r22
     6ca:	7f 93       	push	r23
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
     6d0:	af 93       	push	r26
     6d2:	bf 93       	push	r27
     6d4:	ef 93       	push	r30
     6d6:	ff 93       	push	r31
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	6f 97       	sbiw	r28, 0x1f	; 31
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	unsigned char uchCurrentTime[ LINE_SIZE ] ;
	
	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     6e6:	80 91 20 00 	lds	r24, 0x0020
     6ea:	8f 87       	std	Y+15, r24	; 0x0f
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     6ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	88 70       	andi	r24, 0x08	; 8
     6f4:	99 27       	eor	r25, r25
     6f6:	89 2b       	or	r24, r25
     6f8:	09 f0       	breq	.+2      	; 0x6fc <__vector_4+0x5e>
     6fa:	93 c0       	rjmp	.+294    	; 0x822 <__vector_4+0x184>
		DDRA |= 1 << PORTA4;	
     6fc:	81 e2       	ldi	r24, 0x21	; 33
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	21 e2       	ldi	r18, 0x21	; 33
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	20 61       	ori	r18, 0x10	; 16
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     70e:	82 e2       	ldi	r24, 0x22	; 34
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	22 e2       	ldi	r18, 0x22	; 34
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	f9 01       	movw	r30, r18
     718:	20 81       	ld	r18, Z
     71a:	20 61       	ori	r18, 0x10	; 16
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	aa e7       	ldi	r26, 0x7A	; 122
     726:	b3 e4       	ldi	r27, 0x43	; 67
     728:	89 83       	std	Y+1, r24	; 0x01
     72a:	9a 83       	std	Y+2, r25	; 0x02
     72c:	ab 83       	std	Y+3, r26	; 0x03
     72e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4a e7       	ldi	r20, 0x7A	; 122
     736:	53 e4       	ldi	r21, 0x43	; 67
     738:	69 81       	ldd	r22, Y+1	; 0x01
     73a:	7a 81       	ldd	r23, Y+2	; 0x02
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	8d 83       	std	Y+5, r24	; 0x05
     74a:	9e 83       	std	Y+6, r25	; 0x06
     74c:	af 83       	std	Y+7, r26	; 0x07
     74e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	6d 81       	ldd	r22, Y+5	; 0x05
     75a:	7e 81       	ldd	r23, Y+6	; 0x06
     75c:	8f 81       	ldd	r24, Y+7	; 0x07
     75e:	98 85       	ldd	r25, Y+8	; 0x08
     760:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     764:	88 23       	and	r24, r24
     766:	2c f4       	brge	.+10     	; 0x772 <__vector_4+0xd4>
		__ticks = 1;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9a 87       	std	Y+10, r25	; 0x0a
     76e:	89 87       	std	Y+9, r24	; 0x09
     770:	3f c0       	rjmp	.+126    	; 0x7f0 <__vector_4+0x152>
	else if (__tmp > 65535)
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	3f ef       	ldi	r19, 0xFF	; 255
     776:	4f e7       	ldi	r20, 0x7F	; 127
     778:	57 e4       	ldi	r21, 0x47	; 71
     77a:	6d 81       	ldd	r22, Y+5	; 0x05
     77c:	7e 81       	ldd	r23, Y+6	; 0x06
     77e:	8f 81       	ldd	r24, Y+7	; 0x07
     780:	98 85       	ldd	r25, Y+8	; 0x08
     782:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     786:	18 16       	cp	r1, r24
     788:	4c f5       	brge	.+82     	; 0x7dc <__vector_4+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	69 81       	ldd	r22, Y+1	; 0x01
     794:	7a 81       	ldd	r23, Y+2	; 0x02
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9a 87       	std	Y+10, r25	; 0x0a
     7b0:	89 87       	std	Y+9, r24	; 0x09
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <__vector_4+0x134>
     7b4:	89 e1       	ldi	r24, 0x19	; 25
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9c 87       	std	Y+12, r25	; 0x0c
     7ba:	8b 87       	std	Y+11, r24	; 0x0b
     7bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7be:	9c 85       	ldd	r25, Y+12	; 0x0c
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__vector_4+0x122>
     7c4:	9c 87       	std	Y+12, r25	; 0x0c
     7c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c8:	89 85       	ldd	r24, Y+9	; 0x09
     7ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	9a 87       	std	Y+10, r25	; 0x0a
     7d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d2:	89 85       	ldd	r24, Y+9	; 0x09
     7d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d6:	89 2b       	or	r24, r25
     7d8:	69 f7       	brne	.-38     	; 0x7b4 <__vector_4+0x116>
     7da:	14 c0       	rjmp	.+40     	; 0x804 <__vector_4+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7dc:	6d 81       	ldd	r22, Y+5	; 0x05
     7de:	7e 81       	ldd	r23, Y+6	; 0x06
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	98 85       	ldd	r25, Y+8	; 0x08
     7e4:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	9a 87       	std	Y+10, r25	; 0x0a
     7ee:	89 87       	std	Y+9, r24	; 0x09
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	9e 87       	std	Y+14, r25	; 0x0e
     7f6:	8d 87       	std	Y+13, r24	; 0x0d
     7f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <__vector_4+0x15e>
     800:	9e 87       	std	Y+14, r25	; 0x0e
     802:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
     804:	82 e2       	ldi	r24, 0x22	; 34
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	22 e2       	ldi	r18, 0x22	; 34
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	2f 7e       	andi	r18, 0xEF	; 239
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
		rtcDS.clear_interupt( RTC_ALARM_0 );
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	82 e7       	ldi	r24, 0x72	; 114
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN3rtc14clear_interuptEh>
     820:	2d c0       	rjmp	.+90     	; 0x87c <__vector_4+0x1de>
	}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
     822:	8f 85       	ldd	r24, Y+15	; 0x0f
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	84 70       	andi	r24, 0x04	; 4
     82a:	99 27       	eor	r25, r25
     82c:	89 2b       	or	r24, r25
     82e:	31 f5       	brne	.+76     	; 0x87c <__vector_4+0x1de>
		rtmCurrent = rtcDS.get();
     830:	82 e7       	ldi	r24, 0x72	; 114
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	d7 dc       	rcall	.-1618   	; 0x1e4 <_ZN3rtc3getEv>
     836:	a2 2e       	mov	r10, r18
     838:	b3 2e       	mov	r11, r19
     83a:	c4 2e       	mov	r12, r20
     83c:	d5 2e       	mov	r13, r21
     83e:	e6 2e       	mov	r14, r22
     840:	f7 2e       	mov	r15, r23
     842:	08 2f       	mov	r16, r24
     844:	19 2f       	mov	r17, r25
     846:	2a 2d       	mov	r18, r10
     848:	3b 2d       	mov	r19, r11
     84a:	4c 2d       	mov	r20, r12
     84c:	5d 2d       	mov	r21, r13
     84e:	6e 2d       	mov	r22, r14
     850:	7f 2d       	mov	r23, r15
     852:	80 2f       	mov	r24, r16
     854:	91 2f       	mov	r25, r17
     856:	20 93 00 01 	sts	0x0100, r18
     85a:	30 93 01 01 	sts	0x0101, r19
     85e:	40 93 02 01 	sts	0x0102, r20
     862:	50 93 03 01 	sts	0x0103, r21
     866:	60 93 04 01 	sts	0x0104, r22
     86a:	70 93 05 01 	sts	0x0105, r23
     86e:	80 93 06 01 	sts	0x0106, r24
		rtcDS.clear_interupt( RTC_ALARM_1 );
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	82 e7       	ldi	r24, 0x72	; 114
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN3rtc14clear_interuptEh>
	}
	
}
     87c:	6f 96       	adiw	r28, 0x1f	; 31
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	0f 90       	pop	r0
     8b6:	00 92 5b 00 	sts	0x005B, r0
     8ba:	0f 90       	pop	r0
     8bc:	00 92 5f 00 	sts	0x005F, r0
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <_Z9Menu_Mainv>:


void Menu_Main(){
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	ae 97       	sbiw	r28, 0x2e	; 46
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrMenuTop[LINE_SIZE];
	unsigned char chrMenuBot[LINE_SIZE]{ 'A', 'L', 'R', 'M', '|', 'B', 'A', 'T', 'X', 'X', 'X', '|', 'O', 'P', 'T', 'S' };
     8e6:	80 e1       	ldi	r24, 0x10	; 16
     8e8:	e7 e0       	ldi	r30, 0x07	; 7
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	de 01       	movw	r26, r28
     8ee:	5f 96       	adiw	r26, 0x1f	; 31
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_Z9Menu_Mainv+0x2a>
	
	lcdNHD.print( chrMenuBot , LINE_BOTTOM );
     8f8:	ce 01       	movw	r24, r28
     8fa:	4f 96       	adiw	r24, 0x1f	; 31
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	bc 01       	movw	r22, r24
     900:	83 e7       	ldi	r24, 0x73	; 115
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	1b d7       	rcall	.+3638   	; 0x173c <_ZN3lcd5printEPhh>
	
	for(;;){
		rtcDS.rtm_to_char( rtmCurrent, chrMenuTop, LINE_SIZE );
     906:	ce 01       	movw	r24, r28
     908:	0f 96       	adiw	r24, 0x0f	; 15
     90a:	68 94       	set
     90c:	cc 24       	eor	r12, r12
     90e:	c4 f8       	bld	r12, 4
     910:	d1 2c       	mov	r13, r1
     912:	7c 01       	movw	r14, r24
     914:	00 91 00 01 	lds	r16, 0x0100
     918:	10 91 01 01 	lds	r17, 0x0101
     91c:	20 91 02 01 	lds	r18, 0x0102
     920:	30 91 03 01 	lds	r19, 0x0103
     924:	40 91 04 01 	lds	r20, 0x0104
     928:	50 91 05 01 	lds	r21, 0x0105
     92c:	60 91 06 01 	lds	r22, 0x0106
     930:	82 e7       	ldi	r24, 0x72	; 114
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrMenuTop , LINE_TOP );
     938:	ce 01       	movw	r24, r28
     93a:	0f 96       	adiw	r24, 0x0f	; 15
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	bc 01       	movw	r22, r24
     940:	83 e7       	ldi	r24, 0x73	; 115
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	fb d6       	rcall	.+3574   	; 0x173c <_ZN3lcd5printEPhh>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a8 ec       	ldi	r26, 0xC8	; 200
     94c:	b1 e4       	ldi	r27, 0x41	; 65
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	ab 83       	std	Y+3, r26	; 0x03
     954:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	4a e7       	ldi	r20, 0x7A	; 122
     95c:	53 e4       	ldi	r21, 0x43	; 67
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	7a 81       	ldd	r23, Y+2	; 0x02
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	9e 83       	std	Y+6, r25	; 0x06
     972:	af 83       	std	Y+7, r26	; 0x07
     974:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	6d 81       	ldd	r22, Y+5	; 0x05
     980:	7e 81       	ldd	r23, Y+6	; 0x06
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     98a:	88 23       	and	r24, r24
     98c:	2c f4       	brge	.+10     	; 0x998 <_Z9Menu_Mainv+0xd2>
		__ticks = 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9a 87       	std	Y+10, r25	; 0x0a
     994:	89 87       	std	Y+9, r24	; 0x09
     996:	3f c0       	rjmp	.+126    	; 0xa16 <_Z9Menu_Mainv+0x150>
	else if (__tmp > 65535)
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	4f e7       	ldi	r20, 0x7F	; 127
     99e:	57 e4       	ldi	r21, 0x47	; 71
     9a0:	6d 81       	ldd	r22, Y+5	; 0x05
     9a2:	7e 81       	ldd	r23, Y+6	; 0x06
     9a4:	8f 81       	ldd	r24, Y+7	; 0x07
     9a6:	98 85       	ldd	r25, Y+8	; 0x08
     9a8:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	4c f5       	brge	.+82     	; 0xa02 <_Z9Menu_Mainv+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	69 81       	ldd	r22, Y+1	; 0x01
     9ba:	7a 81       	ldd	r23, Y+2	; 0x02
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9a 87       	std	Y+10, r25	; 0x0a
     9d6:	89 87       	std	Y+9, r24	; 0x09
     9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <_Z9Menu_Mainv+0x132>
     9da:	89 e1       	ldi	r24, 0x19	; 25
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	9c 87       	std	Y+12, r25	; 0x0c
     9e0:	8b 87       	std	Y+11, r24	; 0x0b
     9e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <_Z9Menu_Mainv+0x120>
     9ea:	9c 87       	std	Y+12, r25	; 0x0c
     9ec:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	9a 87       	std	Y+10, r25	; 0x0a
     9f6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f8:	89 85       	ldd	r24, Y+9	; 0x09
     9fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     9fc:	89 2b       	or	r24, r25
     9fe:	69 f7       	brne	.-38     	; 0x9da <_Z9Menu_Mainv+0x114>
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <_Z9Menu_Mainv+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a02:	6d 81       	ldd	r22, Y+5	; 0x05
     a04:	7e 81       	ldd	r23, Y+6	; 0x06
     a06:	8f 81       	ldd	r24, Y+7	; 0x07
     a08:	98 85       	ldd	r25, Y+8	; 0x08
     a0a:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	9a 87       	std	Y+10, r25	; 0x0a
     a14:	89 87       	std	Y+9, r24	; 0x09
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1a:	9e 87       	std	Y+14, r25	; 0x0e
     a1c:	8d 87       	std	Y+13, r24	; 0x0d
     a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a20:	9e 85       	ldd	r25, Y+14	; 0x0e
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <_Z9Menu_Mainv+0x15c>
     a26:	9e 87       	std	Y+14, r25	; 0x0e
     a28:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(25);
	}
     a2a:	6d cf       	rjmp	.-294    	; 0x906 <_Z9Menu_Mainv+0x40>

00000a2c <main>:
 
#include "headsup.h"



int main(){
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	28 97       	sbiw	r28, 0x08	; 8
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	
	rtc_alarm rtaAlarm0 { 0x00, 0x00, 0x80, 0x80 };
     a44:	19 82       	std	Y+1, r1	; 0x01
     a46:	1a 82       	std	Y+2, r1	; 0x02
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	8c 83       	std	Y+4, r24	; 0x04
	rtc_alarm rtaAlarm1 { 0x80, 0x80, 0x80, 0x80 };
     a50:	80 e8       	ldi	r24, 0x80	; 128
     a52:	8d 83       	std	Y+5, r24	; 0x05
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	8e 83       	std	Y+6, r24	; 0x06
     a58:	80 e8       	ldi	r24, 0x80	; 128
     a5a:	8f 83       	std	Y+7, r24	; 0x07
     a5c:	80 e8       	ldi	r24, 0x80	; 128
     a5e:	88 87       	std	Y+8, r24	; 0x08

	
	HeadsUp_Init();
     a60:	4e dc       	rcall	.-1892   	; 0x2fe <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	ab 81       	ldd	r26, Y+3	; 0x03
     a68:	bc 81       	ldd	r27, Y+4	; 0x04
     a6a:	8c 01       	movw	r16, r24
     a6c:	9d 01       	movw	r18, r26
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	82 e7       	ldi	r24, 0x72	; 114
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 37 12 	call	0x246e	; 0x246e <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	9e 81       	ldd	r25, Y+6	; 0x06
     a7e:	af 81       	ldd	r26, Y+7	; 0x07
     a80:	b8 85       	ldd	r27, Y+8	; 0x08
     a82:	8c 01       	movw	r16, r24
     a84:	9d 01       	movw	r18, r26
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	82 e7       	ldi	r24, 0x72	; 114
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 37 12 	call	0x246e	; 0x246e <_ZN3rtc5alarmEhh9rtc_alarm>
		
	Menu_Main();
     a92:	19 df       	rcall	.-462    	; 0x8c6 <_Z9Menu_Mainv>
	
	return 0;
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0

}
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <_Z41__static_initialization_and_destruction_0ii>:
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <_Z41__static_initialization_and_destruction_0ii+0x6>
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <_Z41__static_initialization_and_destruction_0ii+0x8>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	7c 83       	std	Y+4, r23	; 0x04
     ac0:	6b 83       	std	Y+3, r22	; 0x03
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	9a 81       	ldd	r25, Y+2	; 0x02
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	51 f4       	brne	.+20     	; 0xade <_Z41__static_initialization_and_destruction_0ii+0x30>
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	31 f4       	brne	.+12     	; 0xade <_Z41__static_initialization_and_destruction_0ii+0x30>


#define F_CPU 8000000L		// 8 megaHz


rtc rtcDS;
     ad2:	82 e7       	ldi	r24, 0x72	; 114
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	3d d7       	rcall	.+3706   	; 0x1952 <_ZN3rtcC1Ev>
lcd lcdNHD;
     ad8:	83 e7       	ldi	r24, 0x73	; 115
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	13 d0       	rcall	.+38     	; 0xb04 <_ZN3lcdC1Ev>
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <_GLOBAL__sub_I_rtcDS>:
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	6f ef       	ldi	r22, 0xFF	; 255
     af6:	7f ef       	ldi	r23, 0xFF	; 255
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	d8 df       	rcall	.-80     	; 0xaae <_Z41__static_initialization_and_destruction_0ii>
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <_ZN3lcdC1Ev>:
}

void lcd::TWI_ClearFlagAndEnableWithAck()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	60 97       	sbiw	r28, 0x10	; 16
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	98 8b       	std	Y+16, r25	; 0x10
     b1a:	8f 87       	std	Y+15, r24	; 0x0f
     b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1e:	98 89       	ldd	r25, Y+16	; 0x10
     b20:	7e d0       	rcall	.+252    	; 0xc1e <_ZN3lcd8TWI_INITEv>
     b22:	8f 85       	ldd	r24, Y+15	; 0x0f
     b24:	98 89       	ldd	r25, Y+16	; 0x10
     b26:	84 d2       	rcall	.+1288   	; 0x1030 <_ZN3lcd8init_LCDEv>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 ea       	ldi	r26, 0xA0	; 160
     b2e:	b1 e4       	ldi	r27, 0x41	; 65
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	ab 83       	std	Y+3, r26	; 0x03
     b36:	bc 83       	std	Y+4, r27	; 0x04
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	4a e7       	ldi	r20, 0x7A	; 122
     b3e:	53 e4       	ldi	r21, 0x43	; 67
     b40:	69 81       	ldd	r22, Y+1	; 0x01
     b42:	7a 81       	ldd	r23, Y+2	; 0x02
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	8d 83       	std	Y+5, r24	; 0x05
     b52:	9e 83       	std	Y+6, r25	; 0x06
     b54:	af 83       	std	Y+7, r26	; 0x07
     b56:	b8 87       	std	Y+8, r27	; 0x08
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e8       	ldi	r20, 0x80	; 128
     b5e:	5f e3       	ldi	r21, 0x3F	; 63
     b60:	6d 81       	ldd	r22, Y+5	; 0x05
     b62:	7e 81       	ldd	r23, Y+6	; 0x06
     b64:	8f 81       	ldd	r24, Y+7	; 0x07
     b66:	98 85       	ldd	r25, Y+8	; 0x08
     b68:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     b6c:	88 23       	and	r24, r24
     b6e:	2c f4       	brge	.+10     	; 0xb7a <_ZN3lcdC1Ev+0x76>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	9a 87       	std	Y+10, r25	; 0x0a
     b76:	89 87       	std	Y+9, r24	; 0x09
     b78:	3f c0       	rjmp	.+126    	; 0xbf8 <_ZN3lcdC1Ev+0xf4>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	3f ef       	ldi	r19, 0xFF	; 255
     b7e:	4f e7       	ldi	r20, 0x7F	; 127
     b80:	57 e4       	ldi	r21, 0x47	; 71
     b82:	6d 81       	ldd	r22, Y+5	; 0x05
     b84:	7e 81       	ldd	r23, Y+6	; 0x06
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     b8e:	18 16       	cp	r1, r24
     b90:	4c f5       	brge	.+82     	; 0xbe4 <_ZN3lcdC1Ev+0xe0>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e2       	ldi	r20, 0x20	; 32
     b98:	51 e4       	ldi	r21, 0x41	; 65
     b9a:	69 81       	ldd	r22, Y+1	; 0x01
     b9c:	7a 81       	ldd	r23, Y+2	; 0x02
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	bc 01       	movw	r22, r24
     bac:	cd 01       	movw	r24, r26
     bae:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	9a 87       	std	Y+10, r25	; 0x0a
     bb8:	89 87       	std	Y+9, r24	; 0x09
     bba:	0f c0       	rjmp	.+30     	; 0xbda <_ZN3lcdC1Ev+0xd6>
     bbc:	89 e1       	ldi	r24, 0x19	; 25
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9c 87       	std	Y+12, r25	; 0x0c
     bc2:	8b 87       	std	Y+11, r24	; 0x0b
     bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <_ZN3lcdC1Ev+0xc4>
     bcc:	9c 87       	std	Y+12, r25	; 0x0c
     bce:	8b 87       	std	Y+11, r24	; 0x0b
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	9a 87       	std	Y+10, r25	; 0x0a
     bd8:	89 87       	std	Y+9, r24	; 0x09
     bda:	89 85       	ldd	r24, Y+9	; 0x09
     bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bde:	89 2b       	or	r24, r25
     be0:	69 f7       	brne	.-38     	; 0xbbc <_ZN3lcdC1Ev+0xb8>
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <_ZN3lcdC1Ev+0x108>
     be4:	6d 81       	ldd	r22, Y+5	; 0x05
     be6:	7e 81       	ldd	r23, Y+6	; 0x06
     be8:	8f 81       	ldd	r24, Y+7	; 0x07
     bea:	98 85       	ldd	r25, Y+8	; 0x08
     bec:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	9a 87       	std	Y+10, r25	; 0x0a
     bf6:	89 87       	std	Y+9, r24	; 0x09
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	9e 87       	std	Y+14, r25	; 0x0e
     bfe:	8d 87       	std	Y+13, r24	; 0x0d
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	9e 85       	ldd	r25, Y+14	; 0x0e
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <_ZN3lcdC1Ev+0x100>
     c08:	9e 87       	std	Y+14, r25	; 0x0e
     c0a:	8d 87       	std	Y+13, r24	; 0x0d
     c0c:	60 96       	adiw	r28, 0x10	; 16
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <_ZN3lcd8TWI_INITEv>:
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	00 d0       	rcall	.+0      	; 0xc24 <_ZN3lcd8TWI_INITEv+0x6>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	84 e6       	ldi	r24, 0x64	; 100
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	24 e6       	ldi	r18, 0x64	; 100
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	2f 77       	andi	r18, 0x7F	; 127
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 83       	st	Z, r18
     c3e:	8c eb       	ldi	r24, 0xBC	; 188
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	2c eb       	ldi	r18, 0xBC	; 188
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	f9 01       	movw	r30, r18
     c48:	20 81       	ld	r18, Z
     c4a:	2e 7f       	andi	r18, 0xFE	; 254
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
     c50:	88 eb       	ldi	r24, 0xB8	; 184
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	22 e0       	ldi	r18, 0x02	; 2
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
     c5a:	89 eb       	ldi	r24, 0xB9	; 185
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	29 eb       	ldi	r18, 0xB9	; 185
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	2d 7f       	andi	r18, 0xFD	; 253
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <_ZN3lcd23TWI_CheckStatusRegisterEh>:
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	2a 97       	sbiw	r28, 0x0a	; 10
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	6b 83       	std	Y+3, r22	; 0x03
     c90:	89 eb       	ldi	r24, 0xB9	; 185
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	2a 96       	adiw	r28, 0x0a	; 10
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <_ZN3lcd22TWI_ClearFlagAndEnableEv>:
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <_ZN3lcd22TWI_ClearFlagAndEnableEv+0x6>
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	8c eb       	ldi	r24, 0xBC	; 188
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	24 e8       	ldi	r18, 0x84	; 132
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <_ZN3lcd8TWI_STOPEv+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     cda:	8c eb       	ldi	r24, 0xBC	; 188
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	24 e9       	ldi	r18, 0x94	; 148
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
	
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN3lcd22TWI_StartCommunicationEv>:

void lcd::TWI_StartCommunication(){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <_ZN3lcd22TWI_StartCommunicationEv+0x6>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
     cfc:	8c eb       	ldi	r24, 0xBC	; 188
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	24 ea       	ldi	r18, 0xA4	; 164
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
     d06:	00 00       	nop
     d08:	8c eb       	ldi	r24, 0xBC	; 188
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	80 95       	com	r24
     d12:	88 1f       	adc	r24, r24
     d14:	88 27       	eor	r24, r24
     d16:	88 1f       	adc	r24, r24
     d18:	88 23       	and	r24, r24
     d1a:	b1 f7       	brne	.-20     	; 0xd08 <_ZN3lcd22TWI_StartCommunicationEv+0x1a>
	TWI_CheckStatusRegister(TW_START);
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	68 e0       	ldi	r22, 0x08	; 8
     d22:	a9 df       	rcall	.-174    	; 0xc76 <_ZN3lcd23TWI_CheckStatusRegisterEh>
	
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <_ZN3lcd16TWI_TransmitDataEhh>:

void lcd::TWI_TransmitData(uint8_t TwiData, uint8_t StatusCode){
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <_ZN3lcd16TWI_TransmitDataEhh+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <_ZN3lcd16TWI_TransmitDataEhh+0x8>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	6b 83       	std	Y+3, r22	; 0x03
     d40:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
     d42:	8b eb       	ldi	r24, 0xBB	; 187
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	2b 81       	ldd	r18, Y+3	; 0x03
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
	/*After TWDR is loaded with SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the SLA+W present in TWDR*/
	TWI_ClearFlagAndEnable();
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	ac df       	rcall	.-168    	; 0xcaa <_ZN3lcd22TWI_ClearFlagAndEnableEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
     d52:	00 00       	nop
     d54:	8c eb       	ldi	r24, 0xBC	; 188
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	80 95       	com	r24
     d5e:	88 1f       	adc	r24, r24
     d60:	88 27       	eor	r24, r24
     d62:	88 1f       	adc	r24, r24
     d64:	88 23       	and	r24, r24
     d66:	b1 f7       	brne	.-20     	; 0xd54 <_ZN3lcd16TWI_TransmitDataEhh+0x26>
	TWI_CheckStatusRegister(StatusCode);	// works!!
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	6c 81       	ldd	r22, Y+4	; 0x04
     d6e:	83 df       	rcall	.-250    	; 0xc76 <_ZN3lcd23TWI_CheckStatusRegisterEh>

}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <_ZN3lcd4ShowEPh>:


void lcd::Show(unsigned char* text){
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	00 d0       	rcall	.+0      	; 0xd84 <_ZN3lcd4ShowEPh+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <_ZN3lcd4ShowEPh+0x8>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN3lcd4ShowEPh+0xa>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03
     d90:	7e 83       	std	Y+6, r23	; 0x06
     d92:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_StartCommunication();
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	aa df       	rcall	.-172    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	
	TWI_TransmitData( SLA, TW_MT_SLA_ACK );
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	48 e1       	ldi	r20, 0x18	; 24
     da0:	6c e7       	ldi	r22, 0x7C	; 124
     da2:	c5 df       	rcall	.-118    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData( SEND_DATA, TW_MT_DATA_ACK );
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	48 e2       	ldi	r20, 0x28	; 40
     daa:	60 e4       	ldi	r22, 0x40	; 64
     dac:	c0 df       	rcall	.-128    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	for( int valN = 0; valN < LINE_SIZE; valN++ ){
     dae:	1a 82       	std	Y+2, r1	; 0x02
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	13 c0       	rjmp	.+38     	; 0xdda <_ZN3lcd4ShowEPh+0x5c>
		TWI_TransmitData( *text, TW_MT_DATA_ACK );
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	fc 01       	movw	r30, r24
     dba:	20 81       	ld	r18, Z
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	48 e2       	ldi	r20, 0x28	; 40
     dc2:	62 2f       	mov	r22, r18
     dc4:	b4 df       	rcall	.-152    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
		++text;
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_StartCommunication();
	
	TWI_TransmitData( SLA, TW_MT_SLA_ACK );
	TWI_TransmitData( SEND_DATA, TW_MT_DATA_ACK );
	for( int valN = 0; valN < LINE_SIZE; valN++ ){
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	9a 83       	std	Y+2, r25	; 0x02
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	40 97       	sbiw	r24, 0x10	; 16
     de0:	4c f3       	brlt	.-46     	; 0xdb4 <_ZN3lcd4ShowEPh+0x36>
		TWI_TransmitData( *text, TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	72 df       	rcall	.-284    	; 0xccc <_ZN3lcd8TWI_STOPEv>
	
}
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <_ZN3lcd11SelectLine1Ev>:


void lcd::SelectLine1(void){
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <_ZN3lcd11SelectLine1Ev+0x6>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_StartCommunication();
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	70 df       	rcall	.-288    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	48 e1       	ldi	r20, 0x18	; 24
     e14:	6c e7       	ldi	r22, 0x7C	; 124
     e16:	8b df       	rcall	.-234    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	48 e2       	ldi	r20, 0x28	; 40
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	86 df       	rcall	.-244    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(LINE_1,TW_MT_DATA_ACK);
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	48 e2       	ldi	r20, 0x28	; 40
     e28:	60 e8       	ldi	r22, 0x80	; 128
     e2a:	81 df       	rcall	.-254    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	
	TWI_STOP();
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	4d df       	rcall	.-358    	; 0xccc <_ZN3lcd8TWI_STOPEv>
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <_ZN3lcd11SelectLine2Ev>:


void lcd::SelectLine2(void){
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	00 d0       	rcall	.+0      	; 0xe42 <_ZN3lcd11SelectLine2Ev+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_StartCommunication();
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	4f df       	rcall	.-354    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	48 e1       	ldi	r20, 0x18	; 24
     e56:	6c e7       	ldi	r22, 0x7C	; 124
     e58:	6a df       	rcall	.-300    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	48 e2       	ldi	r20, 0x28	; 40
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	65 df       	rcall	.-310    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(LINE_2,TW_MT_DATA_ACK);
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	48 e2       	ldi	r20, 0x28	; 40
     e6a:	60 ec       	ldi	r22, 0xC0	; 192
     e6c:	60 df       	rcall	.-320    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	
	TWI_STOP();
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	2c df       	rcall	.-424    	; 0xccc <_ZN3lcd8TWI_STOPEv>
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	60 97       	sbiw	r28, 0x10	; 16
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	98 8b       	std	Y+16, r25	; 0x10
     e94:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_StartCommunication();
     e96:	8f 85       	ldd	r24, Y+15	; 0x0f
     e98:	98 89       	ldd	r25, Y+16	; 0x10
     e9a:	29 df       	rcall	.-430    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
     e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9e:	98 89       	ldd	r25, Y+16	; 0x10
     ea0:	48 e1       	ldi	r20, 0x18	; 24
     ea2:	6c e7       	ldi	r22, 0x7C	; 124
     ea4:	44 df       	rcall	.-376    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);;
     ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea8:	98 89       	ldd	r25, Y+16	; 0x10
     eaa:	48 e2       	ldi	r20, 0x28	; 40
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	3f df       	rcall	.-386    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x38,TW_MT_DATA_ACK);		//go to instructino table 0
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	98 89       	ldd	r25, Y+16	; 0x10
     eb4:	48 e2       	ldi	r20, 0x28	; 40
     eb6:	68 e3       	ldi	r22, 0x38	; 56
     eb8:	3a df       	rcall	.-396    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x40,TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
     eba:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebc:	98 89       	ldd	r25, Y+16	; 0x10
     ebe:	48 e2       	ldi	r20, 0x28	; 40
     ec0:	60 e4       	ldi	r22, 0x40	; 64
     ec2:	35 df       	rcall	.-406    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_STOP();
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	01 df       	rcall	.-510    	; 0xccc <_ZN3lcd8TWI_STOPEv>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e2       	ldi	r26, 0x20	; 32
     ed0:	b1 e4       	ldi	r27, 0x41	; 65
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	ab 83       	std	Y+3, r26	; 0x03
     ed8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a e7       	ldi	r20, 0x7A	; 122
     ee0:	53 e4       	ldi	r21, 0x43	; 67
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	af 83       	std	Y+7, r26	; 0x07
     ef8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	6d 81       	ldd	r22, Y+5	; 0x05
     f04:	7e 81       	ldd	r23, Y+6	; 0x06
     f06:	8f 81       	ldd	r24, Y+7	; 0x07
     f08:	98 85       	ldd	r25, Y+8	; 0x08
     f0a:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9a 87       	std	Y+10, r25	; 0x0a
     f18:	89 87       	std	Y+9, r24	; 0x09
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	4f e7       	ldi	r20, 0x7F	; 127
     f22:	57 e4       	ldi	r21, 0x47	; 71
     f24:	6d 81       	ldd	r22, Y+5	; 0x05
     f26:	7e 81       	ldd	r23, Y+6	; 0x06
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	98 85       	ldd	r25, Y+8	; 0x08
     f2c:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
     f30:	18 16       	cp	r1, r24
     f32:	4c f5       	brge	.+82     	; 0xf86 <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	69 81       	ldd	r22, Y+1	; 0x01
     f3e:	7a 81       	ldd	r23, Y+2	; 0x02
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9a 87       	std	Y+10, r25	; 0x0a
     f5a:	89 87       	std	Y+9, r24	; 0x09
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <_ZN3lcd5CGRAMEv+0xfe>
     f5e:	89 e1       	ldi	r24, 0x19	; 25
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	8b 87       	std	Y+11, r24	; 0x0b
     f66:	8b 85       	ldd	r24, Y+11	; 0x0b
     f68:	9c 85       	ldd	r25, Y+12	; 0x0c
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <_ZN3lcd5CGRAMEv+0xec>
     f6e:	9c 87       	std	Y+12, r25	; 0x0c
     f70:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9a 87       	std	Y+10, r25	; 0x0a
     f7a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	89 2b       	or	r24, r25
     f82:	69 f7       	brne	.-38     	; 0xf5e <_ZN3lcd5CGRAMEv+0xe0>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	6d 81       	ldd	r22, Y+5	; 0x05
     f88:	7e 81       	ldd	r23, Y+6	; 0x06
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	98 85       	ldd	r25, Y+8	; 0x08
     f8e:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9a 87       	std	Y+10, r25	; 0x0a
     f98:	89 87       	std	Y+9, r24	; 0x09
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	9e 87       	std	Y+14, r25	; 0x0e
     fa0:	8d 87       	std	Y+13, r24	; 0x0d
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <_ZN3lcd5CGRAMEv+0x128>
     faa:	9e 87       	std	Y+14, r25	; 0x0e
     fac:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_StartCommunication();
     fae:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb0:	98 89       	ldd	r25, Y+16	; 0x10
     fb2:	9d de       	rcall	.-710    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
     fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb6:	98 89       	ldd	r25, Y+16	; 0x10
     fb8:	48 e1       	ldi	r20, 0x18	; 24
     fba:	6c e7       	ldi	r22, 0x7C	; 124
     fbc:	b8 de       	rcall	.-656    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
     fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc0:	98 89       	ldd	r25, Y+16	; 0x10
     fc2:	48 e2       	ldi	r20, 0x28	; 40
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	b3 de       	rcall	.-666    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);		//write to first CGRAM address
     fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fca:	98 89       	ldd	r25, Y+16	; 0x10
     fcc:	48 e2       	ldi	r20, 0x28	; 40
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	ae de       	rcall	.-676    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x1E,TW_MT_DATA_ACK);
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	98 89       	ldd	r25, Y+16	; 0x10
     fd6:	48 e2       	ldi	r20, 0x28	; 40
     fd8:	6e e1       	ldi	r22, 0x1E	; 30
     fda:	a9 de       	rcall	.-686    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x18,TW_MT_DATA_ACK);
     fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fde:	98 89       	ldd	r25, Y+16	; 0x10
     fe0:	48 e2       	ldi	r20, 0x28	; 40
     fe2:	68 e1       	ldi	r22, 0x18	; 24
     fe4:	a4 de       	rcall	.-696    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x14,TW_MT_DATA_ACK);
     fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe8:	98 89       	ldd	r25, Y+16	; 0x10
     fea:	48 e2       	ldi	r20, 0x28	; 40
     fec:	64 e1       	ldi	r22, 0x14	; 20
     fee:	9f de       	rcall	.-706    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x12,TW_MT_DATA_ACK);
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	98 89       	ldd	r25, Y+16	; 0x10
     ff4:	48 e2       	ldi	r20, 0x28	; 40
     ff6:	62 e1       	ldi	r22, 0x12	; 18
     ff8:	9a de       	rcall	.-716    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);
     ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffc:	98 89       	ldd	r25, Y+16	; 0x10
     ffe:	48 e2       	ldi	r20, 0x28	; 40
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	95 de       	rcall	.-726    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);
    1004:	8f 85       	ldd	r24, Y+15	; 0x0f
    1006:	98 89       	ldd	r25, Y+16	; 0x10
    1008:	48 e2       	ldi	r20, 0x28	; 40
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	90 de       	rcall	.-736    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x00,TW_MT_DATA_ACK);		//8 bytes per character
    100e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1010:	98 89       	ldd	r25, Y+16	; 0x10
    1012:	48 e2       	ldi	r20, 0x28	; 40
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	8b de       	rcall	.-746    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    1018:	8f 85       	ldd	r24, Y+15	; 0x0f
    101a:	98 89       	ldd	r25, Y+16	; 0x10
    101c:	57 de       	rcall	.-850    	; 0xccc <_ZN3lcd8TWI_STOPEv>
}
    101e:	60 96       	adiw	r28, 0x10	; 16
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_ZN3lcd8init_LCDEv>:

void lcd::init_LCD()
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	ea 97       	sbiw	r28, 0x3a	; 58
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	9a af       	std	Y+58, r25	; 0x3a
    1046:	89 af       	std	Y+57, r24	; 0x39
	TWI_StartCommunication();
    1048:	89 ad       	ldd	r24, Y+57	; 0x39
    104a:	9a ad       	ldd	r25, Y+58	; 0x3a
    104c:	50 de       	rcall	.-864    	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
    104e:	89 ad       	ldd	r24, Y+57	; 0x39
    1050:	9a ad       	ldd	r25, Y+58	; 0x3a
    1052:	48 e1       	ldi	r20, 0x18	; 24
    1054:	6c e7       	ldi	r22, 0x7C	; 124
    1056:	6b de       	rcall	.-810    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
    1058:	89 ad       	ldd	r24, Y+57	; 0x39
    105a:	9a ad       	ldd	r25, Y+58	; 0x3a
    105c:	48 e2       	ldi	r20, 0x28	; 40
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	66 de       	rcall	.-820    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x38,TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1062:	89 ad       	ldd	r24, Y+57	; 0x39
    1064:	9a ad       	ldd	r25, Y+58	; 0x3a
    1066:	48 e2       	ldi	r20, 0x28	; 40
    1068:	68 e3       	ldi	r22, 0x38	; 56
    106a:	61 de       	rcall	.-830    	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a8 ec       	ldi	r26, 0xC8	; 200
    1072:	b2 e4       	ldi	r27, 0x42	; 66
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	ab 83       	std	Y+3, r26	; 0x03
    107a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a e7       	ldi	r20, 0x7A	; 122
    1082:	53 e4       	ldi	r21, 0x43	; 67
    1084:	69 81       	ldd	r22, Y+1	; 0x01
    1086:	7a 81       	ldd	r23, Y+2	; 0x02
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	af 83       	std	Y+7, r26	; 0x07
    109a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	6d 81       	ldd	r22, Y+5	; 0x05
    10a6:	7e 81       	ldd	r23, Y+6	; 0x06
    10a8:	8f 81       	ldd	r24, Y+7	; 0x07
    10aa:	98 85       	ldd	r25, Y+8	; 0x08
    10ac:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	2c f4       	brge	.+10     	; 0x10be <_ZN3lcd8init_LCDEv+0x8e>
		__ticks = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9a 87       	std	Y+10, r25	; 0x0a
    10ba:	89 87       	std	Y+9, r24	; 0x09
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <_ZN3lcd8init_LCDEv+0x10c>
	else if (__tmp > 65535)
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	57 e4       	ldi	r21, 0x47	; 71
    10c6:	6d 81       	ldd	r22, Y+5	; 0x05
    10c8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ca:	8f 81       	ldd	r24, Y+7	; 0x07
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f5       	brge	.+82     	; 0x1128 <_ZN3lcd8init_LCDEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e2       	ldi	r20, 0x20	; 32
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	69 81       	ldd	r22, Y+1	; 0x01
    10e0:	7a 81       	ldd	r23, Y+2	; 0x02
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9a 87       	std	Y+10, r25	; 0x0a
    10fc:	89 87       	std	Y+9, r24	; 0x09
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <_ZN3lcd8init_LCDEv+0xee>
    1100:	89 e1       	ldi	r24, 0x19	; 25
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	8b 87       	std	Y+11, r24	; 0x0b
    1108:	8b 85       	ldd	r24, Y+11	; 0x0b
    110a:	9c 85       	ldd	r25, Y+12	; 0x0c
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <_ZN3lcd8init_LCDEv+0xdc>
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9a 87       	std	Y+10, r25	; 0x0a
    111c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	89 2b       	or	r24, r25
    1124:	69 f7       	brne	.-38     	; 0x1100 <_ZN3lcd8init_LCDEv+0xd0>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <_ZN3lcd8init_LCDEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1128:	6d 81       	ldd	r22, Y+5	; 0x05
    112a:	7e 81       	ldd	r23, Y+6	; 0x06
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9a 87       	std	Y+10, r25	; 0x0a
    113a:	89 87       	std	Y+9, r24	; 0x09
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	9e 87       	std	Y+14, r25	; 0x0e
    1142:	8d 87       	std	Y+13, r24	; 0x0d
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <_ZN3lcd8init_LCDEv+0x118>
    114c:	9e 87       	std	Y+14, r25	; 0x0e
    114e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TransmitData(0x39,TW_MT_DATA_ACK);						// Use Extended instruction set
    1150:	89 ad       	ldd	r24, Y+57	; 0x39
    1152:	9a ad       	ldd	r25, Y+58	; 0x3a
    1154:	48 e2       	ldi	r20, 0x28	; 40
    1156:	69 e3       	ldi	r22, 0x39	; 57
    1158:	ea dd       	rcall	.-1068   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a8 ec       	ldi	r26, 0xC8	; 200
    1160:	b2 e4       	ldi	r27, 0x42	; 66
    1162:	8f 87       	std	Y+15, r24	; 0x0f
    1164:	98 8b       	std	Y+16, r25	; 0x10
    1166:	a9 8b       	std	Y+17, r26	; 0x11
    1168:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a e7       	ldi	r20, 0x7A	; 122
    1170:	53 e4       	ldi	r21, 0x43	; 67
    1172:	6f 85       	ldd	r22, Y+15	; 0x0f
    1174:	78 89       	ldd	r23, Y+16	; 0x10
    1176:	89 89       	ldd	r24, Y+17	; 0x11
    1178:	9a 89       	ldd	r25, Y+18	; 0x12
    117a:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	8b 8b       	std	Y+19, r24	; 0x13
    1184:	9c 8b       	std	Y+20, r25	; 0x14
    1186:	ad 8b       	std	Y+21, r26	; 0x15
    1188:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	6b 89       	ldd	r22, Y+19	; 0x13
    1194:	7c 89       	ldd	r23, Y+20	; 0x14
    1196:	8d 89       	ldd	r24, Y+21	; 0x15
    1198:	9e 89       	ldd	r25, Y+22	; 0x16
    119a:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
    119e:	88 23       	and	r24, r24
    11a0:	2c f4       	brge	.+10     	; 0x11ac <_ZN3lcd8init_LCDEv+0x17c>
		__ticks = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	98 8f       	std	Y+24, r25	; 0x18
    11a8:	8f 8b       	std	Y+23, r24	; 0x17
    11aa:	3f c0       	rjmp	.+126    	; 0x122a <_ZN3lcd8init_LCDEv+0x1fa>
	else if (__tmp > 65535)
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	6b 89       	ldd	r22, Y+19	; 0x13
    11b6:	7c 89       	ldd	r23, Y+20	; 0x14
    11b8:	8d 89       	ldd	r24, Y+21	; 0x15
    11ba:	9e 89       	ldd	r25, Y+22	; 0x16
    11bc:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	4c f5       	brge	.+82     	; 0x1216 <_ZN3lcd8init_LCDEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    11ce:	78 89       	ldd	r23, Y+16	; 0x10
    11d0:	89 89       	ldd	r24, Y+17	; 0x11
    11d2:	9a 89       	ldd	r25, Y+18	; 0x12
    11d4:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	98 8f       	std	Y+24, r25	; 0x18
    11ea:	8f 8b       	std	Y+23, r24	; 0x17
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <_ZN3lcd8init_LCDEv+0x1dc>
    11ee:	89 e1       	ldi	r24, 0x19	; 25
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9a 8f       	std	Y+26, r25	; 0x1a
    11f4:	89 8f       	std	Y+25, r24	; 0x19
    11f6:	89 8d       	ldd	r24, Y+25	; 0x19
    11f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <_ZN3lcd8init_LCDEv+0x1ca>
    11fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1200:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1202:	8f 89       	ldd	r24, Y+23	; 0x17
    1204:	98 8d       	ldd	r25, Y+24	; 0x18
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	98 8f       	std	Y+24, r25	; 0x18
    120a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120c:	8f 89       	ldd	r24, Y+23	; 0x17
    120e:	98 8d       	ldd	r25, Y+24	; 0x18
    1210:	89 2b       	or	r24, r25
    1212:	69 f7       	brne	.-38     	; 0x11ee <_ZN3lcd8init_LCDEv+0x1be>
    1214:	14 c0       	rjmp	.+40     	; 0x123e <_ZN3lcd8init_LCDEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	6b 89       	ldd	r22, Y+19	; 0x13
    1218:	7c 89       	ldd	r23, Y+20	; 0x14
    121a:	8d 89       	ldd	r24, Y+21	; 0x15
    121c:	9e 89       	ldd	r25, Y+22	; 0x16
    121e:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	98 8f       	std	Y+24, r25	; 0x18
    1228:	8f 8b       	std	Y+23, r24	; 0x17
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	9c 8f       	std	Y+28, r25	; 0x1c
    1230:	8b 8f       	std	Y+27, r24	; 0x1b
    1232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <_ZN3lcd8init_LCDEv+0x206>
    123a:	9c 8f       	std	Y+28, r25	; 0x1c
    123c:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TransmitData(0x14,TW_MT_DATA_ACK);						// Set Internal Osc Freq
    123e:	89 ad       	ldd	r24, Y+57	; 0x39
    1240:	9a ad       	ldd	r25, Y+58	; 0x3a
    1242:	48 e2       	ldi	r20, 0x28	; 40
    1244:	64 e1       	ldi	r22, 0x14	; 20
    1246:	73 dd       	rcall	.-1306   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x78,TW_MT_DATA_ACK);						// Contrast Set
    1248:	89 ad       	ldd	r24, Y+57	; 0x39
    124a:	9a ad       	ldd	r25, Y+58	; 0x3a
    124c:	48 e2       	ldi	r20, 0x28	; 40
    124e:	68 e7       	ldi	r22, 0x78	; 120
    1250:	6e dd       	rcall	.-1316   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x5D,TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1252:	89 ad       	ldd	r24, Y+57	; 0x39
    1254:	9a ad       	ldd	r25, Y+58	; 0x3a
    1256:	48 e2       	ldi	r20, 0x28	; 40
    1258:	6d e5       	ldi	r22, 0x5D	; 93
    125a:	69 dd       	rcall	.-1326   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x6D,TW_MT_DATA_ACK);						// Follower Control
    125c:	89 ad       	ldd	r24, Y+57	; 0x39
    125e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1260:	48 e2       	ldi	r20, 0x28	; 40
    1262:	6d e6       	ldi	r22, 0x6D	; 109
    1264:	64 dd       	rcall	.-1336   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x0C,TW_MT_DATA_ACK);						// Display On/Off
    1266:	89 ad       	ldd	r24, Y+57	; 0x39
    1268:	9a ad       	ldd	r25, Y+58	; 0x3a
    126a:	48 e2       	ldi	r20, 0x28	; 40
    126c:	6c e0       	ldi	r22, 0x0C	; 12
    126e:	5f dd       	rcall	.-1346   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);						// Clear Display
    1270:	89 ad       	ldd	r24, Y+57	; 0x39
    1272:	9a ad       	ldd	r25, Y+58	; 0x3a
    1274:	48 e2       	ldi	r20, 0x28	; 40
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	5a dd       	rcall	.-1356   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x06,TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    127a:	89 ad       	ldd	r24, Y+57	; 0x39
    127c:	9a ad       	ldd	r25, Y+58	; 0x3a
    127e:	48 e2       	ldi	r20, 0x28	; 40
    1280:	66 e0       	ldi	r22, 0x06	; 6
    1282:	55 dd       	rcall	.-1366   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x0E,TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    1284:	89 ad       	ldd	r24, Y+57	; 0x39
    1286:	9a ad       	ldd	r25, Y+58	; 0x3a
    1288:	48 e2       	ldi	r20, 0x28	; 40
    128a:	6e e0       	ldi	r22, 0x0E	; 14
    128c:	50 dd       	rcall	.-1376   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a8 ec       	ldi	r26, 0xC8	; 200
    1294:	b2 e4       	ldi	r27, 0x42	; 66
    1296:	8d 8f       	std	Y+29, r24	; 0x1d
    1298:	9e 8f       	std	Y+30, r25	; 0x1e
    129a:	af 8f       	std	Y+31, r26	; 0x1f
    129c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ac:	98 a1       	ldd	r25, Y+32	; 0x20
    12ae:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	89 a3       	std	Y+33, r24	; 0x21
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	ab a3       	std	Y+35, r26	; 0x23
    12bc:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	69 a1       	ldd	r22, Y+33	; 0x21
    12c8:	7a a1       	ldd	r23, Y+34	; 0x22
    12ca:	8b a1       	ldd	r24, Y+35	; 0x23
    12cc:	9c a1       	ldd	r25, Y+36	; 0x24
    12ce:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <_ZN3lcd8init_LCDEv+0x2b0>
		__ticks = 1;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9e a3       	std	Y+38, r25	; 0x26
    12dc:	8d a3       	std	Y+37, r24	; 0x25
    12de:	3f c0       	rjmp	.+126    	; 0x135e <_ZN3lcd8init_LCDEv+0x32e>
	else if (__tmp > 65535)
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	69 a1       	ldd	r22, Y+33	; 0x21
    12ea:	7a a1       	ldd	r23, Y+34	; 0x22
    12ec:	8b a1       	ldd	r24, Y+35	; 0x23
    12ee:	9c a1       	ldd	r25, Y+36	; 0x24
    12f0:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	4c f5       	brge	.+82     	; 0x134a <_ZN3lcd8init_LCDEv+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1302:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1306:	98 a1       	ldd	r25, Y+32	; 0x20
    1308:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e a3       	std	Y+38, r25	; 0x26
    131e:	8d a3       	std	Y+37, r24	; 0x25
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <_ZN3lcd8init_LCDEv+0x310>
    1322:	89 e1       	ldi	r24, 0x19	; 25
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	98 a7       	std	Y+40, r25	; 0x28
    1328:	8f a3       	std	Y+39, r24	; 0x27
    132a:	8f a1       	ldd	r24, Y+39	; 0x27
    132c:	98 a5       	ldd	r25, Y+40	; 0x28
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <_ZN3lcd8init_LCDEv+0x2fe>
    1332:	98 a7       	std	Y+40, r25	; 0x28
    1334:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	9e a3       	std	Y+38, r25	; 0x26
    133e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1340:	8d a1       	ldd	r24, Y+37	; 0x25
    1342:	9e a1       	ldd	r25, Y+38	; 0x26
    1344:	89 2b       	or	r24, r25
    1346:	69 f7       	brne	.-38     	; 0x1322 <_ZN3lcd8init_LCDEv+0x2f2>
    1348:	14 c0       	rjmp	.+40     	; 0x1372 <_ZN3lcd8init_LCDEv+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134a:	69 a1       	ldd	r22, Y+33	; 0x21
    134c:	7a a1       	ldd	r23, Y+34	; 0x22
    134e:	8b a1       	ldd	r24, Y+35	; 0x23
    1350:	9c a1       	ldd	r25, Y+36	; 0x24
    1352:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9e a3       	std	Y+38, r25	; 0x26
    135c:	8d a3       	std	Y+37, r24	; 0x25
    135e:	8d a1       	ldd	r24, Y+37	; 0x25
    1360:	9e a1       	ldd	r25, Y+38	; 0x26
    1362:	9a a7       	std	Y+42, r25	; 0x2a
    1364:	89 a7       	std	Y+41, r24	; 0x29
    1366:	89 a5       	ldd	r24, Y+41	; 0x29
    1368:	9a a5       	ldd	r25, Y+42	; 0x2a
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <_ZN3lcd8init_LCDEv+0x33a>
    136e:	9a a7       	std	Y+42, r25	; 0x2a
    1370:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    1372:	89 ad       	ldd	r24, Y+57	; 0x39
    1374:	9a ad       	ldd	r25, Y+58	; 0x3a
    1376:	aa dc       	rcall	.-1708   	; 0xccc <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    1378:	89 ad       	ldd	r24, Y+57	; 0x39
    137a:	9a ad       	ldd	r25, Y+58	; 0x3a
    137c:	80 dd       	rcall	.-1280   	; 0xe7e <_ZN3lcd5CGRAMEv>

	TWI_StartCommunication();
    137e:	89 ad       	ldd	r24, Y+57	; 0x39
    1380:	9a ad       	ldd	r25, Y+58	; 0x3a
    1382:	b5 dc       	rcall	.-1686   	; 0xcee <_ZN3lcd22TWI_StartCommunicationEv>
	TWI_TransmitData(SLA,TW_MT_SLA_ACK);
    1384:	89 ad       	ldd	r24, Y+57	; 0x39
    1386:	9a ad       	ldd	r25, Y+58	; 0x3a
    1388:	48 e1       	ldi	r20, 0x18	; 24
    138a:	6c e7       	ldi	r22, 0x7C	; 124
    138c:	d0 dc       	rcall	.-1632   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(SEND_COMMAND,TW_MT_DATA_ACK);
    138e:	89 ad       	ldd	r24, Y+57	; 0x39
    1390:	9a ad       	ldd	r25, Y+58	; 0x3a
    1392:	48 e2       	ldi	r20, 0x28	; 40
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	cb dc       	rcall	.-1642   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x39,TW_MT_DATA_ACK);
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	9a ad       	ldd	r25, Y+58	; 0x3a
    139c:	48 e2       	ldi	r20, 0x28	; 40
    139e:	69 e3       	ldi	r22, 0x39	; 57
    13a0:	c6 dc       	rcall	.-1652   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_TransmitData(0x01,TW_MT_DATA_ACK);
    13a2:	89 ad       	ldd	r24, Y+57	; 0x39
    13a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    13a6:	48 e2       	ldi	r20, 0x28	; 40
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	c1 dc       	rcall	.-1662   	; 0xd2e <_ZN3lcd16TWI_TransmitDataEhh>
	TWI_STOP();
    13ac:	89 ad       	ldd	r24, Y+57	; 0x39
    13ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    13b0:	8d dc       	rcall	.-1766   	; 0xccc <_ZN3lcd8TWI_STOPEv>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a8 ec       	ldi	r26, 0xC8	; 200
    13b8:	b2 e4       	ldi	r27, 0x42	; 66
    13ba:	8b a7       	std	Y+43, r24	; 0x2b
    13bc:	9c a7       	std	Y+44, r25	; 0x2c
    13be:	ad a7       	std	Y+45, r26	; 0x2d
    13c0:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a e7       	ldi	r20, 0x7A	; 122
    13c8:	53 e4       	ldi	r21, 0x43	; 67
    13ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    13cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    13ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d2:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8f a7       	std	Y+47, r24	; 0x2f
    13dc:	98 ab       	std	Y+48, r25	; 0x30
    13de:	a9 ab       	std	Y+49, r26	; 0x31
    13e0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	6f a5       	ldd	r22, Y+47	; 0x2f
    13ec:	78 a9       	ldd	r23, Y+48	; 0x30
    13ee:	89 a9       	ldd	r24, Y+49	; 0x31
    13f0:	9a a9       	ldd	r25, Y+50	; 0x32
    13f2:	0e 94 84 12 	call	0x2508	; 0x2508 <__cmpsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <_ZN3lcd8init_LCDEv+0x3d4>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c ab       	std	Y+52, r25	; 0x34
    1400:	8b ab       	std	Y+51, r24	; 0x33
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <_ZN3lcd8init_LCDEv+0x452>
	else if (__tmp > 65535)
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	6f a5       	ldd	r22, Y+47	; 0x2f
    140e:	78 a9       	ldd	r23, Y+48	; 0x30
    1410:	89 a9       	ldd	r24, Y+49	; 0x31
    1412:	9a a9       	ldd	r25, Y+50	; 0x32
    1414:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <_ZN3lcd8init_LCDEv+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	6b a5       	ldd	r22, Y+43	; 0x2b
    1426:	7c a5       	ldd	r23, Y+44	; 0x2c
    1428:	8d a5       	ldd	r24, Y+45	; 0x2d
    142a:	9e a5       	ldd	r25, Y+46	; 0x2e
    142c:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9c ab       	std	Y+52, r25	; 0x34
    1442:	8b ab       	std	Y+51, r24	; 0x33
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <_ZN3lcd8init_LCDEv+0x434>
    1446:	89 e1       	ldi	r24, 0x19	; 25
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9e ab       	std	Y+54, r25	; 0x36
    144c:	8d ab       	std	Y+53, r24	; 0x35
    144e:	8d a9       	ldd	r24, Y+53	; 0x35
    1450:	9e a9       	ldd	r25, Y+54	; 0x36
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <_ZN3lcd8init_LCDEv+0x422>
    1456:	9e ab       	std	Y+54, r25	; 0x36
    1458:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8b a9       	ldd	r24, Y+51	; 0x33
    145c:	9c a9       	ldd	r25, Y+52	; 0x34
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9c ab       	std	Y+52, r25	; 0x34
    1462:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8b a9       	ldd	r24, Y+51	; 0x33
    1466:	9c a9       	ldd	r25, Y+52	; 0x34
    1468:	89 2b       	or	r24, r25
    146a:	69 f7       	brne	.-38     	; 0x1446 <_ZN3lcd8init_LCDEv+0x416>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <_ZN3lcd8init_LCDEv+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1470:	78 a9       	ldd	r23, Y+48	; 0x30
    1472:	89 a9       	ldd	r24, Y+49	; 0x31
    1474:	9a a9       	ldd	r25, Y+50	; 0x32
    1476:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c ab       	std	Y+52, r25	; 0x34
    1480:	8b ab       	std	Y+51, r24	; 0x33
    1482:	8b a9       	ldd	r24, Y+51	; 0x33
    1484:	9c a9       	ldd	r25, Y+52	; 0x34
    1486:	98 af       	std	Y+56, r25	; 0x38
    1488:	8f ab       	std	Y+55, r24	; 0x37
    148a:	8f a9       	ldd	r24, Y+55	; 0x37
    148c:	98 ad       	ldd	r25, Y+56	; 0x38
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <_ZN3lcd8init_LCDEv+0x45e>
    1492:	98 af       	std	Y+56, r25	; 0x38
    1494:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    1496:	ea 96       	adiw	r28, 0x3a	; 58
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <_ZN3lcd15test_LCD_ScreenEv>:

void lcd::test_LCD_Screen(){
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	c0 54       	subi	r28, 0x40	; 64
    14b2:	d1 09       	sbc	r29, r1
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	9e 01       	movw	r18, r28
    14c0:	21 5c       	subi	r18, 0xC1	; 193
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	f9 01       	movw	r30, r18
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
	
	unsigned char text1[]={"-! TEST LINE 1 !"};
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	e7 e1       	ldi	r30, 0x17	; 23
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	de 01       	movw	r26, r28
    14d2:	5d 96       	adiw	r26, 0x1d	; 29
    14d4:	01 90       	ld	r0, Z+
    14d6:	0d 92       	st	X+, r0
    14d8:	8a 95       	dec	r24
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <_ZN3lcd15test_LCD_ScreenEv+0x2c>
	unsigned char text2[]={"! TEST LINE 2 !-"};
    14dc:	81 e1       	ldi	r24, 0x11	; 17
    14de:	e8 e2       	ldi	r30, 0x28	; 40
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	de 01       	movw	r26, r28
    14e4:	9e 96       	adiw	r26, 0x2e	; 46
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <_ZN3lcd15test_LCD_ScreenEv+0x3e>

	
	print(text1, LINE_TOP);
    14ee:	9e 01       	movw	r18, r28
    14f0:	23 5e       	subi	r18, 0xE3	; 227
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	ce 01       	movw	r24, r28
    14f6:	cf 96       	adiw	r24, 0x3f	; 63
    14f8:	fc 01       	movw	r30, r24
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	b9 01       	movw	r22, r18
    1502:	1c d1       	rcall	.+568    	; 0x173c <_ZN3lcd5printEPhh>
	print(text2, LINE_BOTTOM);
    1504:	9e 01       	movw	r18, r28
    1506:	22 5d       	subi	r18, 0xD2	; 210
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	ce 01       	movw	r24, r28
    150c:	cf 96       	adiw	r24, 0x3f	; 63
    150e:	fc 01       	movw	r30, r24
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	b9 01       	movw	r22, r18
    1518:	11 d1       	rcall	.+546    	; 0x173c <_ZN3lcd5printEPhh>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	aa e7       	ldi	r26, 0x7A	; 122
    1520:	b3 e4       	ldi	r27, 0x43	; 67
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	ab 83       	std	Y+3, r26	; 0x03
    1528:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a e7       	ldi	r20, 0x7A	; 122
    1530:	53 e4       	ldi	r21, 0x43	; 67
    1532:	69 81       	ldd	r22, Y+1	; 0x01
    1534:	7a 81       	ldd	r23, Y+2	; 0x02
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	af 83       	std	Y+7, r26	; 0x07
    1548:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	6d 81       	ldd	r22, Y+5	; 0x05
    1554:	7e 81       	ldd	r23, Y+6	; 0x06
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	d6 d7       	rcall	.+4012   	; 0x2508 <__cmpsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <_ZN3lcd15test_LCD_ScreenEv+0xc2>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9a 87       	std	Y+10, r25	; 0x0a
    1566:	89 87       	std	Y+9, r24	; 0x09
    1568:	3d c0       	rjmp	.+122    	; 0x15e4 <_ZN3lcd15test_LCD_ScreenEv+0x13c>
	else if (__tmp > 65535)
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	6d 81       	ldd	r22, Y+5	; 0x05
    1574:	7e 81       	ldd	r23, Y+6	; 0x06
    1576:	8f 81       	ldd	r24, Y+7	; 0x07
    1578:	98 85       	ldd	r25, Y+8	; 0x08
    157a:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    157e:	18 16       	cp	r1, r24
    1580:	44 f5       	brge	.+80     	; 0x15d2 <_ZN3lcd15test_LCD_ScreenEv+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	7a 81       	ldd	r23, Y+2	; 0x02
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	b8 d7       	rcall	.+3952   	; 0x2510 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9a 87       	std	Y+10, r25	; 0x0a
    15a6:	89 87       	std	Y+9, r24	; 0x09
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <_ZN3lcd15test_LCD_ScreenEv+0x120>
    15aa:	89 e1       	ldi	r24, 0x19	; 25
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9c 87       	std	Y+12, r25	; 0x0c
    15b0:	8b 87       	std	Y+11, r24	; 0x0b
    15b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <_ZN3lcd15test_LCD_ScreenEv+0x10e>
    15ba:	9c 87       	std	Y+12, r25	; 0x0c
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9a 87       	std	Y+10, r25	; 0x0a
    15c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	89 2b       	or	r24, r25
    15ce:	69 f7       	brne	.-38     	; 0x15aa <_ZN3lcd15test_LCD_ScreenEv+0x102>
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <_ZN3lcd15test_LCD_ScreenEv+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6d 81       	ldd	r22, Y+5	; 0x05
    15d4:	7e 81       	ldd	r23, Y+6	; 0x06
    15d6:	8f 81       	ldd	r24, Y+7	; 0x07
    15d8:	98 85       	ldd	r25, Y+8	; 0x08
    15da:	9a d7       	rcall	.+3892   	; 0x2510 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9a 87       	std	Y+10, r25	; 0x0a
    15e2:	89 87       	std	Y+9, r24	; 0x09
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	9e 87       	std	Y+14, r25	; 0x0e
    15ea:	8d 87       	std	Y+13, r24	; 0x0d
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <_ZN3lcd15test_LCD_ScreenEv+0x148>
    15f4:	9e 87       	std	Y+14, r25	; 0x0e
    15f6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	print(text1, LINE_BOTTOM);
    15f8:	9e 01       	movw	r18, r28
    15fa:	23 5e       	subi	r18, 0xE3	; 227
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	ce 01       	movw	r24, r28
    1600:	cf 96       	adiw	r24, 0x3f	; 63
    1602:	fc 01       	movw	r30, r24
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	b9 01       	movw	r22, r18
    160c:	97 d0       	rcall	.+302    	; 0x173c <_ZN3lcd5printEPhh>
	print(text2, LINE_TOP);
    160e:	9e 01       	movw	r18, r28
    1610:	22 5d       	subi	r18, 0xD2	; 210
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	ce 01       	movw	r24, r28
    1616:	cf 96       	adiw	r24, 0x3f	; 63
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	b9 01       	movw	r22, r18
    1622:	8c d0       	rcall	.+280    	; 0x173c <_ZN3lcd5printEPhh>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	aa e7       	ldi	r26, 0x7A	; 122
    162a:	b3 e4       	ldi	r27, 0x43	; 67
    162c:	8f 87       	std	Y+15, r24	; 0x0f
    162e:	98 8b       	std	Y+16, r25	; 0x10
    1630:	a9 8b       	std	Y+17, r26	; 0x11
    1632:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a e7       	ldi	r20, 0x7A	; 122
    163a:	53 e4       	ldi	r21, 0x43	; 67
    163c:	6f 85       	ldd	r22, Y+15	; 0x0f
    163e:	78 89       	ldd	r23, Y+16	; 0x10
    1640:	89 89       	ldd	r24, Y+17	; 0x11
    1642:	9a 89       	ldd	r25, Y+18	; 0x12
    1644:	e2 d7       	rcall	.+4036   	; 0x260a <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	ad 8b       	std	Y+21, r26	; 0x15
    1650:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	6b 89       	ldd	r22, Y+19	; 0x13
    165c:	7c 89       	ldd	r23, Y+20	; 0x14
    165e:	8d 89       	ldd	r24, Y+21	; 0x15
    1660:	9e 89       	ldd	r25, Y+22	; 0x16
    1662:	52 d7       	rcall	.+3748   	; 0x2508 <__cmpsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <_ZN3lcd15test_LCD_ScreenEv+0x1ca>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	98 8f       	std	Y+24, r25	; 0x18
    166e:	8f 8b       	std	Y+23, r24	; 0x17
    1670:	3b c0       	rjmp	.+118    	; 0x16e8 <_ZN3lcd15test_LCD_ScreenEv+0x240>
	else if (__tmp > 65535)
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	6b 89       	ldd	r22, Y+19	; 0x13
    167c:	7c 89       	ldd	r23, Y+20	; 0x14
    167e:	8d 89       	ldd	r24, Y+21	; 0x15
    1680:	9e 89       	ldd	r25, Y+22	; 0x16
    1682:	bf d7       	rcall	.+3966   	; 0x2602 <__gesf2>
    1684:	18 16       	cp	r1, r24
    1686:	3c f5       	brge	.+78     	; 0x16d6 <_ZN3lcd15test_LCD_ScreenEv+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	6f 85       	ldd	r22, Y+15	; 0x0f
    1692:	78 89       	ldd	r23, Y+16	; 0x10
    1694:	89 89       	ldd	r24, Y+17	; 0x11
    1696:	9a 89       	ldd	r25, Y+18	; 0x12
    1698:	b8 d7       	rcall	.+3952   	; 0x260a <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	36 d7       	rcall	.+3692   	; 0x2510 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	98 8f       	std	Y+24, r25	; 0x18
    16aa:	8f 8b       	std	Y+23, r24	; 0x17
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <_ZN3lcd15test_LCD_ScreenEv+0x224>
    16ae:	89 e1       	ldi	r24, 0x19	; 25
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9a 8f       	std	Y+26, r25	; 0x1a
    16b4:	89 8f       	std	Y+25, r24	; 0x19
    16b6:	89 8d       	ldd	r24, Y+25	; 0x19
    16b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <_ZN3lcd15test_LCD_ScreenEv+0x212>
    16be:	9a 8f       	std	Y+26, r25	; 0x1a
    16c0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	98 8f       	std	Y+24, r25	; 0x18
    16ca:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	89 2b       	or	r24, r25
    16d2:	69 f7       	brne	.-38     	; 0x16ae <_ZN3lcd15test_LCD_ScreenEv+0x206>
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <_ZN3lcd15test_LCD_ScreenEv+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	6b 89       	ldd	r22, Y+19	; 0x13
    16d8:	7c 89       	ldd	r23, Y+20	; 0x14
    16da:	8d 89       	ldd	r24, Y+21	; 0x15
    16dc:	9e 89       	ldd	r25, Y+22	; 0x16
    16de:	18 d7       	rcall	.+3632   	; 0x2510 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	98 8f       	std	Y+24, r25	; 0x18
    16e6:	8f 8b       	std	Y+23, r24	; 0x17
    16e8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ea:	98 8d       	ldd	r25, Y+24	; 0x18
    16ec:	9c 8f       	std	Y+28, r25	; 0x1c
    16ee:	8b 8f       	std	Y+27, r24	; 0x1b
    16f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <_ZN3lcd15test_LCD_ScreenEv+0x24c>
    16f8:	9c 8f       	std	Y+28, r25	; 0x1c
    16fa:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	print(text1, LINE_TOP);
    16fc:	9e 01       	movw	r18, r28
    16fe:	23 5e       	subi	r18, 0xE3	; 227
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	ce 01       	movw	r24, r28
    1704:	cf 96       	adiw	r24, 0x3f	; 63
    1706:	fc 01       	movw	r30, r24
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	b9 01       	movw	r22, r18
    1710:	15 d0       	rcall	.+42     	; 0x173c <_ZN3lcd5printEPhh>
	print(text2, LINE_BOTTOM);
    1712:	9e 01       	movw	r18, r28
    1714:	22 5d       	subi	r18, 0xD2	; 210
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	ce 01       	movw	r24, r28
    171a:	cf 96       	adiw	r24, 0x3f	; 63
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	b9 01       	movw	r22, r18
    1726:	0a d0       	rcall	.+20     	; 0x173c <_ZN3lcd5printEPhh>

}
    1728:	c0 5c       	subi	r28, 0xC0	; 192
    172a:	df 4f       	sbci	r29, 0xFF	; 255
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	a1 97       	sbiw	r28, 0x21	; 33
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	9e 8f       	std	Y+30, r25	; 0x1e
    1752:	8d 8f       	std	Y+29, r24	; 0x1d
    1754:	78 a3       	std	Y+32, r23	; 0x20
    1756:	6f 8f       	std	Y+31, r22	; 0x1f
    1758:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LINE_TOP ){
    175a:	89 a1       	ldd	r24, Y+33	; 0x21
    175c:	88 23       	and	r24, r24
    175e:	09 f0       	breq	.+2      	; 0x1762 <_ZN3lcd5printEPhh+0x26>
    1760:	76 c0       	rjmp	.+236    	; 0x184e <_ZN3lcd5printEPhh+0x112>
		SelectLine1();
    1762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1764:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1766:	49 db       	rcall	.-2414   	; 0xdfa <_ZN3lcd11SelectLine1Ev>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e2       	ldi	r26, 0x20	; 32
    176e:	b1 e4       	ldi	r27, 0x41	; 65
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	ab 83       	std	Y+3, r26	; 0x03
    1776:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	69 81       	ldd	r22, Y+1	; 0x01
    1782:	7a 81       	ldd	r23, Y+2	; 0x02
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	40 d7       	rcall	.+3712   	; 0x260a <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	af 83       	std	Y+7, r26	; 0x07
    1794:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	6d 81       	ldd	r22, Y+5	; 0x05
    17a0:	7e 81       	ldd	r23, Y+6	; 0x06
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	b0 d6       	rcall	.+3424   	; 0x2508 <__cmpsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <_ZN3lcd5printEPhh+0x7a>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9a 87       	std	Y+10, r25	; 0x0a
    17b2:	89 87       	std	Y+9, r24	; 0x09
    17b4:	3b c0       	rjmp	.+118    	; 0x182c <_ZN3lcd5printEPhh+0xf0>
	else if (__tmp > 65535)
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	6d 81       	ldd	r22, Y+5	; 0x05
    17c0:	7e 81       	ldd	r23, Y+6	; 0x06
    17c2:	8f 81       	ldd	r24, Y+7	; 0x07
    17c4:	98 85       	ldd	r25, Y+8	; 0x08
    17c6:	1d d7       	rcall	.+3642   	; 0x2602 <__gesf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	3c f5       	brge	.+78     	; 0x181a <_ZN3lcd5printEPhh+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	69 81       	ldd	r22, Y+1	; 0x01
    17d6:	7a 81       	ldd	r23, Y+2	; 0x02
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	16 d7       	rcall	.+3628   	; 0x260a <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	94 d6       	rcall	.+3368   	; 0x2510 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9a 87       	std	Y+10, r25	; 0x0a
    17ee:	89 87       	std	Y+9, r24	; 0x09
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <_ZN3lcd5printEPhh+0xd4>
    17f2:	89 e1       	ldi	r24, 0x19	; 25
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 87       	std	Y+12, r25	; 0x0c
    17f8:	8b 87       	std	Y+11, r24	; 0x0b
    17fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <_ZN3lcd5printEPhh+0xc2>
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9a 87       	std	Y+10, r25	; 0x0a
    180e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	89 2b       	or	r24, r25
    1816:	69 f7       	brne	.-38     	; 0x17f2 <_ZN3lcd5printEPhh+0xb6>
    1818:	13 c0       	rjmp	.+38     	; 0x1840 <_ZN3lcd5printEPhh+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6d 81       	ldd	r22, Y+5	; 0x05
    181c:	7e 81       	ldd	r23, Y+6	; 0x06
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	76 d6       	rcall	.+3308   	; 0x2510 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9a 87       	std	Y+10, r25	; 0x0a
    182a:	89 87       	std	Y+9, r24	; 0x09
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	9e 87       	std	Y+14, r25	; 0x0e
    1832:	8d 87       	std	Y+13, r24	; 0x0d
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <_ZN3lcd5printEPhh+0xfc>
    183c:	9e 87       	std	Y+14, r25	; 0x0e
    183e:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		Show(text);
    1840:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1842:	38 a1       	ldd	r19, Y+32	; 0x20
    1844:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1846:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1848:	b9 01       	movw	r22, r18
    184a:	99 da       	rcall	.-2766   	; 0xd7e <_ZN3lcd4ShowEPh>
    184c:	79 c0       	rjmp	.+242    	; 0x1940 <_ZN3lcd5printEPhh+0x204>
	}else if( valLine == LINE_BOTTOM ){
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	09 f0       	breq	.+2      	; 0x1856 <_ZN3lcd5printEPhh+0x11a>
    1854:	75 c0       	rjmp	.+234    	; 0x1940 <_ZN3lcd5printEPhh+0x204>
		SelectLine2();
    1856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    185a:	f0 da       	rcall	.-2592   	; 0xe3c <_ZN3lcd11SelectLine2Ev>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e2       	ldi	r26, 0x20	; 32
    1862:	b1 e4       	ldi	r27, 0x41	; 65
    1864:	8f 87       	std	Y+15, r24	; 0x0f
    1866:	98 8b       	std	Y+16, r25	; 0x10
    1868:	a9 8b       	std	Y+17, r26	; 0x11
    186a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	53 e4       	ldi	r21, 0x43	; 67
    1874:	6f 85       	ldd	r22, Y+15	; 0x0f
    1876:	78 89       	ldd	r23, Y+16	; 0x10
    1878:	89 89       	ldd	r24, Y+17	; 0x11
    187a:	9a 89       	ldd	r25, Y+18	; 0x12
    187c:	c6 d6       	rcall	.+3468   	; 0x260a <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	ad 8b       	std	Y+21, r26	; 0x15
    1888:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	6b 89       	ldd	r22, Y+19	; 0x13
    1894:	7c 89       	ldd	r23, Y+20	; 0x14
    1896:	8d 89       	ldd	r24, Y+21	; 0x15
    1898:	9e 89       	ldd	r25, Y+22	; 0x16
    189a:	36 d6       	rcall	.+3180   	; 0x2508 <__cmpsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <_ZN3lcd5printEPhh+0x16e>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	98 8f       	std	Y+24, r25	; 0x18
    18a6:	8f 8b       	std	Y+23, r24	; 0x17
    18a8:	3b c0       	rjmp	.+118    	; 0x1920 <_ZN3lcd5printEPhh+0x1e4>
	else if (__tmp > 65535)
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	6b 89       	ldd	r22, Y+19	; 0x13
    18b4:	7c 89       	ldd	r23, Y+20	; 0x14
    18b6:	8d 89       	ldd	r24, Y+21	; 0x15
    18b8:	9e 89       	ldd	r25, Y+22	; 0x16
    18ba:	a3 d6       	rcall	.+3398   	; 0x2602 <__gesf2>
    18bc:	18 16       	cp	r1, r24
    18be:	3c f5       	brge	.+78     	; 0x190e <_ZN3lcd5printEPhh+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ca:	78 89       	ldd	r23, Y+16	; 0x10
    18cc:	89 89       	ldd	r24, Y+17	; 0x11
    18ce:	9a 89       	ldd	r25, Y+18	; 0x12
    18d0:	9c d6       	rcall	.+3384   	; 0x260a <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	1a d6       	rcall	.+3124   	; 0x2510 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	98 8f       	std	Y+24, r25	; 0x18
    18e2:	8f 8b       	std	Y+23, r24	; 0x17
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <_ZN3lcd5printEPhh+0x1c8>
    18e6:	89 e1       	ldi	r24, 0x19	; 25
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9a 8f       	std	Y+26, r25	; 0x1a
    18ec:	89 8f       	std	Y+25, r24	; 0x19
    18ee:	89 8d       	ldd	r24, Y+25	; 0x19
    18f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <_ZN3lcd5printEPhh+0x1b6>
    18f6:	9a 8f       	std	Y+26, r25	; 0x1a
    18f8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	98 8f       	std	Y+24, r25	; 0x18
    1902:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	89 2b       	or	r24, r25
    190a:	69 f7       	brne	.-38     	; 0x18e6 <_ZN3lcd5printEPhh+0x1aa>
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <_ZN3lcd5printEPhh+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6b 89       	ldd	r22, Y+19	; 0x13
    1910:	7c 89       	ldd	r23, Y+20	; 0x14
    1912:	8d 89       	ldd	r24, Y+21	; 0x15
    1914:	9e 89       	ldd	r25, Y+22	; 0x16
    1916:	fc d5       	rcall	.+3064   	; 0x2510 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	98 8f       	std	Y+24, r25	; 0x18
    191e:	8f 8b       	std	Y+23, r24	; 0x17
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	9c 8f       	std	Y+28, r25	; 0x1c
    1926:	8b 8f       	std	Y+27, r24	; 0x1b
    1928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <_ZN3lcd5printEPhh+0x1f0>
    1930:	9c 8f       	std	Y+28, r25	; 0x1c
    1932:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		Show(text);
    1934:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1936:	38 a1       	ldd	r19, Y+32	; 0x20
    1938:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    193c:	b9 01       	movw	r22, r18
    193e:	1f da       	rcall	.-3010   	; 0xd7e <_ZN3lcd4ShowEPh>
	}
		
}
    1940:	a1 96       	adiw	r28, 0x21	; 33
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <_ZN3rtcC1Ev>:
#include <avr/io.h>
#include <util/delay.h>
#include "rtc.h"


rtc::rtc(){
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	2e 97       	sbiw	r28, 0x0e	; 14
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	9e 87       	std	Y+14, r25	; 0x0e
    1968:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t valCmd_Enable_W { 0x00 };
    196a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCmd_Init_Control { 0x04 };
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t valCmd_Zero { 0x00 };
    1970:	1d 82       	std	Y+5, r1	; 0x05
	rtc_time rtmInital { 0x00, 0x00, 0x52, 0x01, 0x01, 0x01, 0x00 };
    1972:	87 e0       	ldi	r24, 0x07	; 7
    1974:	e9 e3       	ldi	r30, 0x39	; 57
    1976:	f1 e0       	ldi	r31, 0x01	; 1
    1978:	de 01       	movw	r26, r28
    197a:	16 96       	adiw	r26, 0x06	; 6
    197c:	01 90       	ld	r0, Z+
    197e:	0d 92       	st	X+, r0
    1980:	8a 95       	dec	r24
    1982:	e1 f7       	brne	.-8      	; 0x197c <_ZN3rtcC1Ev+0x2a>


	i2c_init();    // Establish I2C connection
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	6a d0       	rcall	.+212    	; 0x1a5e <_ZN3rtc8i2c_initEv>
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
    198a:	ae 01       	movw	r20, r28
    198c:	4d 5f       	subi	r20, 0xFD	; 253
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	6f e0       	ldi	r22, 0x0F	; 15
    199a:	eb d0       	rcall	.+470    	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    199c:	1a 82       	std	Y+2, r1	; 0x02
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <_ZN3rtcC1Ev+0x6c>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
    19a2:	69 81       	ldd	r22, Y+1	; 0x01
    19a4:	ae 01       	movw	r20, r28
    19a6:	4b 5f       	subi	r20, 0xFB	; 251
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	21 e0       	ldi	r18, 0x01	; 1
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	df d0       	rcall	.+446    	; 0x1b72 <_ZN3rtc11write_blockEhPhj>

	i2c_init();    // Establish I2C connection
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	41 97       	sbiw	r24, 0x11	; 17
    19c4:	70 f3       	brcs	.-36     	; 0x19a2 <_ZN3rtcC1Ev+0x50>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
	}
	
	write_block( RTC_ADDR_CON, &valCmd_Init_Control, 1 );	// Set exclusive interrupt behavior
    19c6:	ae 01       	movw	r20, r28
    19c8:	4c 5f       	subi	r20, 0xFC	; 252
    19ca:	5f 4f       	sbci	r21, 0xFF	; 255
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	6f e0       	ldi	r22, 0x0F	; 15
    19d6:	cd d0       	rcall	.+410    	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
	
	set_time(&rtmInital);    	// Initialize the time
    19d8:	9e 01       	movw	r18, r28
    19da:	2a 5f       	subi	r18, 0xFA	; 250
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	b9 01       	movw	r22, r18
    19e4:	aa d1       	rcall	.+852    	; 0x1d3a <_ZN3rtc8set_timeEP8rtc_time>
	
}
    19e6:	2e 96       	adiw	r28, 0x0e	; 14
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <_ZN3rtc10spi_selectEv>:


void rtc::spi_select( ) {
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <_ZN3rtc10spi_selectEv+0x6>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= ( 1 << CPHA );
    1a06:	8c e4       	ldi	r24, 0x4C	; 76
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	2c e4       	ldi	r18, 0x4C	; 76
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	f9 01       	movw	r30, r18
    1a10:	20 81       	ld	r18, Z
    1a12:	24 60       	ori	r18, 0x04	; 4
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
	PORTB |= ( 1 << SS_PIN );
    1a18:	85 e2       	ldi	r24, 0x25	; 37
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	25 e2       	ldi	r18, 0x25	; 37
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	20 61       	ori	r18, 0x10	; 16
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18

}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <_ZN3rtc12spi_deselectEv>:

/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void rtc::spi_deselect( ){
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <_ZN3rtc12spi_deselectEv+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= ~( 1 << SS_PIN );
    1a42:	85 e2       	ldi	r24, 0x25	; 37
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	25 e2       	ldi	r18, 0x25	; 37
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	20 81       	ld	r18, Z
    1a4e:	2f 7e       	andi	r18, 0xEF	; 239
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18

}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <_ZN3rtc8i2c_initEv>:


void rtc::i2c_init( ){
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <_ZN3rtc8i2c_initEv+0x6>
    1a64:	1f 92       	push	r1
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	9b 83       	std	Y+3, r25	; 0x03
    1a6c:	8a 83       	std	Y+2, r24	; 0x02

	char IOReg;

	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    1a6e:	84 e2       	ldi	r24, 0x24	; 36
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	20 eb       	ldi	r18, 0xB0	; 176
    1a74:	fc 01       	movw	r30, r24
    1a76:	20 83       	st	Z, r18
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );	// POSSIBLE ERROR: PULLING DATA HIGH
    1a78:	8c e4       	ldi	r24, 0x4C	; 76
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	21 e5       	ldi	r18, 0x51	; 81
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
    1a82:	8d e4       	ldi	r24, 0x4D	; 77
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
    1a8c:	8e e4       	ldi	r24, 0x4E	; 78
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	fc 01       	movw	r30, r24
    1a92:	80 81       	ld	r24, Z
    1a94:	89 83       	std	Y+1, r24	; 0x01

	spi_deselect( );
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	cc df       	rcall	.-104    	; 0x1a34 <_ZN3rtc12spi_deselectEv>
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <_ZN3rtc19spi_master_transmitEh>:


// This routine exchanges 1 byte with the SPI port. 
unsigned char rtc::spi_master_transmit( unsigned char cData )
{
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <_ZN3rtc19spi_master_transmitEh+0x6>
    1aae:	1f 92       	push	r1
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	6b 83       	std	Y+3, r22	; 0x03

	SPDR  = cData;	// Set Pointer to beginning of String
    1aba:	8e e4       	ldi	r24, 0x4E	; 78
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18
	/* wait until Char is sent */
	while ( ! (SPSR & ( 1 << SPIF ))){
    1ac4:	00 00       	nop
    1ac6:	8d e4       	ldi	r24, 0x4D	; 77
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 81       	ld	r24, Z
    1ace:	80 95       	com	r24
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	88 27       	eor	r24, r24
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	88 23       	and	r24, r24
    1ad8:	b1 f7       	brne	.-20     	; 0x1ac6 <_ZN3rtc19spi_master_transmitEh+0x1e>
		;	
	}

	return SPDR;
    1ada:	8e e4       	ldi	r24, 0x4E	; 78
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	80 81       	ld	r24, Z
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <_ZN3rtc10read_blockEhPhj>:

/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	27 97       	sbiw	r28, 0x07	; 7
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	6b 83       	std	Y+3, r22	; 0x03
    1b0c:	5d 83       	std	Y+5, r21	; 0x05
    1b0e:	4c 83       	std	Y+4, r20	; 0x04
    1b10:	3f 83       	std	Y+7, r19	; 0x07
    1b12:	2e 83       	std	Y+6, r18	; 0x06
	
	spi_select( );
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	6f df       	rcall	.-290    	; 0x19f8 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( cAddr );
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b20:	c3 df       	rcall	.-122    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1b22:	0c c0       	rjmp	.+24     	; 0x1b3c <_ZN3rtc10read_blockEhPhj+0x4e>
		*pBuffer++ = spi_master_transmit( 0 );
    1b24:	0c 81       	ldd	r16, Y+4	; 0x04
    1b26:	1d 81       	ldd	r17, Y+5	; 0x05
    1b28:	c8 01       	movw	r24, r16
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	9d 83       	std	Y+5, r25	; 0x05
    1b2e:	8c 83       	std	Y+4, r24	; 0x04
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	b8 df       	rcall	.-144    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
    1b38:	f8 01       	movw	r30, r16
    1b3a:	80 83       	st	Z, r24
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
	
	spi_select( );

	spi_master_transmit( cAddr );
	while( iCount-- ){
    1b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b40:	9c 01       	movw	r18, r24
    1b42:	21 50       	subi	r18, 0x01	; 1
    1b44:	31 09       	sbc	r19, r1
    1b46:	3f 83       	std	Y+7, r19	; 0x07
    1b48:	2e 83       	std	Y+6, r18	; 0x06
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	89 2b       	or	r24, r25
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <_ZN3rtc10read_blockEhPhj+0x64>
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	22 23       	and	r18, r18
    1b54:	39 f7       	brne	.-50     	; 0x1b24 <_ZN3rtc10read_blockEhPhj+0x36>
		*pBuffer++ = spi_master_transmit( 0 );
	}

	spi_deselect();
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	6c df       	rcall	.-296    	; 0x1a34 <_ZN3rtc12spi_deselectEv>

}
    1b5c:	27 96       	adiw	r28, 0x07	; 7
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	29 97       	sbiw	r28, 0x09	; 9
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	6d 83       	std	Y+5, r22	; 0x05
    1b8c:	5f 83       	std	Y+7, r21	; 0x07
    1b8e:	4e 83       	std	Y+6, r20	; 0x06
    1b90:	39 87       	std	Y+9, r19	; 0x09
    1b92:	28 87       	std	Y+8, r18	; 0x08
	
	unsigned char uchTempControlA { 0x00 };
    1b94:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char uchTempControlB { 0x00 };
    1b96:	19 82       	std	Y+1, r1	; 0x01
	
	
	read_block( RTC_ADDR_CON, &uchTempControlA, 1 );
    1b98:	ae 01       	movw	r20, r28
    1b9a:	4e 5f       	subi	r20, 0xFE	; 254
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	21 e0       	ldi	r18, 0x01	; 1
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	6f e0       	ldi	r22, 0x0F	; 15
    1ba8:	a2 df       	rcall	.-188    	; 0x1aee <_ZN3rtc10read_blockEhPhj>
	if( ! (( uchTempControlA & 0x03 ) == 0x00 )){
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	83 70       	andi	r24, 0x03	; 3
    1bb2:	99 27       	eor	r25, r25
    1bb4:	89 2b       	or	r24, r25
    1bb6:	89 f0       	breq	.+34     	; 0x1bda <_ZN3rtc11write_blockEhPhj+0x68>
		uchTempControlB = uchTempControlA & 0xFC;
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	8c 7f       	andi	r24, 0xFC	; 252
    1bbc:	89 83       	std	Y+1, r24	; 0x01
		spi_select( );
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	1a df       	rcall	.-460    	; 0x19f8 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	6f e8       	ldi	r22, 0x8F	; 143
    1bca:	6e df       	rcall	.-292    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlB );
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	69 81       	ldd	r22, Y+1	; 0x01
    1bd2:	6a df       	rcall	.-300    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	2d df       	rcall	.-422    	; 0x1a34 <_ZN3rtc12spi_deselectEv>
	}
	
	spi_select( );
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	0c df       	rcall	.-488    	; 0x19f8 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	20 e8       	ldi	r18, 0x80	; 128
    1be4:	28 0f       	add	r18, r24
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	62 2f       	mov	r22, r18
    1bec:	5d df       	rcall	.-326    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <_ZN3rtc11write_blockEhPhj+0x98>
		spi_master_transmit( *pBuffer++ );
    1bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	2f 5f       	subi	r18, 0xFF	; 255
    1bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfa:	3f 83       	std	Y+7, r19	; 0x07
    1bfc:	2e 83       	std	Y+6, r18	; 0x06
    1bfe:	fc 01       	movw	r30, r24
    1c00:	20 81       	ld	r18, Z
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	62 2f       	mov	r22, r18
    1c08:	4f df       	rcall	.-354    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
	}
	
	spi_select( );

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
	while( iCount-- ){
    1c0a:	88 85       	ldd	r24, Y+8	; 0x08
    1c0c:	99 85       	ldd	r25, Y+9	; 0x09
    1c0e:	9c 01       	movw	r18, r24
    1c10:	21 50       	subi	r18, 0x01	; 1
    1c12:	31 09       	sbc	r19, r1
    1c14:	39 87       	std	Y+9, r19	; 0x09
    1c16:	28 87       	std	Y+8, r18	; 0x08
    1c18:	21 e0       	ldi	r18, 0x01	; 1
    1c1a:	89 2b       	or	r24, r25
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <_ZN3rtc11write_blockEhPhj+0xae>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	22 23       	and	r18, r18
    1c22:	31 f7       	brne	.-52     	; 0x1bf0 <_ZN3rtc11write_blockEhPhj+0x7e>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	05 df       	rcall	.-502    	; 0x1a34 <_ZN3rtc12spi_deselectEv>
	
	if( ! ( iAddr == RTC_ADDR_CON )){
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	8f 30       	cpi	r24, 0x0F	; 15
    1c2e:	79 f0       	breq	.+30     	; 0x1c4e <_ZN3rtc11write_blockEhPhj+0xdc>
		spi_select( );
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	e1 de       	rcall	.-574    	; 0x19f8 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	6f e8       	ldi	r22, 0x8F	; 143
    1c3c:	35 df       	rcall	.-406    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlA );
    1c3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	62 2f       	mov	r22, r18
    1c46:	30 df       	rcall	.-416    	; 0x1aa8 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	f3 de       	rcall	.-538    	; 0x1a34 <_ZN3rtc12spi_deselectEv>
	}
}
    1c4e:	29 96       	adiw	r28, 0x09	; 9
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <_ZN3rtc8get_timeEv>:


rtc_time rtc::get_time( ){
    1c60:	2f 92       	push	r2
    1c62:	3f 92       	push	r3
    1c64:	4f 92       	push	r4
    1c66:	5f 92       	push	r5
    1c68:	6f 92       	push	r6
    1c6a:	7f 92       	push	r7
    1c6c:	8f 92       	push	r8
    1c6e:	9f 92       	push	r9
    1c70:	af 92       	push	r10
    1c72:	bf 92       	push	r11
    1c74:	cf 92       	push	r12
    1c76:	df 92       	push	r13
    1c78:	ef 92       	push	r14
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	60 97       	sbiw	r28, 0x10	; 16
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f

	rtc_time rtmToConvert;


	read_block( RTC_ADDR_START, ( unsigned char * )&rtmToConvert, sizeof( rtc_time ));
    1c98:	ae 01       	movw	r20, r28
    1c9a:	48 5f       	subi	r20, 0xF8	; 248
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca0:	98 89       	ldd	r25, Y+16	; 0x10
    1ca2:	27 e0       	ldi	r18, 0x07	; 7
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	22 df       	rcall	.-444    	; 0x1aee <_ZN3rtc10read_blockEhPhj>

	return rtmToConvert;
    1caa:	27 e0       	ldi	r18, 0x07	; 7
    1cac:	fe 01       	movw	r30, r28
    1cae:	38 96       	adiw	r30, 0x08	; 8
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	0d 92       	st	X+, r0
    1cba:	2a 95       	dec	r18
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <_ZN3rtc8get_timeEv+0x56>
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	5a 81       	ldd	r21, Y+2	; 0x02
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	4b 81       	ldd	r20, Y+3	; 0x03
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cda:	26 2e       	mov	r2, r22
    1cdc:	35 2e       	mov	r3, r21
    1cde:	44 2e       	mov	r4, r20
    1ce0:	53 2e       	mov	r5, r19
    1ce2:	62 2e       	mov	r6, r18
    1ce4:	79 2e       	mov	r7, r25
    1ce6:	88 2e       	mov	r8, r24
    1ce8:	a2 2c       	mov	r10, r2
    1cea:	b3 2c       	mov	r11, r3
    1cec:	c4 2c       	mov	r12, r4
    1cee:	d5 2c       	mov	r13, r5
    1cf0:	e6 2c       	mov	r14, r6
    1cf2:	f7 2c       	mov	r15, r7
    1cf4:	08 2d       	mov	r16, r8
    1cf6:	19 2d       	mov	r17, r9
}
    1cf8:	2a 2d       	mov	r18, r10
    1cfa:	3b 2d       	mov	r19, r11
    1cfc:	4c 2d       	mov	r20, r12
    1cfe:	5d 2d       	mov	r21, r13
    1d00:	6e 2d       	mov	r22, r14
    1d02:	7f 2d       	mov	r23, r15
    1d04:	80 2f       	mov	r24, r16
    1d06:	91 2f       	mov	r25, r17
    1d08:	60 96       	adiw	r28, 0x10	; 16
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	7f 90       	pop	r7
    1d2e:	6f 90       	pop	r6
    1d30:	5f 90       	pop	r5
    1d32:	4f 90       	pop	r4
    1d34:	3f 90       	pop	r3
    1d36:	2f 90       	pop	r2
    1d38:	08 95       	ret

00001d3a <_ZN3rtc8set_timeEP8rtc_time>:


void rtc::set_time( rtc_time* rtmSetTime ){
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <_ZN3rtc8set_timeEP8rtc_time+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <_ZN3rtc8set_timeEP8rtc_time+0x8>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	7c 83       	std	Y+4, r23	; 0x04
    1d4c:	6b 83       	std	Y+3, r22	; 0x03

	write_block( RTC_ADDR_START, ( unsigned char * )rtmSetTime, sizeof(rtc_time));
    1d4e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d50:	5c 81       	ldd	r21, Y+4	; 0x04
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	27 e0       	ldi	r18, 0x07	; 7
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0a df       	rcall	.-492    	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <_ZN3rtc11rtm_to_charE8rtc_timePhj>:


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	a5 97       	sbiw	r28, 0x25	; 37
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	89 8f       	std	Y+25, r24	; 0x19
    1d90:	0b 8f       	std	Y+27, r16	; 0x1b
    1d92:	1c 8f       	std	Y+28, r17	; 0x1c
    1d94:	2d 8f       	std	Y+29, r18	; 0x1d
    1d96:	3e 8f       	std	Y+30, r19	; 0x1e
    1d98:	4f 8f       	std	Y+31, r20	; 0x1f
    1d9a:	58 a3       	std	Y+32, r21	; 0x20
    1d9c:	69 a3       	std	Y+33, r22	; 0x21
    1d9e:	fb a2       	std	Y+35, r15	; 0x23
    1da0:	ea a2       	std	Y+34, r14	; 0x22
    1da2:	dd a2       	std	Y+37, r13	; 0x25
    1da4:	cc a2       	std	Y+36, r12	; 0x24
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
	uchTimeOut[valTextOffset + 15] = valDates >> 8;

	memcpy( uchToReturn, uchTimeOut, valCharLen );

}
    1da6:	0d b7       	in	r16, 0x3d	; 61
    1da8:	1e b7       	in	r17, 0x3e	; 62
    1daa:	8d b7       	in	r24, 0x3d	; 61
    1dac:	9e b7       	in	r25, 0x3e	; 62
    1dae:	7c 01       	movw	r14, r24
}


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
	
	unsigned char uchTimeOut[ valCharLen ];
    1db0:	8c a1       	ldd	r24, Y+36	; 0x24
    1db2:	9d a1       	ldd	r25, Y+37	; 0x25
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9d 83       	std	Y+5, r25	; 0x05
    1db8:	8c 83       	std	Y+4, r24	; 0x04
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	2d b7       	in	r18, 0x3d	; 61
    1dbe:	3e b7       	in	r19, 0x3e	; 62
    1dc0:	28 1b       	sub	r18, r24
    1dc2:	39 0b       	sbc	r19, r25
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	3e bf       	out	0x3e, r19	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	2d bf       	out	0x3d, r18	; 61
    1dce:	8d b7       	in	r24, 0x3d	; 61
    1dd0:	9e b7       	in	r25, 0x3e	; 62
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	9f 83       	std	Y+7, r25	; 0x07
    1dd6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t valTimeLength = RTC_DISP_LEN;
    1dd8:	80 e1       	ldi	r24, 0x10	; 16
    1dda:	88 87       	std	Y+8, r24	; 0x08
	unsigned int valTextOffset = ( valCharLen - valTimeLength ) / 2;
    1ddc:	88 85       	ldd	r24, Y+8	; 0x08
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	2c a1       	ldd	r18, Y+36	; 0x24
    1de4:	3d a1       	ldd	r19, Y+37	; 0x25
    1de6:	a9 01       	movw	r20, r18
    1de8:	48 1b       	sub	r20, r24
    1dea:	59 0b       	sbc	r21, r25
    1dec:	ca 01       	movw	r24, r20
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	9a 87       	std	Y+10, r25	; 0x0a
    1df4:	89 87       	std	Y+9, r24	; 0x09
	uint32_t valMonths;
	uint8_t valMonth;
	uint16_t valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1df6:	1b 82       	std	Y+3, r1	; 0x03
    1df8:	1a 82       	std	Y+2, r1	; 0x02
    1dfa:	0e c0       	rjmp	.+28     	; 0x1e18 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
		uchTimeOut[valN] = ' ';
    1dfc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfe:	3f 81       	ldd	r19, Y+7	; 0x07
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	20 e2       	ldi	r18, 0x20	; 32
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 83       	st	Z, r18
	uint32_t valMonths;
	uint8_t valMonth;
	uint16_t valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	9b 83       	std	Y+3, r25	; 0x03
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	2a 81       	ldd	r18, Y+2	; 0x02
    1e1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e1c:	8c a1       	ldd	r24, Y+36	; 0x24
    1e1e:	9d a1       	ldd	r25, Y+37	; 0x25
    1e20:	28 17       	cp	r18, r24
    1e22:	39 07       	cpc	r19, r25
    1e24:	58 f3       	brcs	.-42     	; 0x1dfc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
		uchTimeOut[valN] = ' ';
	}

	valMins &= 0x0000;
    1e26:	1c 86       	std	Y+12, r1	; 0x0c
    1e28:	1b 86       	std	Y+11, r1	; 0x0b
	valMins |= (( rtmToConvert.ucMinutes & 0xF0 ) + 0x0300 ) << 4;
    1e2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	80 7f       	andi	r24, 0xF0	; 240
    1e32:	99 27       	eor	r25, r25
    1e34:	9d 5f       	subi	r25, 0xFD	; 253
    1e36:	82 95       	swap	r24
    1e38:	92 95       	swap	r25
    1e3a:	90 7f       	andi	r25, 0xF0	; 240
    1e3c:	98 27       	eor	r25, r24
    1e3e:	80 7f       	andi	r24, 0xF0	; 240
    1e40:	98 27       	eor	r25, r24
    1e42:	9c 01       	movw	r18, r24
    1e44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e48:	82 2b       	or	r24, r18
    1e4a:	93 2b       	or	r25, r19
    1e4c:	9c 87       	std	Y+12, r25	; 0x0c
    1e4e:	8b 87       	std	Y+11, r24	; 0x0b
	valMins |= ( rtmToConvert.ucMinutes & 0x0F) + 0x0030;
    1e50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	8f 70       	andi	r24, 0x0F	; 15
    1e58:	99 27       	eor	r25, r25
    1e5a:	c0 96       	adiw	r24, 0x30	; 48
    1e5c:	9c 01       	movw	r18, r24
    1e5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e62:	82 2b       	or	r24, r18
    1e64:	93 2b       	or	r25, r19
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	8b 87       	std	Y+11, r24	; 0x0b
	valHours &= 0x0000;
    1e6a:	1e 86       	std	Y+14, r1	; 0x0e
    1e6c:	1d 86       	std	Y+13, r1	; 0x0d
	valHours |= (( rtmToConvert.ucHours & 0x10 ) + 0x0300 ) << 4;
    1e6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	80 71       	andi	r24, 0x10	; 16
    1e76:	99 27       	eor	r25, r25
    1e78:	9d 5f       	subi	r25, 0xFD	; 253
    1e7a:	82 95       	swap	r24
    1e7c:	92 95       	swap	r25
    1e7e:	90 7f       	andi	r25, 0xF0	; 240
    1e80:	98 27       	eor	r25, r24
    1e82:	80 7f       	andi	r24, 0xF0	; 240
    1e84:	98 27       	eor	r25, r24
    1e86:	9c 01       	movw	r18, r24
    1e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8c:	82 2b       	or	r24, r18
    1e8e:	93 2b       	or	r25, r19
    1e90:	9e 87       	std	Y+14, r25	; 0x0e
    1e92:	8d 87       	std	Y+13, r24	; 0x0d
	valHours |= ( rtmToConvert.ucHours & 0x0F) + 0x0030;
    1e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	8f 70       	andi	r24, 0x0F	; 15
    1e9c:	99 27       	eor	r25, r25
    1e9e:	c0 96       	adiw	r24, 0x30	; 48
    1ea0:	9c 01       	movw	r18, r24
    1ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea6:	82 2b       	or	r24, r18
    1ea8:	93 2b       	or	r25, r19
    1eaa:	9e 87       	std	Y+14, r25	; 0x0e
    1eac:	8d 87       	std	Y+13, r24	; 0x0d
	if(( rtmToConvert.ucHours & RTC_12PM ) == RTC_12AM ){
    1eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	80 76       	andi	r24, 0x60	; 96
    1eb6:	99 27       	eor	r25, r25
    1eb8:	80 34       	cpi	r24, 0x40	; 64
    1eba:	91 05       	cpc	r25, r1
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
		valAMPM = 'A';
    1ebe:	81 e4       	ldi	r24, 0x41	; 65
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
	}else{
		valAMPM = 'P';
    1ec4:	80 e5       	ldi	r24, 0x50	; 80
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	}
	valDay &= 0x00;
    1ec8:	1f 86       	std	Y+15, r1	; 0x0f
	valDays &= 0x00000000;
    1eca:	19 8a       	std	Y+17, r1	; 0x11
    1ecc:	18 8a       	std	Y+16, r1	; 0x10
	valDay = ((( rtmToConvert.ucDay >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucDay ) & 0x0F );
    1ece:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ed0:	82 95       	swap	r24
    1ed2:	8f 70       	andi	r24, 0x0F	; 15
    1ed4:	88 0f       	add	r24, r24
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	99 0f       	add	r25, r25
    1eda:	99 0f       	add	r25, r25
    1edc:	98 0f       	add	r25, r24
    1ede:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ee0:	8f 70       	andi	r24, 0x0F	; 15
    1ee2:	89 0f       	add	r24, r25
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
	valDays = chrDays[(( valDay == 0 ) ? 0 : valDay - 1 ) * 2];
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	88 23       	and	r24, r24
    1eea:	39 f0       	breq	.+14     	; 0x1efa <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    1eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	8c 59       	subi	r24, 0x9C	; 156
    1f00:	9e 4f       	sbci	r25, 0xFE	; 254
    1f02:	fc 01       	movw	r30, r24
    1f04:	80 81       	ld	r24, Z
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	99 8b       	std	Y+17, r25	; 0x11
    1f0c:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 1] << 8;
    1f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f10:	88 23       	and	r24, r24
    1f12:	41 f0       	breq	.+16     	; 0x1f24 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    1f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	8c 59       	subi	r24, 0x9C	; 156
    1f2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	98 2f       	mov	r25, r24
    1f36:	88 27       	eor	r24, r24
    1f38:	9c 01       	movw	r18, r24
    1f3a:	88 89       	ldd	r24, Y+16	; 0x10
    1f3c:	99 89       	ldd	r25, Y+17	; 0x11
    1f3e:	82 2b       	or	r24, r18
    1f40:	93 2b       	or	r25, r19
    1f42:	99 8b       	std	Y+17, r25	; 0x11
    1f44:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= (( uint16_t )( chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 2])) << 16;
    1f46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f48:	88 23       	and	r24, r24
    1f4a:	31 f0       	breq	.+12     	; 0x1f58 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	8c 59       	subi	r24, 0x9C	; 156
    1f5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	99 27       	eor	r25, r25
    1f6a:	88 27       	eor	r24, r24
    1f6c:	28 89       	ldd	r18, Y+16	; 0x10
    1f6e:	39 89       	ldd	r19, Y+17	; 0x11
    1f70:	82 2b       	or	r24, r18
    1f72:	93 2b       	or	r25, r19
    1f74:	99 8b       	std	Y+17, r25	; 0x11
    1f76:	88 8b       	std	Y+16, r24	; 0x10
	valMonth &= 0x00;
    1f78:	1a 8a       	std	Y+18, r1	; 0x12
	valMonths &= 0x00000000;
    1f7a:	1b 8a       	std	Y+19, r1	; 0x13
    1f7c:	1c 8a       	std	Y+20, r1	; 0x14
    1f7e:	1d 8a       	std	Y+21, r1	; 0x15
    1f80:	1e 8a       	std	Y+22, r1	; 0x16
	valMonth = ((( rtmToConvert.ucMonth >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucMonth ) & 0x0F );
    1f82:	88 a1       	ldd	r24, Y+32	; 0x20
    1f84:	82 95       	swap	r24
    1f86:	8f 70       	andi	r24, 0x0F	; 15
    1f88:	88 0f       	add	r24, r24
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	99 0f       	add	r25, r25
    1f8e:	99 0f       	add	r25, r25
    1f90:	98 0f       	add	r25, r24
    1f92:	88 a1       	ldd	r24, Y+32	; 0x20
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	89 0f       	add	r24, r25
    1f98:	8a 8b       	std	Y+18, r24	; 0x12
	valMonths = chrMonths[(( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3];
    1f9a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f9c:	88 23       	and	r24, r24
    1f9e:	61 f0       	breq	.+24     	; 0x1fb8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x24c>
    1fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 01       	movw	r18, r24
    1fa8:	21 50       	subi	r18, 0x01	; 1
    1faa:	31 09       	sbc	r19, r1
    1fac:	c9 01       	movw	r24, r18
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x250>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	80 5c       	subi	r24, 0xC0	; 192
    1fbe:	9e 4f       	sbci	r25, 0xFE	; 254
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	ad 8b       	std	Y+21, r26	; 0x15
    1fd2:	be 8b       	std	Y+22, r27	; 0x16
	valMonths |= chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 1] << 8;
    1fd4:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd6:	88 23       	and	r24, r24
    1fd8:	69 f0       	breq	.+26     	; 0x1ff4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x288>
    1fda:	8a 89       	ldd	r24, Y+18	; 0x12
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	21 50       	subi	r18, 0x01	; 1
    1fe4:	31 09       	sbc	r19, r1
    1fe6:	c9 01       	movw	r24, r18
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x28c>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	80 5c       	subi	r24, 0xC0	; 192
    1ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	80 81       	ld	r24, Z
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	98 2f       	mov	r25, r24
    2006:	88 27       	eor	r24, r24
    2008:	09 2e       	mov	r0, r25
    200a:	00 0c       	add	r0, r0
    200c:	aa 0b       	sbc	r26, r26
    200e:	bb 0b       	sbc	r27, r27
    2010:	2b 89       	ldd	r18, Y+19	; 0x13
    2012:	3c 89       	ldd	r19, Y+20	; 0x14
    2014:	4d 89       	ldd	r20, Y+21	; 0x15
    2016:	5e 89       	ldd	r21, Y+22	; 0x16
    2018:	82 2b       	or	r24, r18
    201a:	93 2b       	or	r25, r19
    201c:	a4 2b       	or	r26, r20
    201e:	b5 2b       	or	r27, r21
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	ad 8b       	std	Y+21, r26	; 0x15
    2026:	be 8b       	std	Y+22, r27	; 0x16
	valMonths |= (( uint32_t )( chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 2])) << 16;
    2028:	8a 89       	ldd	r24, Y+18	; 0x12
    202a:	88 23       	and	r24, r24
    202c:	69 f0       	breq	.+26     	; 0x2048 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2dc>
    202e:	8a 89       	ldd	r24, Y+18	; 0x12
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 01       	movw	r18, r24
    2036:	21 50       	subi	r18, 0x01	; 1
    2038:	31 09       	sbc	r19, r1
    203a:	c9 01       	movw	r24, r18
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	02 96       	adiw	r24, 0x02	; 2
    2046:	02 c0       	rjmp	.+4      	; 0x204c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e0>
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	80 5c       	subi	r24, 0xC0	; 192
    204e:	9e 4f       	sbci	r25, 0xFE	; 254
    2050:	fc 01       	movw	r30, r24
    2052:	80 81       	ld	r24, Z
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a0 e0       	ldi	r26, 0x00	; 0
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	dc 01       	movw	r26, r24
    205e:	99 27       	eor	r25, r25
    2060:	88 27       	eor	r24, r24
    2062:	2b 89       	ldd	r18, Y+19	; 0x13
    2064:	3c 89       	ldd	r19, Y+20	; 0x14
    2066:	4d 89       	ldd	r20, Y+21	; 0x15
    2068:	5e 89       	ldd	r21, Y+22	; 0x16
    206a:	82 2b       	or	r24, r18
    206c:	93 2b       	or	r25, r19
    206e:	a4 2b       	or	r26, r20
    2070:	b5 2b       	or	r27, r21
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	ad 8b       	std	Y+21, r26	; 0x15
    2078:	be 8b       	std	Y+22, r27	; 0x16
	valDates &= 0x0000;
    207a:	18 8e       	std	Y+24, r1	; 0x18
    207c:	1f 8a       	std	Y+23, r1	; 0x17
	valDates |= (( rtmToConvert.ucDate & 0xF0 ) + 0x0300 ) << 4;
    207e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	80 7f       	andi	r24, 0xF0	; 240
    2086:	99 27       	eor	r25, r25
    2088:	9d 5f       	subi	r25, 0xFD	; 253
    208a:	82 95       	swap	r24
    208c:	92 95       	swap	r25
    208e:	90 7f       	andi	r25, 0xF0	; 240
    2090:	98 27       	eor	r25, r24
    2092:	80 7f       	andi	r24, 0xF0	; 240
    2094:	98 27       	eor	r25, r24
    2096:	9c 01       	movw	r18, r24
    2098:	8f 89       	ldd	r24, Y+23	; 0x17
    209a:	98 8d       	ldd	r25, Y+24	; 0x18
    209c:	82 2b       	or	r24, r18
    209e:	93 2b       	or	r25, r19
    20a0:	98 8f       	std	Y+24, r25	; 0x18
    20a2:	8f 8b       	std	Y+23, r24	; 0x17
	valDates |= ( rtmToConvert.ucDate & 0x0F) + 0x0030;
    20a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	8f 70       	andi	r24, 0x0F	; 15
    20ac:	99 27       	eor	r25, r25
    20ae:	c0 96       	adiw	r24, 0x30	; 48
    20b0:	9c 01       	movw	r18, r24
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	82 2b       	or	r24, r18
    20b8:	93 2b       	or	r25, r19
    20ba:	98 8f       	std	Y+24, r25	; 0x18
    20bc:	8f 8b       	std	Y+23, r24	; 0x17
	
	uchTimeOut[valTextOffset] = valHours >> 8;
    20be:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c2:	89 2f       	mov	r24, r25
    20c4:	99 27       	eor	r25, r25
    20c6:	48 2f       	mov	r20, r24
    20c8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ca:	3f 81       	ldd	r19, Y+7	; 0x07
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	fc 01       	movw	r30, r24
    20d6:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 1] = valHours & 0x00FF;
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	4d 85       	ldd	r20, Y+13	; 0x0d
    20e0:	2e 81       	ldd	r18, Y+6	; 0x06
    20e2:	3f 81       	ldd	r19, Y+7	; 0x07
    20e4:	82 0f       	add	r24, r18
    20e6:	93 1f       	adc	r25, r19
    20e8:	fc 01       	movw	r30, r24
    20ea:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 2] = ':';
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	02 96       	adiw	r24, 0x02	; 2
    20f2:	2e 81       	ldd	r18, Y+6	; 0x06
    20f4:	3f 81       	ldd	r19, Y+7	; 0x07
    20f6:	82 0f       	add	r24, r18
    20f8:	93 1f       	adc	r25, r19
    20fa:	2a e3       	ldi	r18, 0x3A	; 58
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 3] = valMins >> 8;
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	03 96       	adiw	r24, 0x03	; 3
    2106:	2b 85       	ldd	r18, Y+11	; 0x0b
    2108:	3c 85       	ldd	r19, Y+12	; 0x0c
    210a:	23 2f       	mov	r18, r19
    210c:	33 27       	eor	r19, r19
    210e:	42 2f       	mov	r20, r18
    2110:	2e 81       	ldd	r18, Y+6	; 0x06
    2112:	3f 81       	ldd	r19, Y+7	; 0x07
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	fc 01       	movw	r30, r24
    211a:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 4] = valMins & 0x00FF;
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	04 96       	adiw	r24, 0x04	; 4
    2122:	4b 85       	ldd	r20, Y+11	; 0x0b
    2124:	2e 81       	ldd	r18, Y+6	; 0x06
    2126:	3f 81       	ldd	r19, Y+7	; 0x07
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	fc 01       	movw	r30, r24
    212e:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 5] = valAMPM;
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	05 96       	adiw	r24, 0x05	; 5
    2136:	2e 81       	ldd	r18, Y+6	; 0x06
    2138:	3f 81       	ldd	r19, Y+7	; 0x07
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 6] = 'M';
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	06 96       	adiw	r24, 0x06	; 6
    214a:	2e 81       	ldd	r18, Y+6	; 0x06
    214c:	3f 81       	ldd	r19, Y+7	; 0x07
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	2d e4       	ldi	r18, 0x4D	; 77
    2154:	fc 01       	movw	r30, r24
    2156:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 7] = ' ';
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	07 96       	adiw	r24, 0x07	; 7
    215e:	2e 81       	ldd	r18, Y+6	; 0x06
    2160:	3f 81       	ldd	r19, Y+7	; 0x07
    2162:	82 0f       	add	r24, r18
    2164:	93 1f       	adc	r25, r19
    2166:	20 e2       	ldi	r18, 0x20	; 32
    2168:	fc 01       	movw	r30, r24
    216a:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 8] = valDays & 0xFF;
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	08 96       	adiw	r24, 0x08	; 8
    2172:	48 89       	ldd	r20, Y+16	; 0x10
    2174:	2e 81       	ldd	r18, Y+6	; 0x06
    2176:	3f 81       	ldd	r19, Y+7	; 0x07
    2178:	82 0f       	add	r24, r18
    217a:	93 1f       	adc	r25, r19
    217c:	fc 01       	movw	r30, r24
    217e:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 9] = ( valDays >> 8 ) & 0xFF;
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	09 96       	adiw	r24, 0x09	; 9
    2186:	28 89       	ldd	r18, Y+16	; 0x10
    2188:	39 89       	ldd	r19, Y+17	; 0x11
    218a:	23 2f       	mov	r18, r19
    218c:	33 27       	eor	r19, r19
    218e:	42 2f       	mov	r20, r18
    2190:	2e 81       	ldd	r18, Y+6	; 0x06
    2192:	3f 81       	ldd	r19, Y+7	; 0x07
    2194:	82 0f       	add	r24, r18
    2196:	93 1f       	adc	r25, r19
    2198:	fc 01       	movw	r30, r24
    219a:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 10] = ',';
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	0a 96       	adiw	r24, 0x0a	; 10
    21a2:	2e 81       	ldd	r18, Y+6	; 0x06
    21a4:	3f 81       	ldd	r19, Y+7	; 0x07
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	2c e2       	ldi	r18, 0x2C	; 44
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 11] = valMonths & 0xFF;
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	0b 96       	adiw	r24, 0x0b	; 11
    21b6:	4b 89       	ldd	r20, Y+19	; 0x13
    21b8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ba:	3f 81       	ldd	r19, Y+7	; 0x07
    21bc:	82 0f       	add	r24, r18
    21be:	93 1f       	adc	r25, r19
    21c0:	fc 01       	movw	r30, r24
    21c2:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 12] = ( valMonths >> 8 ) & 0xFF;
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	9c 01       	movw	r18, r24
    21ca:	24 5f       	subi	r18, 0xF4	; 244
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	ad 89       	ldd	r26, Y+21	; 0x15
    21d4:	be 89       	ldd	r27, Y+22	; 0x16
    21d6:	89 2f       	mov	r24, r25
    21d8:	9a 2f       	mov	r25, r26
    21da:	ab 2f       	mov	r26, r27
    21dc:	bb 27       	eor	r27, r27
    21de:	48 2f       	mov	r20, r24
    21e0:	8e 81       	ldd	r24, Y+6	; 0x06
    21e2:	9f 81       	ldd	r25, Y+7	; 0x07
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	fc 01       	movw	r30, r24
    21ea:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 13] = ( valMonths >> 16 ) & 0xFF;
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	9c 01       	movw	r18, r24
    21f2:	23 5f       	subi	r18, 0xF3	; 243
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	ad 89       	ldd	r26, Y+21	; 0x15
    21fc:	be 89       	ldd	r27, Y+22	; 0x16
    21fe:	cd 01       	movw	r24, r26
    2200:	aa 27       	eor	r26, r26
    2202:	bb 27       	eor	r27, r27
    2204:	48 2f       	mov	r20, r24
    2206:	8e 81       	ldd	r24, Y+6	; 0x06
    2208:	9f 81       	ldd	r25, Y+7	; 0x07
    220a:	82 0f       	add	r24, r18
    220c:	93 1f       	adc	r25, r19
    220e:	fc 01       	movw	r30, r24
    2210:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	0e 96       	adiw	r24, 0x0e	; 14
    2218:	4f 89       	ldd	r20, Y+23	; 0x17
    221a:	2e 81       	ldd	r18, Y+6	; 0x06
    221c:	3f 81       	ldd	r19, Y+7	; 0x07
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	fc 01       	movw	r30, r24
    2224:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 15] = valDates >> 8;
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	0f 96       	adiw	r24, 0x0f	; 15
    222c:	2f 89       	ldd	r18, Y+23	; 0x17
    222e:	38 8d       	ldd	r19, Y+24	; 0x18
    2230:	23 2f       	mov	r18, r19
    2232:	33 27       	eor	r19, r19
    2234:	42 2f       	mov	r20, r18
    2236:	2e 81       	ldd	r18, Y+6	; 0x06
    2238:	3f 81       	ldd	r19, Y+7	; 0x07
    223a:	82 0f       	add	r24, r18
    223c:	93 1f       	adc	r25, r19
    223e:	fc 01       	movw	r30, r24
    2240:	40 83       	st	Z, r20

	memcpy( uchToReturn, uchTimeOut, valCharLen );
    2242:	2e 81       	ldd	r18, Y+6	; 0x06
    2244:	3f 81       	ldd	r19, Y+7	; 0x07
    2246:	4c a1       	ldd	r20, Y+36	; 0x24
    2248:	5d a1       	ldd	r21, Y+37	; 0x25
    224a:	8a a1       	ldd	r24, Y+34	; 0x22
    224c:	9b a1       	ldd	r25, Y+35	; 0x23
    224e:	b9 01       	movw	r22, r18
    2250:	db d6       	rcall	.+3510   	; 0x3008 <memcpy>
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	fe be       	out	0x3e, r15	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	ed be       	out	0x3d, r14	; 61

}
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	1e bf       	out	0x3e, r17	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	0d bf       	out	0x3d, r16	; 61
    2266:	a5 96       	adiw	r28, 0x25	; 37
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	df 90       	pop	r13
    2280:	cf 90       	pop	r12
    2282:	08 95       	ret

00002284 <_ZN3rtc8alarm_onEh>:

void rtc::alarm_on( uint8_t valAlarm01 ){
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	00 d0       	rcall	.+0      	; 0x228a <_ZN3rtc8alarm_onEh+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <_ZN3rtc8alarm_onEh+0x8>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    2296:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	b1 f4       	brne	.+44     	; 0x22ca <_ZN3rtc8alarm_onEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	21 e0       	ldi	r18, 0x01	; 1
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	ae 01       	movw	r20, r28
    22a8:	4f 5f       	subi	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	6f e0       	ldi	r22, 0x0F	; 15
    22ae:	1f dc       	rcall	.-1986   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x03;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	83 60       	ori	r24, 0x03	; 3
    22b4:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ba:	21 e0       	ldi	r18, 0x01	; 1
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	ae 01       	movw	r20, r28
    22c0:	4f 5f       	subi	r20, 0xFF	; 255
    22c2:	5f 4f       	sbci	r21, 0xFF	; 255
    22c4:	6f e0       	ldi	r22, 0x0F	; 15
    22c6:	55 dc       	rcall	.-1878   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
    22c8:	31 c0       	rjmp	.+98     	; 0x232c <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
    22cc:	88 23       	and	r24, r24
    22ce:	b1 f4       	brne	.+44     	; 0x22fc <_ZN3rtc8alarm_onEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	ae 01       	movw	r20, r28
    22da:	4f 5f       	subi	r20, 0xFF	; 255
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255
    22de:	6f e0       	ldi	r22, 0x0F	; 15
    22e0:	06 dc       	rcall	.-2036   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x01;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	81 60       	ori	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	ae 01       	movw	r20, r28
    22f2:	4f 5f       	subi	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	6f e0       	ldi	r22, 0x0F	; 15
    22f8:	3c dc       	rcall	.-1928   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
    22fa:	18 c0       	rjmp	.+48     	; 0x232c <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	a9 f4       	brne	.+42     	; 0x232c <_ZN3rtc8alarm_onEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	21 e0       	ldi	r18, 0x01	; 1
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	ae 01       	movw	r20, r28
    230c:	4f 5f       	subi	r20, 0xFF	; 255
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	6f e0       	ldi	r22, 0x0F	; 15
    2312:	ed db       	rcall	.-2086   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x02;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	82 60       	ori	r24, 0x02	; 2
    2318:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	21 e0       	ldi	r18, 0x01	; 1
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	ae 01       	movw	r20, r28
    2324:	4f 5f       	subi	r20, 0xFF	; 255
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
    2328:	6f e0       	ldi	r22, 0x0F	; 15
    232a:	23 dc       	rcall	.-1978   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
	}
	
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	08 95       	ret

0000233a <_ZN3rtc9alarm_offEh>:


void rtc::alarm_off( uint8_t valAlarm01 ){
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	00 d0       	rcall	.+0      	; 0x2340 <_ZN3rtc9alarm_offEh+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <_ZN3rtc9alarm_offEh+0x8>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	9b 83       	std	Y+3, r25	; 0x03
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    234c:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	b1 f4       	brne	.+44     	; 0x2380 <_ZN3rtc9alarm_offEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	ae 01       	movw	r20, r28
    235e:	4f 5f       	subi	r20, 0xFF	; 255
    2360:	5f 4f       	sbci	r21, 0xFF	; 255
    2362:	6f e0       	ldi	r22, 0x0F	; 15
    2364:	c4 db       	rcall	.-2168   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFC;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	8c 7f       	andi	r24, 0xFC	; 252
    236a:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	21 e0       	ldi	r18, 0x01	; 1
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	ae 01       	movw	r20, r28
    2376:	4f 5f       	subi	r20, 0xFF	; 255
    2378:	5f 4f       	sbci	r21, 0xFF	; 255
    237a:	6f e0       	ldi	r22, 0x0F	; 15
    237c:	fa db       	rcall	.-2060   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
    237e:	31 c0       	rjmp	.+98     	; 0x23e2 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	88 23       	and	r24, r24
    2384:	b1 f4       	brne	.+44     	; 0x23b2 <_ZN3rtc9alarm_offEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	ae 01       	movw	r20, r28
    2390:	4f 5f       	subi	r20, 0xFF	; 255
    2392:	5f 4f       	sbci	r21, 0xFF	; 255
    2394:	6f e0       	ldi	r22, 0x0F	; 15
    2396:	ab db       	rcall	.-2218   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFE;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	8e 7f       	andi	r24, 0xFE	; 254
    239c:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	9b 81       	ldd	r25, Y+3	; 0x03
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	ae 01       	movw	r20, r28
    23a8:	4f 5f       	subi	r20, 0xFF	; 255
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	6f e0       	ldi	r22, 0x0F	; 15
    23ae:	e1 db       	rcall	.-2110   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
    23b0:	18 c0       	rjmp	.+48     	; 0x23e2 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	a9 f4       	brne	.+42     	; 0x23e2 <_ZN3rtc9alarm_offEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	ae 01       	movw	r20, r28
    23c2:	4f 5f       	subi	r20, 0xFF	; 255
    23c4:	5f 4f       	sbci	r21, 0xFF	; 255
    23c6:	6f e0       	ldi	r22, 0x0F	; 15
    23c8:	92 db       	rcall	.-2268   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFD;
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	8d 7f       	andi	r24, 0xFD	; 253
    23ce:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	21 e0       	ldi	r18, 0x01	; 1
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	ae 01       	movw	r20, r28
    23da:	4f 5f       	subi	r20, 0xFF	; 255
    23dc:	5f 4f       	sbci	r21, 0xFF	; 255
    23de:	6f e0       	ldi	r22, 0x0F	; 15
    23e0:	c8 db       	rcall	.-2160   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
	}

}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	08 95       	ret

000023f0 <_ZN3rtc14clear_interuptEh>:


void rtc::clear_interupt( uint8_t valAlarm01 ){
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <_ZN3rtc14clear_interuptEh+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <_ZN3rtc14clear_interuptEh+0x8>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
    2400:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char chrNull;
	
	
	if( valAlarm01 == RTC_ALARM_0 ){
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	88 23       	and	r24, r24
    2406:	51 f4       	brne	.+20     	; 0x241c <_ZN3rtc14clear_interuptEh+0x2c>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	21 e0       	ldi	r18, 0x01	; 1
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	ae 01       	movw	r20, r28
    2412:	4f 5f       	subi	r20, 0xFF	; 255
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	67 e0       	ldi	r22, 0x07	; 7
    2418:	6a db       	rcall	.-2348   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
    241a:	22 c0       	rjmp	.+68     	; 0x2460 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	51 f4       	brne	.+20     	; 0x2436 <_ZN3rtc14clear_interuptEh+0x46>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	ae 01       	movw	r20, r28
    242c:	4f 5f       	subi	r20, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	6b e0       	ldi	r22, 0x0B	; 11
    2432:	5d db       	rcall	.-2374   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
    2434:	15 c0       	rjmp	.+42     	; 0x2460 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_BOTH ){
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	91 f4       	brne	.+36     	; 0x2460 <_ZN3rtc14clear_interuptEh+0x70>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	9b 81       	ldd	r25, Y+3	; 0x03
    2440:	21 e0       	ldi	r18, 0x01	; 1
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	ae 01       	movw	r20, r28
    2446:	4f 5f       	subi	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	67 e0       	ldi	r22, 0x07	; 7
    244c:	50 db       	rcall	.-2400   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	21 e0       	ldi	r18, 0x01	; 1
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	ae 01       	movw	r20, r28
    2458:	4f 5f       	subi	r20, 0xFF	; 255
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	6b e0       	ldi	r22, 0x0B	; 11
    245e:	47 db       	rcall	.-2418   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
	}
	
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <_ZN3rtc5alarmEhh9rtc_alarm>:


void rtc::alarm( uint8_t valGetSet, uint8_t valAlarm01, rtc_alarm rtaToSetOrGet ){
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	2a 97       	sbiw	r28, 0x0a	; 10
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
    248a:	6d 83       	std	Y+5, r22	; 0x05
    248c:	4e 83       	std	Y+6, r20	; 0x06
    248e:	0f 83       	std	Y+7, r16	; 0x07
    2490:	18 87       	std	Y+8, r17	; 0x08
    2492:	29 87       	std	Y+9, r18	; 0x09
    2494:	3a 87       	std	Y+10, r19	; 0x0a
	
	unsigned char valAlarmAddress { 0x00 };
    2496:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uchTempControl { 0x00 };
    2498:	1a 82       	std	Y+2, r1	; 0x02


	if( !valAlarm01 ){
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	88 23       	and	r24, r24
    249e:	19 f4       	brne	.+6      	; 0x24a6 <_ZN3rtc5alarmEhh9rtc_alarm+0x38>
			valAlarmAddress = RTC_ADDR_A0S;
    24a0:	87 e0       	ldi	r24, 0x07	; 7
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
	}else if( valAlarm01 ){
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	88 23       	and	r24, r24
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
		valAlarmAddress = RTC_ADDR_A1S;
    24ac:	8b e0       	ldi	r24, 0x0B	; 11
    24ae:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( !valGetSet ){
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	88 23       	and	r24, r24
    24b4:	51 f4       	brne	.+20     	; 0x24ca <_ZN3rtc5alarmEhh9rtc_alarm+0x5c>
		read_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    24b6:	ae 01       	movw	r20, r28
    24b8:	49 5f       	subi	r20, 0xF9	; 249
    24ba:	5f 4f       	sbci	r21, 0xFF	; 255
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	24 e0       	ldi	r18, 0x04	; 4
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	69 81       	ldd	r22, Y+1	; 0x01
    24c6:	13 db       	rcall	.-2522   	; 0x1aee <_ZN3rtc10read_blockEhPhj>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
	}else if( valGetSet ){
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	88 23       	and	r24, r24
    24ce:	89 f0       	breq	.+34     	; 0x24f2 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
		alarm_off( valAlarm01 );
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	6e 81       	ldd	r22, Y+6	; 0x06
    24d6:	31 df       	rcall	.-414    	; 0x233a <_ZN3rtc9alarm_offEh>
		write_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    24d8:	ae 01       	movw	r20, r28
    24da:	49 5f       	subi	r20, 0xF9	; 249
    24dc:	5f 4f       	sbci	r21, 0xFF	; 255
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	24 e0       	ldi	r18, 0x04	; 4
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	69 81       	ldd	r22, Y+1	; 0x01
    24e8:	44 db       	rcall	.-2424   	; 0x1b72 <_ZN3rtc11write_blockEhPhj>
		alarm_on( valAlarm01 );
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	6e 81       	ldd	r22, Y+6	; 0x06
    24f0:	c9 de       	rcall	.-622    	; 0x2284 <_ZN3rtc8alarm_onEh>
	}
}
    24f2:	2a 96       	adiw	r28, 0x0a	; 10
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	08 95       	ret

00002508 <__cmpsf2>:
    2508:	2f d0       	rcall	.+94     	; 0x2568 <__fp_cmp>
    250a:	08 f4       	brcc	.+2      	; 0x250e <__cmpsf2+0x6>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	08 95       	ret

00002510 <__fixunssfsi>:
    2510:	57 d0       	rcall	.+174    	; 0x25c0 <__fp_splitA>
    2512:	88 f0       	brcs	.+34     	; 0x2536 <__fixunssfsi+0x26>
    2514:	9f 57       	subi	r25, 0x7F	; 127
    2516:	90 f0       	brcs	.+36     	; 0x253c <__fixunssfsi+0x2c>
    2518:	b9 2f       	mov	r27, r25
    251a:	99 27       	eor	r25, r25
    251c:	b7 51       	subi	r27, 0x17	; 23
    251e:	a0 f0       	brcs	.+40     	; 0x2548 <__fixunssfsi+0x38>
    2520:	d1 f0       	breq	.+52     	; 0x2556 <__fixunssfsi+0x46>
    2522:	66 0f       	add	r22, r22
    2524:	77 1f       	adc	r23, r23
    2526:	88 1f       	adc	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	1a f0       	brmi	.+6      	; 0x2532 <__fixunssfsi+0x22>
    252c:	ba 95       	dec	r27
    252e:	c9 f7       	brne	.-14     	; 0x2522 <__fixunssfsi+0x12>
    2530:	12 c0       	rjmp	.+36     	; 0x2556 <__fixunssfsi+0x46>
    2532:	b1 30       	cpi	r27, 0x01	; 1
    2534:	81 f0       	breq	.+32     	; 0x2556 <__fixunssfsi+0x46>
    2536:	5e d0       	rcall	.+188    	; 0x25f4 <__fp_zero>
    2538:	b1 e0       	ldi	r27, 0x01	; 1
    253a:	08 95       	ret
    253c:	5b c0       	rjmp	.+182    	; 0x25f4 <__fp_zero>
    253e:	67 2f       	mov	r22, r23
    2540:	78 2f       	mov	r23, r24
    2542:	88 27       	eor	r24, r24
    2544:	b8 5f       	subi	r27, 0xF8	; 248
    2546:	39 f0       	breq	.+14     	; 0x2556 <__fixunssfsi+0x46>
    2548:	b9 3f       	cpi	r27, 0xF9	; 249
    254a:	cc f3       	brlt	.-14     	; 0x253e <__fixunssfsi+0x2e>
    254c:	86 95       	lsr	r24
    254e:	77 95       	ror	r23
    2550:	67 95       	ror	r22
    2552:	b3 95       	inc	r27
    2554:	d9 f7       	brne	.-10     	; 0x254c <__fixunssfsi+0x3c>
    2556:	3e f4       	brtc	.+14     	; 0x2566 <__fixunssfsi+0x56>
    2558:	90 95       	com	r25
    255a:	80 95       	com	r24
    255c:	70 95       	com	r23
    255e:	61 95       	neg	r22
    2560:	7f 4f       	sbci	r23, 0xFF	; 255
    2562:	8f 4f       	sbci	r24, 0xFF	; 255
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	08 95       	ret

00002568 <__fp_cmp>:
    2568:	99 0f       	add	r25, r25
    256a:	00 08       	sbc	r0, r0
    256c:	55 0f       	add	r21, r21
    256e:	aa 0b       	sbc	r26, r26
    2570:	e0 e8       	ldi	r30, 0x80	; 128
    2572:	fe ef       	ldi	r31, 0xFE	; 254
    2574:	16 16       	cp	r1, r22
    2576:	17 06       	cpc	r1, r23
    2578:	e8 07       	cpc	r30, r24
    257a:	f9 07       	cpc	r31, r25
    257c:	c0 f0       	brcs	.+48     	; 0x25ae <__fp_cmp+0x46>
    257e:	12 16       	cp	r1, r18
    2580:	13 06       	cpc	r1, r19
    2582:	e4 07       	cpc	r30, r20
    2584:	f5 07       	cpc	r31, r21
    2586:	98 f0       	brcs	.+38     	; 0x25ae <__fp_cmp+0x46>
    2588:	62 1b       	sub	r22, r18
    258a:	73 0b       	sbc	r23, r19
    258c:	84 0b       	sbc	r24, r20
    258e:	95 0b       	sbc	r25, r21
    2590:	39 f4       	brne	.+14     	; 0x25a0 <__fp_cmp+0x38>
    2592:	0a 26       	eor	r0, r26
    2594:	61 f0       	breq	.+24     	; 0x25ae <__fp_cmp+0x46>
    2596:	23 2b       	or	r18, r19
    2598:	24 2b       	or	r18, r20
    259a:	25 2b       	or	r18, r21
    259c:	21 f4       	brne	.+8      	; 0x25a6 <__fp_cmp+0x3e>
    259e:	08 95       	ret
    25a0:	0a 26       	eor	r0, r26
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <__fp_cmp+0x3e>
    25a4:	a1 40       	sbci	r26, 0x01	; 1
    25a6:	a6 95       	lsr	r26
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	81 1d       	adc	r24, r1
    25ac:	81 1d       	adc	r24, r1
    25ae:	08 95       	ret

000025b0 <__fp_split3>:
    25b0:	57 fd       	sbrc	r21, 7
    25b2:	90 58       	subi	r25, 0x80	; 128
    25b4:	44 0f       	add	r20, r20
    25b6:	55 1f       	adc	r21, r21
    25b8:	59 f0       	breq	.+22     	; 0x25d0 <__fp_splitA+0x10>
    25ba:	5f 3f       	cpi	r21, 0xFF	; 255
    25bc:	71 f0       	breq	.+28     	; 0x25da <__fp_splitA+0x1a>
    25be:	47 95       	ror	r20

000025c0 <__fp_splitA>:
    25c0:	88 0f       	add	r24, r24
    25c2:	97 fb       	bst	r25, 7
    25c4:	99 1f       	adc	r25, r25
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <__fp_splitA+0x20>
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	79 f0       	breq	.+30     	; 0x25ea <__fp_splitA+0x2a>
    25cc:	87 95       	ror	r24
    25ce:	08 95       	ret
    25d0:	12 16       	cp	r1, r18
    25d2:	13 06       	cpc	r1, r19
    25d4:	14 06       	cpc	r1, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	f2 cf       	rjmp	.-28     	; 0x25be <__fp_split3+0xe>
    25da:	46 95       	lsr	r20
    25dc:	f1 df       	rcall	.-30     	; 0x25c0 <__fp_splitA>
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <__fp_splitA+0x30>
    25e0:	16 16       	cp	r1, r22
    25e2:	17 06       	cpc	r1, r23
    25e4:	18 06       	cpc	r1, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	f1 cf       	rjmp	.-30     	; 0x25cc <__fp_splitA+0xc>
    25ea:	86 95       	lsr	r24
    25ec:	71 05       	cpc	r23, r1
    25ee:	61 05       	cpc	r22, r1
    25f0:	08 94       	sec
    25f2:	08 95       	ret

000025f4 <__fp_zero>:
    25f4:	e8 94       	clt

000025f6 <__fp_szero>:
    25f6:	bb 27       	eor	r27, r27
    25f8:	66 27       	eor	r22, r22
    25fa:	77 27       	eor	r23, r23
    25fc:	cb 01       	movw	r24, r22
    25fe:	97 f9       	bld	r25, 7
    2600:	08 95       	ret

00002602 <__gesf2>:
    2602:	b2 df       	rcall	.-156    	; 0x2568 <__fp_cmp>
    2604:	08 f4       	brcc	.+2      	; 0x2608 <__gesf2+0x6>
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	08 95       	ret

0000260a <__mulsf3>:
    260a:	0b d0       	rcall	.+22     	; 0x2622 <__mulsf3x>
    260c:	78 c0       	rjmp	.+240    	; 0x26fe <__fp_round>
    260e:	69 d0       	rcall	.+210    	; 0x26e2 <__fp_pscA>
    2610:	28 f0       	brcs	.+10     	; 0x261c <__mulsf3+0x12>
    2612:	6e d0       	rcall	.+220    	; 0x26f0 <__fp_pscB>
    2614:	18 f0       	brcs	.+6      	; 0x261c <__mulsf3+0x12>
    2616:	95 23       	and	r25, r21
    2618:	09 f0       	breq	.+2      	; 0x261c <__mulsf3+0x12>
    261a:	5a c0       	rjmp	.+180    	; 0x26d0 <__fp_inf>
    261c:	5f c0       	rjmp	.+190    	; 0x26dc <__fp_nan>
    261e:	11 24       	eor	r1, r1
    2620:	ea cf       	rjmp	.-44     	; 0x25f6 <__fp_szero>

00002622 <__mulsf3x>:
    2622:	c6 df       	rcall	.-116    	; 0x25b0 <__fp_split3>
    2624:	a0 f3       	brcs	.-24     	; 0x260e <__mulsf3+0x4>

00002626 <__mulsf3_pse>:
    2626:	95 9f       	mul	r25, r21
    2628:	d1 f3       	breq	.-12     	; 0x261e <__mulsf3+0x14>
    262a:	95 0f       	add	r25, r21
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	55 1f       	adc	r21, r21
    2630:	62 9f       	mul	r22, r18
    2632:	f0 01       	movw	r30, r0
    2634:	72 9f       	mul	r23, r18
    2636:	bb 27       	eor	r27, r27
    2638:	f0 0d       	add	r31, r0
    263a:	b1 1d       	adc	r27, r1
    263c:	63 9f       	mul	r22, r19
    263e:	aa 27       	eor	r26, r26
    2640:	f0 0d       	add	r31, r0
    2642:	b1 1d       	adc	r27, r1
    2644:	aa 1f       	adc	r26, r26
    2646:	64 9f       	mul	r22, r20
    2648:	66 27       	eor	r22, r22
    264a:	b0 0d       	add	r27, r0
    264c:	a1 1d       	adc	r26, r1
    264e:	66 1f       	adc	r22, r22
    2650:	82 9f       	mul	r24, r18
    2652:	22 27       	eor	r18, r18
    2654:	b0 0d       	add	r27, r0
    2656:	a1 1d       	adc	r26, r1
    2658:	62 1f       	adc	r22, r18
    265a:	73 9f       	mul	r23, r19
    265c:	b0 0d       	add	r27, r0
    265e:	a1 1d       	adc	r26, r1
    2660:	62 1f       	adc	r22, r18
    2662:	83 9f       	mul	r24, r19
    2664:	a0 0d       	add	r26, r0
    2666:	61 1d       	adc	r22, r1
    2668:	22 1f       	adc	r18, r18
    266a:	74 9f       	mul	r23, r20
    266c:	33 27       	eor	r19, r19
    266e:	a0 0d       	add	r26, r0
    2670:	61 1d       	adc	r22, r1
    2672:	23 1f       	adc	r18, r19
    2674:	84 9f       	mul	r24, r20
    2676:	60 0d       	add	r22, r0
    2678:	21 1d       	adc	r18, r1
    267a:	82 2f       	mov	r24, r18
    267c:	76 2f       	mov	r23, r22
    267e:	6a 2f       	mov	r22, r26
    2680:	11 24       	eor	r1, r1
    2682:	9f 57       	subi	r25, 0x7F	; 127
    2684:	50 40       	sbci	r21, 0x00	; 0
    2686:	8a f0       	brmi	.+34     	; 0x26aa <__mulsf3_pse+0x84>
    2688:	e1 f0       	breq	.+56     	; 0x26c2 <__mulsf3_pse+0x9c>
    268a:	88 23       	and	r24, r24
    268c:	4a f0       	brmi	.+18     	; 0x26a0 <__mulsf3_pse+0x7a>
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	bb 1f       	adc	r27, r27
    2694:	66 1f       	adc	r22, r22
    2696:	77 1f       	adc	r23, r23
    2698:	88 1f       	adc	r24, r24
    269a:	91 50       	subi	r25, 0x01	; 1
    269c:	50 40       	sbci	r21, 0x00	; 0
    269e:	a9 f7       	brne	.-22     	; 0x268a <__mulsf3_pse+0x64>
    26a0:	9e 3f       	cpi	r25, 0xFE	; 254
    26a2:	51 05       	cpc	r21, r1
    26a4:	70 f0       	brcs	.+28     	; 0x26c2 <__mulsf3_pse+0x9c>
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <__fp_inf>
    26a8:	a6 cf       	rjmp	.-180    	; 0x25f6 <__fp_szero>
    26aa:	5f 3f       	cpi	r21, 0xFF	; 255
    26ac:	ec f3       	brlt	.-6      	; 0x26a8 <__mulsf3_pse+0x82>
    26ae:	98 3e       	cpi	r25, 0xE8	; 232
    26b0:	dc f3       	brlt	.-10     	; 0x26a8 <__mulsf3_pse+0x82>
    26b2:	86 95       	lsr	r24
    26b4:	77 95       	ror	r23
    26b6:	67 95       	ror	r22
    26b8:	b7 95       	ror	r27
    26ba:	f7 95       	ror	r31
    26bc:	e7 95       	ror	r30
    26be:	9f 5f       	subi	r25, 0xFF	; 255
    26c0:	c1 f7       	brne	.-16     	; 0x26b2 <__mulsf3_pse+0x8c>
    26c2:	fe 2b       	or	r31, r30
    26c4:	88 0f       	add	r24, r24
    26c6:	91 1d       	adc	r25, r1
    26c8:	96 95       	lsr	r25
    26ca:	87 95       	ror	r24
    26cc:	97 f9       	bld	r25, 7
    26ce:	08 95       	ret

000026d0 <__fp_inf>:
    26d0:	97 f9       	bld	r25, 7
    26d2:	9f 67       	ori	r25, 0x7F	; 127
    26d4:	80 e8       	ldi	r24, 0x80	; 128
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	08 95       	ret

000026dc <__fp_nan>:
    26dc:	9f ef       	ldi	r25, 0xFF	; 255
    26de:	80 ec       	ldi	r24, 0xC0	; 192
    26e0:	08 95       	ret

000026e2 <__fp_pscA>:
    26e2:	00 24       	eor	r0, r0
    26e4:	0a 94       	dec	r0
    26e6:	16 16       	cp	r1, r22
    26e8:	17 06       	cpc	r1, r23
    26ea:	18 06       	cpc	r1, r24
    26ec:	09 06       	cpc	r0, r25
    26ee:	08 95       	ret

000026f0 <__fp_pscB>:
    26f0:	00 24       	eor	r0, r0
    26f2:	0a 94       	dec	r0
    26f4:	12 16       	cp	r1, r18
    26f6:	13 06       	cpc	r1, r19
    26f8:	14 06       	cpc	r1, r20
    26fa:	05 06       	cpc	r0, r21
    26fc:	08 95       	ret

000026fe <__fp_round>:
    26fe:	09 2e       	mov	r0, r25
    2700:	03 94       	inc	r0
    2702:	00 0c       	add	r0, r0
    2704:	11 f4       	brne	.+4      	; 0x270a <__fp_round+0xc>
    2706:	88 23       	and	r24, r24
    2708:	52 f0       	brmi	.+20     	; 0x271e <__fp_round+0x20>
    270a:	bb 0f       	add	r27, r27
    270c:	40 f4       	brcc	.+16     	; 0x271e <__fp_round+0x20>
    270e:	bf 2b       	or	r27, r31
    2710:	11 f4       	brne	.+4      	; 0x2716 <__fp_round+0x18>
    2712:	60 ff       	sbrs	r22, 0
    2714:	04 c0       	rjmp	.+8      	; 0x271e <__fp_round+0x20>
    2716:	6f 5f       	subi	r22, 0xFF	; 255
    2718:	7f 4f       	sbci	r23, 0xFF	; 255
    271a:	8f 4f       	sbci	r24, 0xFF	; 255
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	08 95       	ret

00002720 <vfprintf>:
    2720:	2f 92       	push	r2
    2722:	3f 92       	push	r3
    2724:	4f 92       	push	r4
    2726:	5f 92       	push	r5
    2728:	6f 92       	push	r6
    272a:	7f 92       	push	r7
    272c:	8f 92       	push	r8
    272e:	9f 92       	push	r9
    2730:	af 92       	push	r10
    2732:	bf 92       	push	r11
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	63 97       	sbiw	r28, 0x13	; 19
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	6c 01       	movw	r12, r24
    2756:	4b 01       	movw	r8, r22
    2758:	2a 01       	movw	r4, r20
    275a:	fc 01       	movw	r30, r24
    275c:	17 82       	std	Z+7, r1	; 0x07
    275e:	16 82       	std	Z+6, r1	; 0x06
    2760:	83 81       	ldd	r24, Z+3	; 0x03
    2762:	81 ff       	sbrs	r24, 1
    2764:	29 c3       	rjmp	.+1618   	; 0x2db8 <vfprintf+0x698>
    2766:	ae 01       	movw	r20, r28
    2768:	4f 5f       	subi	r20, 0xFF	; 255
    276a:	5f 4f       	sbci	r21, 0xFF	; 255
    276c:	3a 01       	movw	r6, r20
    276e:	f6 01       	movw	r30, r12
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	f4 01       	movw	r30, r8
    2774:	93 fd       	sbrc	r25, 3
    2776:	85 91       	lpm	r24, Z+
    2778:	93 ff       	sbrs	r25, 3
    277a:	81 91       	ld	r24, Z+
    277c:	4f 01       	movw	r8, r30
    277e:	88 23       	and	r24, r24
    2780:	09 f4       	brne	.+2      	; 0x2784 <vfprintf+0x64>
    2782:	16 c3       	rjmp	.+1580   	; 0x2db0 <vfprintf+0x690>
    2784:	85 32       	cpi	r24, 0x25	; 37
    2786:	39 f4       	brne	.+14     	; 0x2796 <vfprintf+0x76>
    2788:	93 fd       	sbrc	r25, 3
    278a:	85 91       	lpm	r24, Z+
    278c:	93 ff       	sbrs	r25, 3
    278e:	81 91       	ld	r24, Z+
    2790:	4f 01       	movw	r8, r30
    2792:	85 32       	cpi	r24, 0x25	; 37
    2794:	31 f4       	brne	.+12     	; 0x27a2 <vfprintf+0x82>
    2796:	b6 01       	movw	r22, r12
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	4a d4       	rcall	.+2196   	; 0x3030 <fputc>
    279c:	52 01       	movw	r10, r4
    279e:	25 01       	movw	r4, r10
    27a0:	e6 cf       	rjmp	.-52     	; 0x276e <vfprintf+0x4e>
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	f1 2c       	mov	r15, r1
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	20 32       	cpi	r18, 0x20	; 32
    27aa:	a0 f4       	brcc	.+40     	; 0x27d4 <vfprintf+0xb4>
    27ac:	8b 32       	cpi	r24, 0x2B	; 43
    27ae:	69 f0       	breq	.+26     	; 0x27ca <vfprintf+0xaa>
    27b0:	30 f4       	brcc	.+12     	; 0x27be <vfprintf+0x9e>
    27b2:	80 32       	cpi	r24, 0x20	; 32
    27b4:	59 f0       	breq	.+22     	; 0x27cc <vfprintf+0xac>
    27b6:	83 32       	cpi	r24, 0x23	; 35
    27b8:	69 f4       	brne	.+26     	; 0x27d4 <vfprintf+0xb4>
    27ba:	20 61       	ori	r18, 0x10	; 16
    27bc:	2c c0       	rjmp	.+88     	; 0x2816 <vfprintf+0xf6>
    27be:	8d 32       	cpi	r24, 0x2D	; 45
    27c0:	39 f0       	breq	.+14     	; 0x27d0 <vfprintf+0xb0>
    27c2:	80 33       	cpi	r24, 0x30	; 48
    27c4:	39 f4       	brne	.+14     	; 0x27d4 <vfprintf+0xb4>
    27c6:	21 60       	ori	r18, 0x01	; 1
    27c8:	26 c0       	rjmp	.+76     	; 0x2816 <vfprintf+0xf6>
    27ca:	22 60       	ori	r18, 0x02	; 2
    27cc:	24 60       	ori	r18, 0x04	; 4
    27ce:	23 c0       	rjmp	.+70     	; 0x2816 <vfprintf+0xf6>
    27d0:	28 60       	ori	r18, 0x08	; 8
    27d2:	21 c0       	rjmp	.+66     	; 0x2816 <vfprintf+0xf6>
    27d4:	27 fd       	sbrc	r18, 7
    27d6:	27 c0       	rjmp	.+78     	; 0x2826 <vfprintf+0x106>
    27d8:	30 ed       	ldi	r19, 0xD0	; 208
    27da:	38 0f       	add	r19, r24
    27dc:	3a 30       	cpi	r19, 0x0A	; 10
    27de:	78 f4       	brcc	.+30     	; 0x27fe <vfprintf+0xde>
    27e0:	26 ff       	sbrs	r18, 6
    27e2:	06 c0       	rjmp	.+12     	; 0x27f0 <vfprintf+0xd0>
    27e4:	fa e0       	ldi	r31, 0x0A	; 10
    27e6:	1f 9f       	mul	r17, r31
    27e8:	30 0d       	add	r19, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	13 2f       	mov	r17, r19
    27ee:	13 c0       	rjmp	.+38     	; 0x2816 <vfprintf+0xf6>
    27f0:	4a e0       	ldi	r20, 0x0A	; 10
    27f2:	f4 9e       	mul	r15, r20
    27f4:	30 0d       	add	r19, r0
    27f6:	11 24       	eor	r1, r1
    27f8:	f3 2e       	mov	r15, r19
    27fa:	20 62       	ori	r18, 0x20	; 32
    27fc:	0c c0       	rjmp	.+24     	; 0x2816 <vfprintf+0xf6>
    27fe:	8e 32       	cpi	r24, 0x2E	; 46
    2800:	21 f4       	brne	.+8      	; 0x280a <vfprintf+0xea>
    2802:	26 fd       	sbrc	r18, 6
    2804:	d5 c2       	rjmp	.+1450   	; 0x2db0 <vfprintf+0x690>
    2806:	20 64       	ori	r18, 0x40	; 64
    2808:	06 c0       	rjmp	.+12     	; 0x2816 <vfprintf+0xf6>
    280a:	8c 36       	cpi	r24, 0x6C	; 108
    280c:	11 f4       	brne	.+4      	; 0x2812 <vfprintf+0xf2>
    280e:	20 68       	ori	r18, 0x80	; 128
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0xf6>
    2812:	88 36       	cpi	r24, 0x68	; 104
    2814:	41 f4       	brne	.+16     	; 0x2826 <vfprintf+0x106>
    2816:	f4 01       	movw	r30, r8
    2818:	93 fd       	sbrc	r25, 3
    281a:	85 91       	lpm	r24, Z+
    281c:	93 ff       	sbrs	r25, 3
    281e:	81 91       	ld	r24, Z+
    2820:	4f 01       	movw	r8, r30
    2822:	81 11       	cpse	r24, r1
    2824:	c1 cf       	rjmp	.-126    	; 0x27a8 <vfprintf+0x88>
    2826:	9b eb       	ldi	r25, 0xBB	; 187
    2828:	98 0f       	add	r25, r24
    282a:	93 30       	cpi	r25, 0x03	; 3
    282c:	18 f4       	brcc	.+6      	; 0x2834 <vfprintf+0x114>
    282e:	20 61       	ori	r18, 0x10	; 16
    2830:	80 5e       	subi	r24, 0xE0	; 224
    2832:	06 c0       	rjmp	.+12     	; 0x2840 <vfprintf+0x120>
    2834:	9b e9       	ldi	r25, 0x9B	; 155
    2836:	98 0f       	add	r25, r24
    2838:	93 30       	cpi	r25, 0x03	; 3
    283a:	08 f0       	brcs	.+2      	; 0x283e <vfprintf+0x11e>
    283c:	64 c1       	rjmp	.+712    	; 0x2b06 <vfprintf+0x3e6>
    283e:	2f 7e       	andi	r18, 0xEF	; 239
    2840:	26 ff       	sbrs	r18, 6
    2842:	16 e0       	ldi	r17, 0x06	; 6
    2844:	2f 73       	andi	r18, 0x3F	; 63
    2846:	32 2e       	mov	r3, r18
    2848:	85 36       	cpi	r24, 0x65	; 101
    284a:	19 f4       	brne	.+6      	; 0x2852 <vfprintf+0x132>
    284c:	20 64       	ori	r18, 0x40	; 64
    284e:	32 2e       	mov	r3, r18
    2850:	08 c0       	rjmp	.+16     	; 0x2862 <vfprintf+0x142>
    2852:	86 36       	cpi	r24, 0x66	; 102
    2854:	21 f4       	brne	.+8      	; 0x285e <vfprintf+0x13e>
    2856:	f2 2f       	mov	r31, r18
    2858:	f0 68       	ori	r31, 0x80	; 128
    285a:	3f 2e       	mov	r3, r31
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <vfprintf+0x142>
    285e:	11 11       	cpse	r17, r1
    2860:	11 50       	subi	r17, 0x01	; 1
    2862:	37 fe       	sbrs	r3, 7
    2864:	07 c0       	rjmp	.+14     	; 0x2874 <vfprintf+0x154>
    2866:	1c 33       	cpi	r17, 0x3C	; 60
    2868:	50 f4       	brcc	.+20     	; 0x287e <vfprintf+0x15e>
    286a:	ee 24       	eor	r14, r14
    286c:	e3 94       	inc	r14
    286e:	e1 0e       	add	r14, r17
    2870:	27 e0       	ldi	r18, 0x07	; 7
    2872:	0b c0       	rjmp	.+22     	; 0x288a <vfprintf+0x16a>
    2874:	18 30       	cpi	r17, 0x08	; 8
    2876:	38 f0       	brcs	.+14     	; 0x2886 <vfprintf+0x166>
    2878:	27 e0       	ldi	r18, 0x07	; 7
    287a:	17 e0       	ldi	r17, 0x07	; 7
    287c:	05 c0       	rjmp	.+10     	; 0x2888 <vfprintf+0x168>
    287e:	27 e0       	ldi	r18, 0x07	; 7
    2880:	4c e3       	ldi	r20, 0x3C	; 60
    2882:	e4 2e       	mov	r14, r20
    2884:	02 c0       	rjmp	.+4      	; 0x288a <vfprintf+0x16a>
    2886:	21 2f       	mov	r18, r17
    2888:	e1 2c       	mov	r14, r1
    288a:	52 01       	movw	r10, r4
    288c:	44 e0       	ldi	r20, 0x04	; 4
    288e:	a4 0e       	add	r10, r20
    2890:	b1 1c       	adc	r11, r1
    2892:	f2 01       	movw	r30, r4
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	0e 2d       	mov	r16, r14
    289e:	a3 01       	movw	r20, r6
    28a0:	d0 d2       	rcall	.+1440   	; 0x2e42 <__ftoa_engine>
    28a2:	2c 01       	movw	r4, r24
    28a4:	09 81       	ldd	r16, Y+1	; 0x01
    28a6:	00 ff       	sbrs	r16, 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x18e>
    28aa:	03 ff       	sbrs	r16, 3
    28ac:	07 c0       	rjmp	.+14     	; 0x28bc <vfprintf+0x19c>
    28ae:	31 fc       	sbrc	r3, 1
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <vfprintf+0x1a2>
    28b2:	32 fe       	sbrs	r3, 2
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <vfprintf+0x1a8>
    28b6:	30 e2       	ldi	r19, 0x20	; 32
    28b8:	23 2e       	mov	r2, r19
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <vfprintf+0x1aa>
    28bc:	2d e2       	ldi	r18, 0x2D	; 45
    28be:	22 2e       	mov	r2, r18
    28c0:	04 c0       	rjmp	.+8      	; 0x28ca <vfprintf+0x1aa>
    28c2:	9b e2       	ldi	r25, 0x2B	; 43
    28c4:	29 2e       	mov	r2, r25
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <vfprintf+0x1aa>
    28c8:	21 2c       	mov	r2, r1
    28ca:	80 2f       	mov	r24, r16
    28cc:	8c 70       	andi	r24, 0x0C	; 12
    28ce:	19 f0       	breq	.+6      	; 0x28d6 <vfprintf+0x1b6>
    28d0:	21 10       	cpse	r2, r1
    28d2:	51 c2       	rjmp	.+1186   	; 0x2d76 <vfprintf+0x656>
    28d4:	8d c2       	rjmp	.+1306   	; 0x2df0 <vfprintf+0x6d0>
    28d6:	37 fe       	sbrs	r3, 7
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <vfprintf+0x1d8>
    28da:	e4 0c       	add	r14, r4
    28dc:	04 ff       	sbrs	r16, 4
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <vfprintf+0x1c8>
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	81 33       	cpi	r24, 0x31	; 49
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <vfprintf+0x1c8>
    28e6:	ea 94       	dec	r14
    28e8:	1e 14       	cp	r1, r14
    28ea:	74 f5       	brge	.+92     	; 0x2948 <vfprintf+0x228>
    28ec:	f8 e0       	ldi	r31, 0x08	; 8
    28ee:	fe 15       	cp	r31, r14
    28f0:	78 f5       	brcc	.+94     	; 0x2950 <vfprintf+0x230>
    28f2:	88 e0       	ldi	r24, 0x08	; 8
    28f4:	e8 2e       	mov	r14, r24
    28f6:	2c c0       	rjmp	.+88     	; 0x2950 <vfprintf+0x230>
    28f8:	36 fc       	sbrc	r3, 6
    28fa:	2a c0       	rjmp	.+84     	; 0x2950 <vfprintf+0x230>
    28fc:	81 2f       	mov	r24, r17
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	84 15       	cp	r24, r4
    2902:	95 05       	cpc	r25, r5
    2904:	9c f0       	brlt	.+38     	; 0x292c <vfprintf+0x20c>
    2906:	2c ef       	ldi	r18, 0xFC	; 252
    2908:	42 16       	cp	r4, r18
    290a:	2f ef       	ldi	r18, 0xFF	; 255
    290c:	52 06       	cpc	r5, r18
    290e:	74 f0       	brlt	.+28     	; 0x292c <vfprintf+0x20c>
    2910:	43 2d       	mov	r20, r3
    2912:	40 68       	ori	r20, 0x80	; 128
    2914:	34 2e       	mov	r3, r20
    2916:	0a c0       	rjmp	.+20     	; 0x292c <vfprintf+0x20c>
    2918:	e2 e0       	ldi	r30, 0x02	; 2
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ec 0f       	add	r30, r28
    291e:	fd 1f       	adc	r31, r29
    2920:	e1 0f       	add	r30, r17
    2922:	f1 1d       	adc	r31, r1
    2924:	80 81       	ld	r24, Z
    2926:	80 33       	cpi	r24, 0x30	; 48
    2928:	19 f4       	brne	.+6      	; 0x2930 <vfprintf+0x210>
    292a:	11 50       	subi	r17, 0x01	; 1
    292c:	11 11       	cpse	r17, r1
    292e:	f4 cf       	rjmp	.-24     	; 0x2918 <vfprintf+0x1f8>
    2930:	37 fe       	sbrs	r3, 7
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <vfprintf+0x230>
    2934:	ee 24       	eor	r14, r14
    2936:	e3 94       	inc	r14
    2938:	e1 0e       	add	r14, r17
    293a:	81 2f       	mov	r24, r17
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	48 16       	cp	r4, r24
    2940:	59 06       	cpc	r5, r25
    2942:	2c f4       	brge	.+10     	; 0x294e <vfprintf+0x22e>
    2944:	14 19       	sub	r17, r4
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <vfprintf+0x230>
    2948:	ee 24       	eor	r14, r14
    294a:	e3 94       	inc	r14
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <vfprintf+0x230>
    294e:	10 e0       	ldi	r17, 0x00	; 0
    2950:	37 fe       	sbrs	r3, 7
    2952:	06 c0       	rjmp	.+12     	; 0x2960 <vfprintf+0x240>
    2954:	14 14       	cp	r1, r4
    2956:	15 04       	cpc	r1, r5
    2958:	34 f4       	brge	.+12     	; 0x2966 <vfprintf+0x246>
    295a:	c2 01       	movw	r24, r4
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	05 c0       	rjmp	.+10     	; 0x296a <vfprintf+0x24a>
    2960:	85 e0       	ldi	r24, 0x05	; 5
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 c0       	rjmp	.+4      	; 0x296a <vfprintf+0x24a>
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	21 10       	cpse	r2, r1
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	11 23       	and	r17, r17
    2970:	31 f0       	breq	.+12     	; 0x297e <vfprintf+0x25e>
    2972:	21 2f       	mov	r18, r17
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	2f 2d       	mov	r18, r15
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	82 17       	cp	r24, r18
    2984:	93 07       	cpc	r25, r19
    2986:	14 f4       	brge	.+4      	; 0x298c <vfprintf+0x26c>
    2988:	f8 1a       	sub	r15, r24
    298a:	01 c0       	rjmp	.+2      	; 0x298e <vfprintf+0x26e>
    298c:	f1 2c       	mov	r15, r1
    298e:	83 2d       	mov	r24, r3
    2990:	89 70       	andi	r24, 0x09	; 9
    2992:	41 f4       	brne	.+16     	; 0x29a4 <vfprintf+0x284>
    2994:	ff 20       	and	r15, r15
    2996:	31 f0       	breq	.+12     	; 0x29a4 <vfprintf+0x284>
    2998:	b6 01       	movw	r22, r12
    299a:	80 e2       	ldi	r24, 0x20	; 32
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	48 d3       	rcall	.+1680   	; 0x3030 <fputc>
    29a0:	fa 94       	dec	r15
    29a2:	f8 cf       	rjmp	.-16     	; 0x2994 <vfprintf+0x274>
    29a4:	22 20       	and	r2, r2
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <vfprintf+0x290>
    29a8:	b6 01       	movw	r22, r12
    29aa:	82 2d       	mov	r24, r2
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	40 d3       	rcall	.+1664   	; 0x3030 <fputc>
    29b0:	33 fc       	sbrc	r3, 3
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <vfprintf+0x2a4>
    29b4:	ff 20       	and	r15, r15
    29b6:	31 f0       	breq	.+12     	; 0x29c4 <vfprintf+0x2a4>
    29b8:	b6 01       	movw	r22, r12
    29ba:	80 e3       	ldi	r24, 0x30	; 48
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	38 d3       	rcall	.+1648   	; 0x3030 <fputc>
    29c0:	fa 94       	dec	r15
    29c2:	f8 cf       	rjmp	.-16     	; 0x29b4 <vfprintf+0x294>
    29c4:	37 fe       	sbrs	r3, 7
    29c6:	58 c0       	rjmp	.+176    	; 0x2a78 <vfprintf+0x358>
    29c8:	94 2d       	mov	r25, r4
    29ca:	85 2d       	mov	r24, r5
    29cc:	57 fe       	sbrs	r5, 7
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <vfprintf+0x2b4>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	29 2e       	mov	r2, r25
    29d6:	38 2e       	mov	r3, r24
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	a2 01       	movw	r20, r4
    29de:	4e 19       	sub	r20, r14
    29e0:	51 09       	sbc	r21, r1
    29e2:	5d 87       	std	Y+13, r21	; 0x0d
    29e4:	4c 87       	std	Y+12, r20	; 0x0c
    29e6:	a2 01       	movw	r20, r4
    29e8:	42 19       	sub	r20, r2
    29ea:	53 09       	sbc	r21, r3
    29ec:	5f 87       	std	Y+15, r21	; 0x0f
    29ee:	4e 87       	std	Y+14, r20	; 0x0e
    29f0:	61 2f       	mov	r22, r17
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	44 27       	eor	r20, r20
    29f6:	55 27       	eor	r21, r21
    29f8:	46 1b       	sub	r20, r22
    29fa:	57 0b       	sbc	r21, r23
    29fc:	59 8b       	std	Y+17, r21	; 0x11
    29fe:	48 8b       	std	Y+16, r20	; 0x10
    2a00:	5f ef       	ldi	r21, 0xFF	; 255
    2a02:	25 16       	cp	r2, r21
    2a04:	35 06       	cpc	r3, r21
    2a06:	41 f4       	brne	.+16     	; 0x2a18 <vfprintf+0x2f8>
    2a08:	b6 01       	movw	r22, r12
    2a0a:	8e e2       	ldi	r24, 0x2E	; 46
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	2a 8b       	std	Y+18, r18	; 0x12
    2a10:	3b 8b       	std	Y+19, r19	; 0x13
    2a12:	0e d3       	rcall	.+1564   	; 0x3030 <fputc>
    2a14:	3b 89       	ldd	r19, Y+19	; 0x13
    2a16:	2a 89       	ldd	r18, Y+18	; 0x12
    2a18:	42 14       	cp	r4, r2
    2a1a:	53 04       	cpc	r5, r3
    2a1c:	6c f0       	brlt	.+26     	; 0x2a38 <vfprintf+0x318>
    2a1e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a20:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a22:	42 15       	cp	r20, r2
    2a24:	53 05       	cpc	r21, r3
    2a26:	44 f4       	brge	.+16     	; 0x2a38 <vfprintf+0x318>
    2a28:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a2a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a2c:	e2 0f       	add	r30, r18
    2a2e:	f3 1f       	adc	r31, r19
    2a30:	e6 0d       	add	r30, r6
    2a32:	f7 1d       	adc	r31, r7
    2a34:	81 81       	ldd	r24, Z+1	; 0x01
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <vfprintf+0x31a>
    2a38:	80 e3       	ldi	r24, 0x30	; 48
    2a3a:	51 e0       	ldi	r21, 0x01	; 1
    2a3c:	25 1a       	sub	r2, r21
    2a3e:	31 08       	sbc	r3, r1
    2a40:	2f 5f       	subi	r18, 0xFF	; 255
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	48 89       	ldd	r20, Y+16	; 0x10
    2a46:	59 89       	ldd	r21, Y+17	; 0x11
    2a48:	24 16       	cp	r2, r20
    2a4a:	35 06       	cpc	r3, r21
    2a4c:	44 f0       	brlt	.+16     	; 0x2a5e <vfprintf+0x33e>
    2a4e:	b6 01       	movw	r22, r12
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	2a 8b       	std	Y+18, r18	; 0x12
    2a54:	3b 8b       	std	Y+19, r19	; 0x13
    2a56:	ec d2       	rcall	.+1496   	; 0x3030 <fputc>
    2a58:	2a 89       	ldd	r18, Y+18	; 0x12
    2a5a:	3b 89       	ldd	r19, Y+19	; 0x13
    2a5c:	d1 cf       	rjmp	.-94     	; 0x2a00 <vfprintf+0x2e0>
    2a5e:	24 14       	cp	r2, r4
    2a60:	35 04       	cpc	r3, r5
    2a62:	39 f4       	brne	.+14     	; 0x2a72 <vfprintf+0x352>
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	96 33       	cpi	r25, 0x36	; 54
    2a68:	18 f4       	brcc	.+6      	; 0x2a70 <vfprintf+0x350>
    2a6a:	95 33       	cpi	r25, 0x35	; 53
    2a6c:	11 f4       	brne	.+4      	; 0x2a72 <vfprintf+0x352>
    2a6e:	04 ff       	sbrs	r16, 4
    2a70:	81 e3       	ldi	r24, 0x31	; 49
    2a72:	b6 01       	movw	r22, r12
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	45 c0       	rjmp	.+138    	; 0x2b02 <vfprintf+0x3e2>
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	81 33       	cpi	r24, 0x31	; 49
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <vfprintf+0x360>
    2a7e:	0f 7e       	andi	r16, 0xEF	; 239
    2a80:	b6 01       	movw	r22, r12
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	d5 d2       	rcall	.+1450   	; 0x3030 <fputc>
    2a86:	11 11       	cpse	r17, r1
    2a88:	05 c0       	rjmp	.+10     	; 0x2a94 <vfprintf+0x374>
    2a8a:	34 fc       	sbrc	r3, 4
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <vfprintf+0x39a>
    2a8e:	85 e6       	ldi	r24, 0x65	; 101
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	15 c0       	rjmp	.+42     	; 0x2abe <vfprintf+0x39e>
    2a94:	b6 01       	movw	r22, r12
    2a96:	8e e2       	ldi	r24, 0x2E	; 46
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	ca d2       	rcall	.+1428   	; 0x3030 <fputc>
    2a9c:	82 e0       	ldi	r24, 0x02	; 2
    2a9e:	ee 24       	eor	r14, r14
    2aa0:	e3 94       	inc	r14
    2aa2:	e8 0e       	add	r14, r24
    2aa4:	f3 01       	movw	r30, r6
    2aa6:	e8 0f       	add	r30, r24
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	80 81       	ld	r24, Z
    2aac:	b6 01       	movw	r22, r12
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	bf d2       	rcall	.+1406   	; 0x3030 <fputc>
    2ab2:	11 50       	subi	r17, 0x01	; 1
    2ab4:	8e 2d       	mov	r24, r14
    2ab6:	99 f7       	brne	.-26     	; 0x2a9e <vfprintf+0x37e>
    2ab8:	e8 cf       	rjmp	.-48     	; 0x2a8a <vfprintf+0x36a>
    2aba:	85 e4       	ldi	r24, 0x45	; 69
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	b6 01       	movw	r22, r12
    2ac0:	b7 d2       	rcall	.+1390   	; 0x3030 <fputc>
    2ac2:	57 fc       	sbrc	r5, 7
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <vfprintf+0x3b0>
    2ac6:	41 14       	cp	r4, r1
    2ac8:	51 04       	cpc	r5, r1
    2aca:	39 f4       	brne	.+14     	; 0x2ada <vfprintf+0x3ba>
    2acc:	04 ff       	sbrs	r16, 4
    2ace:	05 c0       	rjmp	.+10     	; 0x2ada <vfprintf+0x3ba>
    2ad0:	51 94       	neg	r5
    2ad2:	41 94       	neg	r4
    2ad4:	51 08       	sbc	r5, r1
    2ad6:	8d e2       	ldi	r24, 0x2D	; 45
    2ad8:	01 c0       	rjmp	.+2      	; 0x2adc <vfprintf+0x3bc>
    2ada:	8b e2       	ldi	r24, 0x2B	; 43
    2adc:	b6 01       	movw	r22, r12
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	a7 d2       	rcall	.+1358   	; 0x3030 <fputc>
    2ae2:	80 e3       	ldi	r24, 0x30	; 48
    2ae4:	9a e0       	ldi	r25, 0x0A	; 10
    2ae6:	49 16       	cp	r4, r25
    2ae8:	51 04       	cpc	r5, r1
    2aea:	2c f0       	brlt	.+10     	; 0x2af6 <vfprintf+0x3d6>
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	5a e0       	ldi	r21, 0x0A	; 10
    2af0:	45 1a       	sub	r4, r21
    2af2:	51 08       	sbc	r5, r1
    2af4:	f7 cf       	rjmp	.-18     	; 0x2ae4 <vfprintf+0x3c4>
    2af6:	b6 01       	movw	r22, r12
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9a d2       	rcall	.+1332   	; 0x3030 <fputc>
    2afc:	b6 01       	movw	r22, r12
    2afe:	c2 01       	movw	r24, r4
    2b00:	c0 96       	adiw	r24, 0x30	; 48
    2b02:	96 d2       	rcall	.+1324   	; 0x3030 <fputc>
    2b04:	4c c1       	rjmp	.+664    	; 0x2d9e <vfprintf+0x67e>
    2b06:	83 36       	cpi	r24, 0x63	; 99
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <vfprintf+0x3f6>
    2b0a:	83 37       	cpi	r24, 0x73	; 115
    2b0c:	79 f0       	breq	.+30     	; 0x2b2c <vfprintf+0x40c>
    2b0e:	83 35       	cpi	r24, 0x53	; 83
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <vfprintf+0x3f4>
    2b12:	54 c0       	rjmp	.+168    	; 0x2bbc <vfprintf+0x49c>
    2b14:	20 c0       	rjmp	.+64     	; 0x2b56 <vfprintf+0x436>
    2b16:	52 01       	movw	r10, r4
    2b18:	e2 e0       	ldi	r30, 0x02	; 2
    2b1a:	ae 0e       	add	r10, r30
    2b1c:	b1 1c       	adc	r11, r1
    2b1e:	f2 01       	movw	r30, r4
    2b20:	80 81       	ld	r24, Z
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	01 e0       	ldi	r16, 0x01	; 1
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	23 01       	movw	r4, r6
    2b2a:	13 c0       	rjmp	.+38     	; 0x2b52 <vfprintf+0x432>
    2b2c:	52 01       	movw	r10, r4
    2b2e:	f2 e0       	ldi	r31, 0x02	; 2
    2b30:	af 0e       	add	r10, r31
    2b32:	b1 1c       	adc	r11, r1
    2b34:	f2 01       	movw	r30, r4
    2b36:	40 80       	ld	r4, Z
    2b38:	51 80       	ldd	r5, Z+1	; 0x01
    2b3a:	26 ff       	sbrs	r18, 6
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <vfprintf+0x424>
    2b3e:	61 2f       	mov	r22, r17
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <vfprintf+0x428>
    2b44:	6f ef       	ldi	r22, 0xFF	; 255
    2b46:	7f ef       	ldi	r23, 0xFF	; 255
    2b48:	c2 01       	movw	r24, r4
    2b4a:	2a 8b       	std	Y+18, r18	; 0x12
    2b4c:	66 d2       	rcall	.+1228   	; 0x301a <strnlen>
    2b4e:	8c 01       	movw	r16, r24
    2b50:	2a 89       	ldd	r18, Y+18	; 0x12
    2b52:	2f 77       	andi	r18, 0x7F	; 127
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <vfprintf+0x45e>
    2b56:	52 01       	movw	r10, r4
    2b58:	f2 e0       	ldi	r31, 0x02	; 2
    2b5a:	af 0e       	add	r10, r31
    2b5c:	b1 1c       	adc	r11, r1
    2b5e:	f2 01       	movw	r30, r4
    2b60:	40 80       	ld	r4, Z
    2b62:	51 80       	ldd	r5, Z+1	; 0x01
    2b64:	26 ff       	sbrs	r18, 6
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <vfprintf+0x44e>
    2b68:	61 2f       	mov	r22, r17
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <vfprintf+0x452>
    2b6e:	6f ef       	ldi	r22, 0xFF	; 255
    2b70:	7f ef       	ldi	r23, 0xFF	; 255
    2b72:	c2 01       	movw	r24, r4
    2b74:	2a 8b       	std	Y+18, r18	; 0x12
    2b76:	3d d2       	rcall	.+1146   	; 0x2ff2 <strnlen_P>
    2b78:	8c 01       	movw	r16, r24
    2b7a:	2a 89       	ldd	r18, Y+18	; 0x12
    2b7c:	20 68       	ori	r18, 0x80	; 128
    2b7e:	32 2e       	mov	r3, r18
    2b80:	23 fd       	sbrc	r18, 3
    2b82:	18 c0       	rjmp	.+48     	; 0x2bb4 <vfprintf+0x494>
    2b84:	8f 2d       	mov	r24, r15
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	08 17       	cp	r16, r24
    2b8a:	19 07       	cpc	r17, r25
    2b8c:	98 f4       	brcc	.+38     	; 0x2bb4 <vfprintf+0x494>
    2b8e:	b6 01       	movw	r22, r12
    2b90:	80 e2       	ldi	r24, 0x20	; 32
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	4d d2       	rcall	.+1178   	; 0x3030 <fputc>
    2b96:	fa 94       	dec	r15
    2b98:	f5 cf       	rjmp	.-22     	; 0x2b84 <vfprintf+0x464>
    2b9a:	f2 01       	movw	r30, r4
    2b9c:	37 fc       	sbrc	r3, 7
    2b9e:	85 91       	lpm	r24, Z+
    2ba0:	37 fe       	sbrs	r3, 7
    2ba2:	81 91       	ld	r24, Z+
    2ba4:	2f 01       	movw	r4, r30
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	42 d2       	rcall	.+1156   	; 0x3030 <fputc>
    2bac:	f1 10       	cpse	r15, r1
    2bae:	fa 94       	dec	r15
    2bb0:	01 50       	subi	r16, 0x01	; 1
    2bb2:	11 09       	sbc	r17, r1
    2bb4:	01 15       	cp	r16, r1
    2bb6:	11 05       	cpc	r17, r1
    2bb8:	81 f7       	brne	.-32     	; 0x2b9a <vfprintf+0x47a>
    2bba:	f1 c0       	rjmp	.+482    	; 0x2d9e <vfprintf+0x67e>
    2bbc:	84 36       	cpi	r24, 0x64	; 100
    2bbe:	11 f0       	breq	.+4      	; 0x2bc4 <vfprintf+0x4a4>
    2bc0:	89 36       	cpi	r24, 0x69	; 105
    2bc2:	51 f5       	brne	.+84     	; 0x2c18 <vfprintf+0x4f8>
    2bc4:	52 01       	movw	r10, r4
    2bc6:	27 ff       	sbrs	r18, 7
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <vfprintf+0x4bc>
    2bca:	f4 e0       	ldi	r31, 0x04	; 4
    2bcc:	af 0e       	add	r10, r31
    2bce:	b1 1c       	adc	r11, r1
    2bd0:	f2 01       	movw	r30, r4
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	0a c0       	rjmp	.+20     	; 0x2bf0 <vfprintf+0x4d0>
    2bdc:	f2 e0       	ldi	r31, 0x02	; 2
    2bde:	af 0e       	add	r10, r31
    2be0:	b1 1c       	adc	r11, r1
    2be2:	f2 01       	movw	r30, r4
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	07 2e       	mov	r0, r23
    2bea:	00 0c       	add	r0, r0
    2bec:	88 0b       	sbc	r24, r24
    2bee:	99 0b       	sbc	r25, r25
    2bf0:	2f 76       	andi	r18, 0x6F	; 111
    2bf2:	32 2e       	mov	r3, r18
    2bf4:	97 ff       	sbrs	r25, 7
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <vfprintf+0x4ea>
    2bf8:	90 95       	com	r25
    2bfa:	80 95       	com	r24
    2bfc:	70 95       	com	r23
    2bfe:	61 95       	neg	r22
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
    2c02:	8f 4f       	sbci	r24, 0xFF	; 255
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	20 68       	ori	r18, 0x80	; 128
    2c08:	32 2e       	mov	r3, r18
    2c0a:	2a e0       	ldi	r18, 0x0A	; 10
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	a3 01       	movw	r20, r6
    2c10:	47 d2       	rcall	.+1166   	; 0x30a0 <__ultoa_invert>
    2c12:	e8 2e       	mov	r14, r24
    2c14:	e6 18       	sub	r14, r6
    2c16:	3e c0       	rjmp	.+124    	; 0x2c94 <vfprintf+0x574>
    2c18:	02 2f       	mov	r16, r18
    2c1a:	85 37       	cpi	r24, 0x75	; 117
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <vfprintf+0x506>
    2c1e:	0f 7e       	andi	r16, 0xEF	; 239
    2c20:	2a e0       	ldi	r18, 0x0A	; 10
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	1d c0       	rjmp	.+58     	; 0x2c60 <vfprintf+0x540>
    2c26:	09 7f       	andi	r16, 0xF9	; 249
    2c28:	8f 36       	cpi	r24, 0x6F	; 111
    2c2a:	91 f0       	breq	.+36     	; 0x2c50 <vfprintf+0x530>
    2c2c:	18 f4       	brcc	.+6      	; 0x2c34 <vfprintf+0x514>
    2c2e:	88 35       	cpi	r24, 0x58	; 88
    2c30:	59 f0       	breq	.+22     	; 0x2c48 <vfprintf+0x528>
    2c32:	be c0       	rjmp	.+380    	; 0x2db0 <vfprintf+0x690>
    2c34:	80 37       	cpi	r24, 0x70	; 112
    2c36:	19 f0       	breq	.+6      	; 0x2c3e <vfprintf+0x51e>
    2c38:	88 37       	cpi	r24, 0x78	; 120
    2c3a:	11 f0       	breq	.+4      	; 0x2c40 <vfprintf+0x520>
    2c3c:	b9 c0       	rjmp	.+370    	; 0x2db0 <vfprintf+0x690>
    2c3e:	00 61       	ori	r16, 0x10	; 16
    2c40:	04 ff       	sbrs	r16, 4
    2c42:	09 c0       	rjmp	.+18     	; 0x2c56 <vfprintf+0x536>
    2c44:	04 60       	ori	r16, 0x04	; 4
    2c46:	07 c0       	rjmp	.+14     	; 0x2c56 <vfprintf+0x536>
    2c48:	24 ff       	sbrs	r18, 4
    2c4a:	08 c0       	rjmp	.+16     	; 0x2c5c <vfprintf+0x53c>
    2c4c:	06 60       	ori	r16, 0x06	; 6
    2c4e:	06 c0       	rjmp	.+12     	; 0x2c5c <vfprintf+0x53c>
    2c50:	28 e0       	ldi	r18, 0x08	; 8
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <vfprintf+0x540>
    2c56:	20 e1       	ldi	r18, 0x10	; 16
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <vfprintf+0x540>
    2c5c:	20 e1       	ldi	r18, 0x10	; 16
    2c5e:	32 e0       	ldi	r19, 0x02	; 2
    2c60:	52 01       	movw	r10, r4
    2c62:	07 ff       	sbrs	r16, 7
    2c64:	09 c0       	rjmp	.+18     	; 0x2c78 <vfprintf+0x558>
    2c66:	f4 e0       	ldi	r31, 0x04	; 4
    2c68:	af 0e       	add	r10, r31
    2c6a:	b1 1c       	adc	r11, r1
    2c6c:	f2 01       	movw	r30, r4
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <vfprintf+0x568>
    2c78:	f2 e0       	ldi	r31, 0x02	; 2
    2c7a:	af 0e       	add	r10, r31
    2c7c:	b1 1c       	adc	r11, r1
    2c7e:	f2 01       	movw	r30, r4
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a3 01       	movw	r20, r6
    2c8a:	0a d2       	rcall	.+1044   	; 0x30a0 <__ultoa_invert>
    2c8c:	e8 2e       	mov	r14, r24
    2c8e:	e6 18       	sub	r14, r6
    2c90:	0f 77       	andi	r16, 0x7F	; 127
    2c92:	30 2e       	mov	r3, r16
    2c94:	36 fe       	sbrs	r3, 6
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <vfprintf+0x58e>
    2c98:	33 2d       	mov	r19, r3
    2c9a:	3e 7f       	andi	r19, 0xFE	; 254
    2c9c:	e1 16       	cp	r14, r17
    2c9e:	50 f4       	brcc	.+20     	; 0x2cb4 <vfprintf+0x594>
    2ca0:	34 fe       	sbrs	r3, 4
    2ca2:	0a c0       	rjmp	.+20     	; 0x2cb8 <vfprintf+0x598>
    2ca4:	32 fc       	sbrc	r3, 2
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <vfprintf+0x598>
    2ca8:	33 2d       	mov	r19, r3
    2caa:	3e 7e       	andi	r19, 0xEE	; 238
    2cac:	05 c0       	rjmp	.+10     	; 0x2cb8 <vfprintf+0x598>
    2cae:	0e 2d       	mov	r16, r14
    2cb0:	33 2d       	mov	r19, r3
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <vfprintf+0x59a>
    2cb4:	0e 2d       	mov	r16, r14
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <vfprintf+0x59a>
    2cb8:	01 2f       	mov	r16, r17
    2cba:	34 ff       	sbrs	r19, 4
    2cbc:	0c c0       	rjmp	.+24     	; 0x2cd6 <vfprintf+0x5b6>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ee 0d       	add	r30, r14
    2cc2:	f1 1d       	adc	r31, r1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 33       	cpi	r24, 0x30	; 48
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <vfprintf+0x5ae>
    2cca:	39 7e       	andi	r19, 0xE9	; 233
    2ccc:	08 c0       	rjmp	.+16     	; 0x2cde <vfprintf+0x5be>
    2cce:	32 ff       	sbrs	r19, 2
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <vfprintf+0x5bc>
    2cd2:	0e 5f       	subi	r16, 0xFE	; 254
    2cd4:	04 c0       	rjmp	.+8      	; 0x2cde <vfprintf+0x5be>
    2cd6:	83 2f       	mov	r24, r19
    2cd8:	86 78       	andi	r24, 0x86	; 134
    2cda:	09 f0       	breq	.+2      	; 0x2cde <vfprintf+0x5be>
    2cdc:	0f 5f       	subi	r16, 0xFF	; 255
    2cde:	33 fd       	sbrc	r19, 3
    2ce0:	12 c0       	rjmp	.+36     	; 0x2d06 <vfprintf+0x5e6>
    2ce2:	30 ff       	sbrs	r19, 0
    2ce4:	06 c0       	rjmp	.+12     	; 0x2cf2 <vfprintf+0x5d2>
    2ce6:	1e 2d       	mov	r17, r14
    2ce8:	0f 15       	cp	r16, r15
    2cea:	18 f4       	brcc	.+6      	; 0x2cf2 <vfprintf+0x5d2>
    2cec:	1f 0d       	add	r17, r15
    2cee:	10 1b       	sub	r17, r16
    2cf0:	0f 2d       	mov	r16, r15
    2cf2:	0f 15       	cp	r16, r15
    2cf4:	60 f4       	brcc	.+24     	; 0x2d0e <vfprintf+0x5ee>
    2cf6:	b6 01       	movw	r22, r12
    2cf8:	80 e2       	ldi	r24, 0x20	; 32
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	3b 8b       	std	Y+19, r19	; 0x13
    2cfe:	98 d1       	rcall	.+816    	; 0x3030 <fputc>
    2d00:	0f 5f       	subi	r16, 0xFF	; 255
    2d02:	3b 89       	ldd	r19, Y+19	; 0x13
    2d04:	f6 cf       	rjmp	.-20     	; 0x2cf2 <vfprintf+0x5d2>
    2d06:	0f 15       	cp	r16, r15
    2d08:	10 f4       	brcc	.+4      	; 0x2d0e <vfprintf+0x5ee>
    2d0a:	f0 1a       	sub	r15, r16
    2d0c:	01 c0       	rjmp	.+2      	; 0x2d10 <vfprintf+0x5f0>
    2d0e:	f1 2c       	mov	r15, r1
    2d10:	34 ff       	sbrs	r19, 4
    2d12:	11 c0       	rjmp	.+34     	; 0x2d36 <vfprintf+0x616>
    2d14:	b6 01       	movw	r22, r12
    2d16:	80 e3       	ldi	r24, 0x30	; 48
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	3b 8b       	std	Y+19, r19	; 0x13
    2d1c:	89 d1       	rcall	.+786    	; 0x3030 <fputc>
    2d1e:	3b 89       	ldd	r19, Y+19	; 0x13
    2d20:	32 ff       	sbrs	r19, 2
    2d22:	16 c0       	rjmp	.+44     	; 0x2d50 <vfprintf+0x630>
    2d24:	31 fd       	sbrc	r19, 1
    2d26:	03 c0       	rjmp	.+6      	; 0x2d2e <vfprintf+0x60e>
    2d28:	88 e7       	ldi	r24, 0x78	; 120
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <vfprintf+0x612>
    2d2e:	88 e5       	ldi	r24, 0x58	; 88
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	b6 01       	movw	r22, r12
    2d34:	0c c0       	rjmp	.+24     	; 0x2d4e <vfprintf+0x62e>
    2d36:	83 2f       	mov	r24, r19
    2d38:	86 78       	andi	r24, 0x86	; 134
    2d3a:	51 f0       	breq	.+20     	; 0x2d50 <vfprintf+0x630>
    2d3c:	31 ff       	sbrs	r19, 1
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <vfprintf+0x624>
    2d40:	8b e2       	ldi	r24, 0x2B	; 43
    2d42:	01 c0       	rjmp	.+2      	; 0x2d46 <vfprintf+0x626>
    2d44:	80 e2       	ldi	r24, 0x20	; 32
    2d46:	37 fd       	sbrc	r19, 7
    2d48:	8d e2       	ldi	r24, 0x2D	; 45
    2d4a:	b6 01       	movw	r22, r12
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	70 d1       	rcall	.+736    	; 0x3030 <fputc>
    2d50:	e1 16       	cp	r14, r17
    2d52:	30 f4       	brcc	.+12     	; 0x2d60 <vfprintf+0x640>
    2d54:	b6 01       	movw	r22, r12
    2d56:	80 e3       	ldi	r24, 0x30	; 48
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	6a d1       	rcall	.+724    	; 0x3030 <fputc>
    2d5c:	11 50       	subi	r17, 0x01	; 1
    2d5e:	f8 cf       	rjmp	.-16     	; 0x2d50 <vfprintf+0x630>
    2d60:	ea 94       	dec	r14
    2d62:	f3 01       	movw	r30, r6
    2d64:	ee 0d       	add	r30, r14
    2d66:	f1 1d       	adc	r31, r1
    2d68:	80 81       	ld	r24, Z
    2d6a:	b6 01       	movw	r22, r12
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	60 d1       	rcall	.+704    	; 0x3030 <fputc>
    2d70:	e1 10       	cpse	r14, r1
    2d72:	f6 cf       	rjmp	.-20     	; 0x2d60 <vfprintf+0x640>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <vfprintf+0x67e>
    2d76:	f4 e0       	ldi	r31, 0x04	; 4
    2d78:	ff 15       	cp	r31, r15
    2d7a:	48 f5       	brcc	.+82     	; 0x2dce <vfprintf+0x6ae>
    2d7c:	84 e0       	ldi	r24, 0x04	; 4
    2d7e:	f8 1a       	sub	r15, r24
    2d80:	33 fe       	sbrs	r3, 3
    2d82:	1d c0       	rjmp	.+58     	; 0x2dbe <vfprintf+0x69e>
    2d84:	21 10       	cpse	r2, r1
    2d86:	24 c0       	rjmp	.+72     	; 0x2dd0 <vfprintf+0x6b0>
    2d88:	03 ff       	sbrs	r16, 3
    2d8a:	27 c0       	rjmp	.+78     	; 0x2dda <vfprintf+0x6ba>
    2d8c:	0c e8       	ldi	r16, 0x8C	; 140
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	f3 2d       	mov	r31, r3
    2d92:	f0 71       	andi	r31, 0x10	; 16
    2d94:	3f 2e       	mov	r3, r31
    2d96:	f8 01       	movw	r30, r16
    2d98:	84 91       	lpm	r24, Z
    2d9a:	81 11       	cpse	r24, r1
    2d9c:	21 c0       	rjmp	.+66     	; 0x2de0 <vfprintf+0x6c0>
    2d9e:	ff 20       	and	r15, r15
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <vfprintf+0x684>
    2da2:	fd cc       	rjmp	.-1542   	; 0x279e <vfprintf+0x7e>
    2da4:	b6 01       	movw	r22, r12
    2da6:	80 e2       	ldi	r24, 0x20	; 32
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	42 d1       	rcall	.+644    	; 0x3030 <fputc>
    2dac:	fa 94       	dec	r15
    2dae:	f7 cf       	rjmp	.-18     	; 0x2d9e <vfprintf+0x67e>
    2db0:	f6 01       	movw	r30, r12
    2db2:	86 81       	ldd	r24, Z+6	; 0x06
    2db4:	97 81       	ldd	r25, Z+7	; 0x07
    2db6:	23 c0       	rjmp	.+70     	; 0x2dfe <vfprintf+0x6de>
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	9f ef       	ldi	r25, 0xFF	; 255
    2dbc:	20 c0       	rjmp	.+64     	; 0x2dfe <vfprintf+0x6de>
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	80 e2       	ldi	r24, 0x20	; 32
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	35 d1       	rcall	.+618    	; 0x3030 <fputc>
    2dc6:	fa 94       	dec	r15
    2dc8:	f1 10       	cpse	r15, r1
    2dca:	f9 cf       	rjmp	.-14     	; 0x2dbe <vfprintf+0x69e>
    2dcc:	db cf       	rjmp	.-74     	; 0x2d84 <vfprintf+0x664>
    2dce:	f1 2c       	mov	r15, r1
    2dd0:	b6 01       	movw	r22, r12
    2dd2:	82 2d       	mov	r24, r2
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	2c d1       	rcall	.+600    	; 0x3030 <fputc>
    2dd8:	d7 cf       	rjmp	.-82     	; 0x2d88 <vfprintf+0x668>
    2dda:	00 e9       	ldi	r16, 0x90	; 144
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	d8 cf       	rjmp	.-80     	; 0x2d90 <vfprintf+0x670>
    2de0:	31 10       	cpse	r3, r1
    2de2:	80 52       	subi	r24, 0x20	; 32
    2de4:	b6 01       	movw	r22, r12
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	23 d1       	rcall	.+582    	; 0x3030 <fputc>
    2dea:	0f 5f       	subi	r16, 0xFF	; 255
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	d3 cf       	rjmp	.-90     	; 0x2d96 <vfprintf+0x676>
    2df0:	23 e0       	ldi	r18, 0x03	; 3
    2df2:	2f 15       	cp	r18, r15
    2df4:	10 f4       	brcc	.+4      	; 0x2dfa <vfprintf+0x6da>
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	c2 cf       	rjmp	.-124    	; 0x2d7e <vfprintf+0x65e>
    2dfa:	f1 2c       	mov	r15, r1
    2dfc:	c5 cf       	rjmp	.-118    	; 0x2d88 <vfprintf+0x668>
    2dfe:	63 96       	adiw	r28, 0x13	; 19
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	df 90       	pop	r13
    2e18:	cf 90       	pop	r12
    2e1a:	bf 90       	pop	r11
    2e1c:	af 90       	pop	r10
    2e1e:	9f 90       	pop	r9
    2e20:	8f 90       	pop	r8
    2e22:	7f 90       	pop	r7
    2e24:	6f 90       	pop	r6
    2e26:	5f 90       	pop	r5
    2e28:	4f 90       	pop	r4
    2e2a:	3f 90       	pop	r3
    2e2c:	2f 90       	pop	r2
    2e2e:	08 95       	ret

00002e30 <__tablejump2__>:
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	00 24       	eor	r0, r0
    2e36:	00 1c       	adc	r0, r0
    2e38:	0b be       	out	0x3b, r0	; 59
    2e3a:	07 90       	elpm	r0, Z+
    2e3c:	f6 91       	elpm	r31, Z
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	09 94       	ijmp

00002e42 <__ftoa_engine>:
    2e42:	28 30       	cpi	r18, 0x08	; 8
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <__ftoa_engine+0x6>
    2e46:	27 e0       	ldi	r18, 0x07	; 7
    2e48:	33 27       	eor	r19, r19
    2e4a:	da 01       	movw	r26, r20
    2e4c:	99 0f       	add	r25, r25
    2e4e:	31 1d       	adc	r19, r1
    2e50:	87 fd       	sbrc	r24, 7
    2e52:	91 60       	ori	r25, 0x01	; 1
    2e54:	00 96       	adiw	r24, 0x00	; 0
    2e56:	61 05       	cpc	r22, r1
    2e58:	71 05       	cpc	r23, r1
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <__ftoa_engine+0x28>
    2e5c:	32 60       	ori	r19, 0x02	; 2
    2e5e:	2e 5f       	subi	r18, 0xFE	; 254
    2e60:	3d 93       	st	X+, r19
    2e62:	30 e3       	ldi	r19, 0x30	; 48
    2e64:	2a 95       	dec	r18
    2e66:	e1 f7       	brne	.-8      	; 0x2e60 <__ftoa_engine+0x1e>
    2e68:	08 95       	ret
    2e6a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e6c:	30 f0       	brcs	.+12     	; 0x2e7a <__ftoa_engine+0x38>
    2e6e:	80 38       	cpi	r24, 0x80	; 128
    2e70:	71 05       	cpc	r23, r1
    2e72:	61 05       	cpc	r22, r1
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <__ftoa_engine+0x36>
    2e76:	3c 5f       	subi	r19, 0xFC	; 252
    2e78:	3c 5f       	subi	r19, 0xFC	; 252
    2e7a:	3d 93       	st	X+, r19
    2e7c:	91 30       	cpi	r25, 0x01	; 1
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <__ftoa_engine+0x40>
    2e80:	80 68       	ori	r24, 0x80	; 128
    2e82:	91 1d       	adc	r25, r1
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	1f 93       	push	r17
    2e8a:	0f 93       	push	r16
    2e8c:	ff 92       	push	r15
    2e8e:	ef 92       	push	r14
    2e90:	19 2f       	mov	r17, r25
    2e92:	98 7f       	andi	r25, 0xF8	; 248
    2e94:	96 95       	lsr	r25
    2e96:	e9 2f       	mov	r30, r25
    2e98:	96 95       	lsr	r25
    2e9a:	96 95       	lsr	r25
    2e9c:	e9 0f       	add	r30, r25
    2e9e:	ff 27       	eor	r31, r31
    2ea0:	e2 51       	subi	r30, 0x12	; 18
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	99 27       	eor	r25, r25
    2ea6:	33 27       	eor	r19, r19
    2ea8:	ee 24       	eor	r14, r14
    2eaa:	ff 24       	eor	r15, r15
    2eac:	a7 01       	movw	r20, r14
    2eae:	e7 01       	movw	r28, r14
    2eb0:	05 90       	lpm	r0, Z+
    2eb2:	08 94       	sec
    2eb4:	07 94       	ror	r0
    2eb6:	28 f4       	brcc	.+10     	; 0x2ec2 <__ftoa_engine+0x80>
    2eb8:	36 0f       	add	r19, r22
    2eba:	e7 1e       	adc	r14, r23
    2ebc:	f8 1e       	adc	r15, r24
    2ebe:	49 1f       	adc	r20, r25
    2ec0:	51 1d       	adc	r21, r1
    2ec2:	66 0f       	add	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	06 94       	lsr	r0
    2ecc:	a1 f7       	brne	.-24     	; 0x2eb6 <__ftoa_engine+0x74>
    2ece:	05 90       	lpm	r0, Z+
    2ed0:	07 94       	ror	r0
    2ed2:	28 f4       	brcc	.+10     	; 0x2ede <__ftoa_engine+0x9c>
    2ed4:	e7 0e       	add	r14, r23
    2ed6:	f8 1e       	adc	r15, r24
    2ed8:	49 1f       	adc	r20, r25
    2eda:	56 1f       	adc	r21, r22
    2edc:	c1 1d       	adc	r28, r1
    2ede:	77 0f       	add	r23, r23
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	66 1f       	adc	r22, r22
    2ee6:	06 94       	lsr	r0
    2ee8:	a1 f7       	brne	.-24     	; 0x2ed2 <__ftoa_engine+0x90>
    2eea:	05 90       	lpm	r0, Z+
    2eec:	07 94       	ror	r0
    2eee:	28 f4       	brcc	.+10     	; 0x2efa <__ftoa_engine+0xb8>
    2ef0:	f8 0e       	add	r15, r24
    2ef2:	49 1f       	adc	r20, r25
    2ef4:	56 1f       	adc	r21, r22
    2ef6:	c7 1f       	adc	r28, r23
    2ef8:	d1 1d       	adc	r29, r1
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	66 1f       	adc	r22, r22
    2f00:	77 1f       	adc	r23, r23
    2f02:	06 94       	lsr	r0
    2f04:	a1 f7       	brne	.-24     	; 0x2eee <__ftoa_engine+0xac>
    2f06:	05 90       	lpm	r0, Z+
    2f08:	07 94       	ror	r0
    2f0a:	20 f4       	brcc	.+8      	; 0x2f14 <__ftoa_engine+0xd2>
    2f0c:	49 0f       	add	r20, r25
    2f0e:	56 1f       	adc	r21, r22
    2f10:	c7 1f       	adc	r28, r23
    2f12:	d8 1f       	adc	r29, r24
    2f14:	99 0f       	add	r25, r25
    2f16:	66 1f       	adc	r22, r22
    2f18:	77 1f       	adc	r23, r23
    2f1a:	88 1f       	adc	r24, r24
    2f1c:	06 94       	lsr	r0
    2f1e:	a9 f7       	brne	.-22     	; 0x2f0a <__ftoa_engine+0xc8>
    2f20:	84 91       	lpm	r24, Z
    2f22:	10 95       	com	r17
    2f24:	17 70       	andi	r17, 0x07	; 7
    2f26:	41 f0       	breq	.+16     	; 0x2f38 <__ftoa_engine+0xf6>
    2f28:	d6 95       	lsr	r29
    2f2a:	c7 95       	ror	r28
    2f2c:	57 95       	ror	r21
    2f2e:	47 95       	ror	r20
    2f30:	f7 94       	ror	r15
    2f32:	e7 94       	ror	r14
    2f34:	1a 95       	dec	r17
    2f36:	c1 f7       	brne	.-16     	; 0x2f28 <__ftoa_engine+0xe6>
    2f38:	e4 e9       	ldi	r30, 0x94	; 148
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	68 94       	set
    2f3e:	15 90       	lpm	r1, Z+
    2f40:	15 91       	lpm	r17, Z+
    2f42:	35 91       	lpm	r19, Z+
    2f44:	65 91       	lpm	r22, Z+
    2f46:	95 91       	lpm	r25, Z+
    2f48:	05 90       	lpm	r0, Z+
    2f4a:	7f e2       	ldi	r23, 0x2F	; 47
    2f4c:	73 95       	inc	r23
    2f4e:	e1 18       	sub	r14, r1
    2f50:	f1 0a       	sbc	r15, r17
    2f52:	43 0b       	sbc	r20, r19
    2f54:	56 0b       	sbc	r21, r22
    2f56:	c9 0b       	sbc	r28, r25
    2f58:	d0 09       	sbc	r29, r0
    2f5a:	c0 f7       	brcc	.-16     	; 0x2f4c <__ftoa_engine+0x10a>
    2f5c:	e1 0c       	add	r14, r1
    2f5e:	f1 1e       	adc	r15, r17
    2f60:	43 1f       	adc	r20, r19
    2f62:	56 1f       	adc	r21, r22
    2f64:	c9 1f       	adc	r28, r25
    2f66:	d0 1d       	adc	r29, r0
    2f68:	7e f4       	brtc	.+30     	; 0x2f88 <__ftoa_engine+0x146>
    2f6a:	70 33       	cpi	r23, 0x30	; 48
    2f6c:	11 f4       	brne	.+4      	; 0x2f72 <__ftoa_engine+0x130>
    2f6e:	8a 95       	dec	r24
    2f70:	e6 cf       	rjmp	.-52     	; 0x2f3e <__ftoa_engine+0xfc>
    2f72:	e8 94       	clt
    2f74:	01 50       	subi	r16, 0x01	; 1
    2f76:	30 f0       	brcs	.+12     	; 0x2f84 <__ftoa_engine+0x142>
    2f78:	08 0f       	add	r16, r24
    2f7a:	0a f4       	brpl	.+2      	; 0x2f7e <__ftoa_engine+0x13c>
    2f7c:	00 27       	eor	r16, r16
    2f7e:	02 17       	cp	r16, r18
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <__ftoa_engine+0x142>
    2f82:	20 2f       	mov	r18, r16
    2f84:	23 95       	inc	r18
    2f86:	02 2f       	mov	r16, r18
    2f88:	7a 33       	cpi	r23, 0x3A	; 58
    2f8a:	28 f0       	brcs	.+10     	; 0x2f96 <__ftoa_engine+0x154>
    2f8c:	79 e3       	ldi	r23, 0x39	; 57
    2f8e:	7d 93       	st	X+, r23
    2f90:	2a 95       	dec	r18
    2f92:	e9 f7       	brne	.-6      	; 0x2f8e <__ftoa_engine+0x14c>
    2f94:	10 c0       	rjmp	.+32     	; 0x2fb6 <__ftoa_engine+0x174>
    2f96:	7d 93       	st	X+, r23
    2f98:	2a 95       	dec	r18
    2f9a:	89 f6       	brne	.-94     	; 0x2f3e <__ftoa_engine+0xfc>
    2f9c:	06 94       	lsr	r0
    2f9e:	97 95       	ror	r25
    2fa0:	67 95       	ror	r22
    2fa2:	37 95       	ror	r19
    2fa4:	17 95       	ror	r17
    2fa6:	17 94       	ror	r1
    2fa8:	e1 18       	sub	r14, r1
    2faa:	f1 0a       	sbc	r15, r17
    2fac:	43 0b       	sbc	r20, r19
    2fae:	56 0b       	sbc	r21, r22
    2fb0:	c9 0b       	sbc	r28, r25
    2fb2:	d0 09       	sbc	r29, r0
    2fb4:	98 f0       	brcs	.+38     	; 0x2fdc <__ftoa_engine+0x19a>
    2fb6:	23 95       	inc	r18
    2fb8:	7e 91       	ld	r23, -X
    2fba:	73 95       	inc	r23
    2fbc:	7a 33       	cpi	r23, 0x3A	; 58
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <__ftoa_engine+0x180>
    2fc0:	70 e3       	ldi	r23, 0x30	; 48
    2fc2:	7c 93       	st	X, r23
    2fc4:	20 13       	cpse	r18, r16
    2fc6:	b8 f7       	brcc	.-18     	; 0x2fb6 <__ftoa_engine+0x174>
    2fc8:	7e 91       	ld	r23, -X
    2fca:	70 61       	ori	r23, 0x10	; 16
    2fcc:	7d 93       	st	X+, r23
    2fce:	30 f0       	brcs	.+12     	; 0x2fdc <__ftoa_engine+0x19a>
    2fd0:	83 95       	inc	r24
    2fd2:	71 e3       	ldi	r23, 0x31	; 49
    2fd4:	7d 93       	st	X+, r23
    2fd6:	70 e3       	ldi	r23, 0x30	; 48
    2fd8:	2a 95       	dec	r18
    2fda:	e1 f7       	brne	.-8      	; 0x2fd4 <__ftoa_engine+0x192>
    2fdc:	11 24       	eor	r1, r1
    2fde:	ef 90       	pop	r14
    2fe0:	ff 90       	pop	r15
    2fe2:	0f 91       	pop	r16
    2fe4:	1f 91       	pop	r17
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	99 27       	eor	r25, r25
    2fec:	87 fd       	sbrc	r24, 7
    2fee:	90 95       	com	r25
    2ff0:	08 95       	ret

00002ff2 <strnlen_P>:
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	05 90       	lpm	r0, Z+
    2ff6:	61 50       	subi	r22, 0x01	; 1
    2ff8:	70 40       	sbci	r23, 0x00	; 0
    2ffa:	01 10       	cpse	r0, r1
    2ffc:	d8 f7       	brcc	.-10     	; 0x2ff4 <strnlen_P+0x2>
    2ffe:	80 95       	com	r24
    3000:	90 95       	com	r25
    3002:	8e 0f       	add	r24, r30
    3004:	9f 1f       	adc	r25, r31
    3006:	08 95       	ret

00003008 <memcpy>:
    3008:	fb 01       	movw	r30, r22
    300a:	dc 01       	movw	r26, r24
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <memcpy+0xa>
    300e:	01 90       	ld	r0, Z+
    3010:	0d 92       	st	X+, r0
    3012:	41 50       	subi	r20, 0x01	; 1
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	d8 f7       	brcc	.-10     	; 0x300e <memcpy+0x6>
    3018:	08 95       	ret

0000301a <strnlen>:
    301a:	fc 01       	movw	r30, r24
    301c:	61 50       	subi	r22, 0x01	; 1
    301e:	70 40       	sbci	r23, 0x00	; 0
    3020:	01 90       	ld	r0, Z+
    3022:	01 10       	cpse	r0, r1
    3024:	d8 f7       	brcc	.-10     	; 0x301c <strnlen+0x2>
    3026:	80 95       	com	r24
    3028:	90 95       	com	r25
    302a:	8e 0f       	add	r24, r30
    302c:	9f 1f       	adc	r25, r31
    302e:	08 95       	ret

00003030 <fputc>:
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	fb 01       	movw	r30, r22
    303a:	23 81       	ldd	r18, Z+3	; 0x03
    303c:	21 fd       	sbrc	r18, 1
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <fputc+0x16>
    3040:	8f ef       	ldi	r24, 0xFF	; 255
    3042:	9f ef       	ldi	r25, 0xFF	; 255
    3044:	28 c0       	rjmp	.+80     	; 0x3096 <fputc+0x66>
    3046:	22 ff       	sbrs	r18, 2
    3048:	16 c0       	rjmp	.+44     	; 0x3076 <fputc+0x46>
    304a:	46 81       	ldd	r20, Z+6	; 0x06
    304c:	57 81       	ldd	r21, Z+7	; 0x07
    304e:	24 81       	ldd	r18, Z+4	; 0x04
    3050:	35 81       	ldd	r19, Z+5	; 0x05
    3052:	42 17       	cp	r20, r18
    3054:	53 07       	cpc	r21, r19
    3056:	44 f4       	brge	.+16     	; 0x3068 <fputc+0x38>
    3058:	a0 81       	ld	r26, Z
    305a:	b1 81       	ldd	r27, Z+1	; 0x01
    305c:	9d 01       	movw	r18, r26
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	3f 4f       	sbci	r19, 0xFF	; 255
    3062:	31 83       	std	Z+1, r19	; 0x01
    3064:	20 83       	st	Z, r18
    3066:	8c 93       	st	X, r24
    3068:	26 81       	ldd	r18, Z+6	; 0x06
    306a:	37 81       	ldd	r19, Z+7	; 0x07
    306c:	2f 5f       	subi	r18, 0xFF	; 255
    306e:	3f 4f       	sbci	r19, 0xFF	; 255
    3070:	37 83       	std	Z+7, r19	; 0x07
    3072:	26 83       	std	Z+6, r18	; 0x06
    3074:	10 c0       	rjmp	.+32     	; 0x3096 <fputc+0x66>
    3076:	eb 01       	movw	r28, r22
    3078:	09 2f       	mov	r16, r25
    307a:	18 2f       	mov	r17, r24
    307c:	00 84       	ldd	r0, Z+8	; 0x08
    307e:	f1 85       	ldd	r31, Z+9	; 0x09
    3080:	e0 2d       	mov	r30, r0
    3082:	09 95       	icall
    3084:	89 2b       	or	r24, r25
    3086:	e1 f6       	brne	.-72     	; 0x3040 <fputc+0x10>
    3088:	8e 81       	ldd	r24, Y+6	; 0x06
    308a:	9f 81       	ldd	r25, Y+7	; 0x07
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	9f 83       	std	Y+7, r25	; 0x07
    3090:	8e 83       	std	Y+6, r24	; 0x06
    3092:	81 2f       	mov	r24, r17
    3094:	90 2f       	mov	r25, r16
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <__ultoa_invert>:
    30a0:	fa 01       	movw	r30, r20
    30a2:	aa 27       	eor	r26, r26
    30a4:	28 30       	cpi	r18, 0x08	; 8
    30a6:	51 f1       	breq	.+84     	; 0x30fc <__ultoa_invert+0x5c>
    30a8:	20 31       	cpi	r18, 0x10	; 16
    30aa:	81 f1       	breq	.+96     	; 0x310c <__ultoa_invert+0x6c>
    30ac:	e8 94       	clt
    30ae:	6f 93       	push	r22
    30b0:	6e 7f       	andi	r22, 0xFE	; 254
    30b2:	6e 5f       	subi	r22, 0xFE	; 254
    30b4:	7f 4f       	sbci	r23, 0xFF	; 255
    30b6:	8f 4f       	sbci	r24, 0xFF	; 255
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	af 4f       	sbci	r26, 0xFF	; 255
    30bc:	b1 e0       	ldi	r27, 0x01	; 1
    30be:	3e d0       	rcall	.+124    	; 0x313c <__ultoa_invert+0x9c>
    30c0:	b4 e0       	ldi	r27, 0x04	; 4
    30c2:	3c d0       	rcall	.+120    	; 0x313c <__ultoa_invert+0x9c>
    30c4:	67 0f       	add	r22, r23
    30c6:	78 1f       	adc	r23, r24
    30c8:	89 1f       	adc	r24, r25
    30ca:	9a 1f       	adc	r25, r26
    30cc:	a1 1d       	adc	r26, r1
    30ce:	68 0f       	add	r22, r24
    30d0:	79 1f       	adc	r23, r25
    30d2:	8a 1f       	adc	r24, r26
    30d4:	91 1d       	adc	r25, r1
    30d6:	a1 1d       	adc	r26, r1
    30d8:	6a 0f       	add	r22, r26
    30da:	71 1d       	adc	r23, r1
    30dc:	81 1d       	adc	r24, r1
    30de:	91 1d       	adc	r25, r1
    30e0:	a1 1d       	adc	r26, r1
    30e2:	20 d0       	rcall	.+64     	; 0x3124 <__ultoa_invert+0x84>
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <__ultoa_invert+0x48>
    30e6:	68 94       	set
    30e8:	3f 91       	pop	r19
    30ea:	2a e0       	ldi	r18, 0x0A	; 10
    30ec:	26 9f       	mul	r18, r22
    30ee:	11 24       	eor	r1, r1
    30f0:	30 19       	sub	r19, r0
    30f2:	30 5d       	subi	r19, 0xD0	; 208
    30f4:	31 93       	st	Z+, r19
    30f6:	de f6       	brtc	.-74     	; 0x30ae <__ultoa_invert+0xe>
    30f8:	cf 01       	movw	r24, r30
    30fa:	08 95       	ret
    30fc:	46 2f       	mov	r20, r22
    30fe:	47 70       	andi	r20, 0x07	; 7
    3100:	40 5d       	subi	r20, 0xD0	; 208
    3102:	41 93       	st	Z+, r20
    3104:	b3 e0       	ldi	r27, 0x03	; 3
    3106:	0f d0       	rcall	.+30     	; 0x3126 <__ultoa_invert+0x86>
    3108:	c9 f7       	brne	.-14     	; 0x30fc <__ultoa_invert+0x5c>
    310a:	f6 cf       	rjmp	.-20     	; 0x30f8 <__ultoa_invert+0x58>
    310c:	46 2f       	mov	r20, r22
    310e:	4f 70       	andi	r20, 0x0F	; 15
    3110:	40 5d       	subi	r20, 0xD0	; 208
    3112:	4a 33       	cpi	r20, 0x3A	; 58
    3114:	18 f0       	brcs	.+6      	; 0x311c <__ultoa_invert+0x7c>
    3116:	49 5d       	subi	r20, 0xD9	; 217
    3118:	31 fd       	sbrc	r19, 1
    311a:	40 52       	subi	r20, 0x20	; 32
    311c:	41 93       	st	Z+, r20
    311e:	02 d0       	rcall	.+4      	; 0x3124 <__ultoa_invert+0x84>
    3120:	a9 f7       	brne	.-22     	; 0x310c <__ultoa_invert+0x6c>
    3122:	ea cf       	rjmp	.-44     	; 0x30f8 <__ultoa_invert+0x58>
    3124:	b4 e0       	ldi	r27, 0x04	; 4
    3126:	a6 95       	lsr	r26
    3128:	97 95       	ror	r25
    312a:	87 95       	ror	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	ba 95       	dec	r27
    3132:	c9 f7       	brne	.-14     	; 0x3126 <__ultoa_invert+0x86>
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	61 05       	cpc	r22, r1
    3138:	71 05       	cpc	r23, r1
    313a:	08 95       	ret
    313c:	9b 01       	movw	r18, r22
    313e:	ac 01       	movw	r20, r24
    3140:	0a 2e       	mov	r0, r26
    3142:	06 94       	lsr	r0
    3144:	57 95       	ror	r21
    3146:	47 95       	ror	r20
    3148:	37 95       	ror	r19
    314a:	27 95       	ror	r18
    314c:	ba 95       	dec	r27
    314e:	c9 f7       	brne	.-14     	; 0x3142 <__ultoa_invert+0xa2>
    3150:	62 0f       	add	r22, r18
    3152:	73 1f       	adc	r23, r19
    3154:	84 1f       	adc	r24, r20
    3156:	95 1f       	adc	r25, r21
    3158:	a0 1d       	adc	r26, r0
    315a:	08 95       	ret

0000315c <_exit>:
    315c:	f8 94       	cli

0000315e <__stop_program>:
    315e:	ff cf       	rjmp	.-2      	; 0x315e <__stop_program>
