
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000033ae  00003442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800170  00800170  000034b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000034b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fea  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  000056fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c3b  00000000  00000000  00005ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  00007b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a527  00000000  00000000  0000829c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001050  00000000  00000000  000127c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00013813  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000036a3  00000000  00000000  00013993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c0       	rjmp	.+398    	; 0x190 <__ctors_end>
       2:	00 00       	nop
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	ec c0       	rjmp	.+472    	; 0x1e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ea c0       	rjmp	.+468    	; 0x1e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c4       	rjmp	.+2234   	; 0x8cc <__vector_4>
      12:	00 00       	nop
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	e4 c0       	rjmp	.+456    	; 0x1e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e0 c0       	rjmp	.+448    	; 0x1e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	de c0       	rjmp	.+444    	; 0x1e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	dc c0       	rjmp	.+440    	; 0x1e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	da c0       	rjmp	.+436    	; 0x1e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	d4 c0       	rjmp	.+424    	; 0x1e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d2 c0       	rjmp	.+420    	; 0x1e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d0 c0       	rjmp	.+416    	; 0x1e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ce c0       	rjmp	.+412    	; 0x1e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	cc c0       	rjmp	.+408    	; 0x1e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ca c0       	rjmp	.+404    	; 0x1e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c8 c0       	rjmp	.+400    	; 0x1e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	c6 c0       	rjmp	.+396    	; 0x1e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	c4 c0       	rjmp	.+392    	; 0x1e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c2 c0       	rjmp	.+388    	; 0x1e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c0 c0       	rjmp	.+384    	; 0x1e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	be c0       	rjmp	.+380    	; 0x1e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	bc c0       	rjmp	.+376    	; 0x1e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ba c0       	rjmp	.+372    	; 0x1e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b8 c0       	rjmp	.+368    	; 0x1e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	b6 c0       	rjmp	.+364    	; 0x1e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	b4 c0       	rjmp	.+360    	; 0x1e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b2 c0       	rjmp	.+356    	; 0x1e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b0 c0       	rjmp	.+352    	; 0x1e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	ae c0       	rjmp	.+348    	; 0x1e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	ac c0       	rjmp	.+344    	; 0x1e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2177>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_start>:
     18e:	e2 06       	cpc	r14, r18

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d0 e4       	ldi	r29, 0x40	; 64
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	ee ea       	ldi	r30, 0xAE	; 174
     1a4:	f3 e3       	ldi	r31, 0x33	; 51
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a0 37       	cpi	r26, 0x70	; 112
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a0 e7       	ldi	r26, 0x70	; 112
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a3 37       	cpi	r26, 0x73	; 115
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>

000001c6 <__do_global_ctors>:
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	c8 ec       	ldi	r28, 0xC8	; 200
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__do_global_ctors+0x10>
     1ce:	21 97       	sbiw	r28, 0x01	; 1
     1d0:	fe 01       	movw	r30, r28
     1d2:	0e 94 3f 18 	call	0x307e	; 0x307e <__tablejump2__>
     1d6:	c7 3c       	cpi	r28, 0xC7	; 199
     1d8:	d1 07       	cpc	r29, r17
     1da:	c9 f7       	brne	.-14     	; 0x1ce <__do_global_ctors+0x8>
     1dc:	6a d1       	rcall	.+724    	; 0x4b2 <main>
     1de:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <_ZN3batC1Ev>:
#include "bat.h"


bat::bat(){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <_ZN3batC1Ev+0x6>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9a 83       	std	Y+2, r25	; 0x02
     1f0:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX |= (1 << REFS1) | (1 << MUX0);	// MUX0 picks ADC1 Pin
     1f2:	8c e7       	ldi	r24, 0x7C	; 124
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2c e7       	ldi	r18, 0x7C	; 124
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	21 68       	ori	r18, 0x81	; 129
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// Enable ADC prescaler  to 64 (125KHz @ 8 MHz)
     204:	8a e7       	ldi	r24, 0x7A	; 122
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2a e7       	ldi	r18, 0x7A	; 122
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	26 60       	ori	r18, 0x06	; 6
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
	DIDR0 |= (1 << ADC1D);	// Disable digital input buffer on ADC1 pin
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2e e7       	ldi	r18, 0x7E	; 126
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	22 60       	ori	r18, 0x02	; 2
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
	
}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN3bat6ENABLEEv>:


void bat::ENABLE(){
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <_ZN3bat6ENABLEEv+0x6>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= ( 1 << ADEN );
     240:	8a e7       	ldi	r24, 0x7A	; 122
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	2a e7       	ldi	r18, 0x7A	; 122
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	20 81       	ld	r18, Z
     24c:	20 68       	ori	r18, 0x80	; 128
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
	//_delay_ms( 200 );
	ADCSRA |= ( 1 << ADSC );
     252:	8a e7       	ldi	r24, 0x7A	; 122
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	2a e7       	ldi	r18, 0x7A	; 122
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	f9 01       	movw	r30, r18
     25c:	20 81       	ld	r18, Z
     25e:	20 64       	ori	r18, 0x40	; 64
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18

}
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <_ZN3bat7DISABLEEv>:


void bat::DISABLE(){
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	00 d0       	rcall	.+0      	; 0x274 <_ZN3bat7DISABLEEv+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~( 1 << ADEN );
     27c:	8a e7       	ldi	r24, 0x7A	; 122
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2a e7       	ldi	r18, 0x7A	; 122
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	2f 77       	andi	r18, 0x7F	; 127
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <_ZN3bat3getEv>:

unsigned char bat::get(){
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	2d 97       	sbiw	r28, 0x0d	; 13
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	99 87       	std	Y+9, r25	; 0x09
     2b6:	88 87       	std	Y+8, r24	; 0x08
	
	adc_out adoCurrent;
	uint8_t valBatteryLevel;
	uint16_t minADCpercent = 0x02DA;
     2b8:	8a ed       	ldi	r24, 0xDA	; 218
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
	uint16_t adcdifference = 0x0125;
     2c0:	85 e2       	ldi	r24, 0x25	; 37
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	9c 83       	std	Y+4, r25	; 0x04
     2c6:	8b 83       	std	Y+3, r24	; 0x03
	
	ENABLE();
     2c8:	88 85       	ldd	r24, Y+8	; 0x08
     2ca:	99 85       	ldd	r25, Y+9	; 0x09
     2cc:	b2 df       	rcall	.-156    	; 0x232 <_ZN3bat6ENABLEEv>
	loop_until_bit_is_clear(ADCSRA, ADSC);
     2ce:	8a e7       	ldi	r24, 0x7A	; 122
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	80 74       	andi	r24, 0x40	; 64
     2dc:	99 27       	eor	r25, r25
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	89 2b       	or	r24, r25
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <_ZN3bat3getEv+0x4e>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	22 23       	and	r18, r18
     2e8:	91 f7       	brne	.-28     	; 0x2ce <_ZN3bat3getEv+0x36>
	adoCurrent = ADC - minADCpercent;
     2ea:	88 e7       	ldi	r24, 0x78	; 120
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	a9 01       	movw	r20, r18
     2fa:	48 1b       	sub	r20, r24
     2fc:	59 0b       	sbc	r21, r25
     2fe:	ca 01       	movw	r24, r20
     300:	9e 83       	std	Y+6, r25	; 0x06
     302:	8d 83       	std	Y+5, r24	; 0x05
	DISABLE();
     304:	88 85       	ldd	r24, Y+8	; 0x08
     306:	99 85       	ldd	r25, Y+9	; 0x09
     308:	b2 df       	rcall	.-156    	; 0x26e <_ZN3bat7DISABLEEv>
	
	valBatteryLevel = (( uint32_t )adoCurrent * 100 ) / adcdifference;
     30a:	8d 81       	ldd	r24, Y+5	; 0x05
     30c:	9e 81       	ldd	r25, Y+6	; 0x06
     30e:	9c 01       	movw	r18, r24
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	84 e6       	ldi	r24, 0x64	; 100
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	dc 01       	movw	r26, r24
     31a:	0e 94 21 18 	call	0x3042	; 0x3042 <__muluhisi3>
     31e:	7b 01       	movw	r14, r22
     320:	8c 01       	movw	r16, r24
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	9c 81       	ldd	r25, Y+4	; 0x04
     326:	9c 01       	movw	r18, r24
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	c8 01       	movw	r24, r16
     32e:	b7 01       	movw	r22, r14
     330:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__udivmodsi4>
     334:	da 01       	movw	r26, r20
     336:	c9 01       	movw	r24, r18
     338:	8f 83       	std	Y+7, r24	; 0x07
	return (( valBatteryLevel / 10 ) << 4 ) | ( valBatteryLevel % 10 );
     33a:	9f 81       	ldd	r25, Y+7	; 0x07
     33c:	8d ec       	ldi	r24, 0xCD	; 205
     33e:	98 9f       	mul	r25, r24
     340:	81 2d       	mov	r24, r1
     342:	11 24       	eor	r1, r1
     344:	86 95       	lsr	r24
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	82 95       	swap	r24
     350:	92 95       	swap	r25
     352:	90 7f       	andi	r25, 0xF0	; 240
     354:	98 27       	eor	r25, r24
     356:	80 7f       	andi	r24, 0xF0	; 240
     358:	98 27       	eor	r25, r24
     35a:	38 2f       	mov	r19, r24
     35c:	9f 81       	ldd	r25, Y+7	; 0x07
     35e:	8d ec       	ldi	r24, 0xCD	; 205
     360:	98 9f       	mul	r25, r24
     362:	81 2d       	mov	r24, r1
     364:	11 24       	eor	r1, r1
     366:	86 95       	lsr	r24
     368:	86 95       	lsr	r24
     36a:	86 95       	lsr	r24
     36c:	88 0f       	add	r24, r24
     36e:	28 2f       	mov	r18, r24
     370:	22 0f       	add	r18, r18
     372:	22 0f       	add	r18, r18
     374:	82 0f       	add	r24, r18
     376:	59 2f       	mov	r21, r25
     378:	58 1b       	sub	r21, r24
     37a:	85 2f       	mov	r24, r21
     37c:	83 2b       	or	r24, r19
	
     37e:	2d 96       	adiw	r28, 0x0d	; 13
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     398:	2f 92       	push	r2
     39a:	3f 92       	push	r3
     39c:	4f 92       	push	r4
     39e:	5f 92       	push	r5
     3a0:	6f 92       	push	r6
     3a2:	7f 92       	push	r7
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	29 97       	sbiw	r28, 0x09	; 9
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	99 87       	std	Y+9, r25	; 0x09
     3ce:	88 87       	std	Y+8, r24	; 0x08
     3d0:	88 85       	ldd	r24, Y+8	; 0x08
     3d2:	99 85       	ldd	r25, Y+9	; 0x09
     3d4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN3rtc8get_timeEv>
     3d8:	a2 2e       	mov	r10, r18
     3da:	b3 2e       	mov	r11, r19
     3dc:	c4 2e       	mov	r12, r20
     3de:	d5 2e       	mov	r13, r21
     3e0:	e6 2e       	mov	r14, r22
     3e2:	f7 2e       	mov	r15, r23
     3e4:	08 2f       	mov	r16, r24
     3e6:	19 2f       	mov	r17, r25
     3e8:	2a 2d       	mov	r18, r10
     3ea:	3b 2d       	mov	r19, r11
     3ec:	4c 2d       	mov	r20, r12
     3ee:	5d 2d       	mov	r21, r13
     3f0:	6e 2d       	mov	r22, r14
     3f2:	7f 2d       	mov	r23, r15
     3f4:	80 2f       	mov	r24, r16
     3f6:	91 2f       	mov	r25, r17
     3f8:	29 83       	std	Y+1, r18	; 0x01
     3fa:	3a 83       	std	Y+2, r19	; 0x02
     3fc:	4b 83       	std	Y+3, r20	; 0x03
     3fe:	5c 83       	std	Y+4, r21	; 0x04
     400:	6d 83       	std	Y+5, r22	; 0x05
     402:	7e 83       	std	Y+6, r23	; 0x06
     404:	8f 83       	std	Y+7, r24	; 0x07
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	5a 81       	ldd	r21, Y+2	; 0x02
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	4b 81       	ldd	r20, Y+3	; 0x03
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	3c 81       	ldd	r19, Y+4	; 0x04
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	2d 81       	ldd	r18, Y+5	; 0x05
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	26 2e       	mov	r2, r22
     424:	35 2e       	mov	r3, r21
     426:	44 2e       	mov	r4, r20
     428:	53 2e       	mov	r5, r19
     42a:	62 2e       	mov	r6, r18
     42c:	79 2e       	mov	r7, r25
     42e:	88 2e       	mov	r8, r24
     430:	a2 2c       	mov	r10, r2
     432:	b3 2c       	mov	r11, r3
     434:	c4 2c       	mov	r12, r4
     436:	d5 2c       	mov	r13, r5
     438:	e6 2c       	mov	r14, r6
     43a:	f7 2c       	mov	r15, r7
     43c:	08 2d       	mov	r16, r8
     43e:	19 2d       	mov	r17, r9
     440:	2a 2d       	mov	r18, r10
     442:	3b 2d       	mov	r19, r11
     444:	4c 2d       	mov	r20, r12
     446:	5d 2d       	mov	r21, r13
     448:	6e 2d       	mov	r22, r14
     44a:	7f 2d       	mov	r23, r15
     44c:	80 2f       	mov	r24, r16
     44e:	91 2f       	mov	r25, r17
     450:	29 96       	adiw	r28, 0x09	; 9
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	7f 90       	pop	r7
     476:	6f 90       	pop	r6
     478:	5f 90       	pop	r5
     47a:	4f 90       	pop	r4
     47c:	3f 90       	pop	r3
     47e:	2f 90       	pop	r2
     480:	08 95       	ret

00000482 <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <_ZN3rtc3setEP8rtc_time+0x6>
     488:	00 d0       	rcall	.+0      	; 0x48a <_ZN3rtc3setEP8rtc_time+0x8>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	7c 83       	std	Y+4, r23	; 0x04
     494:	6b 83       	std	Y+3, r22	; 0x03
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	3c 81       	ldd	r19, Y+4	; 0x04
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	b9 01       	movw	r22, r18
     4a0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZN3rtc8set_timeEP8rtc_time>
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <main>:
lcd lcdNHD;
bat batLiPo;
rtc_time rtmCurrent{0x50, 0x59, 0x72, 0x02, 0x11, 0x04, 0x16};


int main(){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	28 97       	sbiw	r28, 0x08	; 8
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
	
	rtc_alarm rtaAlarm0 { 0x00, 0x00, 0x80, 0x80 };
     4ca:	19 82       	std	Y+1, r1	; 0x01
     4cc:	1a 82       	std	Y+2, r1	; 0x02
     4ce:	80 e8       	ldi	r24, 0x80	; 128
     4d0:	8b 83       	std	Y+3, r24	; 0x03
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	8c 83       	std	Y+4, r24	; 0x04
	rtc_alarm rtaAlarm1 { 0x80, 0x80, 0x80, 0x80 };
     4d6:	80 e8       	ldi	r24, 0x80	; 128
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	80 e8       	ldi	r24, 0x80	; 128
     4dc:	8e 83       	std	Y+6, r24	; 0x06
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	8f 83       	std	Y+7, r24	; 0x07
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	88 87       	std	Y+8, r24	; 0x08

	
	HeadsUp_Init();
     4e6:	26 d0       	rcall	.+76     	; 0x534 <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	ab 81       	ldd	r26, Y+3	; 0x03
     4ee:	bc 81       	ldd	r27, Y+4	; 0x04
     4f0:	8c 01       	movw	r16, r24
     4f2:	9d 01       	movw	r18, r26
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 e7       	ldi	r24, 0x70	; 112
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	af 81       	ldd	r26, Y+7	; 0x07
     506:	b8 85       	ldd	r27, Y+8	; 0x08
     508:	8c 01       	movw	r16, r24
     50a:	9d 01       	movw	r18, r26
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	80 e7       	ldi	r24, 0x70	; 112
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3rtc5alarmEhh9rtc_alarm>
		
	Menu_Main();
     518:	ed d2       	rcall	.+1498   	; 0xaf4 <_Z9Menu_Mainv>
	
	return 0;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0

}
     51e:	28 96       	adiw	r28, 0x08	; 8
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <_Z12HeadsUp_Initv>:


void HeadsUp_Init(){
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	60 97       	sbiw	r28, 0x10	; 16
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char uchCurrentTime[ LCD_LINE_SIZE ] ;
	
	
	Test_On_PortA0();
     554:	a0 d0       	rcall	.+320    	; 0x696 <_Z14Test_On_PortA0v>
	
	rtcDS.set(&rtmCurrent);
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	80 e7       	ldi	r24, 0x70	; 112
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	91 df       	rcall	.-222    	; 0x482 <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT2();
     560:	66 d0       	rcall	.+204    	; 0x62e <_Z13Enable_PCINT2v>
	Enable_PCINT3();
     562:	31 d0       	rcall	.+98     	; 0x5c6 <_Z13Enable_PCINT3v>
	sei();
     564:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmCurrent, uchCurrentTime, LCD_LINE_SIZE );
     566:	68 94       	set
     568:	cc 24       	eor	r12, r12
     56a:	c4 f8       	bld	r12, 4
     56c:	d1 2c       	mov	r13, r1
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	7c 01       	movw	r14, r24
     574:	00 91 00 01 	lds	r16, 0x0100
     578:	10 91 01 01 	lds	r17, 0x0101
     57c:	20 91 02 01 	lds	r18, 0x0102
     580:	30 91 03 01 	lds	r19, 0x0103
     584:	40 91 04 01 	lds	r20, 0x0104
     588:	50 91 05 01 	lds	r21, 0x0105
     58c:	60 91 06 01 	lds	r22, 0x0106
     590:	80 e7       	ldi	r24, 0x70	; 112
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( uchCurrentTime , LCD_LINE_TOP );
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	bc 01       	movw	r22, r24
     5a0:	81 e7       	ldi	r24, 0x71	; 113
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN3lcd5printEPhh>

}
     5a8:	60 96       	adiw	r28, 0x10	; 16
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	08 95       	ret

000005c6 <_Z13Enable_PCINT3v>:


void Enable_PCINT3(){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA3 );
     5ce:	81 e2       	ldi	r24, 0x21	; 33
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	21 e2       	ldi	r18, 0x21	; 33
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	27 7f       	andi	r18, 0xF7	; 247
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA3;
     5e0:	82 e2       	ldi	r24, 0x22	; 34
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	22 e2       	ldi	r18, 0x22	; 34
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	28 60       	ori	r18, 0x08	; 8
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     5f2:	88 e6       	ldi	r24, 0x68	; 104
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	28 e6       	ldi	r18, 0x68	; 104
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	21 60       	ori	r18, 0x01	; 1
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT3;
     604:	8b e6       	ldi	r24, 0x6B	; 107
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	2b e6       	ldi	r18, 0x6B	; 107
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	f9 01       	movw	r30, r18
     60e:	20 81       	ld	r18, Z
     610:	28 60       	ori	r18, 0x08	; 8
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     616:	8b e3       	ldi	r24, 0x3B	; 59
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	2b e3       	ldi	r18, 0x3B	; 59
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	21 60       	ori	r18, 0x01	; 1
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18

}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_Z13Enable_PCINT2v>:


void Enable_PCINT2(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA2 );
     636:	81 e2       	ldi	r24, 0x21	; 33
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	21 e2       	ldi	r18, 0x21	; 33
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	2b 7f       	andi	r18, 0xFB	; 251
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA2;
     648:	82 e2       	ldi	r24, 0x22	; 34
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	22 e2       	ldi	r18, 0x22	; 34
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	24 60       	ori	r18, 0x04	; 4
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     65a:	88 e6       	ldi	r24, 0x68	; 104
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	28 e6       	ldi	r18, 0x68	; 104
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	21 60       	ori	r18, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT2;
     66c:	8b e6       	ldi	r24, 0x6B	; 107
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2b e6       	ldi	r18, 0x6B	; 107
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	24 60       	ori	r18, 0x04	; 4
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     67e:	8b e3       	ldi	r24, 0x3B	; 59
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	2b e3       	ldi	r18, 0x3B	; 59
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	21 60       	ori	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18

}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	6c 97       	sbiw	r28, 0x1c	; 28
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     6aa:	81 e2       	ldi	r24, 0x21	; 33
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	21 e2       	ldi	r18, 0x21	; 33
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	21 60       	ori	r18, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	22 e2       	ldi	r18, 0x22	; 34
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	21 60       	ori	r18, 0x01	; 1
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	aa e7       	ldi	r26, 0x7A	; 122
     6d4:	b3 e4       	ldi	r27, 0x43	; 67
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	ab 83       	std	Y+3, r26	; 0x03
     6dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4a e7       	ldi	r20, 0x7A	; 122
     6e4:	53 e4       	ldi	r21, 0x43	; 67
     6e6:	69 81       	ldd	r22, Y+1	; 0x01
     6e8:	7a 81       	ldd	r23, Y+2	; 0x02
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	8d 83       	std	Y+5, r24	; 0x05
     6f8:	9e 83       	std	Y+6, r25	; 0x06
     6fa:	af 83       	std	Y+7, r26	; 0x07
     6fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	5f e3       	ldi	r21, 0x3F	; 63
     706:	6d 81       	ldd	r22, Y+5	; 0x05
     708:	7e 81       	ldd	r23, Y+6	; 0x06
     70a:	8f 81       	ldd	r24, Y+7	; 0x07
     70c:	98 85       	ldd	r25, Y+8	; 0x08
     70e:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	2c f4       	brge	.+10     	; 0x720 <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9a 87       	std	Y+10, r25	; 0x0a
     71c:	89 87       	std	Y+9, r24	; 0x09
     71e:	3f c0       	rjmp	.+126    	; 0x79e <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	4f e7       	ldi	r20, 0x7F	; 127
     726:	57 e4       	ldi	r21, 0x47	; 71
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	4c f5       	brge	.+82     	; 0x78a <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e2       	ldi	r20, 0x20	; 32
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	69 81       	ldd	r22, Y+1	; 0x01
     742:	7a 81       	ldd	r23, Y+2	; 0x02
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9a 87       	std	Y+10, r25	; 0x0a
     75e:	89 87       	std	Y+9, r24	; 0x09
     760:	0f c0       	rjmp	.+30     	; 0x780 <_Z14Test_On_PortA0v+0xea>
     762:	89 e1       	ldi	r24, 0x19	; 25
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	9c 87       	std	Y+12, r25	; 0x0c
     768:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     76a:	8b 85       	ldd	r24, Y+11	; 0x0b
     76c:	9c 85       	ldd	r25, Y+12	; 0x0c
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <_Z14Test_On_PortA0v+0xd8>
     772:	9c 87       	std	Y+12, r25	; 0x0c
     774:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     776:	89 85       	ldd	r24, Y+9	; 0x09
     778:	9a 85       	ldd	r25, Y+10	; 0x0a
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	9a 87       	std	Y+10, r25	; 0x0a
     77e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     780:	89 85       	ldd	r24, Y+9	; 0x09
     782:	9a 85       	ldd	r25, Y+10	; 0x0a
     784:	89 2b       	or	r24, r25
     786:	69 f7       	brne	.-38     	; 0x762 <_Z14Test_On_PortA0v+0xcc>
     788:	14 c0       	rjmp	.+40     	; 0x7b2 <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78a:	6d 81       	ldd	r22, Y+5	; 0x05
     78c:	7e 81       	ldd	r23, Y+6	; 0x06
     78e:	8f 81       	ldd	r24, Y+7	; 0x07
     790:	98 85       	ldd	r25, Y+8	; 0x08
     792:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9a 87       	std	Y+10, r25	; 0x0a
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a2:	9e 87       	std	Y+14, r25	; 0x0e
     7a4:	8d 87       	std	Y+13, r24	; 0x0d
     7a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <_Z14Test_On_PortA0v+0x114>
     7ae:	9e 87       	std	Y+14, r25	; 0x0e
     7b0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     7b2:	82 e2       	ldi	r24, 0x22	; 34
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	22 e2       	ldi	r18, 0x22	; 34
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	2e 7f       	andi	r18, 0xFE	; 254
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	aa e7       	ldi	r26, 0x7A	; 122
     7ca:	b3 e4       	ldi	r27, 0x43	; 67
     7cc:	8f 87       	std	Y+15, r24	; 0x0f
     7ce:	98 8b       	std	Y+16, r25	; 0x10
     7d0:	a9 8b       	std	Y+17, r26	; 0x11
     7d2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	4a e7       	ldi	r20, 0x7A	; 122
     7da:	53 e4       	ldi	r21, 0x43	; 67
     7dc:	6f 85       	ldd	r22, Y+15	; 0x0f
     7de:	78 89       	ldd	r23, Y+16	; 0x10
     7e0:	89 89       	ldd	r24, Y+17	; 0x11
     7e2:	9a 89       	ldd	r25, Y+18	; 0x12
     7e4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	8b 8b       	std	Y+19, r24	; 0x13
     7ee:	9c 8b       	std	Y+20, r25	; 0x14
     7f0:	ad 8b       	std	Y+21, r26	; 0x15
     7f2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e8       	ldi	r20, 0x80	; 128
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	6b 89       	ldd	r22, Y+19	; 0x13
     7fe:	7c 89       	ldd	r23, Y+20	; 0x14
     800:	8d 89       	ldd	r24, Y+21	; 0x15
     802:	9e 89       	ldd	r25, Y+22	; 0x16
     804:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     808:	88 23       	and	r24, r24
     80a:	2c f4       	brge	.+10     	; 0x816 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	98 8f       	std	Y+24, r25	; 0x18
     812:	8f 8b       	std	Y+23, r24	; 0x17
     814:	3f c0       	rjmp	.+126    	; 0x894 <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	6b 89       	ldd	r22, Y+19	; 0x13
     820:	7c 89       	ldd	r23, Y+20	; 0x14
     822:	8d 89       	ldd	r24, Y+21	; 0x15
     824:	9e 89       	ldd	r25, Y+22	; 0x16
     826:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	4c f5       	brge	.+82     	; 0x880 <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	51 e4       	ldi	r21, 0x41	; 65
     836:	6f 85       	ldd	r22, Y+15	; 0x0f
     838:	78 89       	ldd	r23, Y+16	; 0x10
     83a:	89 89       	ldd	r24, Y+17	; 0x11
     83c:	9a 89       	ldd	r25, Y+18	; 0x12
     83e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	bc 01       	movw	r22, r24
     848:	cd 01       	movw	r24, r26
     84a:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	98 8f       	std	Y+24, r25	; 0x18
     854:	8f 8b       	std	Y+23, r24	; 0x17
     856:	0f c0       	rjmp	.+30     	; 0x876 <_Z14Test_On_PortA0v+0x1e0>
     858:	89 e1       	ldi	r24, 0x19	; 25
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9a 8f       	std	Y+26, r25	; 0x1a
     85e:	89 8f       	std	Y+25, r24	; 0x19
     860:	89 8d       	ldd	r24, Y+25	; 0x19
     862:	9a 8d       	ldd	r25, Y+26	; 0x1a
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <_Z14Test_On_PortA0v+0x1ce>
     868:	9a 8f       	std	Y+26, r25	; 0x1a
     86a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86c:	8f 89       	ldd	r24, Y+23	; 0x17
     86e:	98 8d       	ldd	r25, Y+24	; 0x18
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	98 8f       	std	Y+24, r25	; 0x18
     874:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     876:	8f 89       	ldd	r24, Y+23	; 0x17
     878:	98 8d       	ldd	r25, Y+24	; 0x18
     87a:	89 2b       	or	r24, r25
     87c:	69 f7       	brne	.-38     	; 0x858 <_Z14Test_On_PortA0v+0x1c2>
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     880:	6b 89       	ldd	r22, Y+19	; 0x13
     882:	7c 89       	ldd	r23, Y+20	; 0x14
     884:	8d 89       	ldd	r24, Y+21	; 0x15
     886:	9e 89       	ldd	r25, Y+22	; 0x16
     888:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	98 8f       	std	Y+24, r25	; 0x18
     892:	8f 8b       	std	Y+23, r24	; 0x17
     894:	8f 89       	ldd	r24, Y+23	; 0x17
     896:	98 8d       	ldd	r25, Y+24	; 0x18
     898:	9c 8f       	std	Y+28, r25	; 0x1c
     89a:	8b 8f       	std	Y+27, r24	; 0x1b
     89c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     89e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <_Z14Test_On_PortA0v+0x20a>
     8a4:	9c 8f       	std	Y+28, r25	; 0x1c
     8a6:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     8a8:	82 e2       	ldi	r24, 0x22	; 34
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	22 e2       	ldi	r18, 0x22	; 34
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	21 60       	ori	r18, 0x01	; 1
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
	
}
     8ba:	6c 96       	adiw	r28, 0x1c	; 28
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <__vector_4>:


ISR( PCINT0_vect ){
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	00 90 5f 00 	lds	r0, 0x005F
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	00 90 5b 00 	lds	r0, 0x005B
     8dc:	0f 92       	push	r0
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	2f 97       	sbiw	r28, 0x0f	; 15
     910:	de bf       	out	0x3e, r29	; 62
     912:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	
	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     914:	80 91 20 00 	lds	r24, 0x0020
     918:	8f 87       	std	Y+15, r24	; 0x0f
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     91a:	8f 85       	ldd	r24, Y+15	; 0x0f
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 70       	andi	r24, 0x08	; 8
     922:	99 27       	eor	r25, r25
     924:	89 2b       	or	r24, r25
     926:	09 f0       	breq	.+2      	; 0x92a <__vector_4+0x5e>
     928:	93 c0       	rjmp	.+294    	; 0xa50 <__vector_4+0x184>
		DDRA |= 1 << PORTA4;
     92a:	81 e2       	ldi	r24, 0x21	; 33
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	21 e2       	ldi	r18, 0x21	; 33
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	20 61       	ori	r18, 0x10	; 16
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	22 e2       	ldi	r18, 0x22	; 34
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	20 61       	ori	r18, 0x10	; 16
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	aa e7       	ldi	r26, 0x7A	; 122
     954:	b3 e4       	ldi	r27, 0x43	; 67
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	ab 83       	std	Y+3, r26	; 0x03
     95c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	53 e4       	ldi	r21, 0x43	; 67
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	7a 81       	ldd	r23, Y+2	; 0x02
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	8d 83       	std	Y+5, r24	; 0x05
     978:	9e 83       	std	Y+6, r25	; 0x06
     97a:	af 83       	std	Y+7, r26	; 0x07
     97c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	6d 81       	ldd	r22, Y+5	; 0x05
     988:	7e 81       	ldd	r23, Y+6	; 0x06
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     992:	88 23       	and	r24, r24
     994:	2c f4       	brge	.+10     	; 0x9a0 <__vector_4+0xd4>
		__ticks = 1;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	9a 87       	std	Y+10, r25	; 0x0a
     99c:	89 87       	std	Y+9, r24	; 0x09
     99e:	3f c0       	rjmp	.+126    	; 0xa1e <__vector_4+0x152>
	else if (__tmp > 65535)
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	4f e7       	ldi	r20, 0x7F	; 127
     9a6:	57 e4       	ldi	r21, 0x47	; 71
     9a8:	6d 81       	ldd	r22, Y+5	; 0x05
     9aa:	7e 81       	ldd	r23, Y+6	; 0x06
     9ac:	8f 81       	ldd	r24, Y+7	; 0x07
     9ae:	98 85       	ldd	r25, Y+8	; 0x08
     9b0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
     9b4:	18 16       	cp	r1, r24
     9b6:	4c f5       	brge	.+82     	; 0xa0a <__vector_4+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e2       	ldi	r20, 0x20	; 32
     9be:	51 e4       	ldi	r21, 0x41	; 65
     9c0:	69 81       	ldd	r22, Y+1	; 0x01
     9c2:	7a 81       	ldd	r23, Y+2	; 0x02
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	bc 01       	movw	r22, r24
     9d2:	cd 01       	movw	r24, r26
     9d4:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	9a 87       	std	Y+10, r25	; 0x0a
     9de:	89 87       	std	Y+9, r24	; 0x09
     9e0:	0f c0       	rjmp	.+30     	; 0xa00 <__vector_4+0x134>
     9e2:	89 e1       	ldi	r24, 0x19	; 25
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9c 87       	std	Y+12, r25	; 0x0c
     9e8:	8b 87       	std	Y+11, r24	; 0x0b
     9ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <__vector_4+0x122>
     9f2:	9c 87       	std	Y+12, r25	; 0x0c
     9f4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f6:	89 85       	ldd	r24, Y+9	; 0x09
     9f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	9a 87       	std	Y+10, r25	; 0x0a
     9fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	89 85       	ldd	r24, Y+9	; 0x09
     a02:	9a 85       	ldd	r25, Y+10	; 0x0a
     a04:	89 2b       	or	r24, r25
     a06:	69 f7       	brne	.-38     	; 0x9e2 <__vector_4+0x116>
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <__vector_4+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a0a:	6d 81       	ldd	r22, Y+5	; 0x05
     a0c:	7e 81       	ldd	r23, Y+6	; 0x06
     a0e:	8f 81       	ldd	r24, Y+7	; 0x07
     a10:	98 85       	ldd	r25, Y+8	; 0x08
     a12:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     a16:	dc 01       	movw	r26, r24
     a18:	cb 01       	movw	r24, r22
     a1a:	9a 87       	std	Y+10, r25	; 0x0a
     a1c:	89 87       	std	Y+9, r24	; 0x09
     a1e:	89 85       	ldd	r24, Y+9	; 0x09
     a20:	9a 85       	ldd	r25, Y+10	; 0x0a
     a22:	9e 87       	std	Y+14, r25	; 0x0e
     a24:	8d 87       	std	Y+13, r24	; 0x0d
     a26:	8d 85       	ldd	r24, Y+13	; 0x0d
     a28:	9e 85       	ldd	r25, Y+14	; 0x0e
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <__vector_4+0x15e>
     a2e:	9e 87       	std	Y+14, r25	; 0x0e
     a30:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
     a32:	82 e2       	ldi	r24, 0x22	; 34
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	22 e2       	ldi	r18, 0x22	; 34
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	20 81       	ld	r18, Z
     a3e:	2f 7e       	andi	r18, 0xEF	; 239
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
		rtcDS.clear_interupt( RTC_ALARM_0 );
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	80 e7       	ldi	r24, 0x70	; 112
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN3rtc14clear_interuptEh>
     a4e:	2d c0       	rjmp	.+90     	; 0xaaa <__vector_4+0x1de>
		}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
     a50:	8f 85       	ldd	r24, Y+15	; 0x0f
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	84 70       	andi	r24, 0x04	; 4
     a58:	99 27       	eor	r25, r25
     a5a:	89 2b       	or	r24, r25
     a5c:	31 f5       	brne	.+76     	; 0xaaa <__vector_4+0x1de>
		rtmCurrent = rtcDS.get();
     a5e:	80 e7       	ldi	r24, 0x70	; 112
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	9a dc       	rcall	.-1740   	; 0x398 <_ZN3rtc3getEv>
     a64:	a2 2e       	mov	r10, r18
     a66:	b3 2e       	mov	r11, r19
     a68:	c4 2e       	mov	r12, r20
     a6a:	d5 2e       	mov	r13, r21
     a6c:	e6 2e       	mov	r14, r22
     a6e:	f7 2e       	mov	r15, r23
     a70:	08 2f       	mov	r16, r24
     a72:	19 2f       	mov	r17, r25
     a74:	2a 2d       	mov	r18, r10
     a76:	3b 2d       	mov	r19, r11
     a78:	4c 2d       	mov	r20, r12
     a7a:	5d 2d       	mov	r21, r13
     a7c:	6e 2d       	mov	r22, r14
     a7e:	7f 2d       	mov	r23, r15
     a80:	80 2f       	mov	r24, r16
     a82:	91 2f       	mov	r25, r17
     a84:	20 93 00 01 	sts	0x0100, r18
     a88:	30 93 01 01 	sts	0x0101, r19
     a8c:	40 93 02 01 	sts	0x0102, r20
     a90:	50 93 03 01 	sts	0x0103, r21
     a94:	60 93 04 01 	sts	0x0104, r22
     a98:	70 93 05 01 	sts	0x0105, r23
     a9c:	80 93 06 01 	sts	0x0106, r24
		rtcDS.clear_interupt( RTC_ALARM_1 );
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	80 e7       	ldi	r24, 0x70	; 112
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN3rtc14clear_interuptEh>
	}
	
}
     aaa:	2f 96       	adiw	r28, 0x0f	; 15
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	0f 90       	pop	r0
     ae4:	00 92 5b 00 	sts	0x005B, r0
     ae8:	0f 90       	pop	r0
     aea:	00 92 5f 00 	sts	0x005F, r0
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <_Z9Menu_Mainv>:


void Menu_Main(){
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	e5 97       	sbiw	r28, 0x35	; 53
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrMenuTop[LCD_LINE_SIZE];
	unsigned char chrMenuBot[LCD_LINE_SIZE]{ 'A', 'L', 'R', 'M', '|', 'B', 'A', 'T', '9', '3', '%', '|', 'O', 'P', 'T', 'S' };
     b14:	80 e1       	ldi	r24, 0x10	; 16
     b16:	e7 e0       	ldi	r30, 0x07	; 7
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	de 01       	movw	r26, r28
     b1c:	94 96       	adiw	r26, 0x24	; 36
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	8a 95       	dec	r24
     b24:	e1 f7       	brne	.-8      	; 0xb1e <_Z9Menu_Mainv+0x2a>
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
     b26:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t valCursorState{ CURSOR_OFF };
     b28:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursorDivider{ 0 };
     b2a:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t valBatUpdate{ 0 };
     b2c:	1c 82       	std	Y+4, r1	; 0x04
     b2e:	1b 82       	std	Y+3, r1	; 0x03
	
	
	lcdNHD.print( chrMenuBot , LCD_LINE_BOTTOM );
     b30:	ce 01       	movw	r24, r28
     b32:	84 96       	adiw	r24, 0x24	; 36
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	bc 01       	movw	r22, r24
     b38:	81 e7       	ldi	r24, 0x71	; 113
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	bf d6       	rcall	.+3454   	; 0x18bc <_ZN3lcd5printEPhh>
	
	for(;;){
		rtcDS.rtm_to_char( rtmCurrent, chrMenuTop, LCD_LINE_SIZE );
     b3e:	ce 01       	movw	r24, r28
     b40:	44 96       	adiw	r24, 0x14	; 20
     b42:	68 94       	set
     b44:	cc 24       	eor	r12, r12
     b46:	c4 f8       	bld	r12, 4
     b48:	d1 2c       	mov	r13, r1
     b4a:	7c 01       	movw	r14, r24
     b4c:	00 91 00 01 	lds	r16, 0x0100
     b50:	10 91 01 01 	lds	r17, 0x0101
     b54:	20 91 02 01 	lds	r18, 0x0102
     b58:	30 91 03 01 	lds	r19, 0x0103
     b5c:	40 91 04 01 	lds	r20, 0x0104
     b60:	50 91 05 01 	lds	r21, 0x0105
     b64:	60 91 06 01 	lds	r22, 0x0106
     b68:	80 e7       	ldi	r24, 0x70	; 112
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrMenuTop , LCD_LINE_TOP );
     b70:	ce 01       	movw	r24, r28
     b72:	44 96       	adiw	r24, 0x14	; 20
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	bc 01       	movw	r22, r24
     b78:	81 e7       	ldi	r24, 0x71	; 113
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	9f d6       	rcall	.+3390   	; 0x18bc <_ZN3lcd5printEPhh>
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	2a e0       	ldi	r18, 0x0A	; 10
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	b9 01       	movw	r22, r18
     b8c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divmodhi4>
     b90:	8a 83       	std	Y+2, r24	; 0x02
		if( valCursorDivider == 0 ){
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	88 23       	and	r24, r24
     b96:	19 f4       	brne	.+6      	; 0xb9e <_Z9Menu_Mainv+0xaa>
					valCursorState = ~valCursorState;
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	80 95       	com	r24
     b9c:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if( valCursorState == CURSOR_OFF ){
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	81 f4       	brne	.+32     	; 0xbc4 <_Z9Menu_Mainv+0xd0>
			chrMenuBot[0] = 'A';
     ba4:	81 e4       	ldi	r24, 0x41	; 65
     ba6:	8c a3       	std	Y+36, r24	; 0x24
			chrMenuBot[1] = 'L';
     ba8:	8c e4       	ldi	r24, 0x4C	; 76
     baa:	8d a3       	std	Y+37, r24	; 0x25
			chrMenuBot[2] = 'R';
     bac:	82 e5       	ldi	r24, 0x52	; 82
     bae:	8e a3       	std	Y+38, r24	; 0x26
			chrMenuBot[3] = 'M';
     bb0:	8d e4       	ldi	r24, 0x4D	; 77
     bb2:	8f a3       	std	Y+39, r24	; 0x27
			chrMenuBot[12] = 'O';
     bb4:	8f e4       	ldi	r24, 0x4F	; 79
     bb6:	88 ab       	std	Y+48, r24	; 0x30
			chrMenuBot[13] = 'P';
     bb8:	80 e5       	ldi	r24, 0x50	; 80
     bba:	89 ab       	std	Y+49, r24	; 0x31
			chrMenuBot[14] = 'T';
     bbc:	84 e5       	ldi	r24, 0x54	; 84
     bbe:	8a ab       	std	Y+50, r24	; 0x32
			chrMenuBot[15] = 'S';
     bc0:	83 e5       	ldi	r24, 0x53	; 83
     bc2:	8b ab       	std	Y+51, r24	; 0x33
		}
		
		if( valMenuState == MAIN_STATE_ALARMS ){
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	88 23       	and	r24, r24
     bc8:	a1 f4       	brne	.+40     	; 0xbf2 <_Z9Menu_Mainv+0xfe>
			if( valCursorState == CURSOR_ON ){
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	39 f5       	brne	.+78     	; 0xc1e <_Z9Menu_Mainv+0x12a>
				chrMenuBot[0] = '_';
     bd0:	8f e5       	ldi	r24, 0x5F	; 95
     bd2:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[1] = '_';
     bd4:	8f e5       	ldi	r24, 0x5F	; 95
     bd6:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[2] = '_';
     bd8:	8f e5       	ldi	r24, 0x5F	; 95
     bda:	8e a3       	std	Y+38, r24	; 0x26
				chrMenuBot[3] = '_';
     bdc:	8f e5       	ldi	r24, 0x5F	; 95
     bde:	8f a3       	std	Y+39, r24	; 0x27
				chrMenuBot[12] = 'O';
     be0:	8f e4       	ldi	r24, 0x4F	; 79
     be2:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[13] = 'P';
     be4:	80 e5       	ldi	r24, 0x50	; 80
     be6:	89 ab       	std	Y+49, r24	; 0x31
				chrMenuBot[14] = 'T';
     be8:	84 e5       	ldi	r24, 0x54	; 84
     bea:	8a ab       	std	Y+50, r24	; 0x32
				chrMenuBot[15] = 'S';
     bec:	83 e5       	ldi	r24, 0x53	; 83
     bee:	8b ab       	std	Y+51, r24	; 0x33
     bf0:	16 c0       	rjmp	.+44     	; 0xc1e <_Z9Menu_Mainv+0x12a>
			}
		}else if( valMenuState == MAIN_STATE_SETTINGS ){
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	99 f4       	brne	.+38     	; 0xc1e <_Z9Menu_Mainv+0x12a>
			if( valCursorState == CURSOR_ON ){
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	81 f4       	brne	.+32     	; 0xc1e <_Z9Menu_Mainv+0x12a>
				chrMenuBot[0] = '_';
     bfe:	8f e5       	ldi	r24, 0x5F	; 95
     c00:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[1] = '_';
     c02:	8f e5       	ldi	r24, 0x5F	; 95
     c04:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[2] = '_';
     c06:	8f e5       	ldi	r24, 0x5F	; 95
     c08:	8e a3       	std	Y+38, r24	; 0x26
				chrMenuBot[3] = '_';
     c0a:	8f e5       	ldi	r24, 0x5F	; 95
     c0c:	8f a3       	std	Y+39, r24	; 0x27
				chrMenuBot[12] = '#';
     c0e:	83 e2       	ldi	r24, 0x23	; 35
     c10:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[13] = '#';
     c12:	83 e2       	ldi	r24, 0x23	; 35
     c14:	89 ab       	std	Y+49, r24	; 0x31
				chrMenuBot[14] = '#';
     c16:	83 e2       	ldi	r24, 0x23	; 35
     c18:	8a ab       	std	Y+50, r24	; 0x32
				chrMenuBot[15] = '#';
     c1a:	83 e2       	ldi	r24, 0x23	; 35
     c1c:	8b ab       	std	Y+51, r24	; 0x33
			}
		}
		
		if( valBatUpdate == 0 ){
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	89 2b       	or	r24, r25
     c24:	a9 f4       	brne	.+42     	; 0xc50 <_Z9Menu_Mainv+0x15c>
			chrMenuBot[8] = ( batLiPo.get() >> 4 ) + 0x30;
     c26:	82 e7       	ldi	r24, 0x72	; 114
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	36 db       	rcall	.-2452   	; 0x298 <_ZN3bat3getEv>
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	95 95       	asr	r25
     c32:	87 95       	ror	r24
     c34:	95 95       	asr	r25
     c36:	87 95       	ror	r24
     c38:	95 95       	asr	r25
     c3a:	87 95       	ror	r24
     c3c:	95 95       	asr	r25
     c3e:	87 95       	ror	r24
     c40:	80 5d       	subi	r24, 0xD0	; 208
     c42:	8c a7       	std	Y+44, r24	; 0x2c
			chrMenuBot[9] = ( batLiPo.get() & 0x0F ) + 0x30;
     c44:	82 e7       	ldi	r24, 0x72	; 114
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	27 db       	rcall	.-2482   	; 0x298 <_ZN3bat3getEv>
     c4a:	8f 70       	andi	r24, 0x0F	; 15
     c4c:	80 5d       	subi	r24, 0xD0	; 208
     c4e:	8d a7       	std	Y+45, r24	; 0x2d
		}
		valBatUpdate = ( valBatUpdate + 1 ) % 100;
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	ac 01       	movw	r20, r24
     c56:	4f 5f       	subi	r20, 0xFF	; 255
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	ca 01       	movw	r24, r20
     c5c:	96 95       	lsr	r25
     c5e:	87 95       	ror	r24
     c60:	96 95       	lsr	r25
     c62:	87 95       	ror	r24
     c64:	9c 01       	movw	r18, r24
     c66:	ab e7       	ldi	r26, 0x7B	; 123
     c68:	b4 e1       	ldi	r27, 0x14	; 20
     c6a:	0e 94 12 18 	call	0x3024	; 0x3024 <__umulhisi3>
     c6e:	9c 01       	movw	r18, r24
     c70:	36 95       	lsr	r19
     c72:	27 95       	ror	r18
     c74:	64 e6       	ldi	r22, 0x64	; 100
     c76:	62 9f       	mul	r22, r18
     c78:	c0 01       	movw	r24, r0
     c7a:	63 9f       	mul	r22, r19
     c7c:	90 0d       	add	r25, r0
     c7e:	11 24       	eor	r1, r1
     c80:	9a 01       	movw	r18, r20
     c82:	28 1b       	sub	r18, r24
     c84:	39 0b       	sbc	r19, r25
     c86:	c9 01       	movw	r24, r18
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03

		
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
     c8c:	ce 01       	movw	r24, r28
     c8e:	84 96       	adiw	r24, 0x24	; 36
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	bc 01       	movw	r22, r24
     c94:	81 e7       	ldi	r24, 0x71	; 113
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	11 d6       	rcall	.+3106   	; 0x18bc <_ZN3lcd5printEPhh>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a8 e4       	ldi	r26, 0x48	; 72
     ca0:	b2 e4       	ldi	r27, 0x42	; 66
     ca2:	8e 83       	std	Y+6, r24	; 0x06
     ca4:	9f 83       	std	Y+7, r25	; 0x07
     ca6:	a8 87       	std	Y+8, r26	; 0x08
     ca8:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	53 e4       	ldi	r21, 0x43	; 67
     cb2:	6e 81       	ldd	r22, Y+6	; 0x06
     cb4:	7f 81       	ldd	r23, Y+7	; 0x07
     cb6:	88 85       	ldd	r24, Y+8	; 0x08
     cb8:	99 85       	ldd	r25, Y+9	; 0x09
     cba:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	8a 87       	std	Y+10, r24	; 0x0a
     cc4:	9b 87       	std	Y+11, r25	; 0x0b
     cc6:	ac 87       	std	Y+12, r26	; 0x0c
     cc8:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	6a 85       	ldd	r22, Y+10	; 0x0a
     cd4:	7b 85       	ldd	r23, Y+11	; 0x0b
     cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cda:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     cde:	88 23       	and	r24, r24
     ce0:	2c f4       	brge	.+10     	; 0xcec <_Z9Menu_Mainv+0x1f8>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9f 87       	std	Y+15, r25	; 0x0f
     ce8:	8e 87       	std	Y+14, r24	; 0x0e
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <_Z9Menu_Mainv+0x276>
	else if (__tmp > 65535)
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	6a 85       	ldd	r22, Y+10	; 0x0a
     cf6:	7b 85       	ldd	r23, Y+11	; 0x0b
     cf8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
     d00:	18 16       	cp	r1, r24
     d02:	4c f5       	brge	.+82     	; 0xd56 <_Z9Menu_Mainv+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	6e 81       	ldd	r22, Y+6	; 0x06
     d0e:	7f 81       	ldd	r23, Y+7	; 0x07
     d10:	88 85       	ldd	r24, Y+8	; 0x08
     d12:	99 85       	ldd	r25, Y+9	; 0x09
     d14:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9f 87       	std	Y+15, r25	; 0x0f
     d2a:	8e 87       	std	Y+14, r24	; 0x0e
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <_Z9Menu_Mainv+0x258>
     d2e:	89 e1       	ldi	r24, 0x19	; 25
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	99 8b       	std	Y+17, r25	; 0x11
     d34:	88 8b       	std	Y+16, r24	; 0x10
     d36:	88 89       	ldd	r24, Y+16	; 0x10
     d38:	99 89       	ldd	r25, Y+17	; 0x11
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <_Z9Menu_Mainv+0x246>
     d3e:	99 8b       	std	Y+17, r25	; 0x11
     d40:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	8e 85       	ldd	r24, Y+14	; 0x0e
     d44:	9f 85       	ldd	r25, Y+15	; 0x0f
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9f 87       	std	Y+15, r25	; 0x0f
     d4a:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d4e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d50:	89 2b       	or	r24, r25
     d52:	69 f7       	brne	.-38     	; 0xd2e <_Z9Menu_Mainv+0x23a>
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <_Z9Menu_Mainv+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	6a 85       	ldd	r22, Y+10	; 0x0a
     d58:	7b 85       	ldd	r23, Y+11	; 0x0b
     d5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d5e:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9f 87       	std	Y+15, r25	; 0x0f
     d68:	8e 87       	std	Y+14, r24	; 0x0e
     d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d6e:	9b 8b       	std	Y+19, r25	; 0x13
     d70:	8a 8b       	std	Y+18, r24	; 0x12
     d72:	8a 89       	ldd	r24, Y+18	; 0x12
     d74:	9b 89       	ldd	r25, Y+19	; 0x13
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <_Z9Menu_Mainv+0x282>
     d7a:	9b 8b       	std	Y+19, r25	; 0x13
     d7c:	8a 8b       	std	Y+18, r24	; 0x12
		_delay_ms(50);
	}
     d7e:	df ce       	rjmp	.-578    	; 0xb3e <_Z9Menu_Mainv+0x4a>

00000d80 <_Z41__static_initialization_and_destruction_0ii>:
	
}
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	00 d0       	rcall	.+0      	; 0xd86 <_Z41__static_initialization_and_destruction_0ii+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_Z41__static_initialization_and_destruction_0ii+0x8>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	7c 83       	std	Y+4, r23	; 0x04
     d92:	6b 83       	std	Y+3, r22	; 0x03
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	69 f4       	brne	.+26     	; 0xdb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	49 f4       	brne	.+18     	; 0xdb6 <_Z41__static_initialization_and_destruction_0ii+0x36>

 
#include "headsup.h"


rtc rtcDS;
     da4:	80 e7       	ldi	r24, 0x70	; 112
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	94 d6       	rcall	.+3368   	; 0x1ad2 <_ZN3rtcC1Ev>
lcd lcdNHD;
     daa:	81 e7       	ldi	r24, 0x71	; 113
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	16 d0       	rcall	.+44     	; 0xddc <_ZN3lcdC1Ev>
bat batLiPo;
     db0:	82 e7       	ldi	r24, 0x72	; 114
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	17 da       	rcall	.-3026   	; 0x1e4 <_ZN3batC1Ev>
		
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
		_delay_ms(50);
	}
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <_GLOBAL__sub_I_rtcDS>:
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	6f ef       	ldi	r22, 0xFF	; 255
     dce:	7f ef       	ldi	r23, 0xFF	; 255
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	d5 df       	rcall	.-86     	; 0xd80 <_Z41__static_initialization_and_destruction_0ii>
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_ZN3lcdC1Ev>:
}

void lcd::TWI_CLEAR_ENABLE_ACK()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	60 97       	sbiw	r28, 0x10	; 16
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	98 8b       	std	Y+16, r25	; 0x10
     df2:	8f 87       	std	Y+15, r24	; 0x0f
     df4:	8f 85       	ldd	r24, Y+15	; 0x0f
     df6:	98 89       	ldd	r25, Y+16	; 0x10
     df8:	81 d0       	rcall	.+258    	; 0xefc <_ZN3lcd8TWI_INITEv>
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	98 89       	ldd	r25, Y+16	; 0x10
     dfe:	87 d2       	rcall	.+1294   	; 0x130e <_ZN3lcd4INITEv>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b1 e4       	ldi	r27, 0x41	; 65
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	ab 83       	std	Y+3, r26	; 0x03
     e0e:	bc 83       	std	Y+4, r27	; 0x04
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4a e7       	ldi	r20, 0x7A	; 122
     e16:	53 e4       	ldi	r21, 0x43	; 67
     e18:	69 81       	ldd	r22, Y+1	; 0x01
     e1a:	7a 81       	ldd	r23, Y+2	; 0x02
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	af 83       	std	Y+7, r26	; 0x07
     e2e:	b8 87       	std	Y+8, r27	; 0x08
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	6d 81       	ldd	r22, Y+5	; 0x05
     e3a:	7e 81       	ldd	r23, Y+6	; 0x06
     e3c:	8f 81       	ldd	r24, Y+7	; 0x07
     e3e:	98 85       	ldd	r25, Y+8	; 0x08
     e40:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <_ZN3lcdC1Ev+0x76>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 87       	std	Y+10, r25	; 0x0a
     e4e:	89 87       	std	Y+9, r24	; 0x09
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <_ZN3lcdC1Ev+0xf4>
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	4f e7       	ldi	r20, 0x7F	; 127
     e58:	57 e4       	ldi	r21, 0x47	; 71
     e5a:	6d 81       	ldd	r22, Y+5	; 0x05
     e5c:	7e 81       	ldd	r23, Y+6	; 0x06
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	98 85       	ldd	r25, Y+8	; 0x08
     e62:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <_ZN3lcdC1Ev+0xe0>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e2       	ldi	r20, 0x20	; 32
     e70:	51 e4       	ldi	r21, 0x41	; 65
     e72:	69 81       	ldd	r22, Y+1	; 0x01
     e74:	7a 81       	ldd	r23, Y+2	; 0x02
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9a 87       	std	Y+10, r25	; 0x0a
     e90:	89 87       	std	Y+9, r24	; 0x09
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <_ZN3lcdC1Ev+0xd6>
     e94:	89 e1       	ldi	r24, 0x19	; 25
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9c 87       	std	Y+12, r25	; 0x0c
     e9a:	8b 87       	std	Y+11, r24	; 0x0b
     e9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <_ZN3lcdC1Ev+0xc4>
     ea4:	9c 87       	std	Y+12, r25	; 0x0c
     ea6:	8b 87       	std	Y+11, r24	; 0x0b
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9a 87       	std	Y+10, r25	; 0x0a
     eb0:	89 87       	std	Y+9, r24	; 0x09
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	89 2b       	or	r24, r25
     eb8:	69 f7       	brne	.-38     	; 0xe94 <_ZN3lcdC1Ev+0xb8>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <_ZN3lcdC1Ev+0x108>
     ebc:	6d 81       	ldd	r22, Y+5	; 0x05
     ebe:	7e 81       	ldd	r23, Y+6	; 0x06
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9a 87       	std	Y+10, r25	; 0x0a
     ece:	89 87       	std	Y+9, r24	; 0x09
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	9e 87       	std	Y+14, r25	; 0x0e
     ed6:	8d 87       	std	Y+13, r24	; 0x0d
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <_ZN3lcdC1Ev+0x100>
     ee0:	9e 87       	std	Y+14, r25	; 0x0e
     ee2:	8d 87       	std	Y+13, r24	; 0x0d
     ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee6:	98 89       	ldd	r25, Y+16	; 0x10
     ee8:	46 d4       	rcall	.+2188   	; 0x1776 <_ZN3lcd12SHOW_WELCOMEEv>
     eea:	60 96       	adiw	r28, 0x10	; 16
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_ZN3lcd8TWI_INITEv>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <_ZN3lcd8TWI_INITEv+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	24 e6       	ldi	r18, 0x64	; 100
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	2f 77       	andi	r18, 0x7F	; 127
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	8c eb       	ldi	r24, 0xBC	; 188
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	2c eb       	ldi	r18, 0xBC	; 188
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	f9 01       	movw	r30, r18
     f26:	20 81       	ld	r18, Z
     f28:	2e 7f       	andi	r18, 0xFE	; 254
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
     f2e:	88 eb       	ldi	r24, 0xB8	; 184
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	22 e0       	ldi	r18, 0x02	; 2
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
     f38:	89 eb       	ldi	r24, 0xB9	; 185
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	29 eb       	ldi	r18, 0xB9	; 185
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	f9 01       	movw	r30, r18
     f42:	20 81       	ld	r18, Z
     f44:	2d 7f       	andi	r18, 0xFD	; 253
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <_ZN3lcd16TWI_CHECK_STATUSEh>:
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	2a 97       	sbiw	r28, 0x0a	; 10
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	6b 83       	std	Y+3, r22	; 0x03
     f6e:	89 eb       	ldi	r24, 0xB9	; 185
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	2a 96       	adiw	r28, 0x0a	; 10
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <_ZN3lcd16TWI_CLEAR_ENABLEEv>:
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <_ZN3lcd16TWI_CLEAR_ENABLEEv+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	8c eb       	ldi	r24, 0xBC	; 188
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	24 e8       	ldi	r18, 0x84	; 132
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <_ZN3lcd8TWI_STOPEv+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     fb8:	8c eb       	ldi	r24, 0xBC	; 188
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	24 e9       	ldi	r18, 0x94	; 148
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
	
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZN3lcd9TWI_STARTEv>:

void lcd::TWI_START(){
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <_ZN3lcd9TWI_STARTEv+0x6>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
     fda:	8c eb       	ldi	r24, 0xBC	; 188
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	24 ea       	ldi	r18, 0xA4	; 164
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
     fe4:	00 00       	nop
     fe6:	8c eb       	ldi	r24, 0xBC	; 188
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	80 95       	com	r24
     ff0:	88 1f       	adc	r24, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	88 1f       	adc	r24, r24
     ff6:	88 23       	and	r24, r24
     ff8:	b1 f7       	brne	.-20     	; 0xfe6 <_ZN3lcd9TWI_STARTEv+0x1a>
	TWI_CHECK_STATUS(LCD_TW_START);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	68 e0       	ldi	r22, 0x08	; 8
    1000:	a9 df       	rcall	.-174    	; 0xf54 <_ZN3lcd16TWI_CHECK_STATUSEh>
	
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <_ZN3lcd12TWI_TRANSMITEhh>:

void lcd::TWI_TRANSMIT(uint8_t TwiData, uint8_t StatusCode){
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	00 d0       	rcall	.+0      	; 0x1012 <_ZN3lcd12TWI_TRANSMITEhh+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <_ZN3lcd12TWI_TRANSMITEhh+0x8>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6b 83       	std	Y+3, r22	; 0x03
    101e:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
    1020:	8b eb       	ldi	r24, 0xBB	; 187
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
	/*After TWDR is loaded with LCD_SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the LCD_SLA+W present in TWDR*/
	TWI_CLEAR_ENABLE();
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	ac df       	rcall	.-168    	; 0xf88 <_ZN3lcd16TWI_CLEAR_ENABLEEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
    1030:	00 00       	nop
    1032:	8c eb       	ldi	r24, 0xBC	; 188
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	fc 01       	movw	r30, r24
    1038:	80 81       	ld	r24, Z
    103a:	80 95       	com	r24
    103c:	88 1f       	adc	r24, r24
    103e:	88 27       	eor	r24, r24
    1040:	88 1f       	adc	r24, r24
    1042:	88 23       	and	r24, r24
    1044:	b1 f7       	brne	.-20     	; 0x1032 <_ZN3lcd12TWI_TRANSMITEhh+0x26>
	TWI_CHECK_STATUS(StatusCode);	// works!!
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	6c 81       	ldd	r22, Y+4	; 0x04
    104c:	83 df       	rcall	.-250    	; 0xf54 <_ZN3lcd16TWI_CHECK_STATUSEh>

}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <_ZN3lcd4SHOWEPh>:


void lcd::SHOW(unsigned char* text){
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <_ZN3lcd4SHOWEPh+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <_ZN3lcd4SHOWEPh+0x8>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <_ZN3lcd4SHOWEPh+0xa>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
    106e:	7e 83       	std	Y+6, r23	; 0x06
    1070:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_START();
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	aa df       	rcall	.-172    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	48 e1       	ldi	r20, 0x18	; 24
    107e:	6c e7       	ldi	r22, 0x7C	; 124
    1080:	c5 df       	rcall	.-118    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	48 e2       	ldi	r20, 0x28	; 40
    1088:	60 e4       	ldi	r22, 0x40	; 64
    108a:	c0 df       	rcall	.-128    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    108c:	1a 82       	std	Y+2, r1	; 0x02
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <_ZN3lcd4SHOWEPh+0x5c>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	fc 01       	movw	r30, r24
    1098:	20 81       	ld	r18, Z
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	48 e2       	ldi	r20, 0x28	; 40
    10a0:	62 2f       	mov	r22, r18
    10a2:	b4 df       	rcall	.-152    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
		++text;
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_START();
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	40 97       	sbiw	r24, 0x10	; 16
    10be:	4c f3       	brlt	.-46     	; 0x1092 <_ZN3lcd4SHOWEPh+0x36>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	72 df       	rcall	.-284    	; 0xfaa <_ZN3lcd8TWI_STOPEv>
	
}
    10c6:	26 96       	adiw	r28, 0x06	; 6
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <_ZN3lcd17SELECT_LCD_LINE_1Ev>:


void lcd::SELECT_LCD_LINE_1(){
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <_ZN3lcd17SELECT_LCD_LINE_1Ev+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	70 df       	rcall	.-288    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	48 e1       	ldi	r20, 0x18	; 24
    10f2:	6c e7       	ldi	r22, 0x7C	; 124
    10f4:	8b df       	rcall	.-234    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	48 e2       	ldi	r20, 0x28	; 40
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	86 df       	rcall	.-244    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_1,LCD_TW_MT_DATA_ACK);
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	48 e2       	ldi	r20, 0x28	; 40
    1106:	60 e8       	ldi	r22, 0x80	; 128
    1108:	81 df       	rcall	.-254    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	4d df       	rcall	.-358    	; 0xfaa <_ZN3lcd8TWI_STOPEv>
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <_ZN3lcd17SELECT_LCD_LINE_2Ev>:


void lcd::SELECT_LCD_LINE_2(){
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <_ZN3lcd17SELECT_LCD_LINE_2Ev+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	4f df       	rcall	.-354    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	48 e1       	ldi	r20, 0x18	; 24
    1134:	6c e7       	ldi	r22, 0x7C	; 124
    1136:	6a df       	rcall	.-300    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	48 e2       	ldi	r20, 0x28	; 40
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	65 df       	rcall	.-310    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_2,LCD_TW_MT_DATA_ACK);
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	48 e2       	ldi	r20, 0x28	; 40
    1148:	60 ec       	ldi	r22, 0xC0	; 192
    114a:	60 df       	rcall	.-320    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	2c df       	rcall	.-424    	; 0xfaa <_ZN3lcd8TWI_STOPEv>
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	60 97       	sbiw	r28, 0x10	; 16
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	98 8b       	std	Y+16, r25	; 0x10
    1172:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_START();
    1174:	8f 85       	ldd	r24, Y+15	; 0x0f
    1176:	98 89       	ldd	r25, Y+16	; 0x10
    1178:	29 df       	rcall	.-430    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	98 89       	ldd	r25, Y+16	; 0x10
    117e:	48 e1       	ldi	r20, 0x18	; 24
    1180:	6c e7       	ldi	r22, 0x7C	; 124
    1182:	44 df       	rcall	.-376    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);;
    1184:	8f 85       	ldd	r24, Y+15	; 0x0f
    1186:	98 89       	ldd	r25, Y+16	; 0x10
    1188:	48 e2       	ldi	r20, 0x28	; 40
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	3f df       	rcall	.-386    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);		//go to instructino table 0
    118e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1190:	98 89       	ldd	r25, Y+16	; 0x10
    1192:	48 e2       	ldi	r20, 0x28	; 40
    1194:	68 e3       	ldi	r22, 0x38	; 56
    1196:	3a df       	rcall	.-396    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x40,LCD_TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	98 89       	ldd	r25, Y+16	; 0x10
    119c:	48 e2       	ldi	r20, 0x28	; 40
    119e:	60 e4       	ldi	r22, 0x40	; 64
    11a0:	35 df       	rcall	.-406    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    11a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a4:	98 89       	ldd	r25, Y+16	; 0x10
    11a6:	01 df       	rcall	.-510    	; 0xfaa <_ZN3lcd8TWI_STOPEv>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 e2       	ldi	r26, 0x20	; 32
    11ae:	b1 e4       	ldi	r27, 0x41	; 65
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	ab 83       	std	Y+3, r26	; 0x03
    11b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	4a e7       	ldi	r20, 0x7A	; 122
    11be:	53 e4       	ldi	r21, 0x43	; 67
    11c0:	69 81       	ldd	r22, Y+1	; 0x01
    11c2:	7a 81       	ldd	r23, Y+2	; 0x02
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	af 83       	std	Y+7, r26	; 0x07
    11d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e8       	ldi	r20, 0x80	; 128
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	6d 81       	ldd	r22, Y+5	; 0x05
    11e2:	7e 81       	ldd	r23, Y+6	; 0x06
    11e4:	8f 81       	ldd	r24, Y+7	; 0x07
    11e6:	98 85       	ldd	r25, Y+8	; 0x08
    11e8:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9a 87       	std	Y+10, r25	; 0x0a
    11f6:	89 87       	std	Y+9, r24	; 0x09
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	3f ef       	ldi	r19, 0xFF	; 255
    11fe:	4f e7       	ldi	r20, 0x7F	; 127
    1200:	57 e4       	ldi	r21, 0x47	; 71
    1202:	6d 81       	ldd	r22, Y+5	; 0x05
    1204:	7e 81       	ldd	r23, Y+6	; 0x06
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	98 85       	ldd	r25, Y+8	; 0x08
    120a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e2       	ldi	r20, 0x20	; 32
    1218:	51 e4       	ldi	r21, 0x41	; 65
    121a:	69 81       	ldd	r22, Y+1	; 0x01
    121c:	7a 81       	ldd	r23, Y+2	; 0x02
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9a 87       	std	Y+10, r25	; 0x0a
    1238:	89 87       	std	Y+9, r24	; 0x09
    123a:	0f c0       	rjmp	.+30     	; 0x125a <_ZN3lcd5CGRAMEv+0xfe>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	8b 87       	std	Y+11, r24	; 0x0b
    1244:	8b 85       	ldd	r24, Y+11	; 0x0b
    1246:	9c 85       	ldd	r25, Y+12	; 0x0c
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <_ZN3lcd5CGRAMEv+0xec>
    124c:	9c 87       	std	Y+12, r25	; 0x0c
    124e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9a 87       	std	Y+10, r25	; 0x0a
    1258:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	89 2b       	or	r24, r25
    1260:	69 f7       	brne	.-38     	; 0x123c <_ZN3lcd5CGRAMEv+0xe0>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6d 81       	ldd	r22, Y+5	; 0x05
    1266:	7e 81       	ldd	r23, Y+6	; 0x06
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9a 87       	std	Y+10, r25	; 0x0a
    1276:	89 87       	std	Y+9, r24	; 0x09
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	9e 87       	std	Y+14, r25	; 0x0e
    127e:	8d 87       	std	Y+13, r24	; 0x0d
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <_ZN3lcd5CGRAMEv+0x128>
    1288:	9e 87       	std	Y+14, r25	; 0x0e
    128a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_START();
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	98 89       	ldd	r25, Y+16	; 0x10
    1290:	9d de       	rcall	.-710    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	98 89       	ldd	r25, Y+16	; 0x10
    1296:	48 e1       	ldi	r20, 0x18	; 24
    1298:	6c e7       	ldi	r22, 0x7C	; 124
    129a:	b8 de       	rcall	.-656    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    129c:	8f 85       	ldd	r24, Y+15	; 0x0f
    129e:	98 89       	ldd	r25, Y+16	; 0x10
    12a0:	48 e2       	ldi	r20, 0x28	; 40
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	b3 de       	rcall	.-666    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//write to first CGRAM address
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	98 89       	ldd	r25, Y+16	; 0x10
    12aa:	48 e2       	ldi	r20, 0x28	; 40
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	ae de       	rcall	.-676    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x1E,LCD_TW_MT_DATA_ACK);
    12b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b2:	98 89       	ldd	r25, Y+16	; 0x10
    12b4:	48 e2       	ldi	r20, 0x28	; 40
    12b6:	6e e1       	ldi	r22, 0x1E	; 30
    12b8:	a9 de       	rcall	.-686    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x18,LCD_TW_MT_DATA_ACK);
    12ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    12bc:	98 89       	ldd	r25, Y+16	; 0x10
    12be:	48 e2       	ldi	r20, 0x28	; 40
    12c0:	68 e1       	ldi	r22, 0x18	; 24
    12c2:	a4 de       	rcall	.-696    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	98 89       	ldd	r25, Y+16	; 0x10
    12c8:	48 e2       	ldi	r20, 0x28	; 40
    12ca:	64 e1       	ldi	r22, 0x14	; 20
    12cc:	9f de       	rcall	.-706    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x12,LCD_TW_MT_DATA_ACK);
    12ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d0:	98 89       	ldd	r25, Y+16	; 0x10
    12d2:	48 e2       	ldi	r20, 0x28	; 40
    12d4:	62 e1       	ldi	r22, 0x12	; 18
    12d6:	9a de       	rcall	.-716    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	98 89       	ldd	r25, Y+16	; 0x10
    12dc:	48 e2       	ldi	r20, 0x28	; 40
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	95 de       	rcall	.-726    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);
    12e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e4:	98 89       	ldd	r25, Y+16	; 0x10
    12e6:	48 e2       	ldi	r20, 0x28	; 40
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	90 de       	rcall	.-736    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//8 bytes per character
    12ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ee:	98 89       	ldd	r25, Y+16	; 0x10
    12f0:	48 e2       	ldi	r20, 0x28	; 40
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	8b de       	rcall	.-746    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    12f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f8:	98 89       	ldd	r25, Y+16	; 0x10
    12fa:	57 de       	rcall	.-850    	; 0xfaa <_ZN3lcd8TWI_STOPEv>
}
    12fc:	60 96       	adiw	r28, 0x10	; 16
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <_ZN3lcd4INITEv>:

void lcd::INIT()
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	ea 97       	sbiw	r28, 0x3a	; 58
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	9a af       	std	Y+58, r25	; 0x3a
    1324:	89 af       	std	Y+57, r24	; 0x39
	TWI_START();
    1326:	89 ad       	ldd	r24, Y+57	; 0x39
    1328:	9a ad       	ldd	r25, Y+58	; 0x3a
    132a:	50 de       	rcall	.-864    	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    132c:	89 ad       	ldd	r24, Y+57	; 0x39
    132e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1330:	48 e1       	ldi	r20, 0x18	; 24
    1332:	6c e7       	ldi	r22, 0x7C	; 124
    1334:	6b de       	rcall	.-810    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1336:	89 ad       	ldd	r24, Y+57	; 0x39
    1338:	9a ad       	ldd	r25, Y+58	; 0x3a
    133a:	48 e2       	ldi	r20, 0x28	; 40
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	66 de       	rcall	.-820    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1340:	89 ad       	ldd	r24, Y+57	; 0x39
    1342:	9a ad       	ldd	r25, Y+58	; 0x3a
    1344:	48 e2       	ldi	r20, 0x28	; 40
    1346:	68 e3       	ldi	r22, 0x38	; 56
    1348:	61 de       	rcall	.-830    	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a8 ec       	ldi	r26, 0xC8	; 200
    1350:	b2 e4       	ldi	r27, 0x42	; 66
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	ab 83       	std	Y+3, r26	; 0x03
    1358:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a e7       	ldi	r20, 0x7A	; 122
    1360:	53 e4       	ldi	r21, 0x43	; 67
    1362:	69 81       	ldd	r22, Y+1	; 0x01
    1364:	7a 81       	ldd	r23, Y+2	; 0x02
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	af 83       	std	Y+7, r26	; 0x07
    1378:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	6d 81       	ldd	r22, Y+5	; 0x05
    1384:	7e 81       	ldd	r23, Y+6	; 0x06
    1386:	8f 81       	ldd	r24, Y+7	; 0x07
    1388:	98 85       	ldd	r25, Y+8	; 0x08
    138a:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <_ZN3lcd4INITEv+0x8e>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9a 87       	std	Y+10, r25	; 0x0a
    1398:	89 87       	std	Y+9, r24	; 0x09
    139a:	3f c0       	rjmp	.+126    	; 0x141a <_ZN3lcd4INITEv+0x10c>
	else if (__tmp > 65535)
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	6d 81       	ldd	r22, Y+5	; 0x05
    13a6:	7e 81       	ldd	r23, Y+6	; 0x06
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	98 85       	ldd	r25, Y+8	; 0x08
    13ac:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <_ZN3lcd4INITEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	69 81       	ldd	r22, Y+1	; 0x01
    13be:	7a 81       	ldd	r23, Y+2	; 0x02
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9a 87       	std	Y+10, r25	; 0x0a
    13da:	89 87       	std	Y+9, r24	; 0x09
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <_ZN3lcd4INITEv+0xee>
    13de:	89 e1       	ldi	r24, 0x19	; 25
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 87       	std	Y+12, r25	; 0x0c
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <_ZN3lcd4INITEv+0xdc>
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9a 87       	std	Y+10, r25	; 0x0a
    13fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	89 2b       	or	r24, r25
    1402:	69 f7       	brne	.-38     	; 0x13de <_ZN3lcd4INITEv+0xd0>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <_ZN3lcd4INITEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6d 81       	ldd	r22, Y+5	; 0x05
    1408:	7e 81       	ldd	r23, Y+6	; 0x06
    140a:	8f 81       	ldd	r24, Y+7	; 0x07
    140c:	98 85       	ldd	r25, Y+8	; 0x08
    140e:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9a 87       	std	Y+10, r25	; 0x0a
    1418:	89 87       	std	Y+9, r24	; 0x09
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	9e 87       	std	Y+14, r25	; 0x0e
    1420:	8d 87       	std	Y+13, r24	; 0x0d
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <_ZN3lcd4INITEv+0x118>
    142a:	9e 87       	std	Y+14, r25	; 0x0e
    142c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);						// Use Extended instruction set
    142e:	89 ad       	ldd	r24, Y+57	; 0x39
    1430:	9a ad       	ldd	r25, Y+58	; 0x3a
    1432:	48 e2       	ldi	r20, 0x28	; 40
    1434:	69 e3       	ldi	r22, 0x39	; 57
    1436:	ea dd       	rcall	.-1068   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a8 ec       	ldi	r26, 0xC8	; 200
    143e:	b2 e4       	ldi	r27, 0x42	; 66
    1440:	8f 87       	std	Y+15, r24	; 0x0f
    1442:	98 8b       	std	Y+16, r25	; 0x10
    1444:	a9 8b       	std	Y+17, r26	; 0x11
    1446:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	6f 85       	ldd	r22, Y+15	; 0x0f
    1452:	78 89       	ldd	r23, Y+16	; 0x10
    1454:	89 89       	ldd	r24, Y+17	; 0x11
    1456:	9a 89       	ldd	r25, Y+18	; 0x12
    1458:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8b 8b       	std	Y+19, r24	; 0x13
    1462:	9c 8b       	std	Y+20, r25	; 0x14
    1464:	ad 8b       	std	Y+21, r26	; 0x15
    1466:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	6b 89       	ldd	r22, Y+19	; 0x13
    1472:	7c 89       	ldd	r23, Y+20	; 0x14
    1474:	8d 89       	ldd	r24, Y+21	; 0x15
    1476:	9e 89       	ldd	r25, Y+22	; 0x16
    1478:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <_ZN3lcd4INITEv+0x17c>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	98 8f       	std	Y+24, r25	; 0x18
    1486:	8f 8b       	std	Y+23, r24	; 0x17
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <_ZN3lcd4INITEv+0x1fa>
	else if (__tmp > 65535)
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	57 e4       	ldi	r21, 0x47	; 71
    1492:	6b 89       	ldd	r22, Y+19	; 0x13
    1494:	7c 89       	ldd	r23, Y+20	; 0x14
    1496:	8d 89       	ldd	r24, Y+21	; 0x15
    1498:	9e 89       	ldd	r25, Y+22	; 0x16
    149a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <_ZN3lcd4INITEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ac:	78 89       	ldd	r23, Y+16	; 0x10
    14ae:	89 89       	ldd	r24, Y+17	; 0x11
    14b0:	9a 89       	ldd	r25, Y+18	; 0x12
    14b2:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	98 8f       	std	Y+24, r25	; 0x18
    14c8:	8f 8b       	std	Y+23, r24	; 0x17
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <_ZN3lcd4INITEv+0x1dc>
    14cc:	89 e1       	ldi	r24, 0x19	; 25
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9a 8f       	std	Y+26, r25	; 0x1a
    14d2:	89 8f       	std	Y+25, r24	; 0x19
    14d4:	89 8d       	ldd	r24, Y+25	; 0x19
    14d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <_ZN3lcd4INITEv+0x1ca>
    14dc:	9a 8f       	std	Y+26, r25	; 0x1a
    14de:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8f 89       	ldd	r24, Y+23	; 0x17
    14e2:	98 8d       	ldd	r25, Y+24	; 0x18
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	98 8f       	std	Y+24, r25	; 0x18
    14e8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8f 89       	ldd	r24, Y+23	; 0x17
    14ec:	98 8d       	ldd	r25, Y+24	; 0x18
    14ee:	89 2b       	or	r24, r25
    14f0:	69 f7       	brne	.-38     	; 0x14cc <_ZN3lcd4INITEv+0x1be>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <_ZN3lcd4INITEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6b 89       	ldd	r22, Y+19	; 0x13
    14f6:	7c 89       	ldd	r23, Y+20	; 0x14
    14f8:	8d 89       	ldd	r24, Y+21	; 0x15
    14fa:	9e 89       	ldd	r25, Y+22	; 0x16
    14fc:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 8f       	std	Y+24, r25	; 0x18
    1506:	8f 8b       	std	Y+23, r24	; 0x17
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	9c 8f       	std	Y+28, r25	; 0x1c
    150e:	8b 8f       	std	Y+27, r24	; 0x1b
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <_ZN3lcd4INITEv+0x206>
    1518:	9c 8f       	std	Y+28, r25	; 0x1c
    151a:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);						// Set Internal Osc Freq
    151c:	89 ad       	ldd	r24, Y+57	; 0x39
    151e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1520:	48 e2       	ldi	r20, 0x28	; 40
    1522:	64 e1       	ldi	r22, 0x14	; 20
    1524:	73 dd       	rcall	.-1306   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x78,LCD_TW_MT_DATA_ACK);						// Contrast Set
    1526:	89 ad       	ldd	r24, Y+57	; 0x39
    1528:	9a ad       	ldd	r25, Y+58	; 0x3a
    152a:	48 e2       	ldi	r20, 0x28	; 40
    152c:	68 e7       	ldi	r22, 0x78	; 120
    152e:	6e dd       	rcall	.-1316   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x5D,LCD_TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1530:	89 ad       	ldd	r24, Y+57	; 0x39
    1532:	9a ad       	ldd	r25, Y+58	; 0x3a
    1534:	48 e2       	ldi	r20, 0x28	; 40
    1536:	6d e5       	ldi	r22, 0x5D	; 93
    1538:	69 dd       	rcall	.-1326   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x6D,LCD_TW_MT_DATA_ACK);						// Follower Control
    153a:	89 ad       	ldd	r24, Y+57	; 0x39
    153c:	9a ad       	ldd	r25, Y+58	; 0x3a
    153e:	48 e2       	ldi	r20, 0x28	; 40
    1540:	6d e6       	ldi	r22, 0x6D	; 109
    1542:	64 dd       	rcall	.-1336   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x0C,LCD_TW_MT_DATA_ACK);						// Display On/Off
    1544:	89 ad       	ldd	r24, Y+57	; 0x39
    1546:	9a ad       	ldd	r25, Y+58	; 0x3a
    1548:	48 e2       	ldi	r20, 0x28	; 40
    154a:	6c e0       	ldi	r22, 0x0C	; 12
    154c:	5f dd       	rcall	.-1346   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);						// Clear Display
    154e:	89 ad       	ldd	r24, Y+57	; 0x39
    1550:	9a ad       	ldd	r25, Y+58	; 0x3a
    1552:	48 e2       	ldi	r20, 0x28	; 40
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	5a dd       	rcall	.-1356   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x06,LCD_TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    1558:	89 ad       	ldd	r24, Y+57	; 0x39
    155a:	9a ad       	ldd	r25, Y+58	; 0x3a
    155c:	48 e2       	ldi	r20, 0x28	; 40
    155e:	66 e0       	ldi	r22, 0x06	; 6
    1560:	55 dd       	rcall	.-1366   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a8 ec       	ldi	r26, 0xC8	; 200
    1568:	b2 e4       	ldi	r27, 0x42	; 66
    156a:	8d 8f       	std	Y+29, r24	; 0x1d
    156c:	9e 8f       	std	Y+30, r25	; 0x1e
    156e:	af 8f       	std	Y+31, r26	; 0x1f
    1570:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    157c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    157e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1580:	98 a1       	ldd	r25, Y+32	; 0x20
    1582:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	89 a3       	std	Y+33, r24	; 0x21
    158c:	9a a3       	std	Y+34, r25	; 0x22
    158e:	ab a3       	std	Y+35, r26	; 0x23
    1590:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	69 a1       	ldd	r22, Y+33	; 0x21
    159c:	7a a1       	ldd	r23, Y+34	; 0x22
    159e:	8b a1       	ldd	r24, Y+35	; 0x23
    15a0:	9c a1       	ldd	r25, Y+36	; 0x24
    15a2:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <_ZN3lcd4INITEv+0x2a6>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e a3       	std	Y+38, r25	; 0x26
    15b0:	8d a3       	std	Y+37, r24	; 0x25
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <_ZN3lcd4INITEv+0x324>
	else if (__tmp > 65535)
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	69 a1       	ldd	r22, Y+33	; 0x21
    15be:	7a a1       	ldd	r23, Y+34	; 0x22
    15c0:	8b a1       	ldd	r24, Y+35	; 0x23
    15c2:	9c a1       	ldd	r25, Y+36	; 0x24
    15c4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <_ZN3lcd4INITEv+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15da:	98 a1       	ldd	r25, Y+32	; 0x20
    15dc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e a3       	std	Y+38, r25	; 0x26
    15f2:	8d a3       	std	Y+37, r24	; 0x25
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <_ZN3lcd4INITEv+0x306>
    15f6:	89 e1       	ldi	r24, 0x19	; 25
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	98 a7       	std	Y+40, r25	; 0x28
    15fc:	8f a3       	std	Y+39, r24	; 0x27
    15fe:	8f a1       	ldd	r24, Y+39	; 0x27
    1600:	98 a5       	ldd	r25, Y+40	; 0x28
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <_ZN3lcd4INITEv+0x2f4>
    1606:	98 a7       	std	Y+40, r25	; 0x28
    1608:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8d a1       	ldd	r24, Y+37	; 0x25
    160c:	9e a1       	ldd	r25, Y+38	; 0x26
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9e a3       	std	Y+38, r25	; 0x26
    1612:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	89 2b       	or	r24, r25
    161a:	69 f7       	brne	.-38     	; 0x15f6 <_ZN3lcd4INITEv+0x2e8>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <_ZN3lcd4INITEv+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	69 a1       	ldd	r22, Y+33	; 0x21
    1620:	7a a1       	ldd	r23, Y+34	; 0x22
    1622:	8b a1       	ldd	r24, Y+35	; 0x23
    1624:	9c a1       	ldd	r25, Y+36	; 0x24
    1626:	0e 94 4d 13 	call	0x269a	; 0x269a <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e a3       	std	Y+38, r25	; 0x26
    1630:	8d a3       	std	Y+37, r24	; 0x25
    1632:	8d a1       	ldd	r24, Y+37	; 0x25
    1634:	9e a1       	ldd	r25, Y+38	; 0x26
    1636:	9a a7       	std	Y+42, r25	; 0x2a
    1638:	89 a7       	std	Y+41, r24	; 0x29
    163a:	89 a5       	ldd	r24, Y+41	; 0x29
    163c:	9a a5       	ldd	r25, Y+42	; 0x2a
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <_ZN3lcd4INITEv+0x330>
    1642:	9a a7       	std	Y+42, r25	; 0x2a
    1644:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    1646:	89 ad       	ldd	r24, Y+57	; 0x39
    1648:	9a ad       	ldd	r25, Y+58	; 0x3a
    164a:	af dc       	rcall	.-1698   	; 0xfaa <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    164c:	89 ad       	ldd	r24, Y+57	; 0x39
    164e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1650:	85 dd       	rcall	.-1270   	; 0x115c <_ZN3lcd5CGRAMEv>

	TWI_START();
    1652:	89 ad       	ldd	r24, Y+57	; 0x39
    1654:	9a ad       	ldd	r25, Y+58	; 0x3a
    1656:	ba dc       	rcall	.-1676   	; 0xfcc <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1658:	89 ad       	ldd	r24, Y+57	; 0x39
    165a:	9a ad       	ldd	r25, Y+58	; 0x3a
    165c:	48 e1       	ldi	r20, 0x18	; 24
    165e:	6c e7       	ldi	r22, 0x7C	; 124
    1660:	d5 dc       	rcall	.-1622   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    1662:	89 ad       	ldd	r24, Y+57	; 0x39
    1664:	9a ad       	ldd	r25, Y+58	; 0x3a
    1666:	48 e2       	ldi	r20, 0x28	; 40
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	d0 dc       	rcall	.-1632   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);
    166c:	89 ad       	ldd	r24, Y+57	; 0x39
    166e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1670:	48 e2       	ldi	r20, 0x28	; 40
    1672:	69 e3       	ldi	r22, 0x39	; 57
    1674:	cb dc       	rcall	.-1642   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    1676:	89 ad       	ldd	r24, Y+57	; 0x39
    1678:	9a ad       	ldd	r25, Y+58	; 0x3a
    167a:	48 e2       	ldi	r20, 0x28	; 40
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	c6 dc       	rcall	.-1652   	; 0x100c <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    1680:	89 ad       	ldd	r24, Y+57	; 0x39
    1682:	9a ad       	ldd	r25, Y+58	; 0x3a
    1684:	92 dc       	rcall	.-1756   	; 0xfaa <_ZN3lcd8TWI_STOPEv>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a8 ec       	ldi	r26, 0xC8	; 200
    168c:	b2 e4       	ldi	r27, 0x42	; 66
    168e:	8b a7       	std	Y+43, r24	; 0x2b
    1690:	9c a7       	std	Y+44, r25	; 0x2c
    1692:	ad a7       	std	Y+45, r26	; 0x2d
    1694:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a e7       	ldi	r20, 0x7A	; 122
    169c:	53 e4       	ldi	r21, 0x43	; 67
    169e:	6b a5       	ldd	r22, Y+43	; 0x2b
    16a0:	7c a5       	ldd	r23, Y+44	; 0x2c
    16a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8f a7       	std	Y+47, r24	; 0x2f
    16b0:	98 ab       	std	Y+48, r25	; 0x30
    16b2:	a9 ab       	std	Y+49, r26	; 0x31
    16b4:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	6f a5       	ldd	r22, Y+47	; 0x2f
    16c0:	78 a9       	ldd	r23, Y+48	; 0x30
    16c2:	89 a9       	ldd	r24, Y+49	; 0x31
    16c4:	9a a9       	ldd	r25, Y+50	; 0x32
    16c6:	e5 d7       	rcall	.+4042   	; 0x2692 <__cmpsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <_ZN3lcd4INITEv+0x3c8>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c ab       	std	Y+52, r25	; 0x34
    16d2:	8b ab       	std	Y+51, r24	; 0x33
    16d4:	3d c0       	rjmp	.+122    	; 0x1750 <_ZN3lcd4INITEv+0x442>
	else if (__tmp > 65535)
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	6f a5       	ldd	r22, Y+47	; 0x2f
    16e0:	78 a9       	ldd	r23, Y+48	; 0x30
    16e2:	89 a9       	ldd	r24, Y+49	; 0x31
    16e4:	9a a9       	ldd	r25, Y+50	; 0x32
    16e6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__gesf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	44 f5       	brge	.+80     	; 0x173e <_ZN3lcd4INITEv+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	6b a5       	ldd	r22, Y+43	; 0x2b
    16f8:	7c a5       	ldd	r23, Y+44	; 0x2c
    16fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    16fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    16fe:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	c7 d7       	rcall	.+3982   	; 0x269a <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9c ab       	std	Y+52, r25	; 0x34
    1712:	8b ab       	std	Y+51, r24	; 0x33
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <_ZN3lcd4INITEv+0x426>
    1716:	89 e1       	ldi	r24, 0x19	; 25
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9e ab       	std	Y+54, r25	; 0x36
    171c:	8d ab       	std	Y+53, r24	; 0x35
    171e:	8d a9       	ldd	r24, Y+53	; 0x35
    1720:	9e a9       	ldd	r25, Y+54	; 0x36
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <_ZN3lcd4INITEv+0x414>
    1726:	9e ab       	std	Y+54, r25	; 0x36
    1728:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a9       	ldd	r25, Y+52	; 0x34
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9c ab       	std	Y+52, r25	; 0x34
    1732:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8b a9       	ldd	r24, Y+51	; 0x33
    1736:	9c a9       	ldd	r25, Y+52	; 0x34
    1738:	89 2b       	or	r24, r25
    173a:	69 f7       	brne	.-38     	; 0x1716 <_ZN3lcd4INITEv+0x408>
    173c:	13 c0       	rjmp	.+38     	; 0x1764 <_ZN3lcd4INITEv+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1740:	78 a9       	ldd	r23, Y+48	; 0x30
    1742:	89 a9       	ldd	r24, Y+49	; 0x31
    1744:	9a a9       	ldd	r25, Y+50	; 0x32
    1746:	a9 d7       	rcall	.+3922   	; 0x269a <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c ab       	std	Y+52, r25	; 0x34
    174e:	8b ab       	std	Y+51, r24	; 0x33
    1750:	8b a9       	ldd	r24, Y+51	; 0x33
    1752:	9c a9       	ldd	r25, Y+52	; 0x34
    1754:	98 af       	std	Y+56, r25	; 0x38
    1756:	8f ab       	std	Y+55, r24	; 0x37
    1758:	8f a9       	ldd	r24, Y+55	; 0x37
    175a:	98 ad       	ldd	r25, Y+56	; 0x38
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <_ZN3lcd4INITEv+0x44e>
    1760:	98 af       	std	Y+56, r25	; 0x38
    1762:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    1764:	ea 96       	adiw	r28, 0x3a	; 58
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <_ZN3lcd12SHOW_WELCOMEEv>:

void lcd::SHOW_WELCOME(){
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	e0 97       	sbiw	r28, 0x30	; 48
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	98 ab       	std	Y+48, r25	; 0x30
    178c:	8f a7       	std	Y+47, r24	; 0x2f
	
	unsigned char cucWELCOME_TEXT_1[ LCD_LINE_SIZE ]{ ' ', '-', '-', ' ', 'H', 'e', 'a', 'd', 's', 'U', 'p', '!', ' ', '-', '-', ' ' };
    178e:	80 e1       	ldi	r24, 0x10	; 16
    1790:	e7 e1       	ldi	r30, 0x17	; 23
    1792:	f1 e0       	ldi	r31, 0x01	; 1
    1794:	de 01       	movw	r26, r28
    1796:	1f 96       	adiw	r26, 0x0f	; 15
    1798:	01 90       	ld	r0, Z+
    179a:	0d 92       	st	X+, r0
    179c:	8a 95       	dec	r24
    179e:	e1 f7       	brne	.-8      	; 0x1798 <_ZN3lcd12SHOW_WELCOMEEv+0x22>
	unsigned char cucWELCOME_TEXT_2[ LCD_LINE_SIZE ]{ 'S', 'l', 'e', 'e', 'p', ' ', 'E', 'n', 'v', 'i', 'r', 'o', 'm', 'e', 'n', 't' };
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	e7 e2       	ldi	r30, 0x27	; 39
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	de 01       	movw	r26, r28
    17a8:	5f 96       	adiw	r26, 0x1f	; 31
    17aa:	01 90       	ld	r0, Z+
    17ac:	0d 92       	st	X+, r0
    17ae:	8a 95       	dec	r24
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <_ZN3lcd12SHOW_WELCOMEEv+0x34>
	
		
	print( cucWELCOME_TEXT_1, LCD_LINE_TOP );
    17b2:	9e 01       	movw	r18, r28
    17b4:	21 5f       	subi	r18, 0xF1	; 241
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ba:	98 a9       	ldd	r25, Y+48	; 0x30
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	b9 01       	movw	r22, r18
    17c0:	7d d0       	rcall	.+250    	; 0x18bc <_ZN3lcd5printEPhh>
	print( cucWELCOME_TEXT_2, LCD_LINE_BOTTOM );
    17c2:	9e 01       	movw	r18, r28
    17c4:	21 5e       	subi	r18, 0xE1	; 225
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ca:	98 a9       	ldd	r25, Y+48	; 0x30
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	b9 01       	movw	r22, r18
    17d0:	75 d0       	rcall	.+234    	; 0x18bc <_ZN3lcd5printEPhh>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	aa e7       	ldi	r26, 0x7A	; 122
    17d8:	b4 e4       	ldi	r27, 0x44	; 68
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	ab 83       	std	Y+3, r26	; 0x03
    17e0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	53 e4       	ldi	r21, 0x43	; 67
    17ea:	69 81       	ldd	r22, Y+1	; 0x01
    17ec:	7a 81       	ldd	r23, Y+2	; 0x02
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	f8 d7       	rcall	.+4080   	; 0x27e4 <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	af 83       	std	Y+7, r26	; 0x07
    17fe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	6d 81       	ldd	r22, Y+5	; 0x05
    180a:	7e 81       	ldd	r23, Y+6	; 0x06
    180c:	8f 81       	ldd	r24, Y+7	; 0x07
    180e:	98 85       	ldd	r25, Y+8	; 0x08
    1810:	40 d7       	rcall	.+3712   	; 0x2692 <__cmpsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <_ZN3lcd12SHOW_WELCOMEEv+0xaa>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9a 87       	std	Y+10, r25	; 0x0a
    181c:	89 87       	std	Y+9, r24	; 0x09
    181e:	3b c0       	rjmp	.+118    	; 0x1896 <_ZN3lcd12SHOW_WELCOMEEv+0x120>
	else if (__tmp > 65535)
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	6d 81       	ldd	r22, Y+5	; 0x05
    182a:	7e 81       	ldd	r23, Y+6	; 0x06
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	98 85       	ldd	r25, Y+8	; 0x08
    1830:	d5 d7       	rcall	.+4010   	; 0x27dc <__gesf2>
    1832:	18 16       	cp	r1, r24
    1834:	3c f5       	brge	.+78     	; 0x1884 <_ZN3lcd12SHOW_WELCOMEEv+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	69 81       	ldd	r22, Y+1	; 0x01
    1840:	7a 81       	ldd	r23, Y+2	; 0x02
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	ce d7       	rcall	.+3996   	; 0x27e4 <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	24 d7       	rcall	.+3656   	; 0x269a <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9a 87       	std	Y+10, r25	; 0x0a
    1858:	89 87       	std	Y+9, r24	; 0x09
    185a:	0f c0       	rjmp	.+30     	; 0x187a <_ZN3lcd12SHOW_WELCOMEEv+0x104>
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 87       	std	Y+12, r25	; 0x0c
    1862:	8b 87       	std	Y+11, r24	; 0x0b
    1864:	8b 85       	ldd	r24, Y+11	; 0x0b
    1866:	9c 85       	ldd	r25, Y+12	; 0x0c
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <_ZN3lcd12SHOW_WELCOMEEv+0xf2>
    186c:	9c 87       	std	Y+12, r25	; 0x0c
    186e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	9a 87       	std	Y+10, r25	; 0x0a
    1878:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	89 2b       	or	r24, r25
    1880:	69 f7       	brne	.-38     	; 0x185c <_ZN3lcd12SHOW_WELCOMEEv+0xe6>
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <_ZN3lcd12SHOW_WELCOMEEv+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	6d 81       	ldd	r22, Y+5	; 0x05
    1886:	7e 81       	ldd	r23, Y+6	; 0x06
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	98 85       	ldd	r25, Y+8	; 0x08
    188c:	06 d7       	rcall	.+3596   	; 0x269a <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9a 87       	std	Y+10, r25	; 0x0a
    1894:	89 87       	std	Y+9, r24	; 0x09
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	9e 87       	std	Y+14, r25	; 0x0e
    189c:	8d 87       	std	Y+13, r24	; 0x0d
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <_ZN3lcd12SHOW_WELCOMEEv+0x12c>
    18a6:	9e 87       	std	Y+14, r25	; 0x0e
    18a8:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms( 1000 );

}
    18aa:	e0 96       	adiw	r28, 0x30	; 48
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	a1 97       	sbiw	r28, 0x21	; 33
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	9e 8f       	std	Y+30, r25	; 0x1e
    18d2:	8d 8f       	std	Y+29, r24	; 0x1d
    18d4:	78 a3       	std	Y+32, r23	; 0x20
    18d6:	6f 8f       	std	Y+31, r22	; 0x1f
    18d8:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LCD_LINE_TOP ){
    18da:	89 a1       	ldd	r24, Y+33	; 0x21
    18dc:	88 23       	and	r24, r24
    18de:	09 f0       	breq	.+2      	; 0x18e2 <_ZN3lcd5printEPhh+0x26>
    18e0:	76 c0       	rjmp	.+236    	; 0x19ce <_ZN3lcd5printEPhh+0x112>
		SELECT_LCD_LINE_1();
    18e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e6:	f8 db       	rcall	.-2064   	; 0x10d8 <_ZN3lcd17SELECT_LCD_LINE_1Ev>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e2       	ldi	r26, 0x20	; 32
    18ee:	b1 e4       	ldi	r27, 0x41	; 65
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	ab 83       	std	Y+3, r26	; 0x03
    18f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	53 e4       	ldi	r21, 0x43	; 67
    1900:	69 81       	ldd	r22, Y+1	; 0x01
    1902:	7a 81       	ldd	r23, Y+2	; 0x02
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	6d d7       	rcall	.+3802   	; 0x27e4 <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	af 83       	std	Y+7, r26	; 0x07
    1914:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	6d 81       	ldd	r22, Y+5	; 0x05
    1920:	7e 81       	ldd	r23, Y+6	; 0x06
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	b5 d6       	rcall	.+3434   	; 0x2692 <__cmpsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <_ZN3lcd5printEPhh+0x7a>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9a 87       	std	Y+10, r25	; 0x0a
    1932:	89 87       	std	Y+9, r24	; 0x09
    1934:	3b c0       	rjmp	.+118    	; 0x19ac <_ZN3lcd5printEPhh+0xf0>
	else if (__tmp > 65535)
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	6d 81       	ldd	r22, Y+5	; 0x05
    1940:	7e 81       	ldd	r23, Y+6	; 0x06
    1942:	8f 81       	ldd	r24, Y+7	; 0x07
    1944:	98 85       	ldd	r25, Y+8	; 0x08
    1946:	4a d7       	rcall	.+3732   	; 0x27dc <__gesf2>
    1948:	18 16       	cp	r1, r24
    194a:	3c f5       	brge	.+78     	; 0x199a <_ZN3lcd5printEPhh+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	69 81       	ldd	r22, Y+1	; 0x01
    1956:	7a 81       	ldd	r23, Y+2	; 0x02
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	43 d7       	rcall	.+3718   	; 0x27e4 <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	99 d6       	rcall	.+3378   	; 0x269a <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9a 87       	std	Y+10, r25	; 0x0a
    196e:	89 87       	std	Y+9, r24	; 0x09
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <_ZN3lcd5printEPhh+0xd4>
    1972:	89 e1       	ldi	r24, 0x19	; 25
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9c 87       	std	Y+12, r25	; 0x0c
    1978:	8b 87       	std	Y+11, r24	; 0x0b
    197a:	8b 85       	ldd	r24, Y+11	; 0x0b
    197c:	9c 85       	ldd	r25, Y+12	; 0x0c
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <_ZN3lcd5printEPhh+0xc2>
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9a 87       	std	Y+10, r25	; 0x0a
    198e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	89 2b       	or	r24, r25
    1996:	69 f7       	brne	.-38     	; 0x1972 <_ZN3lcd5printEPhh+0xb6>
    1998:	13 c0       	rjmp	.+38     	; 0x19c0 <_ZN3lcd5printEPhh+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	6d 81       	ldd	r22, Y+5	; 0x05
    199c:	7e 81       	ldd	r23, Y+6	; 0x06
    199e:	8f 81       	ldd	r24, Y+7	; 0x07
    19a0:	98 85       	ldd	r25, Y+8	; 0x08
    19a2:	7b d6       	rcall	.+3318   	; 0x269a <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9a 87       	std	Y+10, r25	; 0x0a
    19aa:	89 87       	std	Y+9, r24	; 0x09
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	9e 87       	std	Y+14, r25	; 0x0e
    19b2:	8d 87       	std	Y+13, r24	; 0x0d
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <_ZN3lcd5printEPhh+0xfc>
    19bc:	9e 87       	std	Y+14, r25	; 0x0e
    19be:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		SHOW(text);
    19c0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    19c2:	38 a1       	ldd	r19, Y+32	; 0x20
    19c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c8:	b9 01       	movw	r22, r18
    19ca:	48 db       	rcall	.-2416   	; 0x105c <_ZN3lcd4SHOWEPh>
    19cc:	79 c0       	rjmp	.+242    	; 0x1ac0 <_ZN3lcd5printEPhh+0x204>
	}else if( valLine == LCD_LINE_BOTTOM ){
    19ce:	89 a1       	ldd	r24, Y+33	; 0x21
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <_ZN3lcd5printEPhh+0x11a>
    19d4:	75 c0       	rjmp	.+234    	; 0x1ac0 <_ZN3lcd5printEPhh+0x204>
		SELECT_LCD_LINE_2();
    19d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19da:	9f db       	rcall	.-2242   	; 0x111a <_ZN3lcd17SELECT_LCD_LINE_2Ev>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e2       	ldi	r26, 0x20	; 32
    19e2:	b1 e4       	ldi	r27, 0x41	; 65
    19e4:	8f 87       	std	Y+15, r24	; 0x0f
    19e6:	98 8b       	std	Y+16, r25	; 0x10
    19e8:	a9 8b       	std	Y+17, r26	; 0x11
    19ea:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    19f6:	78 89       	ldd	r23, Y+16	; 0x10
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	f3 d6       	rcall	.+3558   	; 0x27e4 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	ad 8b       	std	Y+21, r26	; 0x15
    1a08:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	6b 89       	ldd	r22, Y+19	; 0x13
    1a14:	7c 89       	ldd	r23, Y+20	; 0x14
    1a16:	8d 89       	ldd	r24, Y+21	; 0x15
    1a18:	9e 89       	ldd	r25, Y+22	; 0x16
    1a1a:	3b d6       	rcall	.+3190   	; 0x2692 <__cmpsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <_ZN3lcd5printEPhh+0x16e>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	98 8f       	std	Y+24, r25	; 0x18
    1a26:	8f 8b       	std	Y+23, r24	; 0x17
    1a28:	3b c0       	rjmp	.+118    	; 0x1aa0 <_ZN3lcd5printEPhh+0x1e4>
	else if (__tmp > 65535)
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	6b 89       	ldd	r22, Y+19	; 0x13
    1a34:	7c 89       	ldd	r23, Y+20	; 0x14
    1a36:	8d 89       	ldd	r24, Y+21	; 0x15
    1a38:	9e 89       	ldd	r25, Y+22	; 0x16
    1a3a:	d0 d6       	rcall	.+3488   	; 0x27dc <__gesf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	3c f5       	brge	.+78     	; 0x1a8e <_ZN3lcd5printEPhh+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a4a:	78 89       	ldd	r23, Y+16	; 0x10
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a50:	c9 d6       	rcall	.+3474   	; 0x27e4 <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	1f d6       	rcall	.+3134   	; 0x269a <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	98 8f       	std	Y+24, r25	; 0x18
    1a62:	8f 8b       	std	Y+23, r24	; 0x17
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <_ZN3lcd5printEPhh+0x1c8>
    1a66:	89 e1       	ldi	r24, 0x19	; 25
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6c:	89 8f       	std	Y+25, r24	; 0x19
    1a6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <_ZN3lcd5printEPhh+0x1b6>
    1a76:	9a 8f       	std	Y+26, r25	; 0x1a
    1a78:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	98 8f       	std	Y+24, r25	; 0x18
    1a82:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	89 2b       	or	r24, r25
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <_ZN3lcd5printEPhh+0x1aa>
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <_ZN3lcd5printEPhh+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6b 89       	ldd	r22, Y+19	; 0x13
    1a90:	7c 89       	ldd	r23, Y+20	; 0x14
    1a92:	8d 89       	ldd	r24, Y+21	; 0x15
    1a94:	9e 89       	ldd	r25, Y+22	; 0x16
    1a96:	01 d6       	rcall	.+3074   	; 0x269a <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	98 8f       	std	Y+24, r25	; 0x18
    1a9e:	8f 8b       	std	Y+23, r24	; 0x17
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	9c 8f       	std	Y+28, r25	; 0x1c
    1aa6:	8b 8f       	std	Y+27, r24	; 0x1b
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <_ZN3lcd5printEPhh+0x1f0>
    1ab0:	9c 8f       	std	Y+28, r25	; 0x1c
    1ab2:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		SHOW(text);
    1ab4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1ab6:	38 a1       	ldd	r19, Y+32	; 0x20
    1ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1abc:	b9 01       	movw	r22, r18
    1abe:	ce da       	rcall	.-2660   	; 0x105c <_ZN3lcd4SHOWEPh>
	}
		
}
    1ac0:	a1 96       	adiw	r28, 0x21	; 33
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <_ZN3rtcC1Ev>:
#include <avr/io.h>
#include <util/delay.h>
#include "rtc.h"


rtc::rtc(){
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	2e 97       	sbiw	r28, 0x0e	; 14
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	9e 87       	std	Y+14, r25	; 0x0e
    1ae8:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t valCmd_Enable_W { 0x00 };
    1aea:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCmd_Init_Control { 0x04 };
    1aec:	84 e0       	ldi	r24, 0x04	; 4
    1aee:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t valCmd_Zero { 0x00 };
    1af0:	1d 82       	std	Y+5, r1	; 0x05
	rtc_time rtmInital { 0x00, 0x00, 0x52, 0x01, 0x01, 0x01, 0x00 };
    1af2:	87 e0       	ldi	r24, 0x07	; 7
    1af4:	e7 e3       	ldi	r30, 0x37	; 55
    1af6:	f1 e0       	ldi	r31, 0x01	; 1
    1af8:	de 01       	movw	r26, r28
    1afa:	16 96       	adiw	r26, 0x06	; 6
    1afc:	01 90       	ld	r0, Z+
    1afe:	0d 92       	st	X+, r0
    1b00:	8a 95       	dec	r24
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <_ZN3rtcC1Ev+0x2a>


	i2c_init();    // Establish I2C connection
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	6a d0       	rcall	.+212    	; 0x1bde <_ZN3rtc8i2c_initEv>
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	4d 5f       	subi	r20, 0xFD	; 253
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	21 e0       	ldi	r18, 0x01	; 1
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	6f e0       	ldi	r22, 0x0F	; 15
    1b1a:	eb d0       	rcall	.+470    	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    1b1c:	1a 82       	std	Y+2, r1	; 0x02
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	0e c0       	rjmp	.+28     	; 0x1b3e <_ZN3rtcC1Ev+0x6c>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
    1b22:	69 81       	ldd	r22, Y+1	; 0x01
    1b24:	ae 01       	movw	r20, r28
    1b26:	4b 5f       	subi	r20, 0xFB	; 251
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	21 e0       	ldi	r18, 0x01	; 1
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	df d0       	rcall	.+446    	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>

	i2c_init();    // Establish I2C connection
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	41 97       	sbiw	r24, 0x11	; 17
    1b44:	70 f3       	brcs	.-36     	; 0x1b22 <_ZN3rtcC1Ev+0x50>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
	}
	
	write_block( RTC_ADDR_CON, &valCmd_Init_Control, 1 );	// Set exclusive interrupt behavior
    1b46:	ae 01       	movw	r20, r28
    1b48:	4c 5f       	subi	r20, 0xFC	; 252
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	6f e0       	ldi	r22, 0x0F	; 15
    1b56:	cd d0       	rcall	.+410    	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
	
	set_time(&rtmInital);    	// Initialize the time
    1b58:	9e 01       	movw	r18, r28
    1b5a:	2a 5f       	subi	r18, 0xFA	; 250
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	b9 01       	movw	r22, r18
    1b64:	aa d1       	rcall	.+852    	; 0x1eba <_ZN3rtc8set_timeEP8rtc_time>
	
}
    1b66:	2e 96       	adiw	r28, 0x0e	; 14
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <_ZN3rtc10spi_selectEv>:


void rtc::spi_select( ) {
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <_ZN3rtc10spi_selectEv+0x6>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= ( 1 << CPHA );
    1b86:	8c e4       	ldi	r24, 0x4C	; 76
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	2c e4       	ldi	r18, 0x4C	; 76
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	f9 01       	movw	r30, r18
    1b90:	20 81       	ld	r18, Z
    1b92:	24 60       	ori	r18, 0x04	; 4
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
	PORTB |= ( 1 << SS_PIN );
    1b98:	85 e2       	ldi	r24, 0x25	; 37
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	25 e2       	ldi	r18, 0x25	; 37
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	20 81       	ld	r18, Z
    1ba4:	20 61       	ori	r18, 0x10	; 16
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 83       	st	Z, r18

}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <_ZN3rtc12spi_deselectEv>:

/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void rtc::spi_deselect( ){
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <_ZN3rtc12spi_deselectEv+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= ~( 1 << SS_PIN );
    1bc2:	85 e2       	ldi	r24, 0x25	; 37
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	25 e2       	ldi	r18, 0x25	; 37
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	f9 01       	movw	r30, r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	2f 7e       	andi	r18, 0xEF	; 239
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 83       	st	Z, r18

}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <_ZN3rtc8i2c_initEv>:


void rtc::i2c_init( ){
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <_ZN3rtc8i2c_initEv+0x6>
    1be4:	1f 92       	push	r1
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	9b 83       	std	Y+3, r25	; 0x03
    1bec:	8a 83       	std	Y+2, r24	; 0x02

	char IOReg;

	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    1bee:	84 e2       	ldi	r24, 0x24	; 36
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	20 eb       	ldi	r18, 0xB0	; 176
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	20 83       	st	Z, r18
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );	// POSSIBLE ERROR: PULLING DATA HIGH
    1bf8:	8c e4       	ldi	r24, 0x4C	; 76
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	21 e5       	ldi	r18, 0x51	; 81
    1bfe:	fc 01       	movw	r30, r24
    1c00:	20 83       	st	Z, r18
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
    1c02:	8d e4       	ldi	r24, 0x4D	; 77
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	fc 01       	movw	r30, r24
    1c08:	80 81       	ld	r24, Z
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
    1c0c:	8e e4       	ldi	r24, 0x4E	; 78
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	fc 01       	movw	r30, r24
    1c12:	80 81       	ld	r24, Z
    1c14:	89 83       	std	Y+1, r24	; 0x01

	spi_deselect( );
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	cc df       	rcall	.-104    	; 0x1bb4 <_ZN3rtc12spi_deselectEv>
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <_ZN3rtc19spi_master_transmitEh>:


// This routine exchanges 1 byte with the SPI port. 
unsigned char rtc::spi_master_transmit( unsigned char cData )
{
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <_ZN3rtc19spi_master_transmitEh+0x6>
    1c2e:	1f 92       	push	r1
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	6b 83       	std	Y+3, r22	; 0x03

	SPDR  = cData;	// Set Pointer to beginning of String
    1c3a:	8e e4       	ldi	r24, 0x4E	; 78
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
	/* wait until Char is sent */
	while ( ! (SPSR & ( 1 << SPIF ))){
    1c44:	00 00       	nop
    1c46:	8d e4       	ldi	r24, 0x4D	; 77
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 95       	com	r24
    1c50:	88 1f       	adc	r24, r24
    1c52:	88 27       	eor	r24, r24
    1c54:	88 1f       	adc	r24, r24
    1c56:	88 23       	and	r24, r24
    1c58:	b1 f7       	brne	.-20     	; 0x1c46 <_ZN3rtc19spi_master_transmitEh+0x1e>
		;	
	}

	return SPDR;
    1c5a:	8e e4       	ldi	r24, 0x4E	; 78
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	fc 01       	movw	r30, r24
    1c60:	80 81       	ld	r24, Z
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <_ZN3rtc10read_blockEhPhj>:

/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	27 97       	sbiw	r28, 0x07	; 7
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	6b 83       	std	Y+3, r22	; 0x03
    1c8c:	5d 83       	std	Y+5, r21	; 0x05
    1c8e:	4c 83       	std	Y+4, r20	; 0x04
    1c90:	3f 83       	std	Y+7, r19	; 0x07
    1c92:	2e 83       	std	Y+6, r18	; 0x06
	
	spi_select( );
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	6f df       	rcall	.-290    	; 0x1b78 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( cAddr );
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	6b 81       	ldd	r22, Y+3	; 0x03
    1ca0:	c3 df       	rcall	.-122    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1ca2:	0c c0       	rjmp	.+24     	; 0x1cbc <_ZN3rtc10read_blockEhPhj+0x4e>
		*pBuffer++ = spi_master_transmit( 0 );
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1d 81       	ldd	r17, Y+5	; 0x05
    1ca8:	c8 01       	movw	r24, r16
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	9d 83       	std	Y+5, r25	; 0x05
    1cae:	8c 83       	std	Y+4, r24	; 0x04
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	b8 df       	rcall	.-144    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 83       	st	Z, r24
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
	
	spi_select( );

	spi_master_transmit( cAddr );
	while( iCount-- ){
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	9c 01       	movw	r18, r24
    1cc2:	21 50       	subi	r18, 0x01	; 1
    1cc4:	31 09       	sbc	r19, r1
    1cc6:	3f 83       	std	Y+7, r19	; 0x07
    1cc8:	2e 83       	std	Y+6, r18	; 0x06
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	89 2b       	or	r24, r25
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <_ZN3rtc10read_blockEhPhj+0x64>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	22 23       	and	r18, r18
    1cd4:	39 f7       	brne	.-50     	; 0x1ca4 <_ZN3rtc10read_blockEhPhj+0x36>
		*pBuffer++ = spi_master_transmit( 0 );
	}

	spi_deselect();
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	6c df       	rcall	.-296    	; 0x1bb4 <_ZN3rtc12spi_deselectEv>

}
    1cdc:	27 96       	adiw	r28, 0x07	; 7
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	29 97       	sbiw	r28, 0x09	; 9
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	6d 83       	std	Y+5, r22	; 0x05
    1d0c:	5f 83       	std	Y+7, r21	; 0x07
    1d0e:	4e 83       	std	Y+6, r20	; 0x06
    1d10:	39 87       	std	Y+9, r19	; 0x09
    1d12:	28 87       	std	Y+8, r18	; 0x08
	
	unsigned char uchTempControlA { 0x00 };
    1d14:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char uchTempControlB { 0x00 };
    1d16:	19 82       	std	Y+1, r1	; 0x01
	
	
	read_block( RTC_ADDR_CON, &uchTempControlA, 1 );
    1d18:	ae 01       	movw	r20, r28
    1d1a:	4e 5f       	subi	r20, 0xFE	; 254
    1d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	21 e0       	ldi	r18, 0x01	; 1
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	6f e0       	ldi	r22, 0x0F	; 15
    1d28:	a2 df       	rcall	.-188    	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
	if( ! (( uchTempControlA & 0x03 ) == 0x00 )){
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	83 70       	andi	r24, 0x03	; 3
    1d32:	99 27       	eor	r25, r25
    1d34:	89 2b       	or	r24, r25
    1d36:	89 f0       	breq	.+34     	; 0x1d5a <_ZN3rtc11write_blockEhPhj+0x68>
		uchTempControlB = uchTempControlA & 0xFC;
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8c 7f       	andi	r24, 0xFC	; 252
    1d3c:	89 83       	std	Y+1, r24	; 0x01
		spi_select( );
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	1a df       	rcall	.-460    	; 0x1b78 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	6f e8       	ldi	r22, 0x8F	; 143
    1d4a:	6e df       	rcall	.-292    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlB );
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	69 81       	ldd	r22, Y+1	; 0x01
    1d52:	6a df       	rcall	.-300    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	2d df       	rcall	.-422    	; 0x1bb4 <_ZN3rtc12spi_deselectEv>
	}
	
	spi_select( );
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	0c df       	rcall	.-488    	; 0x1b78 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	20 e8       	ldi	r18, 0x80	; 128
    1d64:	28 0f       	add	r18, r24
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	62 2f       	mov	r22, r18
    1d6c:	5d df       	rcall	.-326    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <_ZN3rtc11write_blockEhPhj+0x98>
		spi_master_transmit( *pBuffer++ );
    1d70:	8e 81       	ldd	r24, Y+6	; 0x06
    1d72:	9f 81       	ldd	r25, Y+7	; 0x07
    1d74:	9c 01       	movw	r18, r24
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	3f 83       	std	Y+7, r19	; 0x07
    1d7c:	2e 83       	std	Y+6, r18	; 0x06
    1d7e:	fc 01       	movw	r30, r24
    1d80:	20 81       	ld	r18, Z
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	62 2f       	mov	r22, r18
    1d88:	4f df       	rcall	.-354    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
	}
	
	spi_select( );

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
	while( iCount-- ){
    1d8a:	88 85       	ldd	r24, Y+8	; 0x08
    1d8c:	99 85       	ldd	r25, Y+9	; 0x09
    1d8e:	9c 01       	movw	r18, r24
    1d90:	21 50       	subi	r18, 0x01	; 1
    1d92:	31 09       	sbc	r19, r1
    1d94:	39 87       	std	Y+9, r19	; 0x09
    1d96:	28 87       	std	Y+8, r18	; 0x08
    1d98:	21 e0       	ldi	r18, 0x01	; 1
    1d9a:	89 2b       	or	r24, r25
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <_ZN3rtc11write_blockEhPhj+0xae>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	22 23       	and	r18, r18
    1da2:	31 f7       	brne	.-52     	; 0x1d70 <_ZN3rtc11write_blockEhPhj+0x7e>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	05 df       	rcall	.-502    	; 0x1bb4 <_ZN3rtc12spi_deselectEv>
	
	if( ! ( iAddr == RTC_ADDR_CON )){
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	8f 30       	cpi	r24, 0x0F	; 15
    1dae:	79 f0       	breq	.+30     	; 0x1dce <_ZN3rtc11write_blockEhPhj+0xdc>
		spi_select( );
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	e1 de       	rcall	.-574    	; 0x1b78 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	6f e8       	ldi	r22, 0x8F	; 143
    1dbc:	35 df       	rcall	.-406    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlA );
    1dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	62 2f       	mov	r22, r18
    1dc6:	30 df       	rcall	.-416    	; 0x1c28 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	f3 de       	rcall	.-538    	; 0x1bb4 <_ZN3rtc12spi_deselectEv>
	}
}
    1dce:	29 96       	adiw	r28, 0x09	; 9
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <_ZN3rtc8get_timeEv>:


rtc_time rtc::get_time( ){
    1de0:	2f 92       	push	r2
    1de2:	3f 92       	push	r3
    1de4:	4f 92       	push	r4
    1de6:	5f 92       	push	r5
    1de8:	6f 92       	push	r6
    1dea:	7f 92       	push	r7
    1dec:	8f 92       	push	r8
    1dee:	9f 92       	push	r9
    1df0:	af 92       	push	r10
    1df2:	bf 92       	push	r11
    1df4:	cf 92       	push	r12
    1df6:	df 92       	push	r13
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	60 97       	sbiw	r28, 0x10	; 16
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	98 8b       	std	Y+16, r25	; 0x10
    1e16:	8f 87       	std	Y+15, r24	; 0x0f

	rtc_time rtmToConvert;


	read_block( RTC_ADDR_START, ( unsigned char * )&rtmToConvert, sizeof( rtc_time ));
    1e18:	ae 01       	movw	r20, r28
    1e1a:	48 5f       	subi	r20, 0xF8	; 248
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e20:	98 89       	ldd	r25, Y+16	; 0x10
    1e22:	27 e0       	ldi	r18, 0x07	; 7
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	22 df       	rcall	.-444    	; 0x1c6e <_ZN3rtc10read_blockEhPhj>

	return rtmToConvert;
    1e2a:	27 e0       	ldi	r18, 0x07	; 7
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	38 96       	adiw	r30, 0x08	; 8
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	dc 01       	movw	r26, r24
    1e36:	01 90       	ld	r0, Z+
    1e38:	0d 92       	st	X+, r0
    1e3a:	2a 95       	dec	r18
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <_ZN3rtc8get_timeEv+0x56>
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	69 81       	ldd	r22, Y+1	; 0x01
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	5a 81       	ldd	r21, Y+2	; 0x02
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	4b 81       	ldd	r20, Y+3	; 0x03
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	2d 81       	ldd	r18, Y+5	; 0x05
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5a:	26 2e       	mov	r2, r22
    1e5c:	35 2e       	mov	r3, r21
    1e5e:	44 2e       	mov	r4, r20
    1e60:	53 2e       	mov	r5, r19
    1e62:	62 2e       	mov	r6, r18
    1e64:	79 2e       	mov	r7, r25
    1e66:	88 2e       	mov	r8, r24
    1e68:	a2 2c       	mov	r10, r2
    1e6a:	b3 2c       	mov	r11, r3
    1e6c:	c4 2c       	mov	r12, r4
    1e6e:	d5 2c       	mov	r13, r5
    1e70:	e6 2c       	mov	r14, r6
    1e72:	f7 2c       	mov	r15, r7
    1e74:	08 2d       	mov	r16, r8
    1e76:	19 2d       	mov	r17, r9
}
    1e78:	2a 2d       	mov	r18, r10
    1e7a:	3b 2d       	mov	r19, r11
    1e7c:	4c 2d       	mov	r20, r12
    1e7e:	5d 2d       	mov	r21, r13
    1e80:	6e 2d       	mov	r22, r14
    1e82:	7f 2d       	mov	r23, r15
    1e84:	80 2f       	mov	r24, r16
    1e86:	91 2f       	mov	r25, r17
    1e88:	60 96       	adiw	r28, 0x10	; 16
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	bf 90       	pop	r11
    1ea6:	af 90       	pop	r10
    1ea8:	9f 90       	pop	r9
    1eaa:	8f 90       	pop	r8
    1eac:	7f 90       	pop	r7
    1eae:	6f 90       	pop	r6
    1eb0:	5f 90       	pop	r5
    1eb2:	4f 90       	pop	r4
    1eb4:	3f 90       	pop	r3
    1eb6:	2f 90       	pop	r2
    1eb8:	08 95       	ret

00001eba <_ZN3rtc8set_timeEP8rtc_time>:


void rtc::set_time( rtc_time* rtmSetTime ){
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <_ZN3rtc8set_timeEP8rtc_time+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <_ZN3rtc8set_timeEP8rtc_time+0x8>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	7c 83       	std	Y+4, r23	; 0x04
    1ecc:	6b 83       	std	Y+3, r22	; 0x03

	write_block( RTC_ADDR_START, ( unsigned char * )rtmSetTime, sizeof(rtc_time));
    1ece:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	27 e0       	ldi	r18, 0x07	; 7
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0a df       	rcall	.-492    	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret

00001eec <_ZN3rtc11rtm_to_charE8rtc_timePhj>:


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	a6 97       	sbiw	r28, 0x26	; 38
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f0e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f10:	0c 8f       	std	Y+28, r16	; 0x1c
    1f12:	1d 8f       	std	Y+29, r17	; 0x1d
    1f14:	2e 8f       	std	Y+30, r18	; 0x1e
    1f16:	3f 8f       	std	Y+31, r19	; 0x1f
    1f18:	48 a3       	std	Y+32, r20	; 0x20
    1f1a:	59 a3       	std	Y+33, r21	; 0x21
    1f1c:	6a a3       	std	Y+34, r22	; 0x22
    1f1e:	fc a2       	std	Y+36, r15	; 0x24
    1f20:	eb a2       	std	Y+35, r14	; 0x23
    1f22:	de a2       	std	Y+38, r13	; 0x26
    1f24:	cd a2       	std	Y+37, r12	; 0x25
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
	uchTimeOut[valTextOffset + 15] = valDates >> 8;

	memcpy( uchToReturn, uchTimeOut, valCharLen );

}
    1f26:	0d b7       	in	r16, 0x3d	; 61
    1f28:	1e b7       	in	r17, 0x3e	; 62
    1f2a:	8d b7       	in	r24, 0x3d	; 61
    1f2c:	9e b7       	in	r25, 0x3e	; 62
    1f2e:	7c 01       	movw	r14, r24
}


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
	
	unsigned char uchTimeOut[ valCharLen ];
    1f30:	8d a1       	ldd	r24, Y+37	; 0x25
    1f32:	9e a1       	ldd	r25, Y+38	; 0x26
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9d 83       	std	Y+5, r25	; 0x05
    1f38:	8c 83       	std	Y+4, r24	; 0x04
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	2d b7       	in	r18, 0x3d	; 61
    1f3e:	3e b7       	in	r19, 0x3e	; 62
    1f40:	28 1b       	sub	r18, r24
    1f42:	39 0b       	sbc	r19, r25
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	3e bf       	out	0x3e, r19	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	2d bf       	out	0x3d, r18	; 61
    1f4e:	8d b7       	in	r24, 0x3d	; 61
    1f50:	9e b7       	in	r25, 0x3e	; 62
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	9f 83       	std	Y+7, r25	; 0x07
    1f56:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t valTimeLength = RTC_DISP_LEN;
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	88 87       	std	Y+8, r24	; 0x08
	unsigned int valTextOffset = ( valCharLen - valTimeLength ) / 2;
    1f5c:	88 85       	ldd	r24, Y+8	; 0x08
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	2d a1       	ldd	r18, Y+37	; 0x25
    1f64:	3e a1       	ldd	r19, Y+38	; 0x26
    1f66:	a9 01       	movw	r20, r18
    1f68:	48 1b       	sub	r20, r24
    1f6a:	59 0b       	sbc	r21, r25
    1f6c:	ca 01       	movw	r24, r20
    1f6e:	96 95       	lsr	r25
    1f70:	87 95       	ror	r24
    1f72:	9a 87       	std	Y+10, r25	; 0x0a
    1f74:	89 87       	std	Y+9, r24	; 0x09
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1f76:	1b 82       	std	Y+3, r1	; 0x03
    1f78:	1a 82       	std	Y+2, r1	; 0x02
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
		uchTimeOut[valN] = ' ';
    1f7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	82 0f       	add	r24, r18
    1f86:	93 1f       	adc	r25, r19
    1f88:	20 e2       	ldi	r18, 0x20	; 32
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	20 83       	st	Z, r18
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	2a 81       	ldd	r18, Y+2	; 0x02
    1f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	58 f3       	brcs	.-42     	; 0x1f7c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
		uchTimeOut[valN] = ' ';
	}

	valMins &= 0x0000;
    1fa6:	1c 86       	std	Y+12, r1	; 0x0c
    1fa8:	1b 86       	std	Y+11, r1	; 0x0b
	valMins |= (( rtmToConvert.ucMinutes & 0xF0 ) + 0x0300 ) << 4;
    1faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	80 7f       	andi	r24, 0xF0	; 240
    1fb2:	99 27       	eor	r25, r25
    1fb4:	9d 5f       	subi	r25, 0xFD	; 253
    1fb6:	82 95       	swap	r24
    1fb8:	92 95       	swap	r25
    1fba:	90 7f       	andi	r25, 0xF0	; 240
    1fbc:	98 27       	eor	r25, r24
    1fbe:	80 7f       	andi	r24, 0xF0	; 240
    1fc0:	98 27       	eor	r25, r24
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc8:	82 2b       	or	r24, r18
    1fca:	93 2b       	or	r25, r19
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	8b 87       	std	Y+11, r24	; 0x0b
	valMins |= ( rtmToConvert.ucMinutes & 0x0F) + 0x0030;
    1fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	8f 70       	andi	r24, 0x0F	; 15
    1fd8:	99 27       	eor	r25, r25
    1fda:	c0 96       	adiw	r24, 0x30	; 48
    1fdc:	9c 01       	movw	r18, r24
    1fde:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fe0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fe2:	82 2b       	or	r24, r18
    1fe4:	93 2b       	or	r25, r19
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
	valHours &= 0x0000;
    1fea:	1e 86       	std	Y+14, r1	; 0x0e
    1fec:	1d 86       	std	Y+13, r1	; 0x0d
	valHours |= (( rtmToConvert.ucHours & 0x10 ) + 0x0300 ) << 4;
    1fee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	80 71       	andi	r24, 0x10	; 16
    1ff6:	99 27       	eor	r25, r25
    1ff8:	9d 5f       	subi	r25, 0xFD	; 253
    1ffa:	82 95       	swap	r24
    1ffc:	92 95       	swap	r25
    1ffe:	90 7f       	andi	r25, 0xF0	; 240
    2000:	98 27       	eor	r25, r24
    2002:	80 7f       	andi	r24, 0xF0	; 240
    2004:	98 27       	eor	r25, r24
    2006:	9c 01       	movw	r18, r24
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	82 2b       	or	r24, r18
    200e:	93 2b       	or	r25, r19
    2010:	9e 87       	std	Y+14, r25	; 0x0e
    2012:	8d 87       	std	Y+13, r24	; 0x0d
	valHours |= ( rtmToConvert.ucHours & 0x0F) + 0x0030;
    2014:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	8f 70       	andi	r24, 0x0F	; 15
    201c:	99 27       	eor	r25, r25
    201e:	c0 96       	adiw	r24, 0x30	; 48
    2020:	9c 01       	movw	r18, r24
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	82 2b       	or	r24, r18
    2028:	93 2b       	or	r25, r19
    202a:	9e 87       	std	Y+14, r25	; 0x0e
    202c:	8d 87       	std	Y+13, r24	; 0x0d
	if(( rtmToConvert.ucHours & RTC_12PM ) == RTC_12AM ){
    202e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	80 76       	andi	r24, 0x60	; 96
    2036:	99 27       	eor	r25, r25
    2038:	80 34       	cpi	r24, 0x40	; 64
    203a:	91 05       	cpc	r25, r1
    203c:	19 f4       	brne	.+6      	; 0x2044 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
		valAMPM = 'A';
    203e:	81 e4       	ldi	r24, 0x41	; 65
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
	}else{
		valAMPM = 'P';
    2044:	80 e5       	ldi	r24, 0x50	; 80
    2046:	89 83       	std	Y+1, r24	; 0x01
	}
	valDay &= 0x00;
    2048:	1f 86       	std	Y+15, r1	; 0x0f
	valDays &= 0x00000000;
    204a:	19 8a       	std	Y+17, r1	; 0x11
    204c:	18 8a       	std	Y+16, r1	; 0x10
	valDay = ((( rtmToConvert.ucDay >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucDay ) & 0x0F );
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	82 95       	swap	r24
    2052:	8f 70       	andi	r24, 0x0F	; 15
    2054:	88 0f       	add	r24, r24
    2056:	98 2f       	mov	r25, r24
    2058:	99 0f       	add	r25, r25
    205a:	99 0f       	add	r25, r25
    205c:	98 0f       	add	r25, r24
    205e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2060:	8f 70       	andi	r24, 0x0F	; 15
    2062:	89 0f       	add	r24, r25
    2064:	8f 87       	std	Y+15, r24	; 0x0f
	valDays = chrDays[(( valDay == 0 ) ? 0 : valDay - 1 ) * 2];
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	88 23       	and	r24, r24
    206a:	39 f0       	breq	.+14     	; 0x207a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    206c:	8f 85       	ldd	r24, Y+15	; 0x0f
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	02 c0       	rjmp	.+4      	; 0x207e <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	8e 59       	subi	r24, 0x9E	; 158
    2080:	9e 4f       	sbci	r25, 0xFE	; 254
    2082:	fc 01       	movw	r30, r24
    2084:	80 81       	ld	r24, Z
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	99 8b       	std	Y+17, r25	; 0x11
    208c:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 1] << 8;
    208e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2090:	88 23       	and	r24, r24
    2092:	41 f0       	breq	.+16     	; 0x20a4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	8e 59       	subi	r24, 0x9E	; 158
    20aa:	9e 4f       	sbci	r25, 0xFE	; 254
    20ac:	fc 01       	movw	r30, r24
    20ae:	80 81       	ld	r24, Z
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	98 2f       	mov	r25, r24
    20b6:	88 27       	eor	r24, r24
    20b8:	9c 01       	movw	r18, r24
    20ba:	88 89       	ldd	r24, Y+16	; 0x10
    20bc:	99 89       	ldd	r25, Y+17	; 0x11
    20be:	82 2b       	or	r24, r18
    20c0:	93 2b       	or	r25, r19
    20c2:	99 8b       	std	Y+17, r25	; 0x11
    20c4:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= (( uint16_t )( chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 2])) << 16;
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	88 23       	and	r24, r24
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    20cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	8e 59       	subi	r24, 0x9E	; 158
    20de:	9e 4f       	sbci	r25, 0xFE	; 254
    20e0:	fc 01       	movw	r30, r24
    20e2:	80 81       	ld	r24, Z
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	99 27       	eor	r25, r25
    20ea:	88 27       	eor	r24, r24
    20ec:	28 89       	ldd	r18, Y+16	; 0x10
    20ee:	39 89       	ldd	r19, Y+17	; 0x11
    20f0:	82 2b       	or	r24, r18
    20f2:	93 2b       	or	r25, r19
    20f4:	99 8b       	std	Y+17, r25	; 0x11
    20f6:	88 8b       	std	Y+16, r24	; 0x10
	valMonth &= 0x00;
    20f8:	1b 8a       	std	Y+19, r1	; 0x13
    20fa:	1a 8a       	std	Y+18, r1	; 0x12
	valMonths &= 0x00000000;
    20fc:	1c 8a       	std	Y+20, r1	; 0x14
    20fe:	1d 8a       	std	Y+21, r1	; 0x15
    2100:	1e 8a       	std	Y+22, r1	; 0x16
    2102:	1f 8a       	std	Y+23, r1	; 0x17
	valMonth = ((( rtmToConvert.ucMonth >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucMonth ) & 0x0F );
    2104:	89 a1       	ldd	r24, Y+33	; 0x21
    2106:	82 95       	swap	r24
    2108:	8f 70       	andi	r24, 0x0F	; 15
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	99 27       	eor	r25, r25
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	9c 01       	movw	r18, r24
    2116:	22 0f       	add	r18, r18
    2118:	33 1f       	adc	r19, r19
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	28 0f       	add	r18, r24
    2120:	39 1f       	adc	r19, r25
    2122:	89 a1       	ldd	r24, Y+33	; 0x21
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	8f 70       	andi	r24, 0x0F	; 15
    212a:	99 27       	eor	r25, r25
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	9b 8b       	std	Y+19, r25	; 0x13
    2132:	8a 8b       	std	Y+18, r24	; 0x12
	valMonths = chrMonths[(( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3];
    2134:	8a 89       	ldd	r24, Y+18	; 0x12
    2136:	9b 89       	ldd	r25, Y+19	; 0x13
    2138:	89 2b       	or	r24, r25
    213a:	49 f0       	breq	.+18     	; 0x214e <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x262>
    213c:	2a 89       	ldd	r18, Y+18	; 0x12
    213e:	3b 89       	ldd	r19, Y+19	; 0x13
    2140:	c9 01       	movw	r24, r18
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	03 97       	sbiw	r24, 0x03	; 3
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x266>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	82 5c       	subi	r24, 0xC2	; 194
    2154:	9e 4f       	sbci	r25, 0xFE	; 254
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e0       	ldi	r26, 0x00	; 0
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	8c 8b       	std	Y+20, r24	; 0x14
    2164:	9d 8b       	std	Y+21, r25	; 0x15
    2166:	ae 8b       	std	Y+22, r26	; 0x16
    2168:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 1] << 8;
    216a:	8a 89       	ldd	r24, Y+18	; 0x12
    216c:	9b 89       	ldd	r25, Y+19	; 0x13
    216e:	89 2b       	or	r24, r25
    2170:	49 f0       	breq	.+18     	; 0x2184 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x298>
    2172:	2a 89       	ldd	r18, Y+18	; 0x12
    2174:	3b 89       	ldd	r19, Y+19	; 0x13
    2176:	c9 01       	movw	r24, r18
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	02 97       	sbiw	r24, 0x02	; 2
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x29c>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	82 5c       	subi	r24, 0xC2	; 194
    218a:	9e 4f       	sbci	r25, 0xFE	; 254
    218c:	fc 01       	movw	r30, r24
    218e:	80 81       	ld	r24, Z
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	98 2f       	mov	r25, r24
    2196:	88 27       	eor	r24, r24
    2198:	09 2e       	mov	r0, r25
    219a:	00 0c       	add	r0, r0
    219c:	aa 0b       	sbc	r26, r26
    219e:	bb 0b       	sbc	r27, r27
    21a0:	2c 89       	ldd	r18, Y+20	; 0x14
    21a2:	3d 89       	ldd	r19, Y+21	; 0x15
    21a4:	4e 89       	ldd	r20, Y+22	; 0x16
    21a6:	5f 89       	ldd	r21, Y+23	; 0x17
    21a8:	82 2b       	or	r24, r18
    21aa:	93 2b       	or	r25, r19
    21ac:	a4 2b       	or	r26, r20
    21ae:	b5 2b       	or	r27, r21
    21b0:	8c 8b       	std	Y+20, r24	; 0x14
    21b2:	9d 8b       	std	Y+21, r25	; 0x15
    21b4:	ae 8b       	std	Y+22, r26	; 0x16
    21b6:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= (( uint32_t )( chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 2])) << 16;
    21b8:	8a 89       	ldd	r24, Y+18	; 0x12
    21ba:	9b 89       	ldd	r25, Y+19	; 0x13
    21bc:	89 2b       	or	r24, r25
    21be:	49 f0       	breq	.+18     	; 0x21d2 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e6>
    21c0:	2a 89       	ldd	r18, Y+18	; 0x12
    21c2:	3b 89       	ldd	r19, Y+19	; 0x13
    21c4:	c9 01       	movw	r24, r18
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	82 0f       	add	r24, r18
    21cc:	93 1f       	adc	r25, r19
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2ea>
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	82 5c       	subi	r24, 0xC2	; 194
    21d8:	9e 4f       	sbci	r25, 0xFE	; 254
    21da:	fc 01       	movw	r30, r24
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	dc 01       	movw	r26, r24
    21e8:	99 27       	eor	r25, r25
    21ea:	88 27       	eor	r24, r24
    21ec:	2c 89       	ldd	r18, Y+20	; 0x14
    21ee:	3d 89       	ldd	r19, Y+21	; 0x15
    21f0:	4e 89       	ldd	r20, Y+22	; 0x16
    21f2:	5f 89       	ldd	r21, Y+23	; 0x17
    21f4:	82 2b       	or	r24, r18
    21f6:	93 2b       	or	r25, r19
    21f8:	a4 2b       	or	r26, r20
    21fa:	b5 2b       	or	r27, r21
    21fc:	8c 8b       	std	Y+20, r24	; 0x14
    21fe:	9d 8b       	std	Y+21, r25	; 0x15
    2200:	ae 8b       	std	Y+22, r26	; 0x16
    2202:	bf 8b       	std	Y+23, r27	; 0x17
	valDates &= 0x0000;
    2204:	19 8e       	std	Y+25, r1	; 0x19
    2206:	18 8e       	std	Y+24, r1	; 0x18
	valDates |= (( rtmToConvert.ucDate & 0xF0 ) + 0x0300 ) << 4;
    2208:	88 a1       	ldd	r24, Y+32	; 0x20
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	80 7f       	andi	r24, 0xF0	; 240
    2210:	99 27       	eor	r25, r25
    2212:	9d 5f       	subi	r25, 0xFD	; 253
    2214:	82 95       	swap	r24
    2216:	92 95       	swap	r25
    2218:	90 7f       	andi	r25, 0xF0	; 240
    221a:	98 27       	eor	r25, r24
    221c:	80 7f       	andi	r24, 0xF0	; 240
    221e:	98 27       	eor	r25, r24
    2220:	9c 01       	movw	r18, r24
    2222:	88 8d       	ldd	r24, Y+24	; 0x18
    2224:	99 8d       	ldd	r25, Y+25	; 0x19
    2226:	82 2b       	or	r24, r18
    2228:	93 2b       	or	r25, r19
    222a:	99 8f       	std	Y+25, r25	; 0x19
    222c:	88 8f       	std	Y+24, r24	; 0x18
	valDates |= ( rtmToConvert.ucDate & 0x0F) + 0x0030;
    222e:	88 a1       	ldd	r24, Y+32	; 0x20
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	8f 70       	andi	r24, 0x0F	; 15
    2236:	99 27       	eor	r25, r25
    2238:	c0 96       	adiw	r24, 0x30	; 48
    223a:	9c 01       	movw	r18, r24
    223c:	88 8d       	ldd	r24, Y+24	; 0x18
    223e:	99 8d       	ldd	r25, Y+25	; 0x19
    2240:	82 2b       	or	r24, r18
    2242:	93 2b       	or	r25, r19
    2244:	99 8f       	std	Y+25, r25	; 0x19
    2246:	88 8f       	std	Y+24, r24	; 0x18
	
	uchTimeOut[valTextOffset] = valHours >> 8;
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	89 2f       	mov	r24, r25
    224e:	99 27       	eor	r25, r25
    2250:	48 2f       	mov	r20, r24
    2252:	2e 81       	ldd	r18, Y+6	; 0x06
    2254:	3f 81       	ldd	r19, Y+7	; 0x07
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 1] = valHours & 0x00FF;
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	4d 85       	ldd	r20, Y+13	; 0x0d
    226a:	2e 81       	ldd	r18, Y+6	; 0x06
    226c:	3f 81       	ldd	r19, Y+7	; 0x07
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 2] = ':';
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	02 96       	adiw	r24, 0x02	; 2
    227c:	2e 81       	ldd	r18, Y+6	; 0x06
    227e:	3f 81       	ldd	r19, Y+7	; 0x07
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	2a e3       	ldi	r18, 0x3A	; 58
    2286:	fc 01       	movw	r30, r24
    2288:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 3] = valMins >> 8;
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	03 96       	adiw	r24, 0x03	; 3
    2290:	2b 85       	ldd	r18, Y+11	; 0x0b
    2292:	3c 85       	ldd	r19, Y+12	; 0x0c
    2294:	23 2f       	mov	r18, r19
    2296:	33 27       	eor	r19, r19
    2298:	42 2f       	mov	r20, r18
    229a:	2e 81       	ldd	r18, Y+6	; 0x06
    229c:	3f 81       	ldd	r19, Y+7	; 0x07
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	fc 01       	movw	r30, r24
    22a4:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 4] = valMins & 0x00FF;
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	04 96       	adiw	r24, 0x04	; 4
    22ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    22ae:	2e 81       	ldd	r18, Y+6	; 0x06
    22b0:	3f 81       	ldd	r19, Y+7	; 0x07
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	fc 01       	movw	r30, r24
    22b8:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 5] = valAMPM;
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	05 96       	adiw	r24, 0x05	; 5
    22c0:	2e 81       	ldd	r18, Y+6	; 0x06
    22c2:	3f 81       	ldd	r19, Y+7	; 0x07
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	29 81       	ldd	r18, Y+1	; 0x01
    22ca:	fc 01       	movw	r30, r24
    22cc:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 6] = 'M';
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d2:	06 96       	adiw	r24, 0x06	; 6
    22d4:	2e 81       	ldd	r18, Y+6	; 0x06
    22d6:	3f 81       	ldd	r19, Y+7	; 0x07
    22d8:	82 0f       	add	r24, r18
    22da:	93 1f       	adc	r25, r19
    22dc:	2d e4       	ldi	r18, 0x4D	; 77
    22de:	fc 01       	movw	r30, r24
    22e0:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 7] = ' ';
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	07 96       	adiw	r24, 0x07	; 7
    22e8:	2e 81       	ldd	r18, Y+6	; 0x06
    22ea:	3f 81       	ldd	r19, Y+7	; 0x07
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	20 e2       	ldi	r18, 0x20	; 32
    22f2:	fc 01       	movw	r30, r24
    22f4:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 8] = valDays & 0xFF;
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	08 96       	adiw	r24, 0x08	; 8
    22fc:	48 89       	ldd	r20, Y+16	; 0x10
    22fe:	2e 81       	ldd	r18, Y+6	; 0x06
    2300:	3f 81       	ldd	r19, Y+7	; 0x07
    2302:	82 0f       	add	r24, r18
    2304:	93 1f       	adc	r25, r19
    2306:	fc 01       	movw	r30, r24
    2308:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 9] = ( valDays >> 8 ) & 0xFF;
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	09 96       	adiw	r24, 0x09	; 9
    2310:	28 89       	ldd	r18, Y+16	; 0x10
    2312:	39 89       	ldd	r19, Y+17	; 0x11
    2314:	23 2f       	mov	r18, r19
    2316:	33 27       	eor	r19, r19
    2318:	42 2f       	mov	r20, r18
    231a:	2e 81       	ldd	r18, Y+6	; 0x06
    231c:	3f 81       	ldd	r19, Y+7	; 0x07
    231e:	82 0f       	add	r24, r18
    2320:	93 1f       	adc	r25, r19
    2322:	fc 01       	movw	r30, r24
    2324:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 10] = ',';
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	0a 96       	adiw	r24, 0x0a	; 10
    232c:	2e 81       	ldd	r18, Y+6	; 0x06
    232e:	3f 81       	ldd	r19, Y+7	; 0x07
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	2c e2       	ldi	r18, 0x2C	; 44
    2336:	fc 01       	movw	r30, r24
    2338:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 11] = valMonths & 0xFF;
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	0b 96       	adiw	r24, 0x0b	; 11
    2340:	4c 89       	ldd	r20, Y+20	; 0x14
    2342:	2e 81       	ldd	r18, Y+6	; 0x06
    2344:	3f 81       	ldd	r19, Y+7	; 0x07
    2346:	82 0f       	add	r24, r18
    2348:	93 1f       	adc	r25, r19
    234a:	fc 01       	movw	r30, r24
    234c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 12] = ( valMonths >> 8 ) & 0xFF;
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	9c 01       	movw	r18, r24
    2354:	24 5f       	subi	r18, 0xF4	; 244
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	8c 89       	ldd	r24, Y+20	; 0x14
    235a:	9d 89       	ldd	r25, Y+21	; 0x15
    235c:	ae 89       	ldd	r26, Y+22	; 0x16
    235e:	bf 89       	ldd	r27, Y+23	; 0x17
    2360:	89 2f       	mov	r24, r25
    2362:	9a 2f       	mov	r25, r26
    2364:	ab 2f       	mov	r26, r27
    2366:	bb 27       	eor	r27, r27
    2368:	48 2f       	mov	r20, r24
    236a:	8e 81       	ldd	r24, Y+6	; 0x06
    236c:	9f 81       	ldd	r25, Y+7	; 0x07
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	fc 01       	movw	r30, r24
    2374:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 13] = ( valMonths >> 16 ) & 0xFF;
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	9c 01       	movw	r18, r24
    237c:	23 5f       	subi	r18, 0xF3	; 243
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	8c 89       	ldd	r24, Y+20	; 0x14
    2382:	9d 89       	ldd	r25, Y+21	; 0x15
    2384:	ae 89       	ldd	r26, Y+22	; 0x16
    2386:	bf 89       	ldd	r27, Y+23	; 0x17
    2388:	cd 01       	movw	r24, r26
    238a:	aa 27       	eor	r26, r26
    238c:	bb 27       	eor	r27, r27
    238e:	48 2f       	mov	r20, r24
    2390:	8e 81       	ldd	r24, Y+6	; 0x06
    2392:	9f 81       	ldd	r25, Y+7	; 0x07
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	fc 01       	movw	r30, r24
    239a:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	0e 96       	adiw	r24, 0x0e	; 14
    23a2:	48 8d       	ldd	r20, Y+24	; 0x18
    23a4:	2e 81       	ldd	r18, Y+6	; 0x06
    23a6:	3f 81       	ldd	r19, Y+7	; 0x07
    23a8:	82 0f       	add	r24, r18
    23aa:	93 1f       	adc	r25, r19
    23ac:	fc 01       	movw	r30, r24
    23ae:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 15] = valDates >> 8;
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	0f 96       	adiw	r24, 0x0f	; 15
    23b6:	28 8d       	ldd	r18, Y+24	; 0x18
    23b8:	39 8d       	ldd	r19, Y+25	; 0x19
    23ba:	23 2f       	mov	r18, r19
    23bc:	33 27       	eor	r19, r19
    23be:	42 2f       	mov	r20, r18
    23c0:	2e 81       	ldd	r18, Y+6	; 0x06
    23c2:	3f 81       	ldd	r19, Y+7	; 0x07
    23c4:	82 0f       	add	r24, r18
    23c6:	93 1f       	adc	r25, r19
    23c8:	fc 01       	movw	r30, r24
    23ca:	40 83       	st	Z, r20

	memcpy( uchToReturn, uchTimeOut, valCharLen );
    23cc:	2e 81       	ldd	r18, Y+6	; 0x06
    23ce:	3f 81       	ldd	r19, Y+7	; 0x07
    23d0:	4d a1       	ldd	r20, Y+37	; 0x25
    23d2:	5e a1       	ldd	r21, Y+38	; 0x26
    23d4:	8b a1       	ldd	r24, Y+35	; 0x23
    23d6:	9c a1       	ldd	r25, Y+36	; 0x24
    23d8:	b9 01       	movw	r22, r18
    23da:	3d d7       	rcall	.+3706   	; 0x3256 <memcpy>
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	fe be       	out	0x3e, r15	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	ed be       	out	0x3d, r14	; 61

}
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	1e bf       	out	0x3e, r17	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	0d bf       	out	0x3d, r16	; 61
    23f0:	a6 96       	adiw	r28, 0x26	; 38
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	08 95       	ret

0000240e <_ZN3rtc8alarm_onEh>:

void rtc::alarm_on( uint8_t valAlarm01 ){
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	00 d0       	rcall	.+0      	; 0x2414 <_ZN3rtc8alarm_onEh+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <_ZN3rtc8alarm_onEh+0x8>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9b 83       	std	Y+3, r25	; 0x03
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    2420:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	82 30       	cpi	r24, 0x02	; 2
    2426:	b1 f4       	brne	.+44     	; 0x2454 <_ZN3rtc8alarm_onEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	ae 01       	movw	r20, r28
    2432:	4f 5f       	subi	r20, 0xFF	; 255
    2434:	5f 4f       	sbci	r21, 0xFF	; 255
    2436:	6f e0       	ldi	r22, 0x0F	; 15
    2438:	1a dc       	rcall	.-1996   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x03;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	83 60       	ori	r24, 0x03	; 3
    243e:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	21 e0       	ldi	r18, 0x01	; 1
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	ae 01       	movw	r20, r28
    244a:	4f 5f       	subi	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	6f e0       	ldi	r22, 0x0F	; 15
    2450:	50 dc       	rcall	.-1888   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
    2452:	31 c0       	rjmp	.+98     	; 0x24b6 <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	88 23       	and	r24, r24
    2458:	b1 f4       	brne	.+44     	; 0x2486 <_ZN3rtc8alarm_onEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	9b 81       	ldd	r25, Y+3	; 0x03
    245e:	21 e0       	ldi	r18, 0x01	; 1
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	ae 01       	movw	r20, r28
    2464:	4f 5f       	subi	r20, 0xFF	; 255
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	6f e0       	ldi	r22, 0x0F	; 15
    246a:	01 dc       	rcall	.-2046   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x01;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	81 60       	ori	r24, 0x01	; 1
    2470:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	21 e0       	ldi	r18, 0x01	; 1
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	ae 01       	movw	r20, r28
    247c:	4f 5f       	subi	r20, 0xFF	; 255
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	6f e0       	ldi	r22, 0x0F	; 15
    2482:	37 dc       	rcall	.-1938   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
    2484:	18 c0       	rjmp	.+48     	; 0x24b6 <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	a9 f4       	brne	.+42     	; 0x24b6 <_ZN3rtc8alarm_onEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	21 e0       	ldi	r18, 0x01	; 1
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	ae 01       	movw	r20, r28
    2496:	4f 5f       	subi	r20, 0xFF	; 255
    2498:	5f 4f       	sbci	r21, 0xFF	; 255
    249a:	6f e0       	ldi	r22, 0x0F	; 15
    249c:	e8 db       	rcall	.-2096   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x02;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	82 60       	ori	r24, 0x02	; 2
    24a2:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	9b 81       	ldd	r25, Y+3	; 0x03
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	ae 01       	movw	r20, r28
    24ae:	4f 5f       	subi	r20, 0xFF	; 255
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255
    24b2:	6f e0       	ldi	r22, 0x0F	; 15
    24b4:	1e dc       	rcall	.-1988   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
	}
	
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	08 95       	ret

000024c4 <_ZN3rtc9alarm_offEh>:


void rtc::alarm_off( uint8_t valAlarm01 ){
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <_ZN3rtc9alarm_offEh+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <_ZN3rtc9alarm_offEh+0x8>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	9b 83       	std	Y+3, r25	; 0x03
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    24d6:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	b1 f4       	brne	.+44     	; 0x250a <_ZN3rtc9alarm_offEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	21 e0       	ldi	r18, 0x01	; 1
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	ae 01       	movw	r20, r28
    24e8:	4f 5f       	subi	r20, 0xFF	; 255
    24ea:	5f 4f       	sbci	r21, 0xFF	; 255
    24ec:	6f e0       	ldi	r22, 0x0F	; 15
    24ee:	bf db       	rcall	.-2178   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFC;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	8c 7f       	andi	r24, 0xFC	; 252
    24f4:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	9b 81       	ldd	r25, Y+3	; 0x03
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	ae 01       	movw	r20, r28
    2500:	4f 5f       	subi	r20, 0xFF	; 255
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	6f e0       	ldi	r22, 0x0F	; 15
    2506:	f5 db       	rcall	.-2070   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
    2508:	31 c0       	rjmp	.+98     	; 0x256c <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    250a:	8c 81       	ldd	r24, Y+4	; 0x04
    250c:	88 23       	and	r24, r24
    250e:	b1 f4       	brne	.+44     	; 0x253c <_ZN3rtc9alarm_offEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	ae 01       	movw	r20, r28
    251a:	4f 5f       	subi	r20, 0xFF	; 255
    251c:	5f 4f       	sbci	r21, 0xFF	; 255
    251e:	6f e0       	ldi	r22, 0x0F	; 15
    2520:	a6 db       	rcall	.-2228   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFE;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	8e 7f       	andi	r24, 0xFE	; 254
    2526:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	ae 01       	movw	r20, r28
    2532:	4f 5f       	subi	r20, 0xFF	; 255
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	6f e0       	ldi	r22, 0x0F	; 15
    2538:	dc db       	rcall	.-2120   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
    253a:	18 c0       	rjmp	.+48     	; 0x256c <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	a9 f4       	brne	.+42     	; 0x256c <_ZN3rtc9alarm_offEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	ae 01       	movw	r20, r28
    254c:	4f 5f       	subi	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	6f e0       	ldi	r22, 0x0F	; 15
    2552:	8d db       	rcall	.-2278   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFD;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	8d 7f       	andi	r24, 0xFD	; 253
    2558:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	21 e0       	ldi	r18, 0x01	; 1
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	ae 01       	movw	r20, r28
    2564:	4f 5f       	subi	r20, 0xFF	; 255
    2566:	5f 4f       	sbci	r21, 0xFF	; 255
    2568:	6f e0       	ldi	r22, 0x0F	; 15
    256a:	c3 db       	rcall	.-2170   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
	}

}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <_ZN3rtc14clear_interuptEh>:


void rtc::clear_interupt( uint8_t valAlarm01 ){
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <_ZN3rtc14clear_interuptEh+0x6>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <_ZN3rtc14clear_interuptEh+0x8>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
    258a:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char chrNull;
	
	
	if( valAlarm01 == RTC_ALARM_0 ){
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	88 23       	and	r24, r24
    2590:	51 f4       	brne	.+20     	; 0x25a6 <_ZN3rtc14clear_interuptEh+0x2c>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	ae 01       	movw	r20, r28
    259c:	4f 5f       	subi	r20, 0xFF	; 255
    259e:	5f 4f       	sbci	r21, 0xFF	; 255
    25a0:	67 e0       	ldi	r22, 0x07	; 7
    25a2:	65 db       	rcall	.-2358   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
    25a4:	22 c0       	rjmp	.+68     	; 0x25ea <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    25a6:	8c 81       	ldd	r24, Y+4	; 0x04
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	51 f4       	brne	.+20     	; 0x25c0 <_ZN3rtc14clear_interuptEh+0x46>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	ae 01       	movw	r20, r28
    25b6:	4f 5f       	subi	r20, 0xFF	; 255
    25b8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ba:	6b e0       	ldi	r22, 0x0B	; 11
    25bc:	58 db       	rcall	.-2384   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
    25be:	15 c0       	rjmp	.+42     	; 0x25ea <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_BOTH ){
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	82 30       	cpi	r24, 0x02	; 2
    25c4:	91 f4       	brne	.+36     	; 0x25ea <_ZN3rtc14clear_interuptEh+0x70>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	ae 01       	movw	r20, r28
    25d0:	4f 5f       	subi	r20, 0xFF	; 255
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	67 e0       	ldi	r22, 0x07	; 7
    25d6:	4b db       	rcall	.-2410   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	21 e0       	ldi	r18, 0x01	; 1
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	ae 01       	movw	r20, r28
    25e2:	4f 5f       	subi	r20, 0xFF	; 255
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	6b e0       	ldi	r22, 0x0B	; 11
    25e8:	42 db       	rcall	.-2428   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
	}
	
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <_ZN3rtc5alarmEhh9rtc_alarm>:


void rtc::alarm( uint8_t valGetSet, uint8_t valAlarm01, rtc_alarm rtaToSetOrGet ){
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	2a 97       	sbiw	r28, 0x0a	; 10
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	6d 83       	std	Y+5, r22	; 0x05
    2616:	4e 83       	std	Y+6, r20	; 0x06
    2618:	0f 83       	std	Y+7, r16	; 0x07
    261a:	18 87       	std	Y+8, r17	; 0x08
    261c:	29 87       	std	Y+9, r18	; 0x09
    261e:	3a 87       	std	Y+10, r19	; 0x0a
	
	unsigned char valAlarmAddress { 0x00 };
    2620:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uchTempControl { 0x00 };
    2622:	1a 82       	std	Y+2, r1	; 0x02


	if( !valAlarm01 ){
    2624:	8e 81       	ldd	r24, Y+6	; 0x06
    2626:	88 23       	and	r24, r24
    2628:	19 f4       	brne	.+6      	; 0x2630 <_ZN3rtc5alarmEhh9rtc_alarm+0x38>
			valAlarmAddress = RTC_ADDR_A0S;
    262a:	87 e0       	ldi	r24, 0x07	; 7
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	05 c0       	rjmp	.+10     	; 0x263a <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
	}else if( valAlarm01 ){
    2630:	8e 81       	ldd	r24, Y+6	; 0x06
    2632:	88 23       	and	r24, r24
    2634:	11 f0       	breq	.+4      	; 0x263a <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
		valAlarmAddress = RTC_ADDR_A1S;
    2636:	8b e0       	ldi	r24, 0x0B	; 11
    2638:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( !valGetSet ){
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	88 23       	and	r24, r24
    263e:	51 f4       	brne	.+20     	; 0x2654 <_ZN3rtc5alarmEhh9rtc_alarm+0x5c>
		read_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    2640:	ae 01       	movw	r20, r28
    2642:	49 5f       	subi	r20, 0xF9	; 249
    2644:	5f 4f       	sbci	r21, 0xFF	; 255
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	24 e0       	ldi	r18, 0x04	; 4
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	69 81       	ldd	r22, Y+1	; 0x01
    2650:	0e db       	rcall	.-2532   	; 0x1c6e <_ZN3rtc10read_blockEhPhj>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
	}else if( valGetSet ){
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	88 23       	and	r24, r24
    2658:	89 f0       	breq	.+34     	; 0x267c <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
		alarm_off( valAlarm01 );
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	6e 81       	ldd	r22, Y+6	; 0x06
    2660:	31 df       	rcall	.-414    	; 0x24c4 <_ZN3rtc9alarm_offEh>
		write_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    2662:	ae 01       	movw	r20, r28
    2664:	49 5f       	subi	r20, 0xF9	; 249
    2666:	5f 4f       	sbci	r21, 0xFF	; 255
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	24 e0       	ldi	r18, 0x04	; 4
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	69 81       	ldd	r22, Y+1	; 0x01
    2672:	3f db       	rcall	.-2434   	; 0x1cf2 <_ZN3rtc11write_blockEhPhj>
		alarm_on( valAlarm01 );
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	6e 81       	ldd	r22, Y+6	; 0x06
    267a:	c9 de       	rcall	.-622    	; 0x240e <_ZN3rtc8alarm_onEh>
	}
}
    267c:	2a 96       	adiw	r28, 0x0a	; 10
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <__cmpsf2>:
    2692:	2f d0       	rcall	.+94     	; 0x26f2 <__fp_cmp>
    2694:	08 f4       	brcc	.+2      	; 0x2698 <__cmpsf2+0x6>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	08 95       	ret

0000269a <__fixunssfsi>:
    269a:	7f d0       	rcall	.+254    	; 0x279a <__fp_splitA>
    269c:	88 f0       	brcs	.+34     	; 0x26c0 <__fixunssfsi+0x26>
    269e:	9f 57       	subi	r25, 0x7F	; 127
    26a0:	90 f0       	brcs	.+36     	; 0x26c6 <__fixunssfsi+0x2c>
    26a2:	b9 2f       	mov	r27, r25
    26a4:	99 27       	eor	r25, r25
    26a6:	b7 51       	subi	r27, 0x17	; 23
    26a8:	a0 f0       	brcs	.+40     	; 0x26d2 <__fixunssfsi+0x38>
    26aa:	d1 f0       	breq	.+52     	; 0x26e0 <__fixunssfsi+0x46>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	1a f0       	brmi	.+6      	; 0x26bc <__fixunssfsi+0x22>
    26b6:	ba 95       	dec	r27
    26b8:	c9 f7       	brne	.-14     	; 0x26ac <__fixunssfsi+0x12>
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <__fixunssfsi+0x46>
    26bc:	b1 30       	cpi	r27, 0x01	; 1
    26be:	81 f0       	breq	.+32     	; 0x26e0 <__fixunssfsi+0x46>
    26c0:	86 d0       	rcall	.+268    	; 0x27ce <__fp_zero>
    26c2:	b1 e0       	ldi	r27, 0x01	; 1
    26c4:	08 95       	ret
    26c6:	83 c0       	rjmp	.+262    	; 0x27ce <__fp_zero>
    26c8:	67 2f       	mov	r22, r23
    26ca:	78 2f       	mov	r23, r24
    26cc:	88 27       	eor	r24, r24
    26ce:	b8 5f       	subi	r27, 0xF8	; 248
    26d0:	39 f0       	breq	.+14     	; 0x26e0 <__fixunssfsi+0x46>
    26d2:	b9 3f       	cpi	r27, 0xF9	; 249
    26d4:	cc f3       	brlt	.-14     	; 0x26c8 <__fixunssfsi+0x2e>
    26d6:	86 95       	lsr	r24
    26d8:	77 95       	ror	r23
    26da:	67 95       	ror	r22
    26dc:	b3 95       	inc	r27
    26de:	d9 f7       	brne	.-10     	; 0x26d6 <__fixunssfsi+0x3c>
    26e0:	3e f4       	brtc	.+14     	; 0x26f0 <__fixunssfsi+0x56>
    26e2:	90 95       	com	r25
    26e4:	80 95       	com	r24
    26e6:	70 95       	com	r23
    26e8:	61 95       	neg	r22
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	8f 4f       	sbci	r24, 0xFF	; 255
    26ee:	9f 4f       	sbci	r25, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__fp_cmp>:
    26f2:	99 0f       	add	r25, r25
    26f4:	00 08       	sbc	r0, r0
    26f6:	55 0f       	add	r21, r21
    26f8:	aa 0b       	sbc	r26, r26
    26fa:	e0 e8       	ldi	r30, 0x80	; 128
    26fc:	fe ef       	ldi	r31, 0xFE	; 254
    26fe:	16 16       	cp	r1, r22
    2700:	17 06       	cpc	r1, r23
    2702:	e8 07       	cpc	r30, r24
    2704:	f9 07       	cpc	r31, r25
    2706:	c0 f0       	brcs	.+48     	; 0x2738 <__fp_cmp+0x46>
    2708:	12 16       	cp	r1, r18
    270a:	13 06       	cpc	r1, r19
    270c:	e4 07       	cpc	r30, r20
    270e:	f5 07       	cpc	r31, r21
    2710:	98 f0       	brcs	.+38     	; 0x2738 <__fp_cmp+0x46>
    2712:	62 1b       	sub	r22, r18
    2714:	73 0b       	sbc	r23, r19
    2716:	84 0b       	sbc	r24, r20
    2718:	95 0b       	sbc	r25, r21
    271a:	39 f4       	brne	.+14     	; 0x272a <__fp_cmp+0x38>
    271c:	0a 26       	eor	r0, r26
    271e:	61 f0       	breq	.+24     	; 0x2738 <__fp_cmp+0x46>
    2720:	23 2b       	or	r18, r19
    2722:	24 2b       	or	r18, r20
    2724:	25 2b       	or	r18, r21
    2726:	21 f4       	brne	.+8      	; 0x2730 <__fp_cmp+0x3e>
    2728:	08 95       	ret
    272a:	0a 26       	eor	r0, r26
    272c:	09 f4       	brne	.+2      	; 0x2730 <__fp_cmp+0x3e>
    272e:	a1 40       	sbci	r26, 0x01	; 1
    2730:	a6 95       	lsr	r26
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	81 1d       	adc	r24, r1
    2736:	81 1d       	adc	r24, r1
    2738:	08 95       	ret

0000273a <__fp_inf>:
    273a:	97 f9       	bld	r25, 7
    273c:	9f 67       	ori	r25, 0x7F	; 127
    273e:	80 e8       	ldi	r24, 0x80	; 128
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	08 95       	ret

00002746 <__fp_nan>:
    2746:	9f ef       	ldi	r25, 0xFF	; 255
    2748:	80 ec       	ldi	r24, 0xC0	; 192
    274a:	08 95       	ret

0000274c <__fp_pscA>:
    274c:	00 24       	eor	r0, r0
    274e:	0a 94       	dec	r0
    2750:	16 16       	cp	r1, r22
    2752:	17 06       	cpc	r1, r23
    2754:	18 06       	cpc	r1, r24
    2756:	09 06       	cpc	r0, r25
    2758:	08 95       	ret

0000275a <__fp_pscB>:
    275a:	00 24       	eor	r0, r0
    275c:	0a 94       	dec	r0
    275e:	12 16       	cp	r1, r18
    2760:	13 06       	cpc	r1, r19
    2762:	14 06       	cpc	r1, r20
    2764:	05 06       	cpc	r0, r21
    2766:	08 95       	ret

00002768 <__fp_round>:
    2768:	09 2e       	mov	r0, r25
    276a:	03 94       	inc	r0
    276c:	00 0c       	add	r0, r0
    276e:	11 f4       	brne	.+4      	; 0x2774 <__fp_round+0xc>
    2770:	88 23       	and	r24, r24
    2772:	52 f0       	brmi	.+20     	; 0x2788 <__fp_round+0x20>
    2774:	bb 0f       	add	r27, r27
    2776:	40 f4       	brcc	.+16     	; 0x2788 <__fp_round+0x20>
    2778:	bf 2b       	or	r27, r31
    277a:	11 f4       	brne	.+4      	; 0x2780 <__fp_round+0x18>
    277c:	60 ff       	sbrs	r22, 0
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <__fp_round+0x20>
    2780:	6f 5f       	subi	r22, 0xFF	; 255
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	8f 4f       	sbci	r24, 0xFF	; 255
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	08 95       	ret

0000278a <__fp_split3>:
    278a:	57 fd       	sbrc	r21, 7
    278c:	90 58       	subi	r25, 0x80	; 128
    278e:	44 0f       	add	r20, r20
    2790:	55 1f       	adc	r21, r21
    2792:	59 f0       	breq	.+22     	; 0x27aa <__fp_splitA+0x10>
    2794:	5f 3f       	cpi	r21, 0xFF	; 255
    2796:	71 f0       	breq	.+28     	; 0x27b4 <__fp_splitA+0x1a>
    2798:	47 95       	ror	r20

0000279a <__fp_splitA>:
    279a:	88 0f       	add	r24, r24
    279c:	97 fb       	bst	r25, 7
    279e:	99 1f       	adc	r25, r25
    27a0:	61 f0       	breq	.+24     	; 0x27ba <__fp_splitA+0x20>
    27a2:	9f 3f       	cpi	r25, 0xFF	; 255
    27a4:	79 f0       	breq	.+30     	; 0x27c4 <__fp_splitA+0x2a>
    27a6:	87 95       	ror	r24
    27a8:	08 95       	ret
    27aa:	12 16       	cp	r1, r18
    27ac:	13 06       	cpc	r1, r19
    27ae:	14 06       	cpc	r1, r20
    27b0:	55 1f       	adc	r21, r21
    27b2:	f2 cf       	rjmp	.-28     	; 0x2798 <__fp_split3+0xe>
    27b4:	46 95       	lsr	r20
    27b6:	f1 df       	rcall	.-30     	; 0x279a <__fp_splitA>
    27b8:	08 c0       	rjmp	.+16     	; 0x27ca <__fp_splitA+0x30>
    27ba:	16 16       	cp	r1, r22
    27bc:	17 06       	cpc	r1, r23
    27be:	18 06       	cpc	r1, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	f1 cf       	rjmp	.-30     	; 0x27a6 <__fp_splitA+0xc>
    27c4:	86 95       	lsr	r24
    27c6:	71 05       	cpc	r23, r1
    27c8:	61 05       	cpc	r22, r1
    27ca:	08 94       	sec
    27cc:	08 95       	ret

000027ce <__fp_zero>:
    27ce:	e8 94       	clt

000027d0 <__fp_szero>:
    27d0:	bb 27       	eor	r27, r27
    27d2:	66 27       	eor	r22, r22
    27d4:	77 27       	eor	r23, r23
    27d6:	cb 01       	movw	r24, r22
    27d8:	97 f9       	bld	r25, 7
    27da:	08 95       	ret

000027dc <__gesf2>:
    27dc:	8a df       	rcall	.-236    	; 0x26f2 <__fp_cmp>
    27de:	08 f4       	brcc	.+2      	; 0x27e2 <__gesf2+0x6>
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	08 95       	ret

000027e4 <__mulsf3>:
    27e4:	0b d0       	rcall	.+22     	; 0x27fc <__mulsf3x>
    27e6:	c0 cf       	rjmp	.-128    	; 0x2768 <__fp_round>
    27e8:	b1 df       	rcall	.-158    	; 0x274c <__fp_pscA>
    27ea:	28 f0       	brcs	.+10     	; 0x27f6 <__mulsf3+0x12>
    27ec:	b6 df       	rcall	.-148    	; 0x275a <__fp_pscB>
    27ee:	18 f0       	brcs	.+6      	; 0x27f6 <__mulsf3+0x12>
    27f0:	95 23       	and	r25, r21
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <__mulsf3+0x12>
    27f4:	a2 cf       	rjmp	.-188    	; 0x273a <__fp_inf>
    27f6:	a7 cf       	rjmp	.-178    	; 0x2746 <__fp_nan>
    27f8:	11 24       	eor	r1, r1
    27fa:	ea cf       	rjmp	.-44     	; 0x27d0 <__fp_szero>

000027fc <__mulsf3x>:
    27fc:	c6 df       	rcall	.-116    	; 0x278a <__fp_split3>
    27fe:	a0 f3       	brcs	.-24     	; 0x27e8 <__mulsf3+0x4>

00002800 <__mulsf3_pse>:
    2800:	95 9f       	mul	r25, r21
    2802:	d1 f3       	breq	.-12     	; 0x27f8 <__mulsf3+0x14>
    2804:	95 0f       	add	r25, r21
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	55 1f       	adc	r21, r21
    280a:	62 9f       	mul	r22, r18
    280c:	f0 01       	movw	r30, r0
    280e:	72 9f       	mul	r23, r18
    2810:	bb 27       	eor	r27, r27
    2812:	f0 0d       	add	r31, r0
    2814:	b1 1d       	adc	r27, r1
    2816:	63 9f       	mul	r22, r19
    2818:	aa 27       	eor	r26, r26
    281a:	f0 0d       	add	r31, r0
    281c:	b1 1d       	adc	r27, r1
    281e:	aa 1f       	adc	r26, r26
    2820:	64 9f       	mul	r22, r20
    2822:	66 27       	eor	r22, r22
    2824:	b0 0d       	add	r27, r0
    2826:	a1 1d       	adc	r26, r1
    2828:	66 1f       	adc	r22, r22
    282a:	82 9f       	mul	r24, r18
    282c:	22 27       	eor	r18, r18
    282e:	b0 0d       	add	r27, r0
    2830:	a1 1d       	adc	r26, r1
    2832:	62 1f       	adc	r22, r18
    2834:	73 9f       	mul	r23, r19
    2836:	b0 0d       	add	r27, r0
    2838:	a1 1d       	adc	r26, r1
    283a:	62 1f       	adc	r22, r18
    283c:	83 9f       	mul	r24, r19
    283e:	a0 0d       	add	r26, r0
    2840:	61 1d       	adc	r22, r1
    2842:	22 1f       	adc	r18, r18
    2844:	74 9f       	mul	r23, r20
    2846:	33 27       	eor	r19, r19
    2848:	a0 0d       	add	r26, r0
    284a:	61 1d       	adc	r22, r1
    284c:	23 1f       	adc	r18, r19
    284e:	84 9f       	mul	r24, r20
    2850:	60 0d       	add	r22, r0
    2852:	21 1d       	adc	r18, r1
    2854:	82 2f       	mov	r24, r18
    2856:	76 2f       	mov	r23, r22
    2858:	6a 2f       	mov	r22, r26
    285a:	11 24       	eor	r1, r1
    285c:	9f 57       	subi	r25, 0x7F	; 127
    285e:	50 40       	sbci	r21, 0x00	; 0
    2860:	8a f0       	brmi	.+34     	; 0x2884 <__mulsf3_pse+0x84>
    2862:	e1 f0       	breq	.+56     	; 0x289c <__mulsf3_pse+0x9c>
    2864:	88 23       	and	r24, r24
    2866:	4a f0       	brmi	.+18     	; 0x287a <__mulsf3_pse+0x7a>
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	bb 1f       	adc	r27, r27
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	91 50       	subi	r25, 0x01	; 1
    2876:	50 40       	sbci	r21, 0x00	; 0
    2878:	a9 f7       	brne	.-22     	; 0x2864 <__mulsf3_pse+0x64>
    287a:	9e 3f       	cpi	r25, 0xFE	; 254
    287c:	51 05       	cpc	r21, r1
    287e:	70 f0       	brcs	.+28     	; 0x289c <__mulsf3_pse+0x9c>
    2880:	5c cf       	rjmp	.-328    	; 0x273a <__fp_inf>
    2882:	a6 cf       	rjmp	.-180    	; 0x27d0 <__fp_szero>
    2884:	5f 3f       	cpi	r21, 0xFF	; 255
    2886:	ec f3       	brlt	.-6      	; 0x2882 <__mulsf3_pse+0x82>
    2888:	98 3e       	cpi	r25, 0xE8	; 232
    288a:	dc f3       	brlt	.-10     	; 0x2882 <__mulsf3_pse+0x82>
    288c:	86 95       	lsr	r24
    288e:	77 95       	ror	r23
    2890:	67 95       	ror	r22
    2892:	b7 95       	ror	r27
    2894:	f7 95       	ror	r31
    2896:	e7 95       	ror	r30
    2898:	9f 5f       	subi	r25, 0xFF	; 255
    289a:	c1 f7       	brne	.-16     	; 0x288c <__mulsf3_pse+0x8c>
    289c:	fe 2b       	or	r31, r30
    289e:	88 0f       	add	r24, r24
    28a0:	91 1d       	adc	r25, r1
    28a2:	96 95       	lsr	r25
    28a4:	87 95       	ror	r24
    28a6:	97 f9       	bld	r25, 7
    28a8:	08 95       	ret

000028aa <vfprintf>:
    28aa:	2f 92       	push	r2
    28ac:	3f 92       	push	r3
    28ae:	4f 92       	push	r4
    28b0:	5f 92       	push	r5
    28b2:	6f 92       	push	r6
    28b4:	7f 92       	push	r7
    28b6:	8f 92       	push	r8
    28b8:	9f 92       	push	r9
    28ba:	af 92       	push	r10
    28bc:	bf 92       	push	r11
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	63 97       	sbiw	r28, 0x13	; 19
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	6c 01       	movw	r12, r24
    28e0:	4b 01       	movw	r8, r22
    28e2:	2a 01       	movw	r4, r20
    28e4:	fc 01       	movw	r30, r24
    28e6:	17 82       	std	Z+7, r1	; 0x07
    28e8:	16 82       	std	Z+6, r1	; 0x06
    28ea:	83 81       	ldd	r24, Z+3	; 0x03
    28ec:	81 ff       	sbrs	r24, 1
    28ee:	29 c3       	rjmp	.+1618   	; 0x2f42 <vfprintf+0x698>
    28f0:	ae 01       	movw	r20, r28
    28f2:	4f 5f       	subi	r20, 0xFF	; 255
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	3a 01       	movw	r6, r20
    28f8:	f6 01       	movw	r30, r12
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	f4 01       	movw	r30, r8
    28fe:	93 fd       	sbrc	r25, 3
    2900:	85 91       	lpm	r24, Z+
    2902:	93 ff       	sbrs	r25, 3
    2904:	81 91       	ld	r24, Z+
    2906:	4f 01       	movw	r8, r30
    2908:	88 23       	and	r24, r24
    290a:	09 f4       	brne	.+2      	; 0x290e <vfprintf+0x64>
    290c:	16 c3       	rjmp	.+1580   	; 0x2f3a <vfprintf+0x690>
    290e:	85 32       	cpi	r24, 0x25	; 37
    2910:	39 f4       	brne	.+14     	; 0x2920 <vfprintf+0x76>
    2912:	93 fd       	sbrc	r25, 3
    2914:	85 91       	lpm	r24, Z+
    2916:	93 ff       	sbrs	r25, 3
    2918:	81 91       	ld	r24, Z+
    291a:	4f 01       	movw	r8, r30
    291c:	85 32       	cpi	r24, 0x25	; 37
    291e:	31 f4       	brne	.+12     	; 0x292c <vfprintf+0x82>
    2920:	b6 01       	movw	r22, r12
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	ac d4       	rcall	.+2392   	; 0x327e <fputc>
    2926:	52 01       	movw	r10, r4
    2928:	25 01       	movw	r4, r10
    292a:	e6 cf       	rjmp	.-52     	; 0x28f8 <vfprintf+0x4e>
    292c:	10 e0       	ldi	r17, 0x00	; 0
    292e:	f1 2c       	mov	r15, r1
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	20 32       	cpi	r18, 0x20	; 32
    2934:	a0 f4       	brcc	.+40     	; 0x295e <vfprintf+0xb4>
    2936:	8b 32       	cpi	r24, 0x2B	; 43
    2938:	69 f0       	breq	.+26     	; 0x2954 <vfprintf+0xaa>
    293a:	30 f4       	brcc	.+12     	; 0x2948 <vfprintf+0x9e>
    293c:	80 32       	cpi	r24, 0x20	; 32
    293e:	59 f0       	breq	.+22     	; 0x2956 <vfprintf+0xac>
    2940:	83 32       	cpi	r24, 0x23	; 35
    2942:	69 f4       	brne	.+26     	; 0x295e <vfprintf+0xb4>
    2944:	20 61       	ori	r18, 0x10	; 16
    2946:	2c c0       	rjmp	.+88     	; 0x29a0 <vfprintf+0xf6>
    2948:	8d 32       	cpi	r24, 0x2D	; 45
    294a:	39 f0       	breq	.+14     	; 0x295a <vfprintf+0xb0>
    294c:	80 33       	cpi	r24, 0x30	; 48
    294e:	39 f4       	brne	.+14     	; 0x295e <vfprintf+0xb4>
    2950:	21 60       	ori	r18, 0x01	; 1
    2952:	26 c0       	rjmp	.+76     	; 0x29a0 <vfprintf+0xf6>
    2954:	22 60       	ori	r18, 0x02	; 2
    2956:	24 60       	ori	r18, 0x04	; 4
    2958:	23 c0       	rjmp	.+70     	; 0x29a0 <vfprintf+0xf6>
    295a:	28 60       	ori	r18, 0x08	; 8
    295c:	21 c0       	rjmp	.+66     	; 0x29a0 <vfprintf+0xf6>
    295e:	27 fd       	sbrc	r18, 7
    2960:	27 c0       	rjmp	.+78     	; 0x29b0 <vfprintf+0x106>
    2962:	30 ed       	ldi	r19, 0xD0	; 208
    2964:	38 0f       	add	r19, r24
    2966:	3a 30       	cpi	r19, 0x0A	; 10
    2968:	78 f4       	brcc	.+30     	; 0x2988 <vfprintf+0xde>
    296a:	26 ff       	sbrs	r18, 6
    296c:	06 c0       	rjmp	.+12     	; 0x297a <vfprintf+0xd0>
    296e:	fa e0       	ldi	r31, 0x0A	; 10
    2970:	1f 9f       	mul	r17, r31
    2972:	30 0d       	add	r19, r0
    2974:	11 24       	eor	r1, r1
    2976:	13 2f       	mov	r17, r19
    2978:	13 c0       	rjmp	.+38     	; 0x29a0 <vfprintf+0xf6>
    297a:	4a e0       	ldi	r20, 0x0A	; 10
    297c:	f4 9e       	mul	r15, r20
    297e:	30 0d       	add	r19, r0
    2980:	11 24       	eor	r1, r1
    2982:	f3 2e       	mov	r15, r19
    2984:	20 62       	ori	r18, 0x20	; 32
    2986:	0c c0       	rjmp	.+24     	; 0x29a0 <vfprintf+0xf6>
    2988:	8e 32       	cpi	r24, 0x2E	; 46
    298a:	21 f4       	brne	.+8      	; 0x2994 <vfprintf+0xea>
    298c:	26 fd       	sbrc	r18, 6
    298e:	d5 c2       	rjmp	.+1450   	; 0x2f3a <vfprintf+0x690>
    2990:	20 64       	ori	r18, 0x40	; 64
    2992:	06 c0       	rjmp	.+12     	; 0x29a0 <vfprintf+0xf6>
    2994:	8c 36       	cpi	r24, 0x6C	; 108
    2996:	11 f4       	brne	.+4      	; 0x299c <vfprintf+0xf2>
    2998:	20 68       	ori	r18, 0x80	; 128
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <vfprintf+0xf6>
    299c:	88 36       	cpi	r24, 0x68	; 104
    299e:	41 f4       	brne	.+16     	; 0x29b0 <vfprintf+0x106>
    29a0:	f4 01       	movw	r30, r8
    29a2:	93 fd       	sbrc	r25, 3
    29a4:	85 91       	lpm	r24, Z+
    29a6:	93 ff       	sbrs	r25, 3
    29a8:	81 91       	ld	r24, Z+
    29aa:	4f 01       	movw	r8, r30
    29ac:	81 11       	cpse	r24, r1
    29ae:	c1 cf       	rjmp	.-126    	; 0x2932 <vfprintf+0x88>
    29b0:	9b eb       	ldi	r25, 0xBB	; 187
    29b2:	98 0f       	add	r25, r24
    29b4:	93 30       	cpi	r25, 0x03	; 3
    29b6:	18 f4       	brcc	.+6      	; 0x29be <vfprintf+0x114>
    29b8:	20 61       	ori	r18, 0x10	; 16
    29ba:	80 5e       	subi	r24, 0xE0	; 224
    29bc:	06 c0       	rjmp	.+12     	; 0x29ca <vfprintf+0x120>
    29be:	9b e9       	ldi	r25, 0x9B	; 155
    29c0:	98 0f       	add	r25, r24
    29c2:	93 30       	cpi	r25, 0x03	; 3
    29c4:	08 f0       	brcs	.+2      	; 0x29c8 <vfprintf+0x11e>
    29c6:	64 c1       	rjmp	.+712    	; 0x2c90 <vfprintf+0x3e6>
    29c8:	2f 7e       	andi	r18, 0xEF	; 239
    29ca:	26 ff       	sbrs	r18, 6
    29cc:	16 e0       	ldi	r17, 0x06	; 6
    29ce:	2f 73       	andi	r18, 0x3F	; 63
    29d0:	32 2e       	mov	r3, r18
    29d2:	85 36       	cpi	r24, 0x65	; 101
    29d4:	19 f4       	brne	.+6      	; 0x29dc <vfprintf+0x132>
    29d6:	20 64       	ori	r18, 0x40	; 64
    29d8:	32 2e       	mov	r3, r18
    29da:	08 c0       	rjmp	.+16     	; 0x29ec <vfprintf+0x142>
    29dc:	86 36       	cpi	r24, 0x66	; 102
    29de:	21 f4       	brne	.+8      	; 0x29e8 <vfprintf+0x13e>
    29e0:	f2 2f       	mov	r31, r18
    29e2:	f0 68       	ori	r31, 0x80	; 128
    29e4:	3f 2e       	mov	r3, r31
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <vfprintf+0x142>
    29e8:	11 11       	cpse	r17, r1
    29ea:	11 50       	subi	r17, 0x01	; 1
    29ec:	37 fe       	sbrs	r3, 7
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <vfprintf+0x154>
    29f0:	1c 33       	cpi	r17, 0x3C	; 60
    29f2:	50 f4       	brcc	.+20     	; 0x2a08 <vfprintf+0x15e>
    29f4:	ee 24       	eor	r14, r14
    29f6:	e3 94       	inc	r14
    29f8:	e1 0e       	add	r14, r17
    29fa:	27 e0       	ldi	r18, 0x07	; 7
    29fc:	0b c0       	rjmp	.+22     	; 0x2a14 <vfprintf+0x16a>
    29fe:	18 30       	cpi	r17, 0x08	; 8
    2a00:	38 f0       	brcs	.+14     	; 0x2a10 <vfprintf+0x166>
    2a02:	27 e0       	ldi	r18, 0x07	; 7
    2a04:	17 e0       	ldi	r17, 0x07	; 7
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <vfprintf+0x168>
    2a08:	27 e0       	ldi	r18, 0x07	; 7
    2a0a:	4c e3       	ldi	r20, 0x3C	; 60
    2a0c:	e4 2e       	mov	r14, r20
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <vfprintf+0x16a>
    2a10:	21 2f       	mov	r18, r17
    2a12:	e1 2c       	mov	r14, r1
    2a14:	52 01       	movw	r10, r4
    2a16:	44 e0       	ldi	r20, 0x04	; 4
    2a18:	a4 0e       	add	r10, r20
    2a1a:	b1 1c       	adc	r11, r1
    2a1c:	f2 01       	movw	r30, r4
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	0e 2d       	mov	r16, r14
    2a28:	a3 01       	movw	r20, r6
    2a2a:	32 d3       	rcall	.+1636   	; 0x3090 <__ftoa_engine>
    2a2c:	2c 01       	movw	r4, r24
    2a2e:	09 81       	ldd	r16, Y+1	; 0x01
    2a30:	00 ff       	sbrs	r16, 0
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <vfprintf+0x18e>
    2a34:	03 ff       	sbrs	r16, 3
    2a36:	07 c0       	rjmp	.+14     	; 0x2a46 <vfprintf+0x19c>
    2a38:	31 fc       	sbrc	r3, 1
    2a3a:	08 c0       	rjmp	.+16     	; 0x2a4c <vfprintf+0x1a2>
    2a3c:	32 fe       	sbrs	r3, 2
    2a3e:	09 c0       	rjmp	.+18     	; 0x2a52 <vfprintf+0x1a8>
    2a40:	30 e2       	ldi	r19, 0x20	; 32
    2a42:	23 2e       	mov	r2, r19
    2a44:	07 c0       	rjmp	.+14     	; 0x2a54 <vfprintf+0x1aa>
    2a46:	2d e2       	ldi	r18, 0x2D	; 45
    2a48:	22 2e       	mov	r2, r18
    2a4a:	04 c0       	rjmp	.+8      	; 0x2a54 <vfprintf+0x1aa>
    2a4c:	9b e2       	ldi	r25, 0x2B	; 43
    2a4e:	29 2e       	mov	r2, r25
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <vfprintf+0x1aa>
    2a52:	21 2c       	mov	r2, r1
    2a54:	80 2f       	mov	r24, r16
    2a56:	8c 70       	andi	r24, 0x0C	; 12
    2a58:	19 f0       	breq	.+6      	; 0x2a60 <vfprintf+0x1b6>
    2a5a:	21 10       	cpse	r2, r1
    2a5c:	51 c2       	rjmp	.+1186   	; 0x2f00 <vfprintf+0x656>
    2a5e:	8d c2       	rjmp	.+1306   	; 0x2f7a <vfprintf+0x6d0>
    2a60:	37 fe       	sbrs	r3, 7
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <vfprintf+0x1d8>
    2a64:	e4 0c       	add	r14, r4
    2a66:	04 ff       	sbrs	r16, 4
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <vfprintf+0x1c8>
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	81 33       	cpi	r24, 0x31	; 49
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <vfprintf+0x1c8>
    2a70:	ea 94       	dec	r14
    2a72:	1e 14       	cp	r1, r14
    2a74:	74 f5       	brge	.+92     	; 0x2ad2 <vfprintf+0x228>
    2a76:	f8 e0       	ldi	r31, 0x08	; 8
    2a78:	fe 15       	cp	r31, r14
    2a7a:	78 f5       	brcc	.+94     	; 0x2ada <vfprintf+0x230>
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	e8 2e       	mov	r14, r24
    2a80:	2c c0       	rjmp	.+88     	; 0x2ada <vfprintf+0x230>
    2a82:	36 fc       	sbrc	r3, 6
    2a84:	2a c0       	rjmp	.+84     	; 0x2ada <vfprintf+0x230>
    2a86:	81 2f       	mov	r24, r17
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	84 15       	cp	r24, r4
    2a8c:	95 05       	cpc	r25, r5
    2a8e:	9c f0       	brlt	.+38     	; 0x2ab6 <vfprintf+0x20c>
    2a90:	2c ef       	ldi	r18, 0xFC	; 252
    2a92:	42 16       	cp	r4, r18
    2a94:	2f ef       	ldi	r18, 0xFF	; 255
    2a96:	52 06       	cpc	r5, r18
    2a98:	74 f0       	brlt	.+28     	; 0x2ab6 <vfprintf+0x20c>
    2a9a:	43 2d       	mov	r20, r3
    2a9c:	40 68       	ori	r20, 0x80	; 128
    2a9e:	34 2e       	mov	r3, r20
    2aa0:	0a c0       	rjmp	.+20     	; 0x2ab6 <vfprintf+0x20c>
    2aa2:	e2 e0       	ldi	r30, 0x02	; 2
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ec 0f       	add	r30, r28
    2aa8:	fd 1f       	adc	r31, r29
    2aaa:	e1 0f       	add	r30, r17
    2aac:	f1 1d       	adc	r31, r1
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 33       	cpi	r24, 0x30	; 48
    2ab2:	19 f4       	brne	.+6      	; 0x2aba <vfprintf+0x210>
    2ab4:	11 50       	subi	r17, 0x01	; 1
    2ab6:	11 11       	cpse	r17, r1
    2ab8:	f4 cf       	rjmp	.-24     	; 0x2aa2 <vfprintf+0x1f8>
    2aba:	37 fe       	sbrs	r3, 7
    2abc:	0e c0       	rjmp	.+28     	; 0x2ada <vfprintf+0x230>
    2abe:	ee 24       	eor	r14, r14
    2ac0:	e3 94       	inc	r14
    2ac2:	e1 0e       	add	r14, r17
    2ac4:	81 2f       	mov	r24, r17
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	48 16       	cp	r4, r24
    2aca:	59 06       	cpc	r5, r25
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <vfprintf+0x22e>
    2ace:	14 19       	sub	r17, r4
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <vfprintf+0x230>
    2ad2:	ee 24       	eor	r14, r14
    2ad4:	e3 94       	inc	r14
    2ad6:	01 c0       	rjmp	.+2      	; 0x2ada <vfprintf+0x230>
    2ad8:	10 e0       	ldi	r17, 0x00	; 0
    2ada:	37 fe       	sbrs	r3, 7
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <vfprintf+0x240>
    2ade:	14 14       	cp	r1, r4
    2ae0:	15 04       	cpc	r1, r5
    2ae2:	34 f4       	brge	.+12     	; 0x2af0 <vfprintf+0x246>
    2ae4:	c2 01       	movw	r24, r4
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	05 c0       	rjmp	.+10     	; 0x2af4 <vfprintf+0x24a>
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfprintf+0x24a>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	21 10       	cpse	r2, r1
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	11 23       	and	r17, r17
    2afa:	31 f0       	breq	.+12     	; 0x2b08 <vfprintf+0x25e>
    2afc:	21 2f       	mov	r18, r17
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	2f 5f       	subi	r18, 0xFF	; 255
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	82 0f       	add	r24, r18
    2b06:	93 1f       	adc	r25, r19
    2b08:	2f 2d       	mov	r18, r15
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	82 17       	cp	r24, r18
    2b0e:	93 07       	cpc	r25, r19
    2b10:	14 f4       	brge	.+4      	; 0x2b16 <vfprintf+0x26c>
    2b12:	f8 1a       	sub	r15, r24
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <vfprintf+0x26e>
    2b16:	f1 2c       	mov	r15, r1
    2b18:	83 2d       	mov	r24, r3
    2b1a:	89 70       	andi	r24, 0x09	; 9
    2b1c:	41 f4       	brne	.+16     	; 0x2b2e <vfprintf+0x284>
    2b1e:	ff 20       	and	r15, r15
    2b20:	31 f0       	breq	.+12     	; 0x2b2e <vfprintf+0x284>
    2b22:	b6 01       	movw	r22, r12
    2b24:	80 e2       	ldi	r24, 0x20	; 32
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	aa d3       	rcall	.+1876   	; 0x327e <fputc>
    2b2a:	fa 94       	dec	r15
    2b2c:	f8 cf       	rjmp	.-16     	; 0x2b1e <vfprintf+0x274>
    2b2e:	22 20       	and	r2, r2
    2b30:	21 f0       	breq	.+8      	; 0x2b3a <vfprintf+0x290>
    2b32:	b6 01       	movw	r22, r12
    2b34:	82 2d       	mov	r24, r2
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a2 d3       	rcall	.+1860   	; 0x327e <fputc>
    2b3a:	33 fc       	sbrc	r3, 3
    2b3c:	08 c0       	rjmp	.+16     	; 0x2b4e <vfprintf+0x2a4>
    2b3e:	ff 20       	and	r15, r15
    2b40:	31 f0       	breq	.+12     	; 0x2b4e <vfprintf+0x2a4>
    2b42:	b6 01       	movw	r22, r12
    2b44:	80 e3       	ldi	r24, 0x30	; 48
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9a d3       	rcall	.+1844   	; 0x327e <fputc>
    2b4a:	fa 94       	dec	r15
    2b4c:	f8 cf       	rjmp	.-16     	; 0x2b3e <vfprintf+0x294>
    2b4e:	37 fe       	sbrs	r3, 7
    2b50:	58 c0       	rjmp	.+176    	; 0x2c02 <vfprintf+0x358>
    2b52:	94 2d       	mov	r25, r4
    2b54:	85 2d       	mov	r24, r5
    2b56:	57 fe       	sbrs	r5, 7
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <vfprintf+0x2b4>
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	29 2e       	mov	r2, r25
    2b60:	38 2e       	mov	r3, r24
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	a2 01       	movw	r20, r4
    2b68:	4e 19       	sub	r20, r14
    2b6a:	51 09       	sbc	r21, r1
    2b6c:	5d 87       	std	Y+13, r21	; 0x0d
    2b6e:	4c 87       	std	Y+12, r20	; 0x0c
    2b70:	a2 01       	movw	r20, r4
    2b72:	42 19       	sub	r20, r2
    2b74:	53 09       	sbc	r21, r3
    2b76:	5f 87       	std	Y+15, r21	; 0x0f
    2b78:	4e 87       	std	Y+14, r20	; 0x0e
    2b7a:	61 2f       	mov	r22, r17
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	44 27       	eor	r20, r20
    2b80:	55 27       	eor	r21, r21
    2b82:	46 1b       	sub	r20, r22
    2b84:	57 0b       	sbc	r21, r23
    2b86:	59 8b       	std	Y+17, r21	; 0x11
    2b88:	48 8b       	std	Y+16, r20	; 0x10
    2b8a:	5f ef       	ldi	r21, 0xFF	; 255
    2b8c:	25 16       	cp	r2, r21
    2b8e:	35 06       	cpc	r3, r21
    2b90:	41 f4       	brne	.+16     	; 0x2ba2 <vfprintf+0x2f8>
    2b92:	b6 01       	movw	r22, r12
    2b94:	8e e2       	ldi	r24, 0x2E	; 46
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	2a 8b       	std	Y+18, r18	; 0x12
    2b9a:	3b 8b       	std	Y+19, r19	; 0x13
    2b9c:	70 d3       	rcall	.+1760   	; 0x327e <fputc>
    2b9e:	3b 89       	ldd	r19, Y+19	; 0x13
    2ba0:	2a 89       	ldd	r18, Y+18	; 0x12
    2ba2:	42 14       	cp	r4, r2
    2ba4:	53 04       	cpc	r5, r3
    2ba6:	6c f0       	brlt	.+26     	; 0x2bc2 <vfprintf+0x318>
    2ba8:	4c 85       	ldd	r20, Y+12	; 0x0c
    2baa:	5d 85       	ldd	r21, Y+13	; 0x0d
    2bac:	42 15       	cp	r20, r2
    2bae:	53 05       	cpc	r21, r3
    2bb0:	44 f4       	brge	.+16     	; 0x2bc2 <vfprintf+0x318>
    2bb2:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bb4:	ff 85       	ldd	r31, Y+15	; 0x0f
    2bb6:	e2 0f       	add	r30, r18
    2bb8:	f3 1f       	adc	r31, r19
    2bba:	e6 0d       	add	r30, r6
    2bbc:	f7 1d       	adc	r31, r7
    2bbe:	81 81       	ldd	r24, Z+1	; 0x01
    2bc0:	01 c0       	rjmp	.+2      	; 0x2bc4 <vfprintf+0x31a>
    2bc2:	80 e3       	ldi	r24, 0x30	; 48
    2bc4:	51 e0       	ldi	r21, 0x01	; 1
    2bc6:	25 1a       	sub	r2, r21
    2bc8:	31 08       	sbc	r3, r1
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	48 89       	ldd	r20, Y+16	; 0x10
    2bd0:	59 89       	ldd	r21, Y+17	; 0x11
    2bd2:	24 16       	cp	r2, r20
    2bd4:	35 06       	cpc	r3, r21
    2bd6:	44 f0       	brlt	.+16     	; 0x2be8 <vfprintf+0x33e>
    2bd8:	b6 01       	movw	r22, r12
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	2a 8b       	std	Y+18, r18	; 0x12
    2bde:	3b 8b       	std	Y+19, r19	; 0x13
    2be0:	4e d3       	rcall	.+1692   	; 0x327e <fputc>
    2be2:	2a 89       	ldd	r18, Y+18	; 0x12
    2be4:	3b 89       	ldd	r19, Y+19	; 0x13
    2be6:	d1 cf       	rjmp	.-94     	; 0x2b8a <vfprintf+0x2e0>
    2be8:	24 14       	cp	r2, r4
    2bea:	35 04       	cpc	r3, r5
    2bec:	39 f4       	brne	.+14     	; 0x2bfc <vfprintf+0x352>
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	96 33       	cpi	r25, 0x36	; 54
    2bf2:	18 f4       	brcc	.+6      	; 0x2bfa <vfprintf+0x350>
    2bf4:	95 33       	cpi	r25, 0x35	; 53
    2bf6:	11 f4       	brne	.+4      	; 0x2bfc <vfprintf+0x352>
    2bf8:	04 ff       	sbrs	r16, 4
    2bfa:	81 e3       	ldi	r24, 0x31	; 49
    2bfc:	b6 01       	movw	r22, r12
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	45 c0       	rjmp	.+138    	; 0x2c8c <vfprintf+0x3e2>
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	81 33       	cpi	r24, 0x31	; 49
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <vfprintf+0x360>
    2c08:	0f 7e       	andi	r16, 0xEF	; 239
    2c0a:	b6 01       	movw	r22, r12
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	37 d3       	rcall	.+1646   	; 0x327e <fputc>
    2c10:	11 11       	cpse	r17, r1
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <vfprintf+0x374>
    2c14:	34 fc       	sbrc	r3, 4
    2c16:	16 c0       	rjmp	.+44     	; 0x2c44 <vfprintf+0x39a>
    2c18:	85 e6       	ldi	r24, 0x65	; 101
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	15 c0       	rjmp	.+42     	; 0x2c48 <vfprintf+0x39e>
    2c1e:	b6 01       	movw	r22, r12
    2c20:	8e e2       	ldi	r24, 0x2E	; 46
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	2c d3       	rcall	.+1624   	; 0x327e <fputc>
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	ee 24       	eor	r14, r14
    2c2a:	e3 94       	inc	r14
    2c2c:	e8 0e       	add	r14, r24
    2c2e:	f3 01       	movw	r30, r6
    2c30:	e8 0f       	add	r30, r24
    2c32:	f1 1d       	adc	r31, r1
    2c34:	80 81       	ld	r24, Z
    2c36:	b6 01       	movw	r22, r12
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	21 d3       	rcall	.+1602   	; 0x327e <fputc>
    2c3c:	11 50       	subi	r17, 0x01	; 1
    2c3e:	8e 2d       	mov	r24, r14
    2c40:	99 f7       	brne	.-26     	; 0x2c28 <vfprintf+0x37e>
    2c42:	e8 cf       	rjmp	.-48     	; 0x2c14 <vfprintf+0x36a>
    2c44:	85 e4       	ldi	r24, 0x45	; 69
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	b6 01       	movw	r22, r12
    2c4a:	19 d3       	rcall	.+1586   	; 0x327e <fputc>
    2c4c:	57 fc       	sbrc	r5, 7
    2c4e:	05 c0       	rjmp	.+10     	; 0x2c5a <vfprintf+0x3b0>
    2c50:	41 14       	cp	r4, r1
    2c52:	51 04       	cpc	r5, r1
    2c54:	39 f4       	brne	.+14     	; 0x2c64 <vfprintf+0x3ba>
    2c56:	04 ff       	sbrs	r16, 4
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <vfprintf+0x3ba>
    2c5a:	51 94       	neg	r5
    2c5c:	41 94       	neg	r4
    2c5e:	51 08       	sbc	r5, r1
    2c60:	8d e2       	ldi	r24, 0x2D	; 45
    2c62:	01 c0       	rjmp	.+2      	; 0x2c66 <vfprintf+0x3bc>
    2c64:	8b e2       	ldi	r24, 0x2B	; 43
    2c66:	b6 01       	movw	r22, r12
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	09 d3       	rcall	.+1554   	; 0x327e <fputc>
    2c6c:	80 e3       	ldi	r24, 0x30	; 48
    2c6e:	9a e0       	ldi	r25, 0x0A	; 10
    2c70:	49 16       	cp	r4, r25
    2c72:	51 04       	cpc	r5, r1
    2c74:	2c f0       	brlt	.+10     	; 0x2c80 <vfprintf+0x3d6>
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	5a e0       	ldi	r21, 0x0A	; 10
    2c7a:	45 1a       	sub	r4, r21
    2c7c:	51 08       	sbc	r5, r1
    2c7e:	f7 cf       	rjmp	.-18     	; 0x2c6e <vfprintf+0x3c4>
    2c80:	b6 01       	movw	r22, r12
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	fc d2       	rcall	.+1528   	; 0x327e <fputc>
    2c86:	b6 01       	movw	r22, r12
    2c88:	c2 01       	movw	r24, r4
    2c8a:	c0 96       	adiw	r24, 0x30	; 48
    2c8c:	f8 d2       	rcall	.+1520   	; 0x327e <fputc>
    2c8e:	4c c1       	rjmp	.+664    	; 0x2f28 <vfprintf+0x67e>
    2c90:	83 36       	cpi	r24, 0x63	; 99
    2c92:	31 f0       	breq	.+12     	; 0x2ca0 <vfprintf+0x3f6>
    2c94:	83 37       	cpi	r24, 0x73	; 115
    2c96:	79 f0       	breq	.+30     	; 0x2cb6 <vfprintf+0x40c>
    2c98:	83 35       	cpi	r24, 0x53	; 83
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <vfprintf+0x3f4>
    2c9c:	54 c0       	rjmp	.+168    	; 0x2d46 <vfprintf+0x49c>
    2c9e:	20 c0       	rjmp	.+64     	; 0x2ce0 <vfprintf+0x436>
    2ca0:	52 01       	movw	r10, r4
    2ca2:	e2 e0       	ldi	r30, 0x02	; 2
    2ca4:	ae 0e       	add	r10, r30
    2ca6:	b1 1c       	adc	r11, r1
    2ca8:	f2 01       	movw	r30, r4
    2caa:	80 81       	ld	r24, Z
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	01 e0       	ldi	r16, 0x01	; 1
    2cb0:	10 e0       	ldi	r17, 0x00	; 0
    2cb2:	23 01       	movw	r4, r6
    2cb4:	13 c0       	rjmp	.+38     	; 0x2cdc <vfprintf+0x432>
    2cb6:	52 01       	movw	r10, r4
    2cb8:	f2 e0       	ldi	r31, 0x02	; 2
    2cba:	af 0e       	add	r10, r31
    2cbc:	b1 1c       	adc	r11, r1
    2cbe:	f2 01       	movw	r30, r4
    2cc0:	40 80       	ld	r4, Z
    2cc2:	51 80       	ldd	r5, Z+1	; 0x01
    2cc4:	26 ff       	sbrs	r18, 6
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <vfprintf+0x424>
    2cc8:	61 2f       	mov	r22, r17
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <vfprintf+0x428>
    2cce:	6f ef       	ldi	r22, 0xFF	; 255
    2cd0:	7f ef       	ldi	r23, 0xFF	; 255
    2cd2:	c2 01       	movw	r24, r4
    2cd4:	2a 8b       	std	Y+18, r18	; 0x12
    2cd6:	c8 d2       	rcall	.+1424   	; 0x3268 <strnlen>
    2cd8:	8c 01       	movw	r16, r24
    2cda:	2a 89       	ldd	r18, Y+18	; 0x12
    2cdc:	2f 77       	andi	r18, 0x7F	; 127
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <vfprintf+0x45e>
    2ce0:	52 01       	movw	r10, r4
    2ce2:	f2 e0       	ldi	r31, 0x02	; 2
    2ce4:	af 0e       	add	r10, r31
    2ce6:	b1 1c       	adc	r11, r1
    2ce8:	f2 01       	movw	r30, r4
    2cea:	40 80       	ld	r4, Z
    2cec:	51 80       	ldd	r5, Z+1	; 0x01
    2cee:	26 ff       	sbrs	r18, 6
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <vfprintf+0x44e>
    2cf2:	61 2f       	mov	r22, r17
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <vfprintf+0x452>
    2cf8:	6f ef       	ldi	r22, 0xFF	; 255
    2cfa:	7f ef       	ldi	r23, 0xFF	; 255
    2cfc:	c2 01       	movw	r24, r4
    2cfe:	2a 8b       	std	Y+18, r18	; 0x12
    2d00:	9f d2       	rcall	.+1342   	; 0x3240 <strnlen_P>
    2d02:	8c 01       	movw	r16, r24
    2d04:	2a 89       	ldd	r18, Y+18	; 0x12
    2d06:	20 68       	ori	r18, 0x80	; 128
    2d08:	32 2e       	mov	r3, r18
    2d0a:	23 fd       	sbrc	r18, 3
    2d0c:	18 c0       	rjmp	.+48     	; 0x2d3e <vfprintf+0x494>
    2d0e:	8f 2d       	mov	r24, r15
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	08 17       	cp	r16, r24
    2d14:	19 07       	cpc	r17, r25
    2d16:	98 f4       	brcc	.+38     	; 0x2d3e <vfprintf+0x494>
    2d18:	b6 01       	movw	r22, r12
    2d1a:	80 e2       	ldi	r24, 0x20	; 32
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	af d2       	rcall	.+1374   	; 0x327e <fputc>
    2d20:	fa 94       	dec	r15
    2d22:	f5 cf       	rjmp	.-22     	; 0x2d0e <vfprintf+0x464>
    2d24:	f2 01       	movw	r30, r4
    2d26:	37 fc       	sbrc	r3, 7
    2d28:	85 91       	lpm	r24, Z+
    2d2a:	37 fe       	sbrs	r3, 7
    2d2c:	81 91       	ld	r24, Z+
    2d2e:	2f 01       	movw	r4, r30
    2d30:	b6 01       	movw	r22, r12
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a4 d2       	rcall	.+1352   	; 0x327e <fputc>
    2d36:	f1 10       	cpse	r15, r1
    2d38:	fa 94       	dec	r15
    2d3a:	01 50       	subi	r16, 0x01	; 1
    2d3c:	11 09       	sbc	r17, r1
    2d3e:	01 15       	cp	r16, r1
    2d40:	11 05       	cpc	r17, r1
    2d42:	81 f7       	brne	.-32     	; 0x2d24 <vfprintf+0x47a>
    2d44:	f1 c0       	rjmp	.+482    	; 0x2f28 <vfprintf+0x67e>
    2d46:	84 36       	cpi	r24, 0x64	; 100
    2d48:	11 f0       	breq	.+4      	; 0x2d4e <vfprintf+0x4a4>
    2d4a:	89 36       	cpi	r24, 0x69	; 105
    2d4c:	51 f5       	brne	.+84     	; 0x2da2 <vfprintf+0x4f8>
    2d4e:	52 01       	movw	r10, r4
    2d50:	27 ff       	sbrs	r18, 7
    2d52:	09 c0       	rjmp	.+18     	; 0x2d66 <vfprintf+0x4bc>
    2d54:	f4 e0       	ldi	r31, 0x04	; 4
    2d56:	af 0e       	add	r10, r31
    2d58:	b1 1c       	adc	r11, r1
    2d5a:	f2 01       	movw	r30, r4
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	0a c0       	rjmp	.+20     	; 0x2d7a <vfprintf+0x4d0>
    2d66:	f2 e0       	ldi	r31, 0x02	; 2
    2d68:	af 0e       	add	r10, r31
    2d6a:	b1 1c       	adc	r11, r1
    2d6c:	f2 01       	movw	r30, r4
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	07 2e       	mov	r0, r23
    2d74:	00 0c       	add	r0, r0
    2d76:	88 0b       	sbc	r24, r24
    2d78:	99 0b       	sbc	r25, r25
    2d7a:	2f 76       	andi	r18, 0x6F	; 111
    2d7c:	32 2e       	mov	r3, r18
    2d7e:	97 ff       	sbrs	r25, 7
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <vfprintf+0x4ea>
    2d82:	90 95       	com	r25
    2d84:	80 95       	com	r24
    2d86:	70 95       	com	r23
    2d88:	61 95       	neg	r22
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	20 68       	ori	r18, 0x80	; 128
    2d92:	32 2e       	mov	r3, r18
    2d94:	2a e0       	ldi	r18, 0x0A	; 10
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	a3 01       	movw	r20, r6
    2d9a:	a9 d2       	rcall	.+1362   	; 0x32ee <__ultoa_invert>
    2d9c:	e8 2e       	mov	r14, r24
    2d9e:	e6 18       	sub	r14, r6
    2da0:	3e c0       	rjmp	.+124    	; 0x2e1e <vfprintf+0x574>
    2da2:	02 2f       	mov	r16, r18
    2da4:	85 37       	cpi	r24, 0x75	; 117
    2da6:	21 f4       	brne	.+8      	; 0x2db0 <vfprintf+0x506>
    2da8:	0f 7e       	andi	r16, 0xEF	; 239
    2daa:	2a e0       	ldi	r18, 0x0A	; 10
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	1d c0       	rjmp	.+58     	; 0x2dea <vfprintf+0x540>
    2db0:	09 7f       	andi	r16, 0xF9	; 249
    2db2:	8f 36       	cpi	r24, 0x6F	; 111
    2db4:	91 f0       	breq	.+36     	; 0x2dda <vfprintf+0x530>
    2db6:	18 f4       	brcc	.+6      	; 0x2dbe <vfprintf+0x514>
    2db8:	88 35       	cpi	r24, 0x58	; 88
    2dba:	59 f0       	breq	.+22     	; 0x2dd2 <vfprintf+0x528>
    2dbc:	be c0       	rjmp	.+380    	; 0x2f3a <vfprintf+0x690>
    2dbe:	80 37       	cpi	r24, 0x70	; 112
    2dc0:	19 f0       	breq	.+6      	; 0x2dc8 <vfprintf+0x51e>
    2dc2:	88 37       	cpi	r24, 0x78	; 120
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <vfprintf+0x520>
    2dc6:	b9 c0       	rjmp	.+370    	; 0x2f3a <vfprintf+0x690>
    2dc8:	00 61       	ori	r16, 0x10	; 16
    2dca:	04 ff       	sbrs	r16, 4
    2dcc:	09 c0       	rjmp	.+18     	; 0x2de0 <vfprintf+0x536>
    2dce:	04 60       	ori	r16, 0x04	; 4
    2dd0:	07 c0       	rjmp	.+14     	; 0x2de0 <vfprintf+0x536>
    2dd2:	24 ff       	sbrs	r18, 4
    2dd4:	08 c0       	rjmp	.+16     	; 0x2de6 <vfprintf+0x53c>
    2dd6:	06 60       	ori	r16, 0x06	; 6
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <vfprintf+0x53c>
    2dda:	28 e0       	ldi	r18, 0x08	; 8
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	05 c0       	rjmp	.+10     	; 0x2dea <vfprintf+0x540>
    2de0:	20 e1       	ldi	r18, 0x10	; 16
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <vfprintf+0x540>
    2de6:	20 e1       	ldi	r18, 0x10	; 16
    2de8:	32 e0       	ldi	r19, 0x02	; 2
    2dea:	52 01       	movw	r10, r4
    2dec:	07 ff       	sbrs	r16, 7
    2dee:	09 c0       	rjmp	.+18     	; 0x2e02 <vfprintf+0x558>
    2df0:	f4 e0       	ldi	r31, 0x04	; 4
    2df2:	af 0e       	add	r10, r31
    2df4:	b1 1c       	adc	r11, r1
    2df6:	f2 01       	movw	r30, r4
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	08 c0       	rjmp	.+16     	; 0x2e12 <vfprintf+0x568>
    2e02:	f2 e0       	ldi	r31, 0x02	; 2
    2e04:	af 0e       	add	r10, r31
    2e06:	b1 1c       	adc	r11, r1
    2e08:	f2 01       	movw	r30, r4
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a3 01       	movw	r20, r6
    2e14:	6c d2       	rcall	.+1240   	; 0x32ee <__ultoa_invert>
    2e16:	e8 2e       	mov	r14, r24
    2e18:	e6 18       	sub	r14, r6
    2e1a:	0f 77       	andi	r16, 0x7F	; 127
    2e1c:	30 2e       	mov	r3, r16
    2e1e:	36 fe       	sbrs	r3, 6
    2e20:	0b c0       	rjmp	.+22     	; 0x2e38 <vfprintf+0x58e>
    2e22:	33 2d       	mov	r19, r3
    2e24:	3e 7f       	andi	r19, 0xFE	; 254
    2e26:	e1 16       	cp	r14, r17
    2e28:	50 f4       	brcc	.+20     	; 0x2e3e <vfprintf+0x594>
    2e2a:	34 fe       	sbrs	r3, 4
    2e2c:	0a c0       	rjmp	.+20     	; 0x2e42 <vfprintf+0x598>
    2e2e:	32 fc       	sbrc	r3, 2
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <vfprintf+0x598>
    2e32:	33 2d       	mov	r19, r3
    2e34:	3e 7e       	andi	r19, 0xEE	; 238
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <vfprintf+0x598>
    2e38:	0e 2d       	mov	r16, r14
    2e3a:	33 2d       	mov	r19, r3
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <vfprintf+0x59a>
    2e3e:	0e 2d       	mov	r16, r14
    2e40:	01 c0       	rjmp	.+2      	; 0x2e44 <vfprintf+0x59a>
    2e42:	01 2f       	mov	r16, r17
    2e44:	34 ff       	sbrs	r19, 4
    2e46:	0c c0       	rjmp	.+24     	; 0x2e60 <vfprintf+0x5b6>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ee 0d       	add	r30, r14
    2e4c:	f1 1d       	adc	r31, r1
    2e4e:	80 81       	ld	r24, Z
    2e50:	80 33       	cpi	r24, 0x30	; 48
    2e52:	11 f4       	brne	.+4      	; 0x2e58 <vfprintf+0x5ae>
    2e54:	39 7e       	andi	r19, 0xE9	; 233
    2e56:	08 c0       	rjmp	.+16     	; 0x2e68 <vfprintf+0x5be>
    2e58:	32 ff       	sbrs	r19, 2
    2e5a:	05 c0       	rjmp	.+10     	; 0x2e66 <vfprintf+0x5bc>
    2e5c:	0e 5f       	subi	r16, 0xFE	; 254
    2e5e:	04 c0       	rjmp	.+8      	; 0x2e68 <vfprintf+0x5be>
    2e60:	83 2f       	mov	r24, r19
    2e62:	86 78       	andi	r24, 0x86	; 134
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <vfprintf+0x5be>
    2e66:	0f 5f       	subi	r16, 0xFF	; 255
    2e68:	33 fd       	sbrc	r19, 3
    2e6a:	12 c0       	rjmp	.+36     	; 0x2e90 <vfprintf+0x5e6>
    2e6c:	30 ff       	sbrs	r19, 0
    2e6e:	06 c0       	rjmp	.+12     	; 0x2e7c <vfprintf+0x5d2>
    2e70:	1e 2d       	mov	r17, r14
    2e72:	0f 15       	cp	r16, r15
    2e74:	18 f4       	brcc	.+6      	; 0x2e7c <vfprintf+0x5d2>
    2e76:	1f 0d       	add	r17, r15
    2e78:	10 1b       	sub	r17, r16
    2e7a:	0f 2d       	mov	r16, r15
    2e7c:	0f 15       	cp	r16, r15
    2e7e:	60 f4       	brcc	.+24     	; 0x2e98 <vfprintf+0x5ee>
    2e80:	b6 01       	movw	r22, r12
    2e82:	80 e2       	ldi	r24, 0x20	; 32
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	3b 8b       	std	Y+19, r19	; 0x13
    2e88:	fa d1       	rcall	.+1012   	; 0x327e <fputc>
    2e8a:	0f 5f       	subi	r16, 0xFF	; 255
    2e8c:	3b 89       	ldd	r19, Y+19	; 0x13
    2e8e:	f6 cf       	rjmp	.-20     	; 0x2e7c <vfprintf+0x5d2>
    2e90:	0f 15       	cp	r16, r15
    2e92:	10 f4       	brcc	.+4      	; 0x2e98 <vfprintf+0x5ee>
    2e94:	f0 1a       	sub	r15, r16
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <vfprintf+0x5f0>
    2e98:	f1 2c       	mov	r15, r1
    2e9a:	34 ff       	sbrs	r19, 4
    2e9c:	11 c0       	rjmp	.+34     	; 0x2ec0 <vfprintf+0x616>
    2e9e:	b6 01       	movw	r22, r12
    2ea0:	80 e3       	ldi	r24, 0x30	; 48
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	3b 8b       	std	Y+19, r19	; 0x13
    2ea6:	eb d1       	rcall	.+982    	; 0x327e <fputc>
    2ea8:	3b 89       	ldd	r19, Y+19	; 0x13
    2eaa:	32 ff       	sbrs	r19, 2
    2eac:	16 c0       	rjmp	.+44     	; 0x2eda <vfprintf+0x630>
    2eae:	31 fd       	sbrc	r19, 1
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <vfprintf+0x60e>
    2eb2:	88 e7       	ldi	r24, 0x78	; 120
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <vfprintf+0x612>
    2eb8:	88 e5       	ldi	r24, 0x58	; 88
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	b6 01       	movw	r22, r12
    2ebe:	0c c0       	rjmp	.+24     	; 0x2ed8 <vfprintf+0x62e>
    2ec0:	83 2f       	mov	r24, r19
    2ec2:	86 78       	andi	r24, 0x86	; 134
    2ec4:	51 f0       	breq	.+20     	; 0x2eda <vfprintf+0x630>
    2ec6:	31 ff       	sbrs	r19, 1
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <vfprintf+0x624>
    2eca:	8b e2       	ldi	r24, 0x2B	; 43
    2ecc:	01 c0       	rjmp	.+2      	; 0x2ed0 <vfprintf+0x626>
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	37 fd       	sbrc	r19, 7
    2ed2:	8d e2       	ldi	r24, 0x2D	; 45
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	d2 d1       	rcall	.+932    	; 0x327e <fputc>
    2eda:	e1 16       	cp	r14, r17
    2edc:	30 f4       	brcc	.+12     	; 0x2eea <vfprintf+0x640>
    2ede:	b6 01       	movw	r22, r12
    2ee0:	80 e3       	ldi	r24, 0x30	; 48
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	cc d1       	rcall	.+920    	; 0x327e <fputc>
    2ee6:	11 50       	subi	r17, 0x01	; 1
    2ee8:	f8 cf       	rjmp	.-16     	; 0x2eda <vfprintf+0x630>
    2eea:	ea 94       	dec	r14
    2eec:	f3 01       	movw	r30, r6
    2eee:	ee 0d       	add	r30, r14
    2ef0:	f1 1d       	adc	r31, r1
    2ef2:	80 81       	ld	r24, Z
    2ef4:	b6 01       	movw	r22, r12
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	c2 d1       	rcall	.+900    	; 0x327e <fputc>
    2efa:	e1 10       	cpse	r14, r1
    2efc:	f6 cf       	rjmp	.-20     	; 0x2eea <vfprintf+0x640>
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <vfprintf+0x67e>
    2f00:	f4 e0       	ldi	r31, 0x04	; 4
    2f02:	ff 15       	cp	r31, r15
    2f04:	48 f5       	brcc	.+82     	; 0x2f58 <vfprintf+0x6ae>
    2f06:	84 e0       	ldi	r24, 0x04	; 4
    2f08:	f8 1a       	sub	r15, r24
    2f0a:	33 fe       	sbrs	r3, 3
    2f0c:	1d c0       	rjmp	.+58     	; 0x2f48 <vfprintf+0x69e>
    2f0e:	21 10       	cpse	r2, r1
    2f10:	24 c0       	rjmp	.+72     	; 0x2f5a <vfprintf+0x6b0>
    2f12:	03 ff       	sbrs	r16, 3
    2f14:	27 c0       	rjmp	.+78     	; 0x2f64 <vfprintf+0x6ba>
    2f16:	0c e8       	ldi	r16, 0x8C	; 140
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	f3 2d       	mov	r31, r3
    2f1c:	f0 71       	andi	r31, 0x10	; 16
    2f1e:	3f 2e       	mov	r3, r31
    2f20:	f8 01       	movw	r30, r16
    2f22:	84 91       	lpm	r24, Z
    2f24:	81 11       	cpse	r24, r1
    2f26:	21 c0       	rjmp	.+66     	; 0x2f6a <vfprintf+0x6c0>
    2f28:	ff 20       	and	r15, r15
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <vfprintf+0x684>
    2f2c:	fd cc       	rjmp	.-1542   	; 0x2928 <vfprintf+0x7e>
    2f2e:	b6 01       	movw	r22, r12
    2f30:	80 e2       	ldi	r24, 0x20	; 32
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a4 d1       	rcall	.+840    	; 0x327e <fputc>
    2f36:	fa 94       	dec	r15
    2f38:	f7 cf       	rjmp	.-18     	; 0x2f28 <vfprintf+0x67e>
    2f3a:	f6 01       	movw	r30, r12
    2f3c:	86 81       	ldd	r24, Z+6	; 0x06
    2f3e:	97 81       	ldd	r25, Z+7	; 0x07
    2f40:	23 c0       	rjmp	.+70     	; 0x2f88 <vfprintf+0x6de>
    2f42:	8f ef       	ldi	r24, 0xFF	; 255
    2f44:	9f ef       	ldi	r25, 0xFF	; 255
    2f46:	20 c0       	rjmp	.+64     	; 0x2f88 <vfprintf+0x6de>
    2f48:	b6 01       	movw	r22, r12
    2f4a:	80 e2       	ldi	r24, 0x20	; 32
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	97 d1       	rcall	.+814    	; 0x327e <fputc>
    2f50:	fa 94       	dec	r15
    2f52:	f1 10       	cpse	r15, r1
    2f54:	f9 cf       	rjmp	.-14     	; 0x2f48 <vfprintf+0x69e>
    2f56:	db cf       	rjmp	.-74     	; 0x2f0e <vfprintf+0x664>
    2f58:	f1 2c       	mov	r15, r1
    2f5a:	b6 01       	movw	r22, r12
    2f5c:	82 2d       	mov	r24, r2
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	8e d1       	rcall	.+796    	; 0x327e <fputc>
    2f62:	d7 cf       	rjmp	.-82     	; 0x2f12 <vfprintf+0x668>
    2f64:	00 e9       	ldi	r16, 0x90	; 144
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	d8 cf       	rjmp	.-80     	; 0x2f1a <vfprintf+0x670>
    2f6a:	31 10       	cpse	r3, r1
    2f6c:	80 52       	subi	r24, 0x20	; 32
    2f6e:	b6 01       	movw	r22, r12
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	85 d1       	rcall	.+778    	; 0x327e <fputc>
    2f74:	0f 5f       	subi	r16, 0xFF	; 255
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	d3 cf       	rjmp	.-90     	; 0x2f20 <vfprintf+0x676>
    2f7a:	23 e0       	ldi	r18, 0x03	; 3
    2f7c:	2f 15       	cp	r18, r15
    2f7e:	10 f4       	brcc	.+4      	; 0x2f84 <vfprintf+0x6da>
    2f80:	83 e0       	ldi	r24, 0x03	; 3
    2f82:	c2 cf       	rjmp	.-124    	; 0x2f08 <vfprintf+0x65e>
    2f84:	f1 2c       	mov	r15, r1
    2f86:	c5 cf       	rjmp	.-118    	; 0x2f12 <vfprintf+0x668>
    2f88:	63 96       	adiw	r28, 0x13	; 19
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	df 90       	pop	r13
    2fa2:	cf 90       	pop	r12
    2fa4:	bf 90       	pop	r11
    2fa6:	af 90       	pop	r10
    2fa8:	9f 90       	pop	r9
    2faa:	8f 90       	pop	r8
    2fac:	7f 90       	pop	r7
    2fae:	6f 90       	pop	r6
    2fb0:	5f 90       	pop	r5
    2fb2:	4f 90       	pop	r4
    2fb4:	3f 90       	pop	r3
    2fb6:	2f 90       	pop	r2
    2fb8:	08 95       	ret

00002fba <__divmodhi4>:
    2fba:	97 fb       	bst	r25, 7
    2fbc:	07 2e       	mov	r0, r23
    2fbe:	16 f4       	brtc	.+4      	; 0x2fc4 <__divmodhi4+0xa>
    2fc0:	00 94       	com	r0
    2fc2:	06 d0       	rcall	.+12     	; 0x2fd0 <__divmodhi4_neg1>
    2fc4:	77 fd       	sbrc	r23, 7
    2fc6:	08 d0       	rcall	.+16     	; 0x2fd8 <__divmodhi4_neg2>
    2fc8:	46 d0       	rcall	.+140    	; 0x3056 <__udivmodhi4>
    2fca:	07 fc       	sbrc	r0, 7
    2fcc:	05 d0       	rcall	.+10     	; 0x2fd8 <__divmodhi4_neg2>
    2fce:	3e f4       	brtc	.+14     	; 0x2fde <__divmodhi4_exit>

00002fd0 <__divmodhi4_neg1>:
    2fd0:	90 95       	com	r25
    2fd2:	81 95       	neg	r24
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	08 95       	ret

00002fd8 <__divmodhi4_neg2>:
    2fd8:	70 95       	com	r23
    2fda:	61 95       	neg	r22
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255

00002fde <__divmodhi4_exit>:
    2fde:	08 95       	ret

00002fe0 <__udivmodsi4>:
    2fe0:	a1 e2       	ldi	r26, 0x21	; 33
    2fe2:	1a 2e       	mov	r1, r26
    2fe4:	aa 1b       	sub	r26, r26
    2fe6:	bb 1b       	sub	r27, r27
    2fe8:	fd 01       	movw	r30, r26
    2fea:	0d c0       	rjmp	.+26     	; 0x3006 <__udivmodsi4_ep>

00002fec <__udivmodsi4_loop>:
    2fec:	aa 1f       	adc	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	ee 1f       	adc	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	a2 17       	cp	r26, r18
    2ff6:	b3 07       	cpc	r27, r19
    2ff8:	e4 07       	cpc	r30, r20
    2ffa:	f5 07       	cpc	r31, r21
    2ffc:	20 f0       	brcs	.+8      	; 0x3006 <__udivmodsi4_ep>
    2ffe:	a2 1b       	sub	r26, r18
    3000:	b3 0b       	sbc	r27, r19
    3002:	e4 0b       	sbc	r30, r20
    3004:	f5 0b       	sbc	r31, r21

00003006 <__udivmodsi4_ep>:
    3006:	66 1f       	adc	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	88 1f       	adc	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	1a 94       	dec	r1
    3010:	69 f7       	brne	.-38     	; 0x2fec <__udivmodsi4_loop>
    3012:	60 95       	com	r22
    3014:	70 95       	com	r23
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	bd 01       	movw	r22, r26
    3020:	cf 01       	movw	r24, r30
    3022:	08 95       	ret

00003024 <__umulhisi3>:
    3024:	a2 9f       	mul	r26, r18
    3026:	b0 01       	movw	r22, r0
    3028:	b3 9f       	mul	r27, r19
    302a:	c0 01       	movw	r24, r0
    302c:	a3 9f       	mul	r26, r19
    302e:	70 0d       	add	r23, r0
    3030:	81 1d       	adc	r24, r1
    3032:	11 24       	eor	r1, r1
    3034:	91 1d       	adc	r25, r1
    3036:	b2 9f       	mul	r27, r18
    3038:	70 0d       	add	r23, r0
    303a:	81 1d       	adc	r24, r1
    303c:	11 24       	eor	r1, r1
    303e:	91 1d       	adc	r25, r1
    3040:	08 95       	ret

00003042 <__muluhisi3>:
    3042:	f0 df       	rcall	.-32     	; 0x3024 <__umulhisi3>
    3044:	a5 9f       	mul	r26, r21
    3046:	90 0d       	add	r25, r0
    3048:	b4 9f       	mul	r27, r20
    304a:	90 0d       	add	r25, r0
    304c:	a4 9f       	mul	r26, r20
    304e:	80 0d       	add	r24, r0
    3050:	91 1d       	adc	r25, r1
    3052:	11 24       	eor	r1, r1
    3054:	08 95       	ret

00003056 <__udivmodhi4>:
    3056:	aa 1b       	sub	r26, r26
    3058:	bb 1b       	sub	r27, r27
    305a:	51 e1       	ldi	r21, 0x11	; 17
    305c:	07 c0       	rjmp	.+14     	; 0x306c <__udivmodhi4_ep>

0000305e <__udivmodhi4_loop>:
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	a6 17       	cp	r26, r22
    3064:	b7 07       	cpc	r27, r23
    3066:	10 f0       	brcs	.+4      	; 0x306c <__udivmodhi4_ep>
    3068:	a6 1b       	sub	r26, r22
    306a:	b7 0b       	sbc	r27, r23

0000306c <__udivmodhi4_ep>:
    306c:	88 1f       	adc	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	5a 95       	dec	r21
    3072:	a9 f7       	brne	.-22     	; 0x305e <__udivmodhi4_loop>
    3074:	80 95       	com	r24
    3076:	90 95       	com	r25
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	08 95       	ret

0000307e <__tablejump2__>:
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	00 24       	eor	r0, r0
    3084:	00 1c       	adc	r0, r0
    3086:	0b be       	out	0x3b, r0	; 59
    3088:	07 90       	elpm	r0, Z+
    308a:	f6 91       	elpm	r31, Z
    308c:	e0 2d       	mov	r30, r0
    308e:	09 94       	ijmp

00003090 <__ftoa_engine>:
    3090:	28 30       	cpi	r18, 0x08	; 8
    3092:	08 f0       	brcs	.+2      	; 0x3096 <__ftoa_engine+0x6>
    3094:	27 e0       	ldi	r18, 0x07	; 7
    3096:	33 27       	eor	r19, r19
    3098:	da 01       	movw	r26, r20
    309a:	99 0f       	add	r25, r25
    309c:	31 1d       	adc	r19, r1
    309e:	87 fd       	sbrc	r24, 7
    30a0:	91 60       	ori	r25, 0x01	; 1
    30a2:	00 96       	adiw	r24, 0x00	; 0
    30a4:	61 05       	cpc	r22, r1
    30a6:	71 05       	cpc	r23, r1
    30a8:	39 f4       	brne	.+14     	; 0x30b8 <__ftoa_engine+0x28>
    30aa:	32 60       	ori	r19, 0x02	; 2
    30ac:	2e 5f       	subi	r18, 0xFE	; 254
    30ae:	3d 93       	st	X+, r19
    30b0:	30 e3       	ldi	r19, 0x30	; 48
    30b2:	2a 95       	dec	r18
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <__ftoa_engine+0x1e>
    30b6:	08 95       	ret
    30b8:	9f 3f       	cpi	r25, 0xFF	; 255
    30ba:	30 f0       	brcs	.+12     	; 0x30c8 <__ftoa_engine+0x38>
    30bc:	80 38       	cpi	r24, 0x80	; 128
    30be:	71 05       	cpc	r23, r1
    30c0:	61 05       	cpc	r22, r1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <__ftoa_engine+0x36>
    30c4:	3c 5f       	subi	r19, 0xFC	; 252
    30c6:	3c 5f       	subi	r19, 0xFC	; 252
    30c8:	3d 93       	st	X+, r19
    30ca:	91 30       	cpi	r25, 0x01	; 1
    30cc:	08 f0       	brcs	.+2      	; 0x30d0 <__ftoa_engine+0x40>
    30ce:	80 68       	ori	r24, 0x80	; 128
    30d0:	91 1d       	adc	r25, r1
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	1f 93       	push	r17
    30d8:	0f 93       	push	r16
    30da:	ff 92       	push	r15
    30dc:	ef 92       	push	r14
    30de:	19 2f       	mov	r17, r25
    30e0:	98 7f       	andi	r25, 0xF8	; 248
    30e2:	96 95       	lsr	r25
    30e4:	e9 2f       	mov	r30, r25
    30e6:	96 95       	lsr	r25
    30e8:	96 95       	lsr	r25
    30ea:	e9 0f       	add	r30, r25
    30ec:	ff 27       	eor	r31, r31
    30ee:	e2 51       	subi	r30, 0x12	; 18
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	99 27       	eor	r25, r25
    30f4:	33 27       	eor	r19, r19
    30f6:	ee 24       	eor	r14, r14
    30f8:	ff 24       	eor	r15, r15
    30fa:	a7 01       	movw	r20, r14
    30fc:	e7 01       	movw	r28, r14
    30fe:	05 90       	lpm	r0, Z+
    3100:	08 94       	sec
    3102:	07 94       	ror	r0
    3104:	28 f4       	brcc	.+10     	; 0x3110 <__ftoa_engine+0x80>
    3106:	36 0f       	add	r19, r22
    3108:	e7 1e       	adc	r14, r23
    310a:	f8 1e       	adc	r15, r24
    310c:	49 1f       	adc	r20, r25
    310e:	51 1d       	adc	r21, r1
    3110:	66 0f       	add	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	06 94       	lsr	r0
    311a:	a1 f7       	brne	.-24     	; 0x3104 <__ftoa_engine+0x74>
    311c:	05 90       	lpm	r0, Z+
    311e:	07 94       	ror	r0
    3120:	28 f4       	brcc	.+10     	; 0x312c <__ftoa_engine+0x9c>
    3122:	e7 0e       	add	r14, r23
    3124:	f8 1e       	adc	r15, r24
    3126:	49 1f       	adc	r20, r25
    3128:	56 1f       	adc	r21, r22
    312a:	c1 1d       	adc	r28, r1
    312c:	77 0f       	add	r23, r23
    312e:	88 1f       	adc	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	66 1f       	adc	r22, r22
    3134:	06 94       	lsr	r0
    3136:	a1 f7       	brne	.-24     	; 0x3120 <__ftoa_engine+0x90>
    3138:	05 90       	lpm	r0, Z+
    313a:	07 94       	ror	r0
    313c:	28 f4       	brcc	.+10     	; 0x3148 <__ftoa_engine+0xb8>
    313e:	f8 0e       	add	r15, r24
    3140:	49 1f       	adc	r20, r25
    3142:	56 1f       	adc	r21, r22
    3144:	c7 1f       	adc	r28, r23
    3146:	d1 1d       	adc	r29, r1
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	06 94       	lsr	r0
    3152:	a1 f7       	brne	.-24     	; 0x313c <__ftoa_engine+0xac>
    3154:	05 90       	lpm	r0, Z+
    3156:	07 94       	ror	r0
    3158:	20 f4       	brcc	.+8      	; 0x3162 <__ftoa_engine+0xd2>
    315a:	49 0f       	add	r20, r25
    315c:	56 1f       	adc	r21, r22
    315e:	c7 1f       	adc	r28, r23
    3160:	d8 1f       	adc	r29, r24
    3162:	99 0f       	add	r25, r25
    3164:	66 1f       	adc	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	88 1f       	adc	r24, r24
    316a:	06 94       	lsr	r0
    316c:	a9 f7       	brne	.-22     	; 0x3158 <__ftoa_engine+0xc8>
    316e:	84 91       	lpm	r24, Z
    3170:	10 95       	com	r17
    3172:	17 70       	andi	r17, 0x07	; 7
    3174:	41 f0       	breq	.+16     	; 0x3186 <__ftoa_engine+0xf6>
    3176:	d6 95       	lsr	r29
    3178:	c7 95       	ror	r28
    317a:	57 95       	ror	r21
    317c:	47 95       	ror	r20
    317e:	f7 94       	ror	r15
    3180:	e7 94       	ror	r14
    3182:	1a 95       	dec	r17
    3184:	c1 f7       	brne	.-16     	; 0x3176 <__ftoa_engine+0xe6>
    3186:	e4 e9       	ldi	r30, 0x94	; 148
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	68 94       	set
    318c:	15 90       	lpm	r1, Z+
    318e:	15 91       	lpm	r17, Z+
    3190:	35 91       	lpm	r19, Z+
    3192:	65 91       	lpm	r22, Z+
    3194:	95 91       	lpm	r25, Z+
    3196:	05 90       	lpm	r0, Z+
    3198:	7f e2       	ldi	r23, 0x2F	; 47
    319a:	73 95       	inc	r23
    319c:	e1 18       	sub	r14, r1
    319e:	f1 0a       	sbc	r15, r17
    31a0:	43 0b       	sbc	r20, r19
    31a2:	56 0b       	sbc	r21, r22
    31a4:	c9 0b       	sbc	r28, r25
    31a6:	d0 09       	sbc	r29, r0
    31a8:	c0 f7       	brcc	.-16     	; 0x319a <__ftoa_engine+0x10a>
    31aa:	e1 0c       	add	r14, r1
    31ac:	f1 1e       	adc	r15, r17
    31ae:	43 1f       	adc	r20, r19
    31b0:	56 1f       	adc	r21, r22
    31b2:	c9 1f       	adc	r28, r25
    31b4:	d0 1d       	adc	r29, r0
    31b6:	7e f4       	brtc	.+30     	; 0x31d6 <__ftoa_engine+0x146>
    31b8:	70 33       	cpi	r23, 0x30	; 48
    31ba:	11 f4       	brne	.+4      	; 0x31c0 <__ftoa_engine+0x130>
    31bc:	8a 95       	dec	r24
    31be:	e6 cf       	rjmp	.-52     	; 0x318c <__ftoa_engine+0xfc>
    31c0:	e8 94       	clt
    31c2:	01 50       	subi	r16, 0x01	; 1
    31c4:	30 f0       	brcs	.+12     	; 0x31d2 <__ftoa_engine+0x142>
    31c6:	08 0f       	add	r16, r24
    31c8:	0a f4       	brpl	.+2      	; 0x31cc <__ftoa_engine+0x13c>
    31ca:	00 27       	eor	r16, r16
    31cc:	02 17       	cp	r16, r18
    31ce:	08 f4       	brcc	.+2      	; 0x31d2 <__ftoa_engine+0x142>
    31d0:	20 2f       	mov	r18, r16
    31d2:	23 95       	inc	r18
    31d4:	02 2f       	mov	r16, r18
    31d6:	7a 33       	cpi	r23, 0x3A	; 58
    31d8:	28 f0       	brcs	.+10     	; 0x31e4 <__ftoa_engine+0x154>
    31da:	79 e3       	ldi	r23, 0x39	; 57
    31dc:	7d 93       	st	X+, r23
    31de:	2a 95       	dec	r18
    31e0:	e9 f7       	brne	.-6      	; 0x31dc <__ftoa_engine+0x14c>
    31e2:	10 c0       	rjmp	.+32     	; 0x3204 <__ftoa_engine+0x174>
    31e4:	7d 93       	st	X+, r23
    31e6:	2a 95       	dec	r18
    31e8:	89 f6       	brne	.-94     	; 0x318c <__ftoa_engine+0xfc>
    31ea:	06 94       	lsr	r0
    31ec:	97 95       	ror	r25
    31ee:	67 95       	ror	r22
    31f0:	37 95       	ror	r19
    31f2:	17 95       	ror	r17
    31f4:	17 94       	ror	r1
    31f6:	e1 18       	sub	r14, r1
    31f8:	f1 0a       	sbc	r15, r17
    31fa:	43 0b       	sbc	r20, r19
    31fc:	56 0b       	sbc	r21, r22
    31fe:	c9 0b       	sbc	r28, r25
    3200:	d0 09       	sbc	r29, r0
    3202:	98 f0       	brcs	.+38     	; 0x322a <__ftoa_engine+0x19a>
    3204:	23 95       	inc	r18
    3206:	7e 91       	ld	r23, -X
    3208:	73 95       	inc	r23
    320a:	7a 33       	cpi	r23, 0x3A	; 58
    320c:	08 f0       	brcs	.+2      	; 0x3210 <__ftoa_engine+0x180>
    320e:	70 e3       	ldi	r23, 0x30	; 48
    3210:	7c 93       	st	X, r23
    3212:	20 13       	cpse	r18, r16
    3214:	b8 f7       	brcc	.-18     	; 0x3204 <__ftoa_engine+0x174>
    3216:	7e 91       	ld	r23, -X
    3218:	70 61       	ori	r23, 0x10	; 16
    321a:	7d 93       	st	X+, r23
    321c:	30 f0       	brcs	.+12     	; 0x322a <__ftoa_engine+0x19a>
    321e:	83 95       	inc	r24
    3220:	71 e3       	ldi	r23, 0x31	; 49
    3222:	7d 93       	st	X+, r23
    3224:	70 e3       	ldi	r23, 0x30	; 48
    3226:	2a 95       	dec	r18
    3228:	e1 f7       	brne	.-8      	; 0x3222 <__ftoa_engine+0x192>
    322a:	11 24       	eor	r1, r1
    322c:	ef 90       	pop	r14
    322e:	ff 90       	pop	r15
    3230:	0f 91       	pop	r16
    3232:	1f 91       	pop	r17
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	99 27       	eor	r25, r25
    323a:	87 fd       	sbrc	r24, 7
    323c:	90 95       	com	r25
    323e:	08 95       	ret

00003240 <strnlen_P>:
    3240:	fc 01       	movw	r30, r24
    3242:	05 90       	lpm	r0, Z+
    3244:	61 50       	subi	r22, 0x01	; 1
    3246:	70 40       	sbci	r23, 0x00	; 0
    3248:	01 10       	cpse	r0, r1
    324a:	d8 f7       	brcc	.-10     	; 0x3242 <strnlen_P+0x2>
    324c:	80 95       	com	r24
    324e:	90 95       	com	r25
    3250:	8e 0f       	add	r24, r30
    3252:	9f 1f       	adc	r25, r31
    3254:	08 95       	ret

00003256 <memcpy>:
    3256:	fb 01       	movw	r30, r22
    3258:	dc 01       	movw	r26, r24
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <memcpy+0xa>
    325c:	01 90       	ld	r0, Z+
    325e:	0d 92       	st	X+, r0
    3260:	41 50       	subi	r20, 0x01	; 1
    3262:	50 40       	sbci	r21, 0x00	; 0
    3264:	d8 f7       	brcc	.-10     	; 0x325c <memcpy+0x6>
    3266:	08 95       	ret

00003268 <strnlen>:
    3268:	fc 01       	movw	r30, r24
    326a:	61 50       	subi	r22, 0x01	; 1
    326c:	70 40       	sbci	r23, 0x00	; 0
    326e:	01 90       	ld	r0, Z+
    3270:	01 10       	cpse	r0, r1
    3272:	d8 f7       	brcc	.-10     	; 0x326a <strnlen+0x2>
    3274:	80 95       	com	r24
    3276:	90 95       	com	r25
    3278:	8e 0f       	add	r24, r30
    327a:	9f 1f       	adc	r25, r31
    327c:	08 95       	ret

0000327e <fputc>:
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	fb 01       	movw	r30, r22
    3288:	23 81       	ldd	r18, Z+3	; 0x03
    328a:	21 fd       	sbrc	r18, 1
    328c:	03 c0       	rjmp	.+6      	; 0x3294 <fputc+0x16>
    328e:	8f ef       	ldi	r24, 0xFF	; 255
    3290:	9f ef       	ldi	r25, 0xFF	; 255
    3292:	28 c0       	rjmp	.+80     	; 0x32e4 <fputc+0x66>
    3294:	22 ff       	sbrs	r18, 2
    3296:	16 c0       	rjmp	.+44     	; 0x32c4 <fputc+0x46>
    3298:	46 81       	ldd	r20, Z+6	; 0x06
    329a:	57 81       	ldd	r21, Z+7	; 0x07
    329c:	24 81       	ldd	r18, Z+4	; 0x04
    329e:	35 81       	ldd	r19, Z+5	; 0x05
    32a0:	42 17       	cp	r20, r18
    32a2:	53 07       	cpc	r21, r19
    32a4:	44 f4       	brge	.+16     	; 0x32b6 <fputc+0x38>
    32a6:	a0 81       	ld	r26, Z
    32a8:	b1 81       	ldd	r27, Z+1	; 0x01
    32aa:	9d 01       	movw	r18, r26
    32ac:	2f 5f       	subi	r18, 0xFF	; 255
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	31 83       	std	Z+1, r19	; 0x01
    32b2:	20 83       	st	Z, r18
    32b4:	8c 93       	st	X, r24
    32b6:	26 81       	ldd	r18, Z+6	; 0x06
    32b8:	37 81       	ldd	r19, Z+7	; 0x07
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	37 83       	std	Z+7, r19	; 0x07
    32c0:	26 83       	std	Z+6, r18	; 0x06
    32c2:	10 c0       	rjmp	.+32     	; 0x32e4 <fputc+0x66>
    32c4:	eb 01       	movw	r28, r22
    32c6:	09 2f       	mov	r16, r25
    32c8:	18 2f       	mov	r17, r24
    32ca:	00 84       	ldd	r0, Z+8	; 0x08
    32cc:	f1 85       	ldd	r31, Z+9	; 0x09
    32ce:	e0 2d       	mov	r30, r0
    32d0:	09 95       	icall
    32d2:	89 2b       	or	r24, r25
    32d4:	e1 f6       	brne	.-72     	; 0x328e <fputc+0x10>
    32d6:	8e 81       	ldd	r24, Y+6	; 0x06
    32d8:	9f 81       	ldd	r25, Y+7	; 0x07
    32da:	01 96       	adiw	r24, 0x01	; 1
    32dc:	9f 83       	std	Y+7, r25	; 0x07
    32de:	8e 83       	std	Y+6, r24	; 0x06
    32e0:	81 2f       	mov	r24, r17
    32e2:	90 2f       	mov	r25, r16
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <__ultoa_invert>:
    32ee:	fa 01       	movw	r30, r20
    32f0:	aa 27       	eor	r26, r26
    32f2:	28 30       	cpi	r18, 0x08	; 8
    32f4:	51 f1       	breq	.+84     	; 0x334a <__ultoa_invert+0x5c>
    32f6:	20 31       	cpi	r18, 0x10	; 16
    32f8:	81 f1       	breq	.+96     	; 0x335a <__ultoa_invert+0x6c>
    32fa:	e8 94       	clt
    32fc:	6f 93       	push	r22
    32fe:	6e 7f       	andi	r22, 0xFE	; 254
    3300:	6e 5f       	subi	r22, 0xFE	; 254
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	8f 4f       	sbci	r24, 0xFF	; 255
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	af 4f       	sbci	r26, 0xFF	; 255
    330a:	b1 e0       	ldi	r27, 0x01	; 1
    330c:	3e d0       	rcall	.+124    	; 0x338a <__ultoa_invert+0x9c>
    330e:	b4 e0       	ldi	r27, 0x04	; 4
    3310:	3c d0       	rcall	.+120    	; 0x338a <__ultoa_invert+0x9c>
    3312:	67 0f       	add	r22, r23
    3314:	78 1f       	adc	r23, r24
    3316:	89 1f       	adc	r24, r25
    3318:	9a 1f       	adc	r25, r26
    331a:	a1 1d       	adc	r26, r1
    331c:	68 0f       	add	r22, r24
    331e:	79 1f       	adc	r23, r25
    3320:	8a 1f       	adc	r24, r26
    3322:	91 1d       	adc	r25, r1
    3324:	a1 1d       	adc	r26, r1
    3326:	6a 0f       	add	r22, r26
    3328:	71 1d       	adc	r23, r1
    332a:	81 1d       	adc	r24, r1
    332c:	91 1d       	adc	r25, r1
    332e:	a1 1d       	adc	r26, r1
    3330:	20 d0       	rcall	.+64     	; 0x3372 <__ultoa_invert+0x84>
    3332:	09 f4       	brne	.+2      	; 0x3336 <__ultoa_invert+0x48>
    3334:	68 94       	set
    3336:	3f 91       	pop	r19
    3338:	2a e0       	ldi	r18, 0x0A	; 10
    333a:	26 9f       	mul	r18, r22
    333c:	11 24       	eor	r1, r1
    333e:	30 19       	sub	r19, r0
    3340:	30 5d       	subi	r19, 0xD0	; 208
    3342:	31 93       	st	Z+, r19
    3344:	de f6       	brtc	.-74     	; 0x32fc <__ultoa_invert+0xe>
    3346:	cf 01       	movw	r24, r30
    3348:	08 95       	ret
    334a:	46 2f       	mov	r20, r22
    334c:	47 70       	andi	r20, 0x07	; 7
    334e:	40 5d       	subi	r20, 0xD0	; 208
    3350:	41 93       	st	Z+, r20
    3352:	b3 e0       	ldi	r27, 0x03	; 3
    3354:	0f d0       	rcall	.+30     	; 0x3374 <__ultoa_invert+0x86>
    3356:	c9 f7       	brne	.-14     	; 0x334a <__ultoa_invert+0x5c>
    3358:	f6 cf       	rjmp	.-20     	; 0x3346 <__ultoa_invert+0x58>
    335a:	46 2f       	mov	r20, r22
    335c:	4f 70       	andi	r20, 0x0F	; 15
    335e:	40 5d       	subi	r20, 0xD0	; 208
    3360:	4a 33       	cpi	r20, 0x3A	; 58
    3362:	18 f0       	brcs	.+6      	; 0x336a <__ultoa_invert+0x7c>
    3364:	49 5d       	subi	r20, 0xD9	; 217
    3366:	31 fd       	sbrc	r19, 1
    3368:	40 52       	subi	r20, 0x20	; 32
    336a:	41 93       	st	Z+, r20
    336c:	02 d0       	rcall	.+4      	; 0x3372 <__ultoa_invert+0x84>
    336e:	a9 f7       	brne	.-22     	; 0x335a <__ultoa_invert+0x6c>
    3370:	ea cf       	rjmp	.-44     	; 0x3346 <__ultoa_invert+0x58>
    3372:	b4 e0       	ldi	r27, 0x04	; 4
    3374:	a6 95       	lsr	r26
    3376:	97 95       	ror	r25
    3378:	87 95       	ror	r24
    337a:	77 95       	ror	r23
    337c:	67 95       	ror	r22
    337e:	ba 95       	dec	r27
    3380:	c9 f7       	brne	.-14     	; 0x3374 <__ultoa_invert+0x86>
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	61 05       	cpc	r22, r1
    3386:	71 05       	cpc	r23, r1
    3388:	08 95       	ret
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	0a 2e       	mov	r0, r26
    3390:	06 94       	lsr	r0
    3392:	57 95       	ror	r21
    3394:	47 95       	ror	r20
    3396:	37 95       	ror	r19
    3398:	27 95       	ror	r18
    339a:	ba 95       	dec	r27
    339c:	c9 f7       	brne	.-14     	; 0x3390 <__ultoa_invert+0xa2>
    339e:	62 0f       	add	r22, r18
    33a0:	73 1f       	adc	r23, r19
    33a2:	84 1f       	adc	r24, r20
    33a4:	95 1f       	adc	r25, r21
    33a6:	a0 1d       	adc	r26, r0
    33a8:	08 95       	ret

000033aa <_exit>:
    33aa:	f8 94       	cli

000033ac <__stop_program>:
    33ac:	ff cf       	rjmp	.-2      	; 0x33ac <__stop_program>
