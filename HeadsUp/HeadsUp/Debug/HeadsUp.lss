
HeadsUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00003160  000031f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800170  00800170  00003264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fc0  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c10  00000000  00000000  00005c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  00007880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a4f5  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000101c  00000000  00000000  000124d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000134f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000036a3  00000000  00000000  00013675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c0       	rjmp	.+398    	; 0x190 <__ctors_end>
       2:	00 00       	nop
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	ec c0       	rjmp	.+472    	; 0x1e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ea c0       	rjmp	.+468    	; 0x1e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c3       	rjmp	.+1876   	; 0x766 <__vector_4>
      12:	00 00       	nop
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	e4 c0       	rjmp	.+456    	; 0x1e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e0 c0       	rjmp	.+448    	; 0x1e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	de c0       	rjmp	.+444    	; 0x1e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	dc c0       	rjmp	.+440    	; 0x1e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	da c0       	rjmp	.+436    	; 0x1e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	d4 c0       	rjmp	.+424    	; 0x1e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d2 c0       	rjmp	.+420    	; 0x1e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d0 c0       	rjmp	.+416    	; 0x1e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ce c0       	rjmp	.+412    	; 0x1e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	cc c0       	rjmp	.+408    	; 0x1e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ca c0       	rjmp	.+404    	; 0x1e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c8 c0       	rjmp	.+400    	; 0x1e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	c6 c0       	rjmp	.+396    	; 0x1e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	c4 c0       	rjmp	.+392    	; 0x1e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c2 c0       	rjmp	.+388    	; 0x1e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c0 c0       	rjmp	.+384    	; 0x1e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	be c0       	rjmp	.+380    	; 0x1e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	bc c0       	rjmp	.+376    	; 0x1e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ba c0       	rjmp	.+372    	; 0x1e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b8 c0       	rjmp	.+368    	; 0x1e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	b6 c0       	rjmp	.+364    	; 0x1e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	b4 c0       	rjmp	.+360    	; 0x1e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b2 c0       	rjmp	.+356    	; 0x1e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b0 c0       	rjmp	.+352    	; 0x1e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	ae c0       	rjmp	.+348    	; 0x1e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	ac c0       	rjmp	.+344    	; 0x1e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2177>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_start>:
     18e:	f6 05       	cpc	r31, r6

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d0 e4       	ldi	r29, 0x40	; 64
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e0 e6       	ldi	r30, 0x60	; 96
     1a4:	f1 e3       	ldi	r31, 0x31	; 49
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a0 37       	cpi	r26, 0x70	; 112
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a0 e7       	ldi	r26, 0x70	; 112
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a3 37       	cpi	r26, 0x73	; 115
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>

000001c6 <__do_global_ctors>:
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	c8 ec       	ldi	r28, 0xC8	; 200
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__do_global_ctors+0x10>
     1ce:	21 97       	sbiw	r28, 0x01	; 1
     1d0:	fe 01       	movw	r30, r28
     1d2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__tablejump2__>
     1d6:	c7 3c       	cpi	r28, 0xC7	; 199
     1d8:	d1 07       	cpc	r29, r17
     1da:	c9 f7       	brne	.-14     	; 0x1ce <__do_global_ctors+0x8>
     1dc:	b7 d0       	rcall	.+366    	; 0x34c <main>
     1de:	0c 94 ae 18 	jmp	0x315c	; 0x315c <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <_ZN3batC1Ev>:
#include "bat.h"


bat::bat(){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <_ZN3batC1Ev+0x6>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9a 83       	std	Y+2, r25	; 0x02
     1f0:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX |= (1 << REFS1) | (1 << MUX0);	// MUX0 picks ADC1 Pin
     1f2:	8c e7       	ldi	r24, 0x7C	; 124
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2c e7       	ldi	r18, 0x7C	; 124
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	21 68       	ori	r18, 0x81	; 129
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// Enable ADC prescaler  to 64 (125KHz @ 8 MHz)
     204:	8a e7       	ldi	r24, 0x7A	; 122
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2a e7       	ldi	r18, 0x7A	; 122
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	26 60       	ori	r18, 0x06	; 6
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
	DIDR0 |= (1 << ADC1D);	// Disable digital input buffer on ADC1 pin
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2e e7       	ldi	r18, 0x7E	; 126
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	22 60       	ori	r18, 0x02	; 2
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
	
}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN3rtc3getEv>:

class rtc{

	public:
		rtc();
		rtc_time get(){ return get_time(); }
     232:	2f 92       	push	r2
     234:	3f 92       	push	r3
     236:	4f 92       	push	r4
     238:	5f 92       	push	r5
     23a:	6f 92       	push	r6
     23c:	7f 92       	push	r7
     23e:	8f 92       	push	r8
     240:	9f 92       	push	r9
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	29 97       	sbiw	r28, 0x09	; 9
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	99 87       	std	Y+9, r25	; 0x09
     268:	88 87       	std	Y+8, r24	; 0x08
     26a:	88 85       	ldd	r24, Y+8	; 0x08
     26c:	99 85       	ldd	r25, Y+9	; 0x09
     26e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN3rtc8get_timeEv>
     272:	a2 2e       	mov	r10, r18
     274:	b3 2e       	mov	r11, r19
     276:	c4 2e       	mov	r12, r20
     278:	d5 2e       	mov	r13, r21
     27a:	e6 2e       	mov	r14, r22
     27c:	f7 2e       	mov	r15, r23
     27e:	08 2f       	mov	r16, r24
     280:	19 2f       	mov	r17, r25
     282:	2a 2d       	mov	r18, r10
     284:	3b 2d       	mov	r19, r11
     286:	4c 2d       	mov	r20, r12
     288:	5d 2d       	mov	r21, r13
     28a:	6e 2d       	mov	r22, r14
     28c:	7f 2d       	mov	r23, r15
     28e:	80 2f       	mov	r24, r16
     290:	91 2f       	mov	r25, r17
     292:	29 83       	std	Y+1, r18	; 0x01
     294:	3a 83       	std	Y+2, r19	; 0x02
     296:	4b 83       	std	Y+3, r20	; 0x03
     298:	5c 83       	std	Y+4, r21	; 0x04
     29a:	6d 83       	std	Y+5, r22	; 0x05
     29c:	7e 83       	std	Y+6, r23	; 0x06
     29e:	8f 83       	std	Y+7, r24	; 0x07
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	69 81       	ldd	r22, Y+1	; 0x01
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	5a 81       	ldd	r21, Y+2	; 0x02
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	4b 81       	ldd	r20, Y+3	; 0x03
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	3c 81       	ldd	r19, Y+4	; 0x04
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	2d 81       	ldd	r18, Y+5	; 0x05
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9e 81       	ldd	r25, Y+6	; 0x06
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	8f 81       	ldd	r24, Y+7	; 0x07
     2bc:	26 2e       	mov	r2, r22
     2be:	35 2e       	mov	r3, r21
     2c0:	44 2e       	mov	r4, r20
     2c2:	53 2e       	mov	r5, r19
     2c4:	62 2e       	mov	r6, r18
     2c6:	79 2e       	mov	r7, r25
     2c8:	88 2e       	mov	r8, r24
     2ca:	a2 2c       	mov	r10, r2
     2cc:	b3 2c       	mov	r11, r3
     2ce:	c4 2c       	mov	r12, r4
     2d0:	d5 2c       	mov	r13, r5
     2d2:	e6 2c       	mov	r14, r6
     2d4:	f7 2c       	mov	r15, r7
     2d6:	08 2d       	mov	r16, r8
     2d8:	19 2d       	mov	r17, r9
     2da:	2a 2d       	mov	r18, r10
     2dc:	3b 2d       	mov	r19, r11
     2de:	4c 2d       	mov	r20, r12
     2e0:	5d 2d       	mov	r21, r13
     2e2:	6e 2d       	mov	r22, r14
     2e4:	7f 2d       	mov	r23, r15
     2e6:	80 2f       	mov	r24, r16
     2e8:	91 2f       	mov	r25, r17
     2ea:	29 96       	adiw	r28, 0x09	; 9
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
     302:	df 90       	pop	r13
     304:	cf 90       	pop	r12
     306:	bf 90       	pop	r11
     308:	af 90       	pop	r10
     30a:	9f 90       	pop	r9
     30c:	8f 90       	pop	r8
     30e:	7f 90       	pop	r7
     310:	6f 90       	pop	r6
     312:	5f 90       	pop	r5
     314:	4f 90       	pop	r4
     316:	3f 90       	pop	r3
     318:	2f 90       	pop	r2
     31a:	08 95       	ret

0000031c <_ZN3rtc3setEP8rtc_time>:
		void set( rtc_time* rtmSetTime ){ set_time( rtmSetTime ); }
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <_ZN3rtc3setEP8rtc_time+0x6>
     322:	00 d0       	rcall	.+0      	; 0x324 <_ZN3rtc3setEP8rtc_time+0x8>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	9a 83       	std	Y+2, r25	; 0x02
     32a:	89 83       	std	Y+1, r24	; 0x01
     32c:	7c 83       	std	Y+4, r23	; 0x04
     32e:	6b 83       	std	Y+3, r22	; 0x03
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	b9 01       	movw	r22, r18
     33a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_ZN3rtc8set_timeEP8rtc_time>
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <main>:
lcd lcdNHD;
bat batLiPo;
rtc_time rtmCurrent{0x50, 0x59, 0x72, 0x02, 0x11, 0x04, 0x16};


int main(){
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	28 97       	sbiw	r28, 0x08	; 8
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
	
	rtc_alarm rtaAlarm0 { 0x00, 0x00, 0x80, 0x80 };
     364:	19 82       	std	Y+1, r1	; 0x01
     366:	1a 82       	std	Y+2, r1	; 0x02
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	8b 83       	std	Y+3, r24	; 0x03
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	8c 83       	std	Y+4, r24	; 0x04
	rtc_alarm rtaAlarm1 { 0x80, 0x80, 0x80, 0x80 };
     370:	80 e8       	ldi	r24, 0x80	; 128
     372:	8d 83       	std	Y+5, r24	; 0x05
     374:	80 e8       	ldi	r24, 0x80	; 128
     376:	8e 83       	std	Y+6, r24	; 0x06
     378:	80 e8       	ldi	r24, 0x80	; 128
     37a:	8f 83       	std	Y+7, r24	; 0x07
     37c:	80 e8       	ldi	r24, 0x80	; 128
     37e:	88 87       	std	Y+8, r24	; 0x08

	
	HeadsUp_Init();
     380:	26 d0       	rcall	.+76     	; 0x3ce <_Z12HeadsUp_Initv>
	
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_0, rtaAlarm0 );
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	ab 81       	ldd	r26, Y+3	; 0x03
     388:	bc 81       	ldd	r27, Y+4	; 0x04
     38a:	8c 01       	movw	r16, r24
     38c:	9d 01       	movw	r18, r26
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	80 e7       	ldi	r24, 0x70	; 112
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN3rtc5alarmEhh9rtc_alarm>
	rtcDS.alarm( RTC_ALARM_SET, RTC_ALARM_1, rtaAlarm1 );
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	af 81       	ldd	r26, Y+7	; 0x07
     3a0:	b8 85       	ldd	r27, Y+8	; 0x08
     3a2:	8c 01       	movw	r16, r24
     3a4:	9d 01       	movw	r18, r26
     3a6:	41 e0       	ldi	r20, 0x01	; 1
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	80 e7       	ldi	r24, 0x70	; 112
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN3rtc5alarmEhh9rtc_alarm>
		
	Menu_Main();
     3b2:	ed d2       	rcall	.+1498   	; 0x98e <_Z9Menu_Mainv>
	
	return 0;
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0

}
     3b8:	28 96       	adiw	r28, 0x08	; 8
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <_Z12HeadsUp_Initv>:


void HeadsUp_Init(){
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	60 97       	sbiw	r28, 0x10	; 16
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char uchCurrentTime[ LCD_LINE_SIZE ] ;
	
	
	Test_On_PortA0();
     3ee:	a0 d0       	rcall	.+320    	; 0x530 <_Z14Test_On_PortA0v>
	
	rtcDS.set(&rtmCurrent);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	80 e7       	ldi	r24, 0x70	; 112
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	91 df       	rcall	.-222    	; 0x31c <_ZN3rtc3setEP8rtc_time>

	Enable_PCINT2();
     3fa:	66 d0       	rcall	.+204    	; 0x4c8 <_Z13Enable_PCINT2v>
	Enable_PCINT3();
     3fc:	31 d0       	rcall	.+98     	; 0x460 <_Z13Enable_PCINT3v>
	sei();
     3fe:	78 94       	sei
	
	rtcDS.rtm_to_char( rtmCurrent, uchCurrentTime, LCD_LINE_SIZE );
     400:	68 94       	set
     402:	cc 24       	eor	r12, r12
     404:	c4 f8       	bld	r12, 4
     406:	d1 2c       	mov	r13, r1
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	7c 01       	movw	r14, r24
     40e:	00 91 00 01 	lds	r16, 0x0100
     412:	10 91 01 01 	lds	r17, 0x0101
     416:	20 91 02 01 	lds	r18, 0x0102
     41a:	30 91 03 01 	lds	r19, 0x0103
     41e:	40 91 04 01 	lds	r20, 0x0104
     422:	50 91 05 01 	lds	r21, 0x0105
     426:	60 91 06 01 	lds	r22, 0x0106
     42a:	80 e7       	ldi	r24, 0x70	; 112
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN3rtc11rtm_to_charE8rtc_timePhj>
	lcdNHD.print( uchCurrentTime , LCD_LINE_TOP );
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	ce 01       	movw	r24, r28
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	bc 01       	movw	r22, r24
     43a:	81 e7       	ldi	r24, 0x71	; 113
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN3lcd5printEPhh>

}
     442:	60 96       	adiw	r28, 0x10	; 16
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <_Z13Enable_PCINT3v>:


void Enable_PCINT3(){
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA3 );
     468:	81 e2       	ldi	r24, 0x21	; 33
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	21 e2       	ldi	r18, 0x21	; 33
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	f9 01       	movw	r30, r18
     472:	20 81       	ld	r18, Z
     474:	27 7f       	andi	r18, 0xF7	; 247
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA3;
     47a:	82 e2       	ldi	r24, 0x22	; 34
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	22 e2       	ldi	r18, 0x22	; 34
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	28 60       	ori	r18, 0x08	; 8
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     48c:	88 e6       	ldi	r24, 0x68	; 104
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	28 e6       	ldi	r18, 0x68	; 104
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	21 60       	ori	r18, 0x01	; 1
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT3;
     49e:	8b e6       	ldi	r24, 0x6B	; 107
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	2b e6       	ldi	r18, 0x6B	; 107
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	f9 01       	movw	r30, r18
     4a8:	20 81       	ld	r18, Z
     4aa:	28 60       	ori	r18, 0x08	; 8
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     4b0:	8b e3       	ldi	r24, 0x3B	; 59
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	2b e3       	ldi	r18, 0x3B	; 59
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	21 60       	ori	r18, 0x01	; 1
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18

}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <_Z13Enable_PCINT2v>:


void Enable_PCINT2(){
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
	
	DDRA &= ~( 1 << PORTA2 );
     4d0:	81 e2       	ldi	r24, 0x21	; 33
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	21 e2       	ldi	r18, 0x21	; 33
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	2b 7f       	andi	r18, 0xFB	; 251
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
	PORTA |= 1 << PORTA2;
     4e2:	82 e2       	ldi	r24, 0x22	; 34
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	22 e2       	ldi	r18, 0x22	; 34
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	24 60       	ori	r18, 0x04	; 4
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	PCICR |= 1 << PCIE0;
     4f4:	88 e6       	ldi	r24, 0x68	; 104
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	28 e6       	ldi	r18, 0x68	; 104
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	21 60       	ori	r18, 0x01	; 1
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	PCMSK0 |= 1 << PCINT2;
     506:	8b e6       	ldi	r24, 0x6B	; 107
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	2b e6       	ldi	r18, 0x6B	; 107
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	24 60       	ori	r18, 0x04	; 4
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
	PCIFR |= 1 << PCIF0;
     518:	8b e3       	ldi	r24, 0x3B	; 59
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2b e3       	ldi	r18, 0x3B	; 59
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	21 60       	ori	r18, 0x01	; 1
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18

}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <_Z14Test_On_PortA0v>:


void Test_On_PortA0(){
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	6c 97       	sbiw	r28, 0x1c	; 28
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
	
	DDRA |= 1 << PORTA0;
     544:	81 e2       	ldi	r24, 0x21	; 33
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	21 e2       	ldi	r18, 0x21	; 33
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	21 60       	ori	r18, 0x01	; 1
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
	
	PORTA |= ( 1 << PINA0);
     556:	82 e2       	ldi	r24, 0x22	; 34
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	22 e2       	ldi	r18, 0x22	; 34
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	21 60       	ori	r18, 0x01	; 1
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	aa e7       	ldi	r26, 0x7A	; 122
     56e:	b3 e4       	ldi	r27, 0x43	; 67
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	ab 83       	std	Y+3, r26	; 0x03
     576:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4a e7       	ldi	r20, 0x7A	; 122
     57e:	53 e4       	ldi	r21, 0x43	; 67
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	8d 83       	std	Y+5, r24	; 0x05
     592:	9e 83       	std	Y+6, r25	; 0x06
     594:	af 83       	std	Y+7, r26	; 0x07
     596:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	5f e3       	ldi	r21, 0x3F	; 63
     5a0:	6d 81       	ldd	r22, Y+5	; 0x05
     5a2:	7e 81       	ldd	r23, Y+6	; 0x06
     5a4:	8f 81       	ldd	r24, Y+7	; 0x07
     5a6:	98 85       	ldd	r25, Y+8	; 0x08
     5a8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
     5ac:	88 23       	and	r24, r24
     5ae:	2c f4       	brge	.+10     	; 0x5ba <_Z14Test_On_PortA0v+0x8a>
		__ticks = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	9a 87       	std	Y+10, r25	; 0x0a
     5b6:	89 87       	std	Y+9, r24	; 0x09
     5b8:	3f c0       	rjmp	.+126    	; 0x638 <_Z14Test_On_PortA0v+0x108>
	else if (__tmp > 65535)
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	3f ef       	ldi	r19, 0xFF	; 255
     5be:	4f e7       	ldi	r20, 0x7F	; 127
     5c0:	57 e4       	ldi	r21, 0x47	; 71
     5c2:	6d 81       	ldd	r22, Y+5	; 0x05
     5c4:	7e 81       	ldd	r23, Y+6	; 0x06
     5c6:	8f 81       	ldd	r24, Y+7	; 0x07
     5c8:	98 85       	ldd	r25, Y+8	; 0x08
     5ca:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
     5ce:	18 16       	cp	r1, r24
     5d0:	4c f5       	brge	.+82     	; 0x624 <_Z14Test_On_PortA0v+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e2       	ldi	r20, 0x20	; 32
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7a 81       	ldd	r23, Y+2	; 0x02
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	bc 01       	movw	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	9a 87       	std	Y+10, r25	; 0x0a
     5f8:	89 87       	std	Y+9, r24	; 0x09
     5fa:	0f c0       	rjmp	.+30     	; 0x61a <_Z14Test_On_PortA0v+0xea>
     5fc:	89 e1       	ldi	r24, 0x19	; 25
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	9c 87       	std	Y+12, r25	; 0x0c
     602:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     604:	8b 85       	ldd	r24, Y+11	; 0x0b
     606:	9c 85       	ldd	r25, Y+12	; 0x0c
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <_Z14Test_On_PortA0v+0xd8>
     60c:	9c 87       	std	Y+12, r25	; 0x0c
     60e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	9a 87       	std	Y+10, r25	; 0x0a
     618:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	89 2b       	or	r24, r25
     620:	69 f7       	brne	.-38     	; 0x5fc <_Z14Test_On_PortA0v+0xcc>
     622:	14 c0       	rjmp	.+40     	; 0x64c <_Z14Test_On_PortA0v+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     624:	6d 81       	ldd	r22, Y+5	; 0x05
     626:	7e 81       	ldd	r23, Y+6	; 0x06
     628:	8f 81       	ldd	r24, Y+7	; 0x07
     62a:	98 85       	ldd	r25, Y+8	; 0x08
     62c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	9a 87       	std	Y+10, r25	; 0x0a
     636:	89 87       	std	Y+9, r24	; 0x09
     638:	89 85       	ldd	r24, Y+9	; 0x09
     63a:	9a 85       	ldd	r25, Y+10	; 0x0a
     63c:	9e 87       	std	Y+14, r25	; 0x0e
     63e:	8d 87       	std	Y+13, r24	; 0x0d
     640:	8d 85       	ldd	r24, Y+13	; 0x0d
     642:	9e 85       	ldd	r25, Y+14	; 0x0e
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <_Z14Test_On_PortA0v+0x114>
     648:	9e 87       	std	Y+14, r25	; 0x0e
     64a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(250);
	PORTA &= ~( 1 << PINA0);
     64c:	82 e2       	ldi	r24, 0x22	; 34
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	22 e2       	ldi	r18, 0x22	; 34
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	2e 7f       	andi	r18, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	aa e7       	ldi	r26, 0x7A	; 122
     664:	b3 e4       	ldi	r27, 0x43	; 67
     666:	8f 87       	std	Y+15, r24	; 0x0f
     668:	98 8b       	std	Y+16, r25	; 0x10
     66a:	a9 8b       	std	Y+17, r26	; 0x11
     66c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	4a e7       	ldi	r20, 0x7A	; 122
     674:	53 e4       	ldi	r21, 0x43	; 67
     676:	6f 85       	ldd	r22, Y+15	; 0x0f
     678:	78 89       	ldd	r23, Y+16	; 0x10
     67a:	89 89       	ldd	r24, Y+17	; 0x11
     67c:	9a 89       	ldd	r25, Y+18	; 0x12
     67e:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	8b 8b       	std	Y+19, r24	; 0x13
     688:	9c 8b       	std	Y+20, r25	; 0x14
     68a:	ad 8b       	std	Y+21, r26	; 0x15
     68c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e8       	ldi	r20, 0x80	; 128
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	6b 89       	ldd	r22, Y+19	; 0x13
     698:	7c 89       	ldd	r23, Y+20	; 0x14
     69a:	8d 89       	ldd	r24, Y+21	; 0x15
     69c:	9e 89       	ldd	r25, Y+22	; 0x16
     69e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
     6a2:	88 23       	and	r24, r24
     6a4:	2c f4       	brge	.+10     	; 0x6b0 <_Z14Test_On_PortA0v+0x180>
		__ticks = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	98 8f       	std	Y+24, r25	; 0x18
     6ac:	8f 8b       	std	Y+23, r24	; 0x17
     6ae:	3f c0       	rjmp	.+126    	; 0x72e <_Z14Test_On_PortA0v+0x1fe>
	else if (__tmp > 65535)
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	3f ef       	ldi	r19, 0xFF	; 255
     6b4:	4f e7       	ldi	r20, 0x7F	; 127
     6b6:	57 e4       	ldi	r21, 0x47	; 71
     6b8:	6b 89       	ldd	r22, Y+19	; 0x13
     6ba:	7c 89       	ldd	r23, Y+20	; 0x14
     6bc:	8d 89       	ldd	r24, Y+21	; 0x15
     6be:	9e 89       	ldd	r25, Y+22	; 0x16
     6c0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	4c f5       	brge	.+82     	; 0x71a <_Z14Test_On_PortA0v+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	6f 85       	ldd	r22, Y+15	; 0x0f
     6d2:	78 89       	ldd	r23, Y+16	; 0x10
     6d4:	89 89       	ldd	r24, Y+17	; 0x11
     6d6:	9a 89       	ldd	r25, Y+18	; 0x12
     6d8:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	98 8f       	std	Y+24, r25	; 0x18
     6ee:	8f 8b       	std	Y+23, r24	; 0x17
     6f0:	0f c0       	rjmp	.+30     	; 0x710 <_Z14Test_On_PortA0v+0x1e0>
     6f2:	89 e1       	ldi	r24, 0x19	; 25
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9a 8f       	std	Y+26, r25	; 0x1a
     6f8:	89 8f       	std	Y+25, r24	; 0x19
     6fa:	89 8d       	ldd	r24, Y+25	; 0x19
     6fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <_Z14Test_On_PortA0v+0x1ce>
     702:	9a 8f       	std	Y+26, r25	; 0x1a
     704:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     706:	8f 89       	ldd	r24, Y+23	; 0x17
     708:	98 8d       	ldd	r25, Y+24	; 0x18
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	98 8f       	std	Y+24, r25	; 0x18
     70e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     710:	8f 89       	ldd	r24, Y+23	; 0x17
     712:	98 8d       	ldd	r25, Y+24	; 0x18
     714:	89 2b       	or	r24, r25
     716:	69 f7       	brne	.-38     	; 0x6f2 <_Z14Test_On_PortA0v+0x1c2>
     718:	14 c0       	rjmp	.+40     	; 0x742 <_Z14Test_On_PortA0v+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71a:	6b 89       	ldd	r22, Y+19	; 0x13
     71c:	7c 89       	ldd	r23, Y+20	; 0x14
     71e:	8d 89       	ldd	r24, Y+21	; 0x15
     720:	9e 89       	ldd	r25, Y+22	; 0x16
     722:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	98 8f       	std	Y+24, r25	; 0x18
     72c:	8f 8b       	std	Y+23, r24	; 0x17
     72e:	8f 89       	ldd	r24, Y+23	; 0x17
     730:	98 8d       	ldd	r25, Y+24	; 0x18
     732:	9c 8f       	std	Y+28, r25	; 0x1c
     734:	8b 8f       	std	Y+27, r24	; 0x1b
     736:	8b 8d       	ldd	r24, Y+27	; 0x1b
     738:	9c 8d       	ldd	r25, Y+28	; 0x1c
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <_Z14Test_On_PortA0v+0x20a>
     73e:	9c 8f       	std	Y+28, r25	; 0x1c
     740:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(250);
	PORTA |= ( 1 << PINA0);
     742:	82 e2       	ldi	r24, 0x22	; 34
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	22 e2       	ldi	r18, 0x22	; 34
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	f9 01       	movw	r30, r18
     74c:	20 81       	ld	r18, Z
     74e:	21 60       	ori	r18, 0x01	; 1
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
	
}
     754:	6c 96       	adiw	r28, 0x1c	; 28
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <__vector_4>:


ISR( PCINT0_vect ){
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	00 90 5f 00 	lds	r0, 0x005F
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	00 90 5b 00 	lds	r0, 0x005B
     776:	0f 92       	push	r0
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	2f 97       	sbiw	r28, 0x0f	; 15
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrPinA;
	
	
	memcpy(( void* )&chrPinA, ( void* )0x20, 1 );
     7ae:	80 91 20 00 	lds	r24, 0x0020
     7b2:	8f 87       	std	Y+15, r24	; 0x0f
	
	if((( chrPinA >> PORTA3 ) & 0x01 ) == 0x00 ){
     7b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	88 70       	andi	r24, 0x08	; 8
     7bc:	99 27       	eor	r25, r25
     7be:	89 2b       	or	r24, r25
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_4+0x5e>
     7c2:	93 c0       	rjmp	.+294    	; 0x8ea <__vector_4+0x184>
		DDRA |= 1 << PORTA4;
     7c4:	81 e2       	ldi	r24, 0x21	; 33
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	21 e2       	ldi	r18, 0x21	; 33
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	20 61       	ori	r18, 0x10	; 16
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
		PORTA |= ( 1 << PINA4);
     7d6:	82 e2       	ldi	r24, 0x22	; 34
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	22 e2       	ldi	r18, 0x22	; 34
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	20 61       	ori	r18, 0x10	; 16
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	aa e7       	ldi	r26, 0x7A	; 122
     7ee:	b3 e4       	ldi	r27, 0x43	; 67
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	ab 83       	std	Y+3, r26	; 0x03
     7f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	4a e7       	ldi	r20, 0x7A	; 122
     7fe:	53 e4       	ldi	r21, 0x43	; 67
     800:	69 81       	ldd	r22, Y+1	; 0x01
     802:	7a 81       	ldd	r23, Y+2	; 0x02
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	8d 83       	std	Y+5, r24	; 0x05
     812:	9e 83       	std	Y+6, r25	; 0x06
     814:	af 83       	std	Y+7, r26	; 0x07
     816:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e8       	ldi	r20, 0x80	; 128
     81e:	5f e3       	ldi	r21, 0x3F	; 63
     820:	6d 81       	ldd	r22, Y+5	; 0x05
     822:	7e 81       	ldd	r23, Y+6	; 0x06
     824:	8f 81       	ldd	r24, Y+7	; 0x07
     826:	98 85       	ldd	r25, Y+8	; 0x08
     828:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
     82c:	88 23       	and	r24, r24
     82e:	2c f4       	brge	.+10     	; 0x83a <__vector_4+0xd4>
		__ticks = 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	89 87       	std	Y+9, r24	; 0x09
     838:	3f c0       	rjmp	.+126    	; 0x8b8 <__vector_4+0x152>
	else if (__tmp > 65535)
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	3f ef       	ldi	r19, 0xFF	; 255
     83e:	4f e7       	ldi	r20, 0x7F	; 127
     840:	57 e4       	ldi	r21, 0x47	; 71
     842:	6d 81       	ldd	r22, Y+5	; 0x05
     844:	7e 81       	ldd	r23, Y+6	; 0x06
     846:	8f 81       	ldd	r24, Y+7	; 0x07
     848:	98 85       	ldd	r25, Y+8	; 0x08
     84a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	4c f5       	brge	.+82     	; 0x8a4 <__vector_4+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e2       	ldi	r20, 0x20	; 32
     858:	51 e4       	ldi	r21, 0x41	; 65
     85a:	69 81       	ldd	r22, Y+1	; 0x01
     85c:	7a 81       	ldd	r23, Y+2	; 0x02
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	bc 01       	movw	r22, r24
     86c:	cd 01       	movw	r24, r26
     86e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     872:	dc 01       	movw	r26, r24
     874:	cb 01       	movw	r24, r22
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	89 87       	std	Y+9, r24	; 0x09
     87a:	0f c0       	rjmp	.+30     	; 0x89a <__vector_4+0x134>
     87c:	89 e1       	ldi	r24, 0x19	; 25
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 87       	std	Y+12, r25	; 0x0c
     882:	8b 87       	std	Y+11, r24	; 0x0b
     884:	8b 85       	ldd	r24, Y+11	; 0x0b
     886:	9c 85       	ldd	r25, Y+12	; 0x0c
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <__vector_4+0x122>
     88c:	9c 87       	std	Y+12, r25	; 0x0c
     88e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     890:	89 85       	ldd	r24, Y+9	; 0x09
     892:	9a 85       	ldd	r25, Y+10	; 0x0a
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	9a 87       	std	Y+10, r25	; 0x0a
     898:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89a:	89 85       	ldd	r24, Y+9	; 0x09
     89c:	9a 85       	ldd	r25, Y+10	; 0x0a
     89e:	89 2b       	or	r24, r25
     8a0:	69 f7       	brne	.-38     	; 0x87c <__vector_4+0x116>
     8a2:	14 c0       	rjmp	.+40     	; 0x8cc <__vector_4+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a4:	6d 81       	ldd	r22, Y+5	; 0x05
     8a6:	7e 81       	ldd	r23, Y+6	; 0x06
     8a8:	8f 81       	ldd	r24, Y+7	; 0x07
     8aa:	98 85       	ldd	r25, Y+8	; 0x08
     8ac:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	9a 87       	std	Y+10, r25	; 0x0a
     8b6:	89 87       	std	Y+9, r24	; 0x09
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	9e 87       	std	Y+14, r25	; 0x0e
     8be:	8d 87       	std	Y+13, r24	; 0x0d
     8c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__vector_4+0x15e>
     8c8:	9e 87       	std	Y+14, r25	; 0x0e
     8ca:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(250);
		PORTA &= ~( 1 << PINA4);
     8cc:	82 e2       	ldi	r24, 0x22	; 34
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	22 e2       	ldi	r18, 0x22	; 34
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 81       	ld	r18, Z
     8d8:	2f 7e       	andi	r18, 0xEF	; 239
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
		rtcDS.clear_interupt( RTC_ALARM_0 );
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	80 e7       	ldi	r24, 0x70	; 112
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN3rtc14clear_interuptEh>
     8e8:	2d c0       	rjmp	.+90     	; 0x944 <__vector_4+0x1de>
		}else if((( chrPinA >> PORTA2 ) & 0x01 ) == 0x00 ){
     8ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	84 70       	andi	r24, 0x04	; 4
     8f2:	99 27       	eor	r25, r25
     8f4:	89 2b       	or	r24, r25
     8f6:	31 f5       	brne	.+76     	; 0x944 <__vector_4+0x1de>
		rtmCurrent = rtcDS.get();
     8f8:	80 e7       	ldi	r24, 0x70	; 112
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	9a dc       	rcall	.-1740   	; 0x232 <_ZN3rtc3getEv>
     8fe:	a2 2e       	mov	r10, r18
     900:	b3 2e       	mov	r11, r19
     902:	c4 2e       	mov	r12, r20
     904:	d5 2e       	mov	r13, r21
     906:	e6 2e       	mov	r14, r22
     908:	f7 2e       	mov	r15, r23
     90a:	08 2f       	mov	r16, r24
     90c:	19 2f       	mov	r17, r25
     90e:	2a 2d       	mov	r18, r10
     910:	3b 2d       	mov	r19, r11
     912:	4c 2d       	mov	r20, r12
     914:	5d 2d       	mov	r21, r13
     916:	6e 2d       	mov	r22, r14
     918:	7f 2d       	mov	r23, r15
     91a:	80 2f       	mov	r24, r16
     91c:	91 2f       	mov	r25, r17
     91e:	20 93 00 01 	sts	0x0100, r18
     922:	30 93 01 01 	sts	0x0101, r19
     926:	40 93 02 01 	sts	0x0102, r20
     92a:	50 93 03 01 	sts	0x0103, r21
     92e:	60 93 04 01 	sts	0x0104, r22
     932:	70 93 05 01 	sts	0x0105, r23
     936:	80 93 06 01 	sts	0x0106, r24
		rtcDS.clear_interupt( RTC_ALARM_1 );
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	80 e7       	ldi	r24, 0x70	; 112
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN3rtc14clear_interuptEh>
	}
	
}
     944:	2f 96       	adiw	r28, 0x0f	; 15
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	0f 90       	pop	r0
     97e:	00 92 5b 00 	sts	0x005B, r0
     982:	0f 90       	pop	r0
     984:	00 92 5f 00 	sts	0x005F, r0
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <_Z9Menu_Mainv>:


void Menu_Main(){
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	e3 97       	sbiw	r28, 0x33	; 51
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char chrMenuTop[LCD_LINE_SIZE];
	unsigned char chrMenuBot[LCD_LINE_SIZE]{ 'A', 'L', 'R', 'M', '|', 'B', 'A', 'T', '9', '3', '%', '|', 'O', 'P', 'T', 'S' };
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	e7 e0       	ldi	r30, 0x07	; 7
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	de 01       	movw	r26, r28
     9b6:	92 96       	adiw	r26, 0x22	; 34
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <_Z9Menu_Mainv+0x2a>
	uint8_t valMenuState{ MAIN_STATE_ALARMS };
     9c0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCursorState{ CURSOR_OFF };
     9c2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t valCursorDivider{ 0 };
     9c4:	1a 82       	std	Y+2, r1	; 0x02
	
	lcdNHD.print( chrMenuBot , LCD_LINE_BOTTOM );
     9c6:	ce 01       	movw	r24, r28
     9c8:	82 96       	adiw	r24, 0x22	; 34
     9ca:	41 e0       	ldi	r20, 0x01	; 1
     9cc:	bc 01       	movw	r22, r24
     9ce:	81 e7       	ldi	r24, 0x71	; 113
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	88 d6       	rcall	.+3344   	; 0x16e4 <_ZN3lcd5printEPhh>
	
	for(;;){
		rtcDS.rtm_to_char( rtmCurrent, chrMenuTop, LCD_LINE_SIZE );
     9d4:	ce 01       	movw	r24, r28
     9d6:	42 96       	adiw	r24, 0x12	; 18
     9d8:	68 94       	set
     9da:	cc 24       	eor	r12, r12
     9dc:	c4 f8       	bld	r12, 4
     9de:	d1 2c       	mov	r13, r1
     9e0:	7c 01       	movw	r14, r24
     9e2:	00 91 00 01 	lds	r16, 0x0100
     9e6:	10 91 01 01 	lds	r17, 0x0101
     9ea:	20 91 02 01 	lds	r18, 0x0102
     9ee:	30 91 03 01 	lds	r19, 0x0103
     9f2:	40 91 04 01 	lds	r20, 0x0104
     9f6:	50 91 05 01 	lds	r21, 0x0105
     9fa:	60 91 06 01 	lds	r22, 0x0106
     9fe:	80 e7       	ldi	r24, 0x70	; 112
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN3rtc11rtm_to_charE8rtc_timePhj>
		lcdNHD.print( chrMenuTop , LCD_LINE_TOP );
     a06:	ce 01       	movw	r24, r28
     a08:	42 96       	adiw	r24, 0x12	; 18
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	bc 01       	movw	r22, r24
     a0e:	81 e7       	ldi	r24, 0x71	; 113
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	68 d6       	rcall	.+3280   	; 0x16e4 <_ZN3lcd5printEPhh>
		
		valCursorDivider = ( valCursorDivider + 1 ) % CURSOR_DIV;
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	2a e0       	ldi	r18, 0x0A	; 10
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	b9 01       	movw	r22, r18
     a22:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__divmodhi4>
     a26:	8a 83       	std	Y+2, r24	; 0x02
		if( valCursorDivider == 0 ){
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	88 23       	and	r24, r24
     a2c:	19 f4       	brne	.+6      	; 0xa34 <_Z9Menu_Mainv+0xa6>
					valCursorState = ~valCursorState;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	80 95       	com	r24
     a32:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if( valCursorState == CURSOR_OFF ){
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	88 23       	and	r24, r24
     a38:	81 f4       	brne	.+32     	; 0xa5a <_Z9Menu_Mainv+0xcc>
			chrMenuBot[0] = 'A';
     a3a:	81 e4       	ldi	r24, 0x41	; 65
     a3c:	8a a3       	std	Y+34, r24	; 0x22
			chrMenuBot[1] = 'L';
     a3e:	8c e4       	ldi	r24, 0x4C	; 76
     a40:	8b a3       	std	Y+35, r24	; 0x23
			chrMenuBot[2] = 'R';
     a42:	82 e5       	ldi	r24, 0x52	; 82
     a44:	8c a3       	std	Y+36, r24	; 0x24
			chrMenuBot[3] = 'M';
     a46:	8d e4       	ldi	r24, 0x4D	; 77
     a48:	8d a3       	std	Y+37, r24	; 0x25
			chrMenuBot[12] = 'O';
     a4a:	8f e4       	ldi	r24, 0x4F	; 79
     a4c:	8e a7       	std	Y+46, r24	; 0x2e
			chrMenuBot[13] = 'P';
     a4e:	80 e5       	ldi	r24, 0x50	; 80
     a50:	8f a7       	std	Y+47, r24	; 0x2f
			chrMenuBot[14] = 'T';
     a52:	84 e5       	ldi	r24, 0x54	; 84
     a54:	88 ab       	std	Y+48, r24	; 0x30
			chrMenuBot[15] = 'S';
     a56:	83 e5       	ldi	r24, 0x53	; 83
     a58:	89 ab       	std	Y+49, r24	; 0x31
		}
		
		if( valMenuState == MAIN_STATE_ALARMS ){
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	88 23       	and	r24, r24
     a5e:	a1 f4       	brne	.+40     	; 0xa88 <_Z9Menu_Mainv+0xfa>
			if( valCursorState == CURSOR_ON ){
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	8f 3f       	cpi	r24, 0xFF	; 255
     a64:	39 f5       	brne	.+78     	; 0xab4 <_Z9Menu_Mainv+0x126>
				chrMenuBot[0] = '_';
     a66:	8f e5       	ldi	r24, 0x5F	; 95
     a68:	8a a3       	std	Y+34, r24	; 0x22
				chrMenuBot[1] = '_';
     a6a:	8f e5       	ldi	r24, 0x5F	; 95
     a6c:	8b a3       	std	Y+35, r24	; 0x23
				chrMenuBot[2] = '_';
     a6e:	8f e5       	ldi	r24, 0x5F	; 95
     a70:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[3] = '_';
     a72:	8f e5       	ldi	r24, 0x5F	; 95
     a74:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[12] = 'O';
     a76:	8f e4       	ldi	r24, 0x4F	; 79
     a78:	8e a7       	std	Y+46, r24	; 0x2e
				chrMenuBot[13] = 'P';
     a7a:	80 e5       	ldi	r24, 0x50	; 80
     a7c:	8f a7       	std	Y+47, r24	; 0x2f
				chrMenuBot[14] = 'T';
     a7e:	84 e5       	ldi	r24, 0x54	; 84
     a80:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[15] = 'S';
     a82:	83 e5       	ldi	r24, 0x53	; 83
     a84:	89 ab       	std	Y+49, r24	; 0x31
     a86:	16 c0       	rjmp	.+44     	; 0xab4 <_Z9Menu_Mainv+0x126>
			}
		}else if( valMenuState == MAIN_STATE_SETTINGS ){
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	99 f4       	brne	.+38     	; 0xab4 <_Z9Menu_Mainv+0x126>
			if( valCursorState == CURSOR_ON ){
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	8f 3f       	cpi	r24, 0xFF	; 255
     a92:	81 f4       	brne	.+32     	; 0xab4 <_Z9Menu_Mainv+0x126>
				chrMenuBot[0] = '_';
     a94:	8f e5       	ldi	r24, 0x5F	; 95
     a96:	8a a3       	std	Y+34, r24	; 0x22
				chrMenuBot[1] = '_';
     a98:	8f e5       	ldi	r24, 0x5F	; 95
     a9a:	8b a3       	std	Y+35, r24	; 0x23
				chrMenuBot[2] = '_';
     a9c:	8f e5       	ldi	r24, 0x5F	; 95
     a9e:	8c a3       	std	Y+36, r24	; 0x24
				chrMenuBot[3] = '_';
     aa0:	8f e5       	ldi	r24, 0x5F	; 95
     aa2:	8d a3       	std	Y+37, r24	; 0x25
				chrMenuBot[12] = '#';
     aa4:	83 e2       	ldi	r24, 0x23	; 35
     aa6:	8e a7       	std	Y+46, r24	; 0x2e
				chrMenuBot[13] = '#';
     aa8:	83 e2       	ldi	r24, 0x23	; 35
     aaa:	8f a7       	std	Y+47, r24	; 0x2f
				chrMenuBot[14] = '#';
     aac:	83 e2       	ldi	r24, 0x23	; 35
     aae:	88 ab       	std	Y+48, r24	; 0x30
				chrMenuBot[15] = '#';
     ab0:	83 e2       	ldi	r24, 0x23	; 35
     ab2:	89 ab       	std	Y+49, r24	; 0x31
			}
		}
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
     ab4:	ce 01       	movw	r24, r28
     ab6:	82 96       	adiw	r24, 0x22	; 34
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	bc 01       	movw	r22, r24
     abc:	81 e7       	ldi	r24, 0x71	; 113
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	11 d6       	rcall	.+3106   	; 0x16e4 <_ZN3lcd5printEPhh>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a8 e4       	ldi	r26, 0x48	; 72
     ac8:	b2 e4       	ldi	r27, 0x42	; 66
     aca:	8c 83       	std	Y+4, r24	; 0x04
     acc:	9d 83       	std	Y+5, r25	; 0x05
     ace:	ae 83       	std	Y+6, r26	; 0x06
     ad0:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a e7       	ldi	r20, 0x7A	; 122
     ad8:	53 e4       	ldi	r21, 0x43	; 67
     ada:	6c 81       	ldd	r22, Y+4	; 0x04
     adc:	7d 81       	ldd	r23, Y+5	; 0x05
     ade:	8e 81       	ldd	r24, Y+6	; 0x06
     ae0:	9f 81       	ldd	r25, Y+7	; 0x07
     ae2:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	88 87       	std	Y+8, r24	; 0x08
     aec:	99 87       	std	Y+9, r25	; 0x09
     aee:	aa 87       	std	Y+10, r26	; 0x0a
     af0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e8       	ldi	r20, 0x80	; 128
     af8:	5f e3       	ldi	r21, 0x3F	; 63
     afa:	68 85       	ldd	r22, Y+8	; 0x08
     afc:	79 85       	ldd	r23, Y+9	; 0x09
     afe:	8a 85       	ldd	r24, Y+10	; 0x0a
     b00:	9b 85       	ldd	r25, Y+11	; 0x0b
     b02:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
     b06:	88 23       	and	r24, r24
     b08:	2c f4       	brge	.+10     	; 0xb14 <_Z9Menu_Mainv+0x186>
		__ticks = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9d 87       	std	Y+13, r25	; 0x0d
     b10:	8c 87       	std	Y+12, r24	; 0x0c
     b12:	3f c0       	rjmp	.+126    	; 0xb92 <_Z9Menu_Mainv+0x204>
	else if (__tmp > 65535)
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	3f ef       	ldi	r19, 0xFF	; 255
     b18:	4f e7       	ldi	r20, 0x7F	; 127
     b1a:	57 e4       	ldi	r21, 0x47	; 71
     b1c:	68 85       	ldd	r22, Y+8	; 0x08
     b1e:	79 85       	ldd	r23, Y+9	; 0x09
     b20:	8a 85       	ldd	r24, Y+10	; 0x0a
     b22:	9b 85       	ldd	r25, Y+11	; 0x0b
     b24:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
     b28:	18 16       	cp	r1, r24
     b2a:	4c f5       	brge	.+82     	; 0xb7e <_Z9Menu_Mainv+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e2       	ldi	r20, 0x20	; 32
     b32:	51 e4       	ldi	r21, 0x41	; 65
     b34:	6c 81       	ldd	r22, Y+4	; 0x04
     b36:	7d 81       	ldd	r23, Y+5	; 0x05
     b38:	8e 81       	ldd	r24, Y+6	; 0x06
     b3a:	9f 81       	ldd	r25, Y+7	; 0x07
     b3c:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9d 87       	std	Y+13, r25	; 0x0d
     b52:	8c 87       	std	Y+12, r24	; 0x0c
     b54:	0f c0       	rjmp	.+30     	; 0xb74 <_Z9Menu_Mainv+0x1e6>
     b56:	89 e1       	ldi	r24, 0x19	; 25
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9f 87       	std	Y+15, r25	; 0x0f
     b5c:	8e 87       	std	Y+14, r24	; 0x0e
     b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b60:	9f 85       	ldd	r25, Y+15	; 0x0f
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <_Z9Menu_Mainv+0x1d4>
     b66:	9f 87       	std	Y+15, r25	; 0x0f
     b68:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9d 87       	std	Y+13, r25	; 0x0d
     b72:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b74:	8c 85       	ldd	r24, Y+12	; 0x0c
     b76:	9d 85       	ldd	r25, Y+13	; 0x0d
     b78:	89 2b       	or	r24, r25
     b7a:	69 f7       	brne	.-38     	; 0xb56 <_Z9Menu_Mainv+0x1c8>
     b7c:	14 c0       	rjmp	.+40     	; 0xba6 <_Z9Menu_Mainv+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	68 85       	ldd	r22, Y+8	; 0x08
     b80:	79 85       	ldd	r23, Y+9	; 0x09
     b82:	8a 85       	ldd	r24, Y+10	; 0x0a
     b84:	9b 85       	ldd	r25, Y+11	; 0x0b
     b86:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9d 87       	std	Y+13, r25	; 0x0d
     b90:	8c 87       	std	Y+12, r24	; 0x0c
     b92:	8c 85       	ldd	r24, Y+12	; 0x0c
     b94:	9d 85       	ldd	r25, Y+13	; 0x0d
     b96:	99 8b       	std	Y+17, r25	; 0x11
     b98:	88 8b       	std	Y+16, r24	; 0x10
     b9a:	88 89       	ldd	r24, Y+16	; 0x10
     b9c:	99 89       	ldd	r25, Y+17	; 0x11
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <_Z9Menu_Mainv+0x210>
     ba2:	99 8b       	std	Y+17, r25	; 0x11
     ba4:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(50);
	}
     ba6:	16 cf       	rjmp	.-468    	; 0x9d4 <_Z9Menu_Mainv+0x46>

00000ba8 <_Z41__static_initialization_and_destruction_0ii>:
	
}
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	00 d0       	rcall	.+0      	; 0xbae <_Z41__static_initialization_and_destruction_0ii+0x6>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <_Z41__static_initialization_and_destruction_0ii+0x8>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	7c 83       	std	Y+4, r23	; 0x04
     bba:	6b 83       	std	Y+3, r22	; 0x03
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	69 f4       	brne	.+26     	; 0xbde <_Z41__static_initialization_and_destruction_0ii+0x36>
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	49 f4       	brne	.+18     	; 0xbde <_Z41__static_initialization_and_destruction_0ii+0x36>

 
#include "headsup.h"


rtc rtcDS;
     bcc:	80 e7       	ldi	r24, 0x70	; 112
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	94 d6       	rcall	.+3368   	; 0x18fa <_ZN3rtcC1Ev>
lcd lcdNHD;
     bd2:	81 e7       	ldi	r24, 0x71	; 113
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	16 d0       	rcall	.+44     	; 0xc04 <_ZN3lcdC1Ev>
bat batLiPo;
     bd8:	82 e7       	ldi	r24, 0x72	; 114
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	03 db       	rcall	.-2554   	; 0x1e4 <_ZN3batC1Ev>
		}
		lcdNHD.print( chrMenuBot, LCD_LINE_BOTTOM );
		_delay_ms(50);
	}
	
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <_GLOBAL__sub_I_rtcDS>:
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	6f ef       	ldi	r22, 0xFF	; 255
     bf6:	7f ef       	ldi	r23, 0xFF	; 255
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	d5 df       	rcall	.-86     	; 0xba8 <_Z41__static_initialization_and_destruction_0ii>
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <_ZN3lcdC1Ev>:
}

void lcd::TWI_CLEAR_ENABLE_ACK()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);// Clear Flag and Enable
}
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	60 97       	sbiw	r28, 0x10	; 16
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	98 8b       	std	Y+16, r25	; 0x10
     c1a:	8f 87       	std	Y+15, r24	; 0x0f
     c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1e:	98 89       	ldd	r25, Y+16	; 0x10
     c20:	81 d0       	rcall	.+258    	; 0xd24 <_ZN3lcd8TWI_INITEv>
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	87 d2       	rcall	.+1294   	; 0x1136 <_ZN3lcd4INITEv>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 ea       	ldi	r26, 0xA0	; 160
     c2e:	b1 e4       	ldi	r27, 0x41	; 65
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	ab 83       	std	Y+3, r26	; 0x03
     c36:	bc 83       	std	Y+4, r27	; 0x04
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	4a e7       	ldi	r20, 0x7A	; 122
     c3e:	53 e4       	ldi	r21, 0x43	; 67
     c40:	69 81       	ldd	r22, Y+1	; 0x01
     c42:	7a 81       	ldd	r23, Y+2	; 0x02
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	af 83       	std	Y+7, r26	; 0x07
     c56:	b8 87       	std	Y+8, r27	; 0x08
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	6d 81       	ldd	r22, Y+5	; 0x05
     c62:	7e 81       	ldd	r23, Y+6	; 0x06
     c64:	8f 81       	ldd	r24, Y+7	; 0x07
     c66:	98 85       	ldd	r25, Y+8	; 0x08
     c68:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <_ZN3lcdC1Ev+0x76>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9a 87       	std	Y+10, r25	; 0x0a
     c76:	89 87       	std	Y+9, r24	; 0x09
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <_ZN3lcdC1Ev+0xf4>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	6d 81       	ldd	r22, Y+5	; 0x05
     c84:	7e 81       	ldd	r23, Y+6	; 0x06
     c86:	8f 81       	ldd	r24, Y+7	; 0x07
     c88:	98 85       	ldd	r25, Y+8	; 0x08
     c8a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <_ZN3lcdC1Ev+0xe0>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	69 81       	ldd	r22, Y+1	; 0x01
     c9c:	7a 81       	ldd	r23, Y+2	; 0x02
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9a 87       	std	Y+10, r25	; 0x0a
     cb8:	89 87       	std	Y+9, r24	; 0x09
     cba:	0f c0       	rjmp	.+30     	; 0xcda <_ZN3lcdC1Ev+0xd6>
     cbc:	89 e1       	ldi	r24, 0x19	; 25
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	9c 87       	std	Y+12, r25	; 0x0c
     cc2:	8b 87       	std	Y+11, r24	; 0x0b
     cc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <_ZN3lcdC1Ev+0xc4>
     ccc:	9c 87       	std	Y+12, r25	; 0x0c
     cce:	8b 87       	std	Y+11, r24	; 0x0b
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	89 87       	std	Y+9, r24	; 0x09
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	89 2b       	or	r24, r25
     ce0:	69 f7       	brne	.-38     	; 0xcbc <_ZN3lcdC1Ev+0xb8>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <_ZN3lcdC1Ev+0x108>
     ce4:	6d 81       	ldd	r22, Y+5	; 0x05
     ce6:	7e 81       	ldd	r23, Y+6	; 0x06
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9a 87       	std	Y+10, r25	; 0x0a
     cf6:	89 87       	std	Y+9, r24	; 0x09
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	9e 87       	std	Y+14, r25	; 0x0e
     cfe:	8d 87       	std	Y+13, r24	; 0x0d
     d00:	8d 85       	ldd	r24, Y+13	; 0x0d
     d02:	9e 85       	ldd	r25, Y+14	; 0x0e
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <_ZN3lcdC1Ev+0x100>
     d08:	9e 87       	std	Y+14, r25	; 0x0e
     d0a:	8d 87       	std	Y+13, r24	; 0x0d
     d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0e:	98 89       	ldd	r25, Y+16	; 0x10
     d10:	46 d4       	rcall	.+2188   	; 0x159e <_ZN3lcd12SHOW_WELCOMEEv>
     d12:	60 96       	adiw	r28, 0x10	; 16
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <_ZN3lcd8TWI_INITEv>:
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 d0       	rcall	.+0      	; 0xd2a <_ZN3lcd8TWI_INITEv+0x6>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	84 e6       	ldi	r24, 0x64	; 100
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	24 e6       	ldi	r18, 0x64	; 100
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	2f 77       	andi	r18, 0x7F	; 127
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	8c eb       	ldi	r24, 0xBC	; 188
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	2c eb       	ldi	r18, 0xBC	; 188
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	2e 7f       	andi	r18, 0xFE	; 254
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
     d56:	88 eb       	ldi	r24, 0xB8	; 184
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	22 e0       	ldi	r18, 0x02	; 2
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
     d60:	89 eb       	ldi	r24, 0xB9	; 185
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	29 eb       	ldi	r18, 0xB9	; 185
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	20 81       	ld	r18, Z
     d6c:	2d 7f       	andi	r18, 0xFD	; 253
     d6e:	fc 01       	movw	r30, r24
     d70:	20 83       	st	Z, r18
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <_ZN3lcd16TWI_CHECK_STATUSEh>:
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	2a 97       	sbiw	r28, 0x0a	; 10
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	6b 83       	std	Y+3, r22	; 0x03
     d96:	89 eb       	ldi	r24, 0xB9	; 185
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	80 81       	ld	r24, Z
     d9e:	2a 96       	adiw	r28, 0x0a	; 10
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <_ZN3lcd16TWI_CLEAR_ENABLEEv>:
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <_ZN3lcd16TWI_CLEAR_ENABLEEv+0x6>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	8c eb       	ldi	r24, 0xBC	; 188
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	24 e8       	ldi	r18, 0x84	; 132
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <_ZN3lcd8TWI_STOPEv>:

void lcd::TWI_STOP(){
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <_ZN3lcd8TWI_STOPEv+0x6>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     de0:	8c eb       	ldi	r24, 0xBC	; 188
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	24 e9       	ldi	r18, 0x94	; 148
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
	
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <_ZN3lcd9TWI_STARTEv>:

void lcd::TWI_START(){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <_ZN3lcd9TWI_STARTEv+0x6>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
     e02:	8c eb       	ldi	r24, 0xBC	; 188
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	24 ea       	ldi	r18, 0xA4	; 164
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
	while ( ! (TWCR & (1 << TWINT)));				// wait for flag to be set
     e0c:	00 00       	nop
     e0e:	8c eb       	ldi	r24, 0xBC	; 188
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	80 95       	com	r24
     e18:	88 1f       	adc	r24, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	88 1f       	adc	r24, r24
     e1e:	88 23       	and	r24, r24
     e20:	b1 f7       	brne	.-20     	; 0xe0e <_ZN3lcd9TWI_STARTEv+0x1a>
	TWI_CHECK_STATUS(LCD_TW_START);
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	68 e0       	ldi	r22, 0x08	; 8
     e28:	a9 df       	rcall	.-174    	; 0xd7c <_ZN3lcd16TWI_CHECK_STATUSEh>
	
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <_ZN3lcd12TWI_TRANSMITEhh>:

void lcd::TWI_TRANSMIT(uint8_t TwiData, uint8_t StatusCode){
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	00 d0       	rcall	.+0      	; 0xe3a <_ZN3lcd12TWI_TRANSMITEhh+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <_ZN3lcd12TWI_TRANSMITEhh+0x8>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6b 83       	std	Y+3, r22	; 0x03
     e46:	4c 83       	std	Y+4, r20	; 0x04
	
	TWDR = TwiData;
     e48:	8b eb       	ldi	r24, 0xBB	; 187
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2b 81       	ldd	r18, Y+3	; 0x03
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
	/*After TWDR is loaded with LCD_SLA+W, a specific val must be written to TWCR, instucting the TWINT hardware
	to transmit the LCD_SLA+W present in TWDR*/
	TWI_CLEAR_ENABLE();
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	ac df       	rcall	.-168    	; 0xdb0 <_ZN3lcd16TWI_CLEAR_ENABLEEv>
	while ( ! (TWCR & (1 << TWINT)));	// wait for flag to be set
     e58:	00 00       	nop
     e5a:	8c eb       	ldi	r24, 0xBC	; 188
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	80 95       	com	r24
     e64:	88 1f       	adc	r24, r24
     e66:	88 27       	eor	r24, r24
     e68:	88 1f       	adc	r24, r24
     e6a:	88 23       	and	r24, r24
     e6c:	b1 f7       	brne	.-20     	; 0xe5a <_ZN3lcd12TWI_TRANSMITEhh+0x26>
	TWI_CHECK_STATUS(StatusCode);	// works!!
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	6c 81       	ldd	r22, Y+4	; 0x04
     e74:	83 df       	rcall	.-250    	; 0xd7c <_ZN3lcd16TWI_CHECK_STATUSEh>

}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <_ZN3lcd4SHOWEPh>:


void lcd::SHOW(unsigned char* text){
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 d0       	rcall	.+0      	; 0xe8a <_ZN3lcd4SHOWEPh+0x6>
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <_ZN3lcd4SHOWEPh+0x8>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <_ZN3lcd4SHOWEPh+0xa>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	7e 83       	std	Y+6, r23	; 0x06
     e98:	6d 83       	std	Y+5, r22	; 0x05
	
	TWI_START();
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	aa df       	rcall	.-172    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	48 e1       	ldi	r20, 0x18	; 24
     ea6:	6c e7       	ldi	r22, 0x7C	; 124
     ea8:	c5 df       	rcall	.-118    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	48 e2       	ldi	r20, 0x28	; 40
     eb0:	60 e4       	ldi	r22, 0x40	; 64
     eb2:	c0 df       	rcall	.-128    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
     eb4:	1a 82       	std	Y+2, r1	; 0x02
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	13 c0       	rjmp	.+38     	; 0xee0 <_ZN3lcd4SHOWEPh+0x5c>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 81       	ld	r18, Z
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	48 e2       	ldi	r20, 0x28	; 40
     ec8:	62 2f       	mov	r22, r18
     eca:	b4 df       	rcall	.-152    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
		++text;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
	
	TWI_START();
	
	TWI_TRANSMIT( LCD_SLA, LCD_TW_MT_SLA_ACK );
	TWI_TRANSMIT( LCD_SEND_DATA, LCD_TW_MT_DATA_ACK );
	for( int valN = 0; valN < LCD_LINE_SIZE; valN++ ){
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	40 97       	sbiw	r24, 0x10	; 16
     ee6:	4c f3       	brlt	.-46     	; 0xeba <_ZN3lcd4SHOWEPh+0x36>
		TWI_TRANSMIT( *text, LCD_TW_MT_DATA_ACK );
		++text;
	}
		
	TWI_STOP();
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	72 df       	rcall	.-284    	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
	
}
     eee:	26 96       	adiw	r28, 0x06	; 6
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <_ZN3lcd17SELECT_LCD_LINE_1Ev>:


void lcd::SELECT_LCD_LINE_1(){
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	00 d0       	rcall	.+0      	; 0xf06 <_ZN3lcd17SELECT_LCD_LINE_1Ev+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	70 df       	rcall	.-288    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	48 e1       	ldi	r20, 0x18	; 24
     f1a:	6c e7       	ldi	r22, 0x7C	; 124
     f1c:	8b df       	rcall	.-234    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	48 e2       	ldi	r20, 0x28	; 40
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	86 df       	rcall	.-244    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_1,LCD_TW_MT_DATA_ACK);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	48 e2       	ldi	r20, 0x28	; 40
     f2e:	60 e8       	ldi	r22, 0x80	; 128
     f30:	81 df       	rcall	.-254    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	4d df       	rcall	.-358    	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <_ZN3lcd17SELECT_LCD_LINE_2Ev>:


void lcd::SELECT_LCD_LINE_2(){
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	00 d0       	rcall	.+0      	; 0xf48 <_ZN3lcd17SELECT_LCD_LINE_2Ev+0x6>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_START();
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	4f df       	rcall	.-354    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	48 e1       	ldi	r20, 0x18	; 24
     f5c:	6c e7       	ldi	r22, 0x7C	; 124
     f5e:	6a df       	rcall	.-300    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	48 e2       	ldi	r20, 0x28	; 40
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	65 df       	rcall	.-310    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_LINE_2,LCD_TW_MT_DATA_ACK);
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	48 e2       	ldi	r20, 0x28	; 40
     f70:	60 ec       	ldi	r22, 0xC0	; 192
     f72:	60 df       	rcall	.-320    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	
	TWI_STOP();
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	2c df       	rcall	.-424    	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <_ZN3lcd5CGRAMEv>:

void lcd::CGRAM(void)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	60 97       	sbiw	r28, 0x10	; 16
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	98 8b       	std	Y+16, r25	; 0x10
     f9a:	8f 87       	std	Y+15, r24	; 0x0f
 	TWI_START();
     f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9e:	98 89       	ldd	r25, Y+16	; 0x10
     fa0:	29 df       	rcall	.-430    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	48 e1       	ldi	r20, 0x18	; 24
     fa8:	6c e7       	ldi	r22, 0x7C	; 124
     faa:	44 df       	rcall	.-376    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);;
     fac:	8f 85       	ldd	r24, Y+15	; 0x0f
     fae:	98 89       	ldd	r25, Y+16	; 0x10
     fb0:	48 e2       	ldi	r20, 0x28	; 40
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	3f df       	rcall	.-386    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);		//go to instructino table 0
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	98 89       	ldd	r25, Y+16	; 0x10
     fba:	48 e2       	ldi	r20, 0x28	; 40
     fbc:	68 e3       	ldi	r22, 0x38	; 56
     fbe:	3a df       	rcall	.-396    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x40,LCD_TW_MT_DATA_ACK);		//Set CGRAM address to 0x00
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	48 e2       	ldi	r20, 0x28	; 40
     fc6:	60 e4       	ldi	r22, 0x40	; 64
     fc8:	35 df       	rcall	.-406    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
     fca:	8f 85       	ldd	r24, Y+15	; 0x0f
     fcc:	98 89       	ldd	r25, Y+16	; 0x10
     fce:	01 df       	rcall	.-510    	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e2       	ldi	r26, 0x20	; 32
     fd6:	b1 e4       	ldi	r27, 0x41	; 65
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	ab 83       	std	Y+3, r26	; 0x03
     fde:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a e7       	ldi	r20, 0x7A	; 122
     fe6:	53 e4       	ldi	r21, 0x43	; 67
     fe8:	69 81       	ldd	r22, Y+1	; 0x01
     fea:	7a 81       	ldd	r23, Y+2	; 0x02
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	af 83       	std	Y+7, r26	; 0x07
     ffe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	6d 81       	ldd	r22, Y+5	; 0x05
    100a:	7e 81       	ldd	r23, Y+6	; 0x06
    100c:	8f 81       	ldd	r24, Y+7	; 0x07
    100e:	98 85       	ldd	r25, Y+8	; 0x08
    1010:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <_ZN3lcd5CGRAMEv+0x9e>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9a 87       	std	Y+10, r25	; 0x0a
    101e:	89 87       	std	Y+9, r24	; 0x09
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <_ZN3lcd5CGRAMEv+0x11c>
	else if (__tmp > 65535)
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	3f ef       	ldi	r19, 0xFF	; 255
    1026:	4f e7       	ldi	r20, 0x7F	; 127
    1028:	57 e4       	ldi	r21, 0x47	; 71
    102a:	6d 81       	ldd	r22, Y+5	; 0x05
    102c:	7e 81       	ldd	r23, Y+6	; 0x06
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <_ZN3lcd5CGRAMEv+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 e4       	ldi	r21, 0x41	; 65
    1042:	69 81       	ldd	r22, Y+1	; 0x01
    1044:	7a 81       	ldd	r23, Y+2	; 0x02
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9a 87       	std	Y+10, r25	; 0x0a
    1060:	89 87       	std	Y+9, r24	; 0x09
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <_ZN3lcd5CGRAMEv+0xfe>
    1064:	89 e1       	ldi	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9c 87       	std	Y+12, r25	; 0x0c
    106a:	8b 87       	std	Y+11, r24	; 0x0b
    106c:	8b 85       	ldd	r24, Y+11	; 0x0b
    106e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <_ZN3lcd5CGRAMEv+0xec>
    1074:	9c 87       	std	Y+12, r25	; 0x0c
    1076:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9a 87       	std	Y+10, r25	; 0x0a
    1080:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	89 2b       	or	r24, r25
    1088:	69 f7       	brne	.-38     	; 0x1064 <_ZN3lcd5CGRAMEv+0xe0>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <_ZN3lcd5CGRAMEv+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6d 81       	ldd	r22, Y+5	; 0x05
    108e:	7e 81       	ldd	r23, Y+6	; 0x06
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	98 85       	ldd	r25, Y+8	; 0x08
    1094:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9a 87       	std	Y+10, r25	; 0x0a
    109e:	89 87       	std	Y+9, r24	; 0x09
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	9e 87       	std	Y+14, r25	; 0x0e
    10a6:	8d 87       	std	Y+13, r24	; 0x0d
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <_ZN3lcd5CGRAMEv+0x128>
    10b0:	9e 87       	std	Y+14, r25	; 0x0e
    10b2:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	
	TWI_START();
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	98 89       	ldd	r25, Y+16	; 0x10
    10b8:	9d de       	rcall	.-710    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    10ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    10bc:	98 89       	ldd	r25, Y+16	; 0x10
    10be:	48 e1       	ldi	r20, 0x18	; 24
    10c0:	6c e7       	ldi	r22, 0x7C	; 124
    10c2:	b8 de       	rcall	.-656    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    10c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c6:	98 89       	ldd	r25, Y+16	; 0x10
    10c8:	48 e2       	ldi	r20, 0x28	; 40
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	b3 de       	rcall	.-666    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//write to first CGRAM address
    10ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d0:	98 89       	ldd	r25, Y+16	; 0x10
    10d2:	48 e2       	ldi	r20, 0x28	; 40
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	ae de       	rcall	.-676    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x1E,LCD_TW_MT_DATA_ACK);
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	98 89       	ldd	r25, Y+16	; 0x10
    10dc:	48 e2       	ldi	r20, 0x28	; 40
    10de:	6e e1       	ldi	r22, 0x1E	; 30
    10e0:	a9 de       	rcall	.-686    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x18,LCD_TW_MT_DATA_ACK);
    10e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e4:	98 89       	ldd	r25, Y+16	; 0x10
    10e6:	48 e2       	ldi	r20, 0x28	; 40
    10e8:	68 e1       	ldi	r22, 0x18	; 24
    10ea:	a4 de       	rcall	.-696    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);
    10ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ee:	98 89       	ldd	r25, Y+16	; 0x10
    10f0:	48 e2       	ldi	r20, 0x28	; 40
    10f2:	64 e1       	ldi	r22, 0x14	; 20
    10f4:	9f de       	rcall	.-706    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x12,LCD_TW_MT_DATA_ACK);
    10f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f8:	98 89       	ldd	r25, Y+16	; 0x10
    10fa:	48 e2       	ldi	r20, 0x28	; 40
    10fc:	62 e1       	ldi	r22, 0x12	; 18
    10fe:	9a de       	rcall	.-716    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	98 89       	ldd	r25, Y+16	; 0x10
    1104:	48 e2       	ldi	r20, 0x28	; 40
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	95 de       	rcall	.-726    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	48 e2       	ldi	r20, 0x28	; 40
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	90 de       	rcall	.-736    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x00,LCD_TW_MT_DATA_ACK);		//8 bytes per character
    1114:	8f 85       	ldd	r24, Y+15	; 0x0f
    1116:	98 89       	ldd	r25, Y+16	; 0x10
    1118:	48 e2       	ldi	r20, 0x28	; 40
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	8b de       	rcall	.-746    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	//continue writing to remaining CGRAM if desired
	TWI_STOP();
    111e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1120:	98 89       	ldd	r25, Y+16	; 0x10
    1122:	57 de       	rcall	.-850    	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
}
    1124:	60 96       	adiw	r28, 0x10	; 16
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <_ZN3lcd4INITEv>:

void lcd::INIT()
{
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	ea 97       	sbiw	r28, 0x3a	; 58
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	9a af       	std	Y+58, r25	; 0x3a
    114c:	89 af       	std	Y+57, r24	; 0x39
	TWI_START();
    114e:	89 ad       	ldd	r24, Y+57	; 0x39
    1150:	9a ad       	ldd	r25, Y+58	; 0x3a
    1152:	50 de       	rcall	.-864    	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1154:	89 ad       	ldd	r24, Y+57	; 0x39
    1156:	9a ad       	ldd	r25, Y+58	; 0x3a
    1158:	48 e1       	ldi	r20, 0x18	; 24
    115a:	6c e7       	ldi	r22, 0x7C	; 124
    115c:	6b de       	rcall	.-810    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    115e:	89 ad       	ldd	r24, Y+57	; 0x39
    1160:	9a ad       	ldd	r25, Y+58	; 0x3a
    1162:	48 e2       	ldi	r20, 0x28	; 40
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	66 de       	rcall	.-820    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x38,LCD_TW_MT_DATA_ACK);						// Function Set: 8 bit bus mode, 2-line mode, single height font
    1168:	89 ad       	ldd	r24, Y+57	; 0x39
    116a:	9a ad       	ldd	r25, Y+58	; 0x3a
    116c:	48 e2       	ldi	r20, 0x28	; 40
    116e:	68 e3       	ldi	r22, 0x38	; 56
    1170:	61 de       	rcall	.-830    	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a8 ec       	ldi	r26, 0xC8	; 200
    1178:	b2 e4       	ldi	r27, 0x42	; 66
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	ab 83       	std	Y+3, r26	; 0x03
    1180:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a e7       	ldi	r20, 0x7A	; 122
    1188:	53 e4       	ldi	r21, 0x43	; 67
    118a:	69 81       	ldd	r22, Y+1	; 0x01
    118c:	7a 81       	ldd	r23, Y+2	; 0x02
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	af 83       	std	Y+7, r26	; 0x07
    11a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	6d 81       	ldd	r22, Y+5	; 0x05
    11ac:	7e 81       	ldd	r23, Y+6	; 0x06
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	98 85       	ldd	r25, Y+8	; 0x08
    11b2:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <_ZN3lcd4INITEv+0x8e>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9a 87       	std	Y+10, r25	; 0x0a
    11c0:	89 87       	std	Y+9, r24	; 0x09
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <_ZN3lcd4INITEv+0x10c>
	else if (__tmp > 65535)
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	6d 81       	ldd	r22, Y+5	; 0x05
    11ce:	7e 81       	ldd	r23, Y+6	; 0x06
    11d0:	8f 81       	ldd	r24, Y+7	; 0x07
    11d2:	98 85       	ldd	r25, Y+8	; 0x08
    11d4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <_ZN3lcd4INITEv+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	69 81       	ldd	r22, Y+1	; 0x01
    11e6:	7a 81       	ldd	r23, Y+2	; 0x02
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9a 87       	std	Y+10, r25	; 0x0a
    1202:	89 87       	std	Y+9, r24	; 0x09
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <_ZN3lcd4INITEv+0xee>
    1206:	89 e1       	ldi	r24, 0x19	; 25
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9c 87       	std	Y+12, r25	; 0x0c
    120c:	8b 87       	std	Y+11, r24	; 0x0b
    120e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1210:	9c 85       	ldd	r25, Y+12	; 0x0c
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <_ZN3lcd4INITEv+0xdc>
    1216:	9c 87       	std	Y+12, r25	; 0x0c
    1218:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9a 87       	std	Y+10, r25	; 0x0a
    1222:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	89 2b       	or	r24, r25
    122a:	69 f7       	brne	.-38     	; 0x1206 <_ZN3lcd4INITEv+0xd0>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <_ZN3lcd4INITEv+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	6d 81       	ldd	r22, Y+5	; 0x05
    1230:	7e 81       	ldd	r23, Y+6	; 0x06
    1232:	8f 81       	ldd	r24, Y+7	; 0x07
    1234:	98 85       	ldd	r25, Y+8	; 0x08
    1236:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9a 87       	std	Y+10, r25	; 0x0a
    1240:	89 87       	std	Y+9, r24	; 0x09
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	9e 87       	std	Y+14, r25	; 0x0e
    1248:	8d 87       	std	Y+13, r24	; 0x0d
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <_ZN3lcd4INITEv+0x118>
    1252:	9e 87       	std	Y+14, r25	; 0x0e
    1254:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);						// Use Extended instruction set
    1256:	89 ad       	ldd	r24, Y+57	; 0x39
    1258:	9a ad       	ldd	r25, Y+58	; 0x3a
    125a:	48 e2       	ldi	r20, 0x28	; 40
    125c:	69 e3       	ldi	r22, 0x39	; 57
    125e:	ea dd       	rcall	.-1068   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a8 ec       	ldi	r26, 0xC8	; 200
    1266:	b2 e4       	ldi	r27, 0x42	; 66
    1268:	8f 87       	std	Y+15, r24	; 0x0f
    126a:	98 8b       	std	Y+16, r25	; 0x10
    126c:	a9 8b       	std	Y+17, r26	; 0x11
    126e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4a e7       	ldi	r20, 0x7A	; 122
    1276:	53 e4       	ldi	r21, 0x43	; 67
    1278:	6f 85       	ldd	r22, Y+15	; 0x0f
    127a:	78 89       	ldd	r23, Y+16	; 0x10
    127c:	89 89       	ldd	r24, Y+17	; 0x11
    127e:	9a 89       	ldd	r25, Y+18	; 0x12
    1280:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8b 8b       	std	Y+19, r24	; 0x13
    128a:	9c 8b       	std	Y+20, r25	; 0x14
    128c:	ad 8b       	std	Y+21, r26	; 0x15
    128e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	5f e3       	ldi	r21, 0x3F	; 63
    1298:	6b 89       	ldd	r22, Y+19	; 0x13
    129a:	7c 89       	ldd	r23, Y+20	; 0x14
    129c:	8d 89       	ldd	r24, Y+21	; 0x15
    129e:	9e 89       	ldd	r25, Y+22	; 0x16
    12a0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <_ZN3lcd4INITEv+0x17c>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	98 8f       	std	Y+24, r25	; 0x18
    12ae:	8f 8b       	std	Y+23, r24	; 0x17
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <_ZN3lcd4INITEv+0x1fa>
	else if (__tmp > 65535)
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	3f ef       	ldi	r19, 0xFF	; 255
    12b6:	4f e7       	ldi	r20, 0x7F	; 127
    12b8:	57 e4       	ldi	r21, 0x47	; 71
    12ba:	6b 89       	ldd	r22, Y+19	; 0x13
    12bc:	7c 89       	ldd	r23, Y+20	; 0x14
    12be:	8d 89       	ldd	r24, Y+21	; 0x15
    12c0:	9e 89       	ldd	r25, Y+22	; 0x16
    12c2:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <_ZN3lcd4INITEv+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    12d4:	78 89       	ldd	r23, Y+16	; 0x10
    12d6:	89 89       	ldd	r24, Y+17	; 0x11
    12d8:	9a 89       	ldd	r25, Y+18	; 0x12
    12da:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 8f       	std	Y+24, r25	; 0x18
    12f0:	8f 8b       	std	Y+23, r24	; 0x17
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <_ZN3lcd4INITEv+0x1dc>
    12f4:	89 e1       	ldi	r24, 0x19	; 25
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9a 8f       	std	Y+26, r25	; 0x1a
    12fa:	89 8f       	std	Y+25, r24	; 0x19
    12fc:	89 8d       	ldd	r24, Y+25	; 0x19
    12fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <_ZN3lcd4INITEv+0x1ca>
    1304:	9a 8f       	std	Y+26, r25	; 0x1a
    1306:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	98 8f       	std	Y+24, r25	; 0x18
    1310:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	89 2b       	or	r24, r25
    1318:	69 f7       	brne	.-38     	; 0x12f4 <_ZN3lcd4INITEv+0x1be>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <_ZN3lcd4INITEv+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6b 89       	ldd	r22, Y+19	; 0x13
    131e:	7c 89       	ldd	r23, Y+20	; 0x14
    1320:	8d 89       	ldd	r24, Y+21	; 0x15
    1322:	9e 89       	ldd	r25, Y+22	; 0x16
    1324:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	98 8f       	std	Y+24, r25	; 0x18
    132e:	8f 8b       	std	Y+23, r24	; 0x17
    1330:	8f 89       	ldd	r24, Y+23	; 0x17
    1332:	98 8d       	ldd	r25, Y+24	; 0x18
    1334:	9c 8f       	std	Y+28, r25	; 0x1c
    1336:	8b 8f       	std	Y+27, r24	; 0x1b
    1338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <_ZN3lcd4INITEv+0x206>
    1340:	9c 8f       	std	Y+28, r25	; 0x1c
    1342:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(100);
	TWI_TRANSMIT(0x14,LCD_TW_MT_DATA_ACK);						// Set Internal Osc Freq
    1344:	89 ad       	ldd	r24, Y+57	; 0x39
    1346:	9a ad       	ldd	r25, Y+58	; 0x3a
    1348:	48 e2       	ldi	r20, 0x28	; 40
    134a:	64 e1       	ldi	r22, 0x14	; 20
    134c:	73 dd       	rcall	.-1306   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x78,LCD_TW_MT_DATA_ACK);						// Contrast Set
    134e:	89 ad       	ldd	r24, Y+57	; 0x39
    1350:	9a ad       	ldd	r25, Y+58	; 0x3a
    1352:	48 e2       	ldi	r20, 0x28	; 40
    1354:	68 e7       	ldi	r22, 0x78	; 120
    1356:	6e dd       	rcall	.-1316   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x5D,LCD_TW_MT_DATA_ACK);						// Power/Icon/Contrast Control
    1358:	89 ad       	ldd	r24, Y+57	; 0x39
    135a:	9a ad       	ldd	r25, Y+58	; 0x3a
    135c:	48 e2       	ldi	r20, 0x28	; 40
    135e:	6d e5       	ldi	r22, 0x5D	; 93
    1360:	69 dd       	rcall	.-1326   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x6D,LCD_TW_MT_DATA_ACK);						// Follower Control
    1362:	89 ad       	ldd	r24, Y+57	; 0x39
    1364:	9a ad       	ldd	r25, Y+58	; 0x3a
    1366:	48 e2       	ldi	r20, 0x28	; 40
    1368:	6d e6       	ldi	r22, 0x6D	; 109
    136a:	64 dd       	rcall	.-1336   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x0C,LCD_TW_MT_DATA_ACK);						// Display On/Off
    136c:	89 ad       	ldd	r24, Y+57	; 0x39
    136e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1370:	48 e2       	ldi	r20, 0x28	; 40
    1372:	6c e0       	ldi	r22, 0x0C	; 12
    1374:	5f dd       	rcall	.-1346   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);						// Clear Display
    1376:	89 ad       	ldd	r24, Y+57	; 0x39
    1378:	9a ad       	ldd	r25, Y+58	; 0x3a
    137a:	48 e2       	ldi	r20, 0x28	; 40
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	5a dd       	rcall	.-1356   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x06,LCD_TW_MT_DATA_ACK);						// Entry Mode Set: Cursor/Shift as characters input
    1380:	89 ad       	ldd	r24, Y+57	; 0x39
    1382:	9a ad       	ldd	r25, Y+58	; 0x3a
    1384:	48 e2       	ldi	r20, 0x28	; 40
    1386:	66 e0       	ldi	r22, 0x06	; 6
    1388:	55 dd       	rcall	.-1366   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a8 ec       	ldi	r26, 0xC8	; 200
    1390:	b2 e4       	ldi	r27, 0x42	; 66
    1392:	8d 8f       	std	Y+29, r24	; 0x1d
    1394:	9e 8f       	std	Y+30, r25	; 0x1e
    1396:	af 8f       	std	Y+31, r26	; 0x1f
    1398:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4a e7       	ldi	r20, 0x7A	; 122
    13a0:	53 e4       	ldi	r21, 0x43	; 67
    13a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    13a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a8:	98 a1       	ldd	r25, Y+32	; 0x20
    13aa:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	89 a3       	std	Y+33, r24	; 0x21
    13b4:	9a a3       	std	Y+34, r25	; 0x22
    13b6:	ab a3       	std	Y+35, r26	; 0x23
    13b8:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	69 a1       	ldd	r22, Y+33	; 0x21
    13c4:	7a a1       	ldd	r23, Y+34	; 0x22
    13c6:	8b a1       	ldd	r24, Y+35	; 0x23
    13c8:	9c a1       	ldd	r25, Y+36	; 0x24
    13ca:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__cmpsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <_ZN3lcd4INITEv+0x2a6>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9e a3       	std	Y+38, r25	; 0x26
    13d8:	8d a3       	std	Y+37, r24	; 0x25
    13da:	3f c0       	rjmp	.+126    	; 0x145a <_ZN3lcd4INITEv+0x324>
	else if (__tmp > 65535)
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	3f ef       	ldi	r19, 0xFF	; 255
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	57 e4       	ldi	r21, 0x47	; 71
    13e4:	69 a1       	ldd	r22, Y+33	; 0x21
    13e6:	7a a1       	ldd	r23, Y+34	; 0x22
    13e8:	8b a1       	ldd	r24, Y+35	; 0x23
    13ea:	9c a1       	ldd	r25, Y+36	; 0x24
    13ec:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <_ZN3lcd4INITEv+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13fe:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1400:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1402:	98 a1       	ldd	r25, Y+32	; 0x20
    1404:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e a3       	std	Y+38, r25	; 0x26
    141a:	8d a3       	std	Y+37, r24	; 0x25
    141c:	0f c0       	rjmp	.+30     	; 0x143c <_ZN3lcd4INITEv+0x306>
    141e:	89 e1       	ldi	r24, 0x19	; 25
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	98 a7       	std	Y+40, r25	; 0x28
    1424:	8f a3       	std	Y+39, r24	; 0x27
    1426:	8f a1       	ldd	r24, Y+39	; 0x27
    1428:	98 a5       	ldd	r25, Y+40	; 0x28
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <_ZN3lcd4INITEv+0x2f4>
    142e:	98 a7       	std	Y+40, r25	; 0x28
    1430:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8d a1       	ldd	r24, Y+37	; 0x25
    1434:	9e a1       	ldd	r25, Y+38	; 0x26
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9e a3       	std	Y+38, r25	; 0x26
    143a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8d a1       	ldd	r24, Y+37	; 0x25
    143e:	9e a1       	ldd	r25, Y+38	; 0x26
    1440:	89 2b       	or	r24, r25
    1442:	69 f7       	brne	.-38     	; 0x141e <_ZN3lcd4INITEv+0x2e8>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <_ZN3lcd4INITEv+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	69 a1       	ldd	r22, Y+33	; 0x21
    1448:	7a a1       	ldd	r23, Y+34	; 0x22
    144a:	8b a1       	ldd	r24, Y+35	; 0x23
    144c:	9c a1       	ldd	r25, Y+36	; 0x24
    144e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e a3       	std	Y+38, r25	; 0x26
    1458:	8d a3       	std	Y+37, r24	; 0x25
    145a:	8d a1       	ldd	r24, Y+37	; 0x25
    145c:	9e a1       	ldd	r25, Y+38	; 0x26
    145e:	9a a7       	std	Y+42, r25	; 0x2a
    1460:	89 a7       	std	Y+41, r24	; 0x29
    1462:	89 a5       	ldd	r24, Y+41	; 0x29
    1464:	9a a5       	ldd	r25, Y+42	; 0x2a
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <_ZN3lcd4INITEv+0x330>
    146a:	9a a7       	std	Y+42, r25	; 0x2a
    146c:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(100);
	TWI_STOP();
    146e:	89 ad       	ldd	r24, Y+57	; 0x39
    1470:	9a ad       	ldd	r25, Y+58	; 0x3a
    1472:	af dc       	rcall	.-1698   	; 0xdd2 <_ZN3lcd8TWI_STOPEv>

	CGRAM();			//define CGRAM
    1474:	89 ad       	ldd	r24, Y+57	; 0x39
    1476:	9a ad       	ldd	r25, Y+58	; 0x3a
    1478:	85 dd       	rcall	.-1270   	; 0xf84 <_ZN3lcd5CGRAMEv>

	TWI_START();
    147a:	89 ad       	ldd	r24, Y+57	; 0x39
    147c:	9a ad       	ldd	r25, Y+58	; 0x3a
    147e:	ba dc       	rcall	.-1676   	; 0xdf4 <_ZN3lcd9TWI_STARTEv>
	TWI_TRANSMIT(LCD_SLA,LCD_TW_MT_SLA_ACK);
    1480:	89 ad       	ldd	r24, Y+57	; 0x39
    1482:	9a ad       	ldd	r25, Y+58	; 0x3a
    1484:	48 e1       	ldi	r20, 0x18	; 24
    1486:	6c e7       	ldi	r22, 0x7C	; 124
    1488:	d5 dc       	rcall	.-1622   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(LCD_SEND_COMMAND,LCD_TW_MT_DATA_ACK);
    148a:	89 ad       	ldd	r24, Y+57	; 0x39
    148c:	9a ad       	ldd	r25, Y+58	; 0x3a
    148e:	48 e2       	ldi	r20, 0x28	; 40
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	d0 dc       	rcall	.-1632   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x39,LCD_TW_MT_DATA_ACK);
    1494:	89 ad       	ldd	r24, Y+57	; 0x39
    1496:	9a ad       	ldd	r25, Y+58	; 0x3a
    1498:	48 e2       	ldi	r20, 0x28	; 40
    149a:	69 e3       	ldi	r22, 0x39	; 57
    149c:	cb dc       	rcall	.-1642   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_TRANSMIT(0x01,LCD_TW_MT_DATA_ACK);
    149e:	89 ad       	ldd	r24, Y+57	; 0x39
    14a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    14a2:	48 e2       	ldi	r20, 0x28	; 40
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	c6 dc       	rcall	.-1652   	; 0xe34 <_ZN3lcd12TWI_TRANSMITEhh>
	TWI_STOP();
    14a8:	89 ad       	ldd	r24, Y+57	; 0x39
    14aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ac:	92 dc       	rcall	.-1756   	; 0xdd2 <_ZN3lcd8TWI_STOPEv>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a8 ec       	ldi	r26, 0xC8	; 200
    14b4:	b2 e4       	ldi	r27, 0x42	; 66
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
    14b8:	9c a7       	std	Y+44, r25	; 0x2c
    14ba:	ad a7       	std	Y+45, r26	; 0x2d
    14bc:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	53 e4       	ldi	r21, 0x43	; 67
    14c6:	6b a5       	ldd	r22, Y+43	; 0x2b
    14c8:	7c a5       	ldd	r23, Y+44	; 0x2c
    14ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    14cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    14ce:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	8f a7       	std	Y+47, r24	; 0x2f
    14d8:	98 ab       	std	Y+48, r25	; 0x30
    14da:	a9 ab       	std	Y+49, r26	; 0x31
    14dc:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	6f a5       	ldd	r22, Y+47	; 0x2f
    14e8:	78 a9       	ldd	r23, Y+48	; 0x30
    14ea:	89 a9       	ldd	r24, Y+49	; 0x31
    14ec:	9a a9       	ldd	r25, Y+50	; 0x32
    14ee:	e5 d7       	rcall	.+4042   	; 0x24ba <__cmpsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <_ZN3lcd4INITEv+0x3c8>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c ab       	std	Y+52, r25	; 0x34
    14fa:	8b ab       	std	Y+51, r24	; 0x33
    14fc:	3d c0       	rjmp	.+122    	; 0x1578 <_ZN3lcd4INITEv+0x442>
	else if (__tmp > 65535)
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	6f a5       	ldd	r22, Y+47	; 0x2f
    1508:	78 a9       	ldd	r23, Y+48	; 0x30
    150a:	89 a9       	ldd	r24, Y+49	; 0x31
    150c:	9a a9       	ldd	r25, Y+50	; 0x32
    150e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__gesf2>
    1512:	18 16       	cp	r1, r24
    1514:	44 f5       	brge	.+80     	; 0x1566 <_ZN3lcd4INITEv+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1520:	7c a5       	ldd	r23, Y+44	; 0x2c
    1522:	8d a5       	ldd	r24, Y+45	; 0x2d
    1524:	9e a5       	ldd	r25, Y+46	; 0x2e
    1526:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	c7 d7       	rcall	.+3982   	; 0x24c2 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9c ab       	std	Y+52, r25	; 0x34
    153a:	8b ab       	std	Y+51, r24	; 0x33
    153c:	0f c0       	rjmp	.+30     	; 0x155c <_ZN3lcd4INITEv+0x426>
    153e:	89 e1       	ldi	r24, 0x19	; 25
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9e ab       	std	Y+54, r25	; 0x36
    1544:	8d ab       	std	Y+53, r24	; 0x35
    1546:	8d a9       	ldd	r24, Y+53	; 0x35
    1548:	9e a9       	ldd	r25, Y+54	; 0x36
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <_ZN3lcd4INITEv+0x414>
    154e:	9e ab       	std	Y+54, r25	; 0x36
    1550:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8b a9       	ldd	r24, Y+51	; 0x33
    1554:	9c a9       	ldd	r25, Y+52	; 0x34
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9c ab       	std	Y+52, r25	; 0x34
    155a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8b a9       	ldd	r24, Y+51	; 0x33
    155e:	9c a9       	ldd	r25, Y+52	; 0x34
    1560:	89 2b       	or	r24, r25
    1562:	69 f7       	brne	.-38     	; 0x153e <_ZN3lcd4INITEv+0x408>
    1564:	13 c0       	rjmp	.+38     	; 0x158c <_ZN3lcd4INITEv+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6f a5       	ldd	r22, Y+47	; 0x2f
    1568:	78 a9       	ldd	r23, Y+48	; 0x30
    156a:	89 a9       	ldd	r24, Y+49	; 0x31
    156c:	9a a9       	ldd	r25, Y+50	; 0x32
    156e:	a9 d7       	rcall	.+3922   	; 0x24c2 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9c ab       	std	Y+52, r25	; 0x34
    1576:	8b ab       	std	Y+51, r24	; 0x33
    1578:	8b a9       	ldd	r24, Y+51	; 0x33
    157a:	9c a9       	ldd	r25, Y+52	; 0x34
    157c:	98 af       	std	Y+56, r25	; 0x38
    157e:	8f ab       	std	Y+55, r24	; 0x37
    1580:	8f a9       	ldd	r24, Y+55	; 0x37
    1582:	98 ad       	ldd	r25, Y+56	; 0x38
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <_ZN3lcd4INITEv+0x44e>
    1588:	98 af       	std	Y+56, r25	; 0x38
    158a:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(100);
}
    158c:	ea 96       	adiw	r28, 0x3a	; 58
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <_ZN3lcd12SHOW_WELCOMEEv>:

void lcd::SHOW_WELCOME(){
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	e0 97       	sbiw	r28, 0x30	; 48
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	98 ab       	std	Y+48, r25	; 0x30
    15b4:	8f a7       	std	Y+47, r24	; 0x2f
	
	unsigned char cucWELCOME_TEXT_1[ LCD_LINE_SIZE ]{ ' ', '-', '-', ' ', 'H', 'e', 'a', 'd', 's', 'U', 'p', '!', ' ', '-', '-', ' ' };
    15b6:	80 e1       	ldi	r24, 0x10	; 16
    15b8:	e7 e1       	ldi	r30, 0x17	; 23
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	de 01       	movw	r26, r28
    15be:	1f 96       	adiw	r26, 0x0f	; 15
    15c0:	01 90       	ld	r0, Z+
    15c2:	0d 92       	st	X+, r0
    15c4:	8a 95       	dec	r24
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <_ZN3lcd12SHOW_WELCOMEEv+0x22>
	unsigned char cucWELCOME_TEXT_2[ LCD_LINE_SIZE ]{ 'S', 'l', 'e', 'e', 'p', ' ', 'E', 'n', 'v', 'i', 'r', 'o', 'm', 'e', 'n', 't' };
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	e7 e2       	ldi	r30, 0x27	; 39
    15cc:	f1 e0       	ldi	r31, 0x01	; 1
    15ce:	de 01       	movw	r26, r28
    15d0:	5f 96       	adiw	r26, 0x1f	; 31
    15d2:	01 90       	ld	r0, Z+
    15d4:	0d 92       	st	X+, r0
    15d6:	8a 95       	dec	r24
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <_ZN3lcd12SHOW_WELCOMEEv+0x34>
	
		
	print( cucWELCOME_TEXT_1, LCD_LINE_TOP );
    15da:	9e 01       	movw	r18, r28
    15dc:	21 5f       	subi	r18, 0xF1	; 241
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e2:	98 a9       	ldd	r25, Y+48	; 0x30
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	b9 01       	movw	r22, r18
    15e8:	7d d0       	rcall	.+250    	; 0x16e4 <_ZN3lcd5printEPhh>
	print( cucWELCOME_TEXT_2, LCD_LINE_BOTTOM );
    15ea:	9e 01       	movw	r18, r28
    15ec:	21 5e       	subi	r18, 0xE1	; 225
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f2:	98 a9       	ldd	r25, Y+48	; 0x30
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	b9 01       	movw	r22, r18
    15f8:	75 d0       	rcall	.+234    	; 0x16e4 <_ZN3lcd5printEPhh>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	aa e7       	ldi	r26, 0x7A	; 122
    1600:	b4 e4       	ldi	r27, 0x44	; 68
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	ab 83       	std	Y+3, r26	; 0x03
    1608:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	53 e4       	ldi	r21, 0x43	; 67
    1612:	69 81       	ldd	r22, Y+1	; 0x01
    1614:	7a 81       	ldd	r23, Y+2	; 0x02
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	d0 d7       	rcall	.+4000   	; 0x25bc <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	af 83       	std	Y+7, r26	; 0x07
    1626:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	6d 81       	ldd	r22, Y+5	; 0x05
    1632:	7e 81       	ldd	r23, Y+6	; 0x06
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
    1636:	98 85       	ldd	r25, Y+8	; 0x08
    1638:	40 d7       	rcall	.+3712   	; 0x24ba <__cmpsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <_ZN3lcd12SHOW_WELCOMEEv+0xaa>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9a 87       	std	Y+10, r25	; 0x0a
    1644:	89 87       	std	Y+9, r24	; 0x09
    1646:	3b c0       	rjmp	.+118    	; 0x16be <_ZN3lcd12SHOW_WELCOMEEv+0x120>
	else if (__tmp > 65535)
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	6d 81       	ldd	r22, Y+5	; 0x05
    1652:	7e 81       	ldd	r23, Y+6	; 0x06
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	ad d7       	rcall	.+3930   	; 0x25b4 <__gesf2>
    165a:	18 16       	cp	r1, r24
    165c:	3c f5       	brge	.+78     	; 0x16ac <_ZN3lcd12SHOW_WELCOMEEv+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	69 81       	ldd	r22, Y+1	; 0x01
    1668:	7a 81       	ldd	r23, Y+2	; 0x02
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	a6 d7       	rcall	.+3916   	; 0x25bc <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	24 d7       	rcall	.+3656   	; 0x24c2 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9a 87       	std	Y+10, r25	; 0x0a
    1680:	89 87       	std	Y+9, r24	; 0x09
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <_ZN3lcd12SHOW_WELCOMEEv+0x104>
    1684:	89 e1       	ldi	r24, 0x19	; 25
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 87       	std	Y+12, r25	; 0x0c
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	8b 85       	ldd	r24, Y+11	; 0x0b
    168e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <_ZN3lcd12SHOW_WELCOMEEv+0xf2>
    1694:	9c 87       	std	Y+12, r25	; 0x0c
    1696:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9a 87       	std	Y+10, r25	; 0x0a
    16a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	89 2b       	or	r24, r25
    16a8:	69 f7       	brne	.-38     	; 0x1684 <_ZN3lcd12SHOW_WELCOMEEv+0xe6>
    16aa:	13 c0       	rjmp	.+38     	; 0x16d2 <_ZN3lcd12SHOW_WELCOMEEv+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6d 81       	ldd	r22, Y+5	; 0x05
    16ae:	7e 81       	ldd	r23, Y+6	; 0x06
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	98 85       	ldd	r25, Y+8	; 0x08
    16b4:	06 d7       	rcall	.+3596   	; 0x24c2 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9a 87       	std	Y+10, r25	; 0x0a
    16bc:	89 87       	std	Y+9, r24	; 0x09
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	9e 87       	std	Y+14, r25	; 0x0e
    16c4:	8d 87       	std	Y+13, r24	; 0x0d
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <_ZN3lcd12SHOW_WELCOMEEv+0x12c>
    16ce:	9e 87       	std	Y+14, r25	; 0x0e
    16d0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms( 1000 );

}
    16d2:	e0 96       	adiw	r28, 0x30	; 48
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <_ZN3lcd5printEPhh>:


void lcd::print(unsigned char* text, uint8_t valLine){
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	a1 97       	sbiw	r28, 0x21	; 33
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	9e 8f       	std	Y+30, r25	; 0x1e
    16fa:	8d 8f       	std	Y+29, r24	; 0x1d
    16fc:	78 a3       	std	Y+32, r23	; 0x20
    16fe:	6f 8f       	std	Y+31, r22	; 0x1f
    1700:	49 a3       	std	Y+33, r20	; 0x21
		
	if( valLine == LCD_LINE_TOP ){
    1702:	89 a1       	ldd	r24, Y+33	; 0x21
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <_ZN3lcd5printEPhh+0x26>
    1708:	76 c0       	rjmp	.+236    	; 0x17f6 <_ZN3lcd5printEPhh+0x112>
		SELECT_LCD_LINE_1();
    170a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    170c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    170e:	f8 db       	rcall	.-2064   	; 0xf00 <_ZN3lcd17SELECT_LCD_LINE_1Ev>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e2       	ldi	r26, 0x20	; 32
    1716:	b1 e4       	ldi	r27, 0x41	; 65
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	ab 83       	std	Y+3, r26	; 0x03
    171e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	69 81       	ldd	r22, Y+1	; 0x01
    172a:	7a 81       	ldd	r23, Y+2	; 0x02
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	45 d7       	rcall	.+3722   	; 0x25bc <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	af 83       	std	Y+7, r26	; 0x07
    173c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	6d 81       	ldd	r22, Y+5	; 0x05
    1748:	7e 81       	ldd	r23, Y+6	; 0x06
    174a:	8f 81       	ldd	r24, Y+7	; 0x07
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	b5 d6       	rcall	.+3434   	; 0x24ba <__cmpsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <_ZN3lcd5printEPhh+0x7a>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9a 87       	std	Y+10, r25	; 0x0a
    175a:	89 87       	std	Y+9, r24	; 0x09
    175c:	3b c0       	rjmp	.+118    	; 0x17d4 <_ZN3lcd5printEPhh+0xf0>
	else if (__tmp > 65535)
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	6d 81       	ldd	r22, Y+5	; 0x05
    1768:	7e 81       	ldd	r23, Y+6	; 0x06
    176a:	8f 81       	ldd	r24, Y+7	; 0x07
    176c:	98 85       	ldd	r25, Y+8	; 0x08
    176e:	22 d7       	rcall	.+3652   	; 0x25b4 <__gesf2>
    1770:	18 16       	cp	r1, r24
    1772:	3c f5       	brge	.+78     	; 0x17c2 <_ZN3lcd5printEPhh+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	69 81       	ldd	r22, Y+1	; 0x01
    177e:	7a 81       	ldd	r23, Y+2	; 0x02
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	1b d7       	rcall	.+3638   	; 0x25bc <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	99 d6       	rcall	.+3378   	; 0x24c2 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9a 87       	std	Y+10, r25	; 0x0a
    1796:	89 87       	std	Y+9, r24	; 0x09
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <_ZN3lcd5printEPhh+0xd4>
    179a:	89 e1       	ldi	r24, 0x19	; 25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9c 87       	std	Y+12, r25	; 0x0c
    17a0:	8b 87       	std	Y+11, r24	; 0x0b
    17a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <_ZN3lcd5printEPhh+0xc2>
    17aa:	9c 87       	std	Y+12, r25	; 0x0c
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9a 87       	std	Y+10, r25	; 0x0a
    17b6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	89 2b       	or	r24, r25
    17be:	69 f7       	brne	.-38     	; 0x179a <_ZN3lcd5printEPhh+0xb6>
    17c0:	13 c0       	rjmp	.+38     	; 0x17e8 <_ZN3lcd5printEPhh+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	6d 81       	ldd	r22, Y+5	; 0x05
    17c4:	7e 81       	ldd	r23, Y+6	; 0x06
    17c6:	8f 81       	ldd	r24, Y+7	; 0x07
    17c8:	98 85       	ldd	r25, Y+8	; 0x08
    17ca:	7b d6       	rcall	.+3318   	; 0x24c2 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9a 87       	std	Y+10, r25	; 0x0a
    17d2:	89 87       	std	Y+9, r24	; 0x09
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	9e 87       	std	Y+14, r25	; 0x0e
    17da:	8d 87       	std	Y+13, r24	; 0x0d
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <_ZN3lcd5printEPhh+0xfc>
    17e4:	9e 87       	std	Y+14, r25	; 0x0e
    17e6:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(10);
		SHOW(text);
    17e8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    17ea:	38 a1       	ldd	r19, Y+32	; 0x20
    17ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f0:	b9 01       	movw	r22, r18
    17f2:	48 db       	rcall	.-2416   	; 0xe84 <_ZN3lcd4SHOWEPh>
    17f4:	79 c0       	rjmp	.+242    	; 0x18e8 <_ZN3lcd5printEPhh+0x204>
	}else if( valLine == LCD_LINE_BOTTOM ){
    17f6:	89 a1       	ldd	r24, Y+33	; 0x21
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	09 f0       	breq	.+2      	; 0x17fe <_ZN3lcd5printEPhh+0x11a>
    17fc:	75 c0       	rjmp	.+234    	; 0x18e8 <_ZN3lcd5printEPhh+0x204>
		SELECT_LCD_LINE_2();
    17fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1800:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1802:	9f db       	rcall	.-2242   	; 0xf42 <_ZN3lcd17SELECT_LCD_LINE_2Ev>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e2       	ldi	r26, 0x20	; 32
    180a:	b1 e4       	ldi	r27, 0x41	; 65
    180c:	8f 87       	std	Y+15, r24	; 0x0f
    180e:	98 8b       	std	Y+16, r25	; 0x10
    1810:	a9 8b       	std	Y+17, r26	; 0x11
    1812:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	53 e4       	ldi	r21, 0x43	; 67
    181c:	6f 85       	ldd	r22, Y+15	; 0x0f
    181e:	78 89       	ldd	r23, Y+16	; 0x10
    1820:	89 89       	ldd	r24, Y+17	; 0x11
    1822:	9a 89       	ldd	r25, Y+18	; 0x12
    1824:	cb d6       	rcall	.+3478   	; 0x25bc <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8b 8b       	std	Y+19, r24	; 0x13
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	ad 8b       	std	Y+21, r26	; 0x15
    1830:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	6b 89       	ldd	r22, Y+19	; 0x13
    183c:	7c 89       	ldd	r23, Y+20	; 0x14
    183e:	8d 89       	ldd	r24, Y+21	; 0x15
    1840:	9e 89       	ldd	r25, Y+22	; 0x16
    1842:	3b d6       	rcall	.+3190   	; 0x24ba <__cmpsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <_ZN3lcd5printEPhh+0x16e>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	98 8f       	std	Y+24, r25	; 0x18
    184e:	8f 8b       	std	Y+23, r24	; 0x17
    1850:	3b c0       	rjmp	.+118    	; 0x18c8 <_ZN3lcd5printEPhh+0x1e4>
	else if (__tmp > 65535)
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	6b 89       	ldd	r22, Y+19	; 0x13
    185c:	7c 89       	ldd	r23, Y+20	; 0x14
    185e:	8d 89       	ldd	r24, Y+21	; 0x15
    1860:	9e 89       	ldd	r25, Y+22	; 0x16
    1862:	a8 d6       	rcall	.+3408   	; 0x25b4 <__gesf2>
    1864:	18 16       	cp	r1, r24
    1866:	3c f5       	brge	.+78     	; 0x18b6 <_ZN3lcd5printEPhh+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	6f 85       	ldd	r22, Y+15	; 0x0f
    1872:	78 89       	ldd	r23, Y+16	; 0x10
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	a1 d6       	rcall	.+3394   	; 0x25bc <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	1f d6       	rcall	.+3134   	; 0x24c2 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	98 8f       	std	Y+24, r25	; 0x18
    188a:	8f 8b       	std	Y+23, r24	; 0x17
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <_ZN3lcd5printEPhh+0x1c8>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9a 8f       	std	Y+26, r25	; 0x1a
    1894:	89 8f       	std	Y+25, r24	; 0x19
    1896:	89 8d       	ldd	r24, Y+25	; 0x19
    1898:	9a 8d       	ldd	r25, Y+26	; 0x1a
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <_ZN3lcd5printEPhh+0x1b6>
    189e:	9a 8f       	std	Y+26, r25	; 0x1a
    18a0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8f 89       	ldd	r24, Y+23	; 0x17
    18a4:	98 8d       	ldd	r25, Y+24	; 0x18
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	98 8f       	std	Y+24, r25	; 0x18
    18aa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	89 2b       	or	r24, r25
    18b2:	69 f7       	brne	.-38     	; 0x188e <_ZN3lcd5printEPhh+0x1aa>
    18b4:	13 c0       	rjmp	.+38     	; 0x18dc <_ZN3lcd5printEPhh+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6b 89       	ldd	r22, Y+19	; 0x13
    18b8:	7c 89       	ldd	r23, Y+20	; 0x14
    18ba:	8d 89       	ldd	r24, Y+21	; 0x15
    18bc:	9e 89       	ldd	r25, Y+22	; 0x16
    18be:	01 d6       	rcall	.+3074   	; 0x24c2 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	98 8f       	std	Y+24, r25	; 0x18
    18c6:	8f 8b       	std	Y+23, r24	; 0x17
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	9c 8f       	std	Y+28, r25	; 0x1c
    18ce:	8b 8f       	std	Y+27, r24	; 0x1b
    18d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <_ZN3lcd5printEPhh+0x1f0>
    18d8:	9c 8f       	std	Y+28, r25	; 0x1c
    18da:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		SHOW(text);
    18dc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18de:	38 a1       	ldd	r19, Y+32	; 0x20
    18e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e4:	b9 01       	movw	r22, r18
    18e6:	ce da       	rcall	.-2660   	; 0xe84 <_ZN3lcd4SHOWEPh>
	}
		
}
    18e8:	a1 96       	adiw	r28, 0x21	; 33
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <_ZN3rtcC1Ev>:
#include <avr/io.h>
#include <util/delay.h>
#include "rtc.h"


rtc::rtc(){
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	2e 97       	sbiw	r28, 0x0e	; 14
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	9e 87       	std	Y+14, r25	; 0x0e
    1910:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t valCmd_Enable_W { 0x00 };
    1912:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t valCmd_Init_Control { 0x04 };
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t valCmd_Zero { 0x00 };
    1918:	1d 82       	std	Y+5, r1	; 0x05
	rtc_time rtmInital { 0x00, 0x00, 0x52, 0x01, 0x01, 0x01, 0x00 };
    191a:	87 e0       	ldi	r24, 0x07	; 7
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f1 e0       	ldi	r31, 0x01	; 1
    1920:	de 01       	movw	r26, r28
    1922:	16 96       	adiw	r26, 0x06	; 6
    1924:	01 90       	ld	r0, Z+
    1926:	0d 92       	st	X+, r0
    1928:	8a 95       	dec	r24
    192a:	e1 f7       	brne	.-8      	; 0x1924 <_ZN3rtcC1Ev+0x2a>


	i2c_init();    // Establish I2C connection
    192c:	8d 85       	ldd	r24, Y+13	; 0x0d
    192e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1930:	6a d0       	rcall	.+212    	; 0x1a06 <_ZN3rtc8i2c_initEv>
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
    1932:	ae 01       	movw	r20, r28
    1934:	4d 5f       	subi	r20, 0xFD	; 253
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	6f e0       	ldi	r22, 0x0F	; 15
    1942:	eb d0       	rcall	.+470    	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	0e c0       	rjmp	.+28     	; 0x1966 <_ZN3rtcC1Ev+0x6c>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
    194a:	69 81       	ldd	r22, Y+1	; 0x01
    194c:	ae 01       	movw	r20, r28
    194e:	4b 5f       	subi	r20, 0xFB	; 251
    1950:	5f 4f       	sbci	r21, 0xFF	; 255
    1952:	8d 85       	ldd	r24, Y+13	; 0x0d
    1954:	9e 85       	ldd	r25, Y+14	; 0x0e
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	df d0       	rcall	.+446    	; 0x1b1a <_ZN3rtc11write_blockEhPhj>

	i2c_init();    // Establish I2C connection
	
	write_block( RTC_ADDR_CON, &valCmd_Enable_W, 1 );	// Enable timer and disable 'write protect'
	
	for( unsigned int valN = RTC_ADDR_START; valN <= RTC_ADDR_END; valN++ ){
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	41 97       	sbiw	r24, 0x11	; 17
    196c:	70 f3       	brcs	.-36     	; 0x194a <_ZN3rtcC1Ev+0x50>
		write_block( valN, &valCmd_Zero, 1 );	// Initialize timer to 0
	}
	
	write_block( RTC_ADDR_CON, &valCmd_Init_Control, 1 );	// Set exclusive interrupt behavior
    196e:	ae 01       	movw	r20, r28
    1970:	4c 5f       	subi	r20, 0xFC	; 252
    1972:	5f 4f       	sbci	r21, 0xFF	; 255
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	6f e0       	ldi	r22, 0x0F	; 15
    197e:	cd d0       	rcall	.+410    	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
	
	set_time(&rtmInital);    	// Initialize the time
    1980:	9e 01       	movw	r18, r28
    1982:	2a 5f       	subi	r18, 0xFA	; 250
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	b9 01       	movw	r22, r18
    198c:	aa d1       	rcall	.+852    	; 0x1ce2 <_ZN3rtc8set_timeEP8rtc_time>
	
}
    198e:	2e 96       	adiw	r28, 0x0e	; 14
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <_ZN3rtc10spi_selectEv>:


void rtc::spi_select( ) {
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <_ZN3rtc10spi_selectEv+0x6>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= ( 1 << CPHA );
    19ae:	8c e4       	ldi	r24, 0x4C	; 76
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	2c e4       	ldi	r18, 0x4C	; 76
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	f9 01       	movw	r30, r18
    19b8:	20 81       	ld	r18, Z
    19ba:	24 60       	ori	r18, 0x04	; 4
    19bc:	fc 01       	movw	r30, r24
    19be:	20 83       	st	Z, r18
	PORTB |= ( 1 << SS_PIN );
    19c0:	85 e2       	ldi	r24, 0x25	; 37
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	25 e2       	ldi	r18, 0x25	; 37
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	f9 01       	movw	r30, r18
    19ca:	20 81       	ld	r18, Z
    19cc:	20 61       	ori	r18, 0x10	; 16
    19ce:	fc 01       	movw	r30, r24
    19d0:	20 83       	st	Z, r18

}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <_ZN3rtc12spi_deselectEv>:

/*
*	This routine de-selects the device by lowering the CE
*	line. Must be done after the master transmit is complete
*/
void rtc::spi_deselect( ){
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <_ZN3rtc12spi_deselectEv+0x6>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= ~( 1 << SS_PIN );
    19ea:	85 e2       	ldi	r24, 0x25	; 37
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	25 e2       	ldi	r18, 0x25	; 37
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	20 81       	ld	r18, Z
    19f6:	2f 7e       	andi	r18, 0xEF	; 239
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18

}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <_ZN3rtc8i2c_initEv>:


void rtc::i2c_init( ){
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <_ZN3rtc8i2c_initEv+0x6>
    1a0c:	1f 92       	push	r1
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	8a 83       	std	Y+2, r24	; 0x02

	char IOReg;

	/* Outputs: MOSI and SCK out, all others inputs */
	DDRB = ( 1 << DD_MOSI_PIN ) | ( 1 << DD_SCK_PIN ) | ( 1 << DD_SS_PIN );
    1a16:	84 e2       	ldi	r24, 0x24	; 36
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	20 eb       	ldi	r18, 0xB0	; 176
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	20 83       	st	Z, r18
	/* Enable SPI, Master, CPOL=0, CPHA=1, set clock rate fck/16 */
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );	// POSSIBLE ERROR: PULLING DATA HIGH
    1a20:	8c e4       	ldi	r24, 0x4C	; 76
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	21 e5       	ldi	r18, 0x51	; 81
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
	
	/* Clear the SPIF bit in SPSR */
	IOReg = SPSR;
    1a2a:	8d e4       	ldi	r24, 0x4D	; 77
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	89 83       	std	Y+1, r24	; 0x01
	IOReg = SPDR;
    1a34:	8e e4       	ldi	r24, 0x4E	; 78
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	89 83       	std	Y+1, r24	; 0x01

	spi_deselect( );
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	cc df       	rcall	.-104    	; 0x19dc <_ZN3rtc12spi_deselectEv>
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <_ZN3rtc19spi_master_transmitEh>:


// This routine exchanges 1 byte with the SPI port. 
unsigned char rtc::spi_master_transmit( unsigned char cData )
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <_ZN3rtc19spi_master_transmitEh+0x6>
    1a56:	1f 92       	push	r1
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	6b 83       	std	Y+3, r22	; 0x03

	SPDR  = cData;	// Set Pointer to beginning of String
    1a62:	8e e4       	ldi	r24, 0x4E	; 78
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	fc 01       	movw	r30, r24
    1a6a:	20 83       	st	Z, r18
	/* wait until Char is sent */
	while ( ! (SPSR & ( 1 << SPIF ))){
    1a6c:	00 00       	nop
    1a6e:	8d e4       	ldi	r24, 0x4D	; 77
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	fc 01       	movw	r30, r24
    1a74:	80 81       	ld	r24, Z
    1a76:	80 95       	com	r24
    1a78:	88 1f       	adc	r24, r24
    1a7a:	88 27       	eor	r24, r24
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	88 23       	and	r24, r24
    1a80:	b1 f7       	brne	.-20     	; 0x1a6e <_ZN3rtc19spi_master_transmitEh+0x1e>
		;	
	}

	return SPDR;
    1a82:	8e e4       	ldi	r24, 0x4E	; 78
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <_ZN3rtc10read_blockEhPhj>:

/*
*	ReadBlock reads iCount bytes starting at cAddr into the
*	buffer pBuffer
*/
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	27 97       	sbiw	r28, 0x07	; 7
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	6b 83       	std	Y+3, r22	; 0x03
    1ab4:	5d 83       	std	Y+5, r21	; 0x05
    1ab6:	4c 83       	std	Y+4, r20	; 0x04
    1ab8:	3f 83       	std	Y+7, r19	; 0x07
    1aba:	2e 83       	std	Y+6, r18	; 0x06
	
	spi_select( );
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	6f df       	rcall	.-290    	; 0x19a0 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( cAddr );
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac8:	c3 df       	rcall	.-122    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1aca:	0c c0       	rjmp	.+24     	; 0x1ae4 <_ZN3rtc10read_blockEhPhj+0x4e>
		*pBuffer++ = spi_master_transmit( 0 );
    1acc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ace:	1d 81       	ldd	r17, Y+5	; 0x05
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	9d 83       	std	Y+5, r25	; 0x05
    1ad6:	8c 83       	std	Y+4, r24	; 0x04
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	b8 df       	rcall	.-144    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	80 83       	st	Z, r24
void rtc::read_block( unsigned char cAddr, unsigned char *pBuffer, unsigned int iCount ){
	
	spi_select( );

	spi_master_transmit( cAddr );
	while( iCount-- ){
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	9c 01       	movw	r18, r24
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	31 09       	sbc	r19, r1
    1aee:	3f 83       	std	Y+7, r19	; 0x07
    1af0:	2e 83       	std	Y+6, r18	; 0x06
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	89 2b       	or	r24, r25
    1af6:	09 f4       	brne	.+2      	; 0x1afa <_ZN3rtc10read_blockEhPhj+0x64>
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	22 23       	and	r18, r18
    1afc:	39 f7       	brne	.-50     	; 0x1acc <_ZN3rtc10read_blockEhPhj+0x36>
		*pBuffer++ = spi_master_transmit( 0 );
	}

	spi_deselect();
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	6c df       	rcall	.-296    	; 0x19dc <_ZN3rtc12spi_deselectEv>

}
    1b04:	27 96       	adiw	r28, 0x07	; 7
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <_ZN3rtc11write_blockEhPhj>:
/*
*  WriteBlock sends iCount bytes from the buffer pBuffer
*  to the device at iAddr + 0x80. The device uses a split
*  memory map where all write addresses are at address +0x80
*/
void rtc::write_block(unsigned char iAddr, unsigned char *pBuffer, unsigned int iCount){
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	29 97       	sbiw	r28, 0x09	; 9
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	6d 83       	std	Y+5, r22	; 0x05
    1b34:	5f 83       	std	Y+7, r21	; 0x07
    1b36:	4e 83       	std	Y+6, r20	; 0x06
    1b38:	39 87       	std	Y+9, r19	; 0x09
    1b3a:	28 87       	std	Y+8, r18	; 0x08
	
	unsigned char uchTempControlA { 0x00 };
    1b3c:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char uchTempControlB { 0x00 };
    1b3e:	19 82       	std	Y+1, r1	; 0x01
	
	
	read_block( RTC_ADDR_CON, &uchTempControlA, 1 );
    1b40:	ae 01       	movw	r20, r28
    1b42:	4e 5f       	subi	r20, 0xFE	; 254
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	6f e0       	ldi	r22, 0x0F	; 15
    1b50:	a2 df       	rcall	.-188    	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
	if( ! (( uchTempControlA & 0x03 ) == 0x00 )){
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	83 70       	andi	r24, 0x03	; 3
    1b5a:	99 27       	eor	r25, r25
    1b5c:	89 2b       	or	r24, r25
    1b5e:	89 f0       	breq	.+34     	; 0x1b82 <_ZN3rtc11write_blockEhPhj+0x68>
		uchTempControlB = uchTempControlA & 0xFC;
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	8c 7f       	andi	r24, 0xFC	; 252
    1b64:	89 83       	std	Y+1, r24	; 0x01
		spi_select( );
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	1a df       	rcall	.-460    	; 0x19a0 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	6f e8       	ldi	r22, 0x8F	; 143
    1b72:	6e df       	rcall	.-292    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlB );
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	69 81       	ldd	r22, Y+1	; 0x01
    1b7a:	6a df       	rcall	.-300    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	2d df       	rcall	.-422    	; 0x19dc <_ZN3rtc12spi_deselectEv>
	}
	
	spi_select( );
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	0c df       	rcall	.-488    	; 0x19a0 <_ZN3rtc10spi_selectEv>

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	20 e8       	ldi	r18, 0x80	; 128
    1b8c:	28 0f       	add	r18, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	62 2f       	mov	r22, r18
    1b94:	5d df       	rcall	.-326    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
	while( iCount-- ){
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <_ZN3rtc11write_blockEhPhj+0x98>
		spi_master_transmit( *pBuffer++ );
    1b98:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	3f 83       	std	Y+7, r19	; 0x07
    1ba4:	2e 83       	std	Y+6, r18	; 0x06
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 81       	ld	r18, Z
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	62 2f       	mov	r22, r18
    1bb0:	4f df       	rcall	.-354    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
	}
	
	spi_select( );

	spi_master_transmit( iAddr + RTC_ADDR_W_OFF );
	while( iCount-- ){
    1bb2:	88 85       	ldd	r24, Y+8	; 0x08
    1bb4:	99 85       	ldd	r25, Y+9	; 0x09
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	31 09       	sbc	r19, r1
    1bbc:	39 87       	std	Y+9, r19	; 0x09
    1bbe:	28 87       	std	Y+8, r18	; 0x08
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	89 2b       	or	r24, r25
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <_ZN3rtc11write_blockEhPhj+0xae>
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	22 23       	and	r18, r18
    1bca:	31 f7       	brne	.-52     	; 0x1b98 <_ZN3rtc11write_blockEhPhj+0x7e>
		spi_master_transmit( *pBuffer++ );
	}

	spi_deselect( );
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	05 df       	rcall	.-502    	; 0x19dc <_ZN3rtc12spi_deselectEv>
	
	if( ! ( iAddr == RTC_ADDR_CON )){
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	8f 30       	cpi	r24, 0x0F	; 15
    1bd6:	79 f0       	breq	.+30     	; 0x1bf6 <_ZN3rtc11write_blockEhPhj+0xdc>
		spi_select( );
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	e1 de       	rcall	.-574    	; 0x19a0 <_ZN3rtc10spi_selectEv>

		spi_master_transmit( RTC_ADDR_CON + RTC_ADDR_W_OFF );
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	6f e8       	ldi	r22, 0x8F	; 143
    1be4:	35 df       	rcall	.-406    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>
		spi_master_transmit( uchTempControlA );
    1be6:	2a 81       	ldd	r18, Y+2	; 0x02
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	62 2f       	mov	r22, r18
    1bee:	30 df       	rcall	.-416    	; 0x1a50 <_ZN3rtc19spi_master_transmitEh>

		spi_deselect( );
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	f3 de       	rcall	.-538    	; 0x19dc <_ZN3rtc12spi_deselectEv>
	}
}
    1bf6:	29 96       	adiw	r28, 0x09	; 9
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <_ZN3rtc8get_timeEv>:


rtc_time rtc::get_time( ){
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	60 97       	sbiw	r28, 0x10	; 16
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f

	rtc_time rtmToConvert;


	read_block( RTC_ADDR_START, ( unsigned char * )&rtmToConvert, sizeof( rtc_time ));
    1c40:	ae 01       	movw	r20, r28
    1c42:	48 5f       	subi	r20, 0xF8	; 248
    1c44:	5f 4f       	sbci	r21, 0xFF	; 255
    1c46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c48:	98 89       	ldd	r25, Y+16	; 0x10
    1c4a:	27 e0       	ldi	r18, 0x07	; 7
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	22 df       	rcall	.-444    	; 0x1a96 <_ZN3rtc10read_blockEhPhj>

	return rtmToConvert;
    1c52:	27 e0       	ldi	r18, 0x07	; 7
    1c54:	fe 01       	movw	r30, r28
    1c56:	38 96       	adiw	r30, 0x08	; 8
    1c58:	ce 01       	movw	r24, r28
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	01 90       	ld	r0, Z+
    1c60:	0d 92       	st	X+, r0
    1c62:	2a 95       	dec	r18
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <_ZN3rtc8get_timeEv+0x56>
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	69 81       	ldd	r22, Y+1	; 0x01
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	5a 81       	ldd	r21, Y+2	; 0x02
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	4b 81       	ldd	r20, Y+3	; 0x03
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	8f 81       	ldd	r24, Y+7	; 0x07
    1c82:	26 2e       	mov	r2, r22
    1c84:	35 2e       	mov	r3, r21
    1c86:	44 2e       	mov	r4, r20
    1c88:	53 2e       	mov	r5, r19
    1c8a:	62 2e       	mov	r6, r18
    1c8c:	79 2e       	mov	r7, r25
    1c8e:	88 2e       	mov	r8, r24
    1c90:	a2 2c       	mov	r10, r2
    1c92:	b3 2c       	mov	r11, r3
    1c94:	c4 2c       	mov	r12, r4
    1c96:	d5 2c       	mov	r13, r5
    1c98:	e6 2c       	mov	r14, r6
    1c9a:	f7 2c       	mov	r15, r7
    1c9c:	08 2d       	mov	r16, r8
    1c9e:	19 2d       	mov	r17, r9
}
    1ca0:	2a 2d       	mov	r18, r10
    1ca2:	3b 2d       	mov	r19, r11
    1ca4:	4c 2d       	mov	r20, r12
    1ca6:	5d 2d       	mov	r21, r13
    1ca8:	6e 2d       	mov	r22, r14
    1caa:	7f 2d       	mov	r23, r15
    1cac:	80 2f       	mov	r24, r16
    1cae:	91 2f       	mov	r25, r17
    1cb0:	60 96       	adiw	r28, 0x10	; 16
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	ff 90       	pop	r15
    1cc6:	ef 90       	pop	r14
    1cc8:	df 90       	pop	r13
    1cca:	cf 90       	pop	r12
    1ccc:	bf 90       	pop	r11
    1cce:	af 90       	pop	r10
    1cd0:	9f 90       	pop	r9
    1cd2:	8f 90       	pop	r8
    1cd4:	7f 90       	pop	r7
    1cd6:	6f 90       	pop	r6
    1cd8:	5f 90       	pop	r5
    1cda:	4f 90       	pop	r4
    1cdc:	3f 90       	pop	r3
    1cde:	2f 90       	pop	r2
    1ce0:	08 95       	ret

00001ce2 <_ZN3rtc8set_timeEP8rtc_time>:


void rtc::set_time( rtc_time* rtmSetTime ){
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <_ZN3rtc8set_timeEP8rtc_time+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <_ZN3rtc8set_timeEP8rtc_time+0x8>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	7c 83       	std	Y+4, r23	; 0x04
    1cf4:	6b 83       	std	Y+3, r22	; 0x03

	write_block( RTC_ADDR_START, ( unsigned char * )rtmSetTime, sizeof(rtc_time));
    1cf6:	4b 81       	ldd	r20, Y+3	; 0x03
    1cf8:	5c 81       	ldd	r21, Y+4	; 0x04
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	27 e0       	ldi	r18, 0x07	; 7
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	0a df       	rcall	.-492    	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <_ZN3rtc11rtm_to_charE8rtc_timePhj>:


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	a6 97       	sbiw	r28, 0x26	; 38
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	9b 8f       	std	Y+27, r25	; 0x1b
    1d36:	8a 8f       	std	Y+26, r24	; 0x1a
    1d38:	0c 8f       	std	Y+28, r16	; 0x1c
    1d3a:	1d 8f       	std	Y+29, r17	; 0x1d
    1d3c:	2e 8f       	std	Y+30, r18	; 0x1e
    1d3e:	3f 8f       	std	Y+31, r19	; 0x1f
    1d40:	48 a3       	std	Y+32, r20	; 0x20
    1d42:	59 a3       	std	Y+33, r21	; 0x21
    1d44:	6a a3       	std	Y+34, r22	; 0x22
    1d46:	fc a2       	std	Y+36, r15	; 0x24
    1d48:	eb a2       	std	Y+35, r14	; 0x23
    1d4a:	de a2       	std	Y+38, r13	; 0x26
    1d4c:	cd a2       	std	Y+37, r12	; 0x25
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
	uchTimeOut[valTextOffset + 15] = valDates >> 8;

	memcpy( uchToReturn, uchTimeOut, valCharLen );

}
    1d4e:	0d b7       	in	r16, 0x3d	; 61
    1d50:	1e b7       	in	r17, 0x3e	; 62
    1d52:	8d b7       	in	r24, 0x3d	; 61
    1d54:	9e b7       	in	r25, 0x3e	; 62
    1d56:	7c 01       	movw	r14, r24
}


void rtc::rtm_to_char( rtc_time rtmToConvert, unsigned char* uchToReturn, unsigned int valCharLen ){
	
	unsigned char uchTimeOut[ valCharLen ];
    1d58:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9d 83       	std	Y+5, r25	; 0x05
    1d60:	8c 83       	std	Y+4, r24	; 0x04
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	2d b7       	in	r18, 0x3d	; 61
    1d66:	3e b7       	in	r19, 0x3e	; 62
    1d68:	28 1b       	sub	r18, r24
    1d6a:	39 0b       	sbc	r19, r25
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	3e bf       	out	0x3e, r19	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	2d bf       	out	0x3d, r18	; 61
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	9f 83       	std	Y+7, r25	; 0x07
    1d7e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t valTimeLength = RTC_DISP_LEN;
    1d80:	80 e1       	ldi	r24, 0x10	; 16
    1d82:	88 87       	std	Y+8, r24	; 0x08
	unsigned int valTextOffset = ( valCharLen - valTimeLength ) / 2;
    1d84:	88 85       	ldd	r24, Y+8	; 0x08
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	2d a1       	ldd	r18, Y+37	; 0x25
    1d8c:	3e a1       	ldd	r19, Y+38	; 0x26
    1d8e:	a9 01       	movw	r20, r18
    1d90:	48 1b       	sub	r20, r24
    1d92:	59 0b       	sbc	r21, r25
    1d94:	ca 01       	movw	r24, r20
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	9a 87       	std	Y+10, r25	; 0x0a
    1d9c:	89 87       	std	Y+9, r24	; 0x09
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1d9e:	1b 82       	std	Y+3, r1	; 0x03
    1da0:	1a 82       	std	Y+2, r1	; 0x02
    1da2:	0e c0       	rjmp	.+28     	; 0x1dc0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0xac>
		uchTimeOut[valN] = ' ';
    1da4:	2e 81       	ldd	r18, Y+6	; 0x06
    1da6:	3f 81       	ldd	r19, Y+7	; 0x07
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	82 0f       	add	r24, r18
    1dae:	93 1f       	adc	r25, r19
    1db0:	20 e2       	ldi	r18, 0x20	; 32
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 83       	st	Z, r18
	uint32_t valMonths;
	month valMonth;
	date valDates;

	
	for(unsigned int valN = 0; valN < valCharLen; valN++ ){
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	9b 83       	std	Y+3, r25	; 0x03
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	58 f3       	brcs	.-42     	; 0x1da4 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x90>
		uchTimeOut[valN] = ' ';
	}

	valMins &= 0x0000;
    1dce:	1c 86       	std	Y+12, r1	; 0x0c
    1dd0:	1b 86       	std	Y+11, r1	; 0x0b
	valMins |= (( rtmToConvert.ucMinutes & 0xF0 ) + 0x0300 ) << 4;
    1dd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	80 7f       	andi	r24, 0xF0	; 240
    1dda:	99 27       	eor	r25, r25
    1ddc:	9d 5f       	subi	r25, 0xFD	; 253
    1dde:	82 95       	swap	r24
    1de0:	92 95       	swap	r25
    1de2:	90 7f       	andi	r25, 0xF0	; 240
    1de4:	98 27       	eor	r25, r24
    1de6:	80 7f       	andi	r24, 0xF0	; 240
    1de8:	98 27       	eor	r25, r24
    1dea:	9c 01       	movw	r18, r24
    1dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df0:	82 2b       	or	r24, r18
    1df2:	93 2b       	or	r25, r19
    1df4:	9c 87       	std	Y+12, r25	; 0x0c
    1df6:	8b 87       	std	Y+11, r24	; 0x0b
	valMins |= ( rtmToConvert.ucMinutes & 0x0F) + 0x0030;
    1df8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	8f 70       	andi	r24, 0x0F	; 15
    1e00:	99 27       	eor	r25, r25
    1e02:	c0 96       	adiw	r24, 0x30	; 48
    1e04:	9c 01       	movw	r18, r24
    1e06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0a:	82 2b       	or	r24, r18
    1e0c:	93 2b       	or	r25, r19
    1e0e:	9c 87       	std	Y+12, r25	; 0x0c
    1e10:	8b 87       	std	Y+11, r24	; 0x0b
	valHours &= 0x0000;
    1e12:	1e 86       	std	Y+14, r1	; 0x0e
    1e14:	1d 86       	std	Y+13, r1	; 0x0d
	valHours |= (( rtmToConvert.ucHours & 0x10 ) + 0x0300 ) << 4;
    1e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	80 71       	andi	r24, 0x10	; 16
    1e1e:	99 27       	eor	r25, r25
    1e20:	9d 5f       	subi	r25, 0xFD	; 253
    1e22:	82 95       	swap	r24
    1e24:	92 95       	swap	r25
    1e26:	90 7f       	andi	r25, 0xF0	; 240
    1e28:	98 27       	eor	r25, r24
    1e2a:	80 7f       	andi	r24, 0xF0	; 240
    1e2c:	98 27       	eor	r25, r24
    1e2e:	9c 01       	movw	r18, r24
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	82 2b       	or	r24, r18
    1e36:	93 2b       	or	r25, r19
    1e38:	9e 87       	std	Y+14, r25	; 0x0e
    1e3a:	8d 87       	std	Y+13, r24	; 0x0d
	valHours |= ( rtmToConvert.ucHours & 0x0F) + 0x0030;
    1e3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	8f 70       	andi	r24, 0x0F	; 15
    1e44:	99 27       	eor	r25, r25
    1e46:	c0 96       	adiw	r24, 0x30	; 48
    1e48:	9c 01       	movw	r18, r24
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	82 2b       	or	r24, r18
    1e50:	93 2b       	or	r25, r19
    1e52:	9e 87       	std	Y+14, r25	; 0x0e
    1e54:	8d 87       	std	Y+13, r24	; 0x0d
	if(( rtmToConvert.ucHours & RTC_12PM ) == RTC_12AM ){
    1e56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	80 76       	andi	r24, 0x60	; 96
    1e5e:	99 27       	eor	r25, r25
    1e60:	80 34       	cpi	r24, 0x40	; 64
    1e62:	91 05       	cpc	r25, r1
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x158>
		valAMPM = 'A';
    1e66:	81 e4       	ldi	r24, 0x41	; 65
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x15c>
	}else{
		valAMPM = 'P';
    1e6c:	80 e5       	ldi	r24, 0x50	; 80
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	}
	valDay &= 0x00;
    1e70:	1f 86       	std	Y+15, r1	; 0x0f
	valDays &= 0x00000000;
    1e72:	19 8a       	std	Y+17, r1	; 0x11
    1e74:	18 8a       	std	Y+16, r1	; 0x10
	valDay = ((( rtmToConvert.ucDay >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucDay ) & 0x0F );
    1e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e78:	82 95       	swap	r24
    1e7a:	8f 70       	andi	r24, 0x0F	; 15
    1e7c:	88 0f       	add	r24, r24
    1e7e:	98 2f       	mov	r25, r24
    1e80:	99 0f       	add	r25, r25
    1e82:	99 0f       	add	r25, r25
    1e84:	98 0f       	add	r25, r24
    1e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e88:	8f 70       	andi	r24, 0x0F	; 15
    1e8a:	89 0f       	add	r24, r25
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	valDays = chrDays[(( valDay == 0 ) ? 0 : valDay - 1 ) * 2];
    1e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e90:	88 23       	and	r24, r24
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x18e>
    1e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x192>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	8e 59       	subi	r24, 0x9E	; 158
    1ea8:	9e 4f       	sbci	r25, 0xFE	; 254
    1eaa:	fc 01       	movw	r30, r24
    1eac:	80 81       	ld	r24, Z
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	99 8b       	std	Y+17, r25	; 0x11
    1eb4:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 1] << 8;
    1eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb8:	88 23       	and	r24, r24
    1eba:	41 f0       	breq	.+16     	; 0x1ecc <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1b8>
    1ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1bc>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	8e 59       	subi	r24, 0x9E	; 158
    1ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	98 2f       	mov	r25, r24
    1ede:	88 27       	eor	r24, r24
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	88 89       	ldd	r24, Y+16	; 0x10
    1ee4:	99 89       	ldd	r25, Y+17	; 0x11
    1ee6:	82 2b       	or	r24, r18
    1ee8:	93 2b       	or	r25, r19
    1eea:	99 8b       	std	Y+17, r25	; 0x11
    1eec:	88 8b       	std	Y+16, r24	; 0x10
	valDays |= (( uint16_t )( chrDays[((( valDay == 0 ) ? 0 : valDay - 1 ) * 2 ) + 2])) << 16;
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	88 23       	and	r24, r24
    1ef2:	31 f0       	breq	.+12     	; 0x1f00 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1ec>
    1ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x1f0>
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	8e 59       	subi	r24, 0x9E	; 158
    1f06:	9e 4f       	sbci	r25, 0xFE	; 254
    1f08:	fc 01       	movw	r30, r24
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	99 27       	eor	r25, r25
    1f12:	88 27       	eor	r24, r24
    1f14:	28 89       	ldd	r18, Y+16	; 0x10
    1f16:	39 89       	ldd	r19, Y+17	; 0x11
    1f18:	82 2b       	or	r24, r18
    1f1a:	93 2b       	or	r25, r19
    1f1c:	99 8b       	std	Y+17, r25	; 0x11
    1f1e:	88 8b       	std	Y+16, r24	; 0x10
	valMonth &= 0x00;
    1f20:	1b 8a       	std	Y+19, r1	; 0x13
    1f22:	1a 8a       	std	Y+18, r1	; 0x12
	valMonths &= 0x00000000;
    1f24:	1c 8a       	std	Y+20, r1	; 0x14
    1f26:	1d 8a       	std	Y+21, r1	; 0x15
    1f28:	1e 8a       	std	Y+22, r1	; 0x16
    1f2a:	1f 8a       	std	Y+23, r1	; 0x17
	valMonth = ((( rtmToConvert.ucMonth >> 4 ) & 0x0F ) * 10 ) + (( rtmToConvert.ucMonth ) & 0x0F );
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	82 95       	swap	r24
    1f30:	8f 70       	andi	r24, 0x0F	; 15
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	99 27       	eor	r25, r25
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	9c 01       	movw	r18, r24
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	22 0f       	add	r18, r18
    1f44:	33 1f       	adc	r19, r19
    1f46:	28 0f       	add	r18, r24
    1f48:	39 1f       	adc	r19, r25
    1f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	8f 70       	andi	r24, 0x0F	; 15
    1f52:	99 27       	eor	r25, r25
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	9b 8b       	std	Y+19, r25	; 0x13
    1f5a:	8a 8b       	std	Y+18, r24	; 0x12
	valMonths = chrMonths[(( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3];
    1f5c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f5e:	9b 89       	ldd	r25, Y+19	; 0x13
    1f60:	89 2b       	or	r24, r25
    1f62:	49 f0       	breq	.+18     	; 0x1f76 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x262>
    1f64:	2a 89       	ldd	r18, Y+18	; 0x12
    1f66:	3b 89       	ldd	r19, Y+19	; 0x13
    1f68:	c9 01       	movw	r24, r18
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	82 0f       	add	r24, r18
    1f70:	93 1f       	adc	r25, r19
    1f72:	03 97       	sbiw	r24, 0x03	; 3
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x266>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	82 5c       	subi	r24, 0xC2	; 194
    1f7c:	9e 4f       	sbci	r25, 0xFE	; 254
    1f7e:	fc 01       	movw	r30, r24
    1f80:	80 81       	ld	r24, Z
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	8c 8b       	std	Y+20, r24	; 0x14
    1f8c:	9d 8b       	std	Y+21, r25	; 0x15
    1f8e:	ae 8b       	std	Y+22, r26	; 0x16
    1f90:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 1] << 8;
    1f92:	8a 89       	ldd	r24, Y+18	; 0x12
    1f94:	9b 89       	ldd	r25, Y+19	; 0x13
    1f96:	89 2b       	or	r24, r25
    1f98:	49 f0       	breq	.+18     	; 0x1fac <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x298>
    1f9a:	2a 89       	ldd	r18, Y+18	; 0x12
    1f9c:	3b 89       	ldd	r19, Y+19	; 0x13
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	02 97       	sbiw	r24, 0x02	; 2
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x29c>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	82 5c       	subi	r24, 0xC2	; 194
    1fb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	88 27       	eor	r24, r24
    1fc0:	09 2e       	mov	r0, r25
    1fc2:	00 0c       	add	r0, r0
    1fc4:	aa 0b       	sbc	r26, r26
    1fc6:	bb 0b       	sbc	r27, r27
    1fc8:	2c 89       	ldd	r18, Y+20	; 0x14
    1fca:	3d 89       	ldd	r19, Y+21	; 0x15
    1fcc:	4e 89       	ldd	r20, Y+22	; 0x16
    1fce:	5f 89       	ldd	r21, Y+23	; 0x17
    1fd0:	82 2b       	or	r24, r18
    1fd2:	93 2b       	or	r25, r19
    1fd4:	a4 2b       	or	r26, r20
    1fd6:	b5 2b       	or	r27, r21
    1fd8:	8c 8b       	std	Y+20, r24	; 0x14
    1fda:	9d 8b       	std	Y+21, r25	; 0x15
    1fdc:	ae 8b       	std	Y+22, r26	; 0x16
    1fde:	bf 8b       	std	Y+23, r27	; 0x17
	valMonths |= (( uint32_t )( chrMonths[((( valMonth == 0 ) ? 0 : valMonth - 1 ) * 3 ) + 2])) << 16;
    1fe0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fe2:	9b 89       	ldd	r25, Y+19	; 0x13
    1fe4:	89 2b       	or	r24, r25
    1fe6:	49 f0       	breq	.+18     	; 0x1ffa <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2e6>
    1fe8:	2a 89       	ldd	r18, Y+18	; 0x12
    1fea:	3b 89       	ldd	r19, Y+19	; 0x13
    1fec:	c9 01       	movw	r24, r18
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	82 0f       	add	r24, r18
    1ff4:	93 1f       	adc	r25, r19
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <_ZN3rtc11rtm_to_charE8rtc_timePhj+0x2ea>
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	82 5c       	subi	r24, 0xC2	; 194
    2000:	9e 4f       	sbci	r25, 0xFE	; 254
    2002:	fc 01       	movw	r30, r24
    2004:	80 81       	ld	r24, Z
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	dc 01       	movw	r26, r24
    2010:	99 27       	eor	r25, r25
    2012:	88 27       	eor	r24, r24
    2014:	2c 89       	ldd	r18, Y+20	; 0x14
    2016:	3d 89       	ldd	r19, Y+21	; 0x15
    2018:	4e 89       	ldd	r20, Y+22	; 0x16
    201a:	5f 89       	ldd	r21, Y+23	; 0x17
    201c:	82 2b       	or	r24, r18
    201e:	93 2b       	or	r25, r19
    2020:	a4 2b       	or	r26, r20
    2022:	b5 2b       	or	r27, r21
    2024:	8c 8b       	std	Y+20, r24	; 0x14
    2026:	9d 8b       	std	Y+21, r25	; 0x15
    2028:	ae 8b       	std	Y+22, r26	; 0x16
    202a:	bf 8b       	std	Y+23, r27	; 0x17
	valDates &= 0x0000;
    202c:	19 8e       	std	Y+25, r1	; 0x19
    202e:	18 8e       	std	Y+24, r1	; 0x18
	valDates |= (( rtmToConvert.ucDate & 0xF0 ) + 0x0300 ) << 4;
    2030:	88 a1       	ldd	r24, Y+32	; 0x20
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	80 7f       	andi	r24, 0xF0	; 240
    2038:	99 27       	eor	r25, r25
    203a:	9d 5f       	subi	r25, 0xFD	; 253
    203c:	82 95       	swap	r24
    203e:	92 95       	swap	r25
    2040:	90 7f       	andi	r25, 0xF0	; 240
    2042:	98 27       	eor	r25, r24
    2044:	80 7f       	andi	r24, 0xF0	; 240
    2046:	98 27       	eor	r25, r24
    2048:	9c 01       	movw	r18, r24
    204a:	88 8d       	ldd	r24, Y+24	; 0x18
    204c:	99 8d       	ldd	r25, Y+25	; 0x19
    204e:	82 2b       	or	r24, r18
    2050:	93 2b       	or	r25, r19
    2052:	99 8f       	std	Y+25, r25	; 0x19
    2054:	88 8f       	std	Y+24, r24	; 0x18
	valDates |= ( rtmToConvert.ucDate & 0x0F) + 0x0030;
    2056:	88 a1       	ldd	r24, Y+32	; 0x20
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	8f 70       	andi	r24, 0x0F	; 15
    205e:	99 27       	eor	r25, r25
    2060:	c0 96       	adiw	r24, 0x30	; 48
    2062:	9c 01       	movw	r18, r24
    2064:	88 8d       	ldd	r24, Y+24	; 0x18
    2066:	99 8d       	ldd	r25, Y+25	; 0x19
    2068:	82 2b       	or	r24, r18
    206a:	93 2b       	or	r25, r19
    206c:	99 8f       	std	Y+25, r25	; 0x19
    206e:	88 8f       	std	Y+24, r24	; 0x18
	
	uchTimeOut[valTextOffset] = valHours >> 8;
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	89 2f       	mov	r24, r25
    2076:	99 27       	eor	r25, r25
    2078:	48 2f       	mov	r20, r24
    207a:	2e 81       	ldd	r18, Y+6	; 0x06
    207c:	3f 81       	ldd	r19, Y+7	; 0x07
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	fc 01       	movw	r30, r24
    2088:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 1] = valHours & 0x00FF;
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	4d 85       	ldd	r20, Y+13	; 0x0d
    2092:	2e 81       	ldd	r18, Y+6	; 0x06
    2094:	3f 81       	ldd	r19, Y+7	; 0x07
    2096:	82 0f       	add	r24, r18
    2098:	93 1f       	adc	r25, r19
    209a:	fc 01       	movw	r30, r24
    209c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 2] = ':';
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	02 96       	adiw	r24, 0x02	; 2
    20a4:	2e 81       	ldd	r18, Y+6	; 0x06
    20a6:	3f 81       	ldd	r19, Y+7	; 0x07
    20a8:	82 0f       	add	r24, r18
    20aa:	93 1f       	adc	r25, r19
    20ac:	2a e3       	ldi	r18, 0x3A	; 58
    20ae:	fc 01       	movw	r30, r24
    20b0:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 3] = valMins >> 8;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	03 96       	adiw	r24, 0x03	; 3
    20b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    20ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    20bc:	23 2f       	mov	r18, r19
    20be:	33 27       	eor	r19, r19
    20c0:	42 2f       	mov	r20, r18
    20c2:	2e 81       	ldd	r18, Y+6	; 0x06
    20c4:	3f 81       	ldd	r19, Y+7	; 0x07
    20c6:	82 0f       	add	r24, r18
    20c8:	93 1f       	adc	r25, r19
    20ca:	fc 01       	movw	r30, r24
    20cc:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 4] = valMins & 0x00FF;
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	04 96       	adiw	r24, 0x04	; 4
    20d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    20d6:	2e 81       	ldd	r18, Y+6	; 0x06
    20d8:	3f 81       	ldd	r19, Y+7	; 0x07
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	fc 01       	movw	r30, r24
    20e0:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 5] = valAMPM;
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	05 96       	adiw	r24, 0x05	; 5
    20e8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ea:	3f 81       	ldd	r19, Y+7	; 0x07
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	29 81       	ldd	r18, Y+1	; 0x01
    20f2:	fc 01       	movw	r30, r24
    20f4:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 6] = 'M';
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	06 96       	adiw	r24, 0x06	; 6
    20fc:	2e 81       	ldd	r18, Y+6	; 0x06
    20fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	2d e4       	ldi	r18, 0x4D	; 77
    2106:	fc 01       	movw	r30, r24
    2108:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 7] = ' ';
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	07 96       	adiw	r24, 0x07	; 7
    2110:	2e 81       	ldd	r18, Y+6	; 0x06
    2112:	3f 81       	ldd	r19, Y+7	; 0x07
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	20 e2       	ldi	r18, 0x20	; 32
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 8] = valDays & 0xFF;
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	08 96       	adiw	r24, 0x08	; 8
    2124:	48 89       	ldd	r20, Y+16	; 0x10
    2126:	2e 81       	ldd	r18, Y+6	; 0x06
    2128:	3f 81       	ldd	r19, Y+7	; 0x07
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	fc 01       	movw	r30, r24
    2130:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 9] = ( valDays >> 8 ) & 0xFF;
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	09 96       	adiw	r24, 0x09	; 9
    2138:	28 89       	ldd	r18, Y+16	; 0x10
    213a:	39 89       	ldd	r19, Y+17	; 0x11
    213c:	23 2f       	mov	r18, r19
    213e:	33 27       	eor	r19, r19
    2140:	42 2f       	mov	r20, r18
    2142:	2e 81       	ldd	r18, Y+6	; 0x06
    2144:	3f 81       	ldd	r19, Y+7	; 0x07
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	fc 01       	movw	r30, r24
    214c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 10] = ',';
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	0a 96       	adiw	r24, 0x0a	; 10
    2154:	2e 81       	ldd	r18, Y+6	; 0x06
    2156:	3f 81       	ldd	r19, Y+7	; 0x07
    2158:	82 0f       	add	r24, r18
    215a:	93 1f       	adc	r25, r19
    215c:	2c e2       	ldi	r18, 0x2C	; 44
    215e:	fc 01       	movw	r30, r24
    2160:	20 83       	st	Z, r18
	uchTimeOut[valTextOffset + 11] = valMonths & 0xFF;
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	0b 96       	adiw	r24, 0x0b	; 11
    2168:	4c 89       	ldd	r20, Y+20	; 0x14
    216a:	2e 81       	ldd	r18, Y+6	; 0x06
    216c:	3f 81       	ldd	r19, Y+7	; 0x07
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	fc 01       	movw	r30, r24
    2174:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 12] = ( valMonths >> 8 ) & 0xFF;
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	9c 01       	movw	r18, r24
    217c:	24 5f       	subi	r18, 0xF4	; 244
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	8c 89       	ldd	r24, Y+20	; 0x14
    2182:	9d 89       	ldd	r25, Y+21	; 0x15
    2184:	ae 89       	ldd	r26, Y+22	; 0x16
    2186:	bf 89       	ldd	r27, Y+23	; 0x17
    2188:	89 2f       	mov	r24, r25
    218a:	9a 2f       	mov	r25, r26
    218c:	ab 2f       	mov	r26, r27
    218e:	bb 27       	eor	r27, r27
    2190:	48 2f       	mov	r20, r24
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
    2194:	9f 81       	ldd	r25, Y+7	; 0x07
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	fc 01       	movw	r30, r24
    219c:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 13] = ( valMonths >> 16 ) & 0xFF;
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	9c 01       	movw	r18, r24
    21a4:	23 5f       	subi	r18, 0xF3	; 243
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	8c 89       	ldd	r24, Y+20	; 0x14
    21aa:	9d 89       	ldd	r25, Y+21	; 0x15
    21ac:	ae 89       	ldd	r26, Y+22	; 0x16
    21ae:	bf 89       	ldd	r27, Y+23	; 0x17
    21b0:	cd 01       	movw	r24, r26
    21b2:	aa 27       	eor	r26, r26
    21b4:	bb 27       	eor	r27, r27
    21b6:	48 2f       	mov	r20, r24
    21b8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ba:	9f 81       	ldd	r25, Y+7	; 0x07
    21bc:	82 0f       	add	r24, r18
    21be:	93 1f       	adc	r25, r19
    21c0:	fc 01       	movw	r30, r24
    21c2:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 14] = valDates & 0x00FF;
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	0e 96       	adiw	r24, 0x0e	; 14
    21ca:	48 8d       	ldd	r20, Y+24	; 0x18
    21cc:	2e 81       	ldd	r18, Y+6	; 0x06
    21ce:	3f 81       	ldd	r19, Y+7	; 0x07
    21d0:	82 0f       	add	r24, r18
    21d2:	93 1f       	adc	r25, r19
    21d4:	fc 01       	movw	r30, r24
    21d6:	40 83       	st	Z, r20
	uchTimeOut[valTextOffset + 15] = valDates >> 8;
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	0f 96       	adiw	r24, 0x0f	; 15
    21de:	28 8d       	ldd	r18, Y+24	; 0x18
    21e0:	39 8d       	ldd	r19, Y+25	; 0x19
    21e2:	23 2f       	mov	r18, r19
    21e4:	33 27       	eor	r19, r19
    21e6:	42 2f       	mov	r20, r18
    21e8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ea:	3f 81       	ldd	r19, Y+7	; 0x07
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	fc 01       	movw	r30, r24
    21f2:	40 83       	st	Z, r20

	memcpy( uchToReturn, uchTimeOut, valCharLen );
    21f4:	2e 81       	ldd	r18, Y+6	; 0x06
    21f6:	3f 81       	ldd	r19, Y+7	; 0x07
    21f8:	4d a1       	ldd	r20, Y+37	; 0x25
    21fa:	5e a1       	ldd	r21, Y+38	; 0x26
    21fc:	8b a1       	ldd	r24, Y+35	; 0x23
    21fe:	9c a1       	ldd	r25, Y+36	; 0x24
    2200:	b9 01       	movw	r22, r18
    2202:	02 d7       	rcall	.+3588   	; 0x3008 <memcpy>
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	fe be       	out	0x3e, r15	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	ed be       	out	0x3d, r14	; 61

}
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	1e bf       	out	0x3e, r17	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	0d bf       	out	0x3d, r16	; 61
    2218:	a6 96       	adiw	r28, 0x26	; 38
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <_ZN3rtc8alarm_onEh>:

void rtc::alarm_on( uint8_t valAlarm01 ){
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	00 d0       	rcall	.+0      	; 0x223c <_ZN3rtc8alarm_onEh+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <_ZN3rtc8alarm_onEh+0x8>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9b 83       	std	Y+3, r25	; 0x03
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    2248:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	b1 f4       	brne	.+44     	; 0x227c <_ZN3rtc8alarm_onEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	ae 01       	movw	r20, r28
    225a:	4f 5f       	subi	r20, 0xFF	; 255
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	6f e0       	ldi	r22, 0x0F	; 15
    2260:	1a dc       	rcall	.-1996   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x03;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	83 60       	ori	r24, 0x03	; 3
    2266:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	21 e0       	ldi	r18, 0x01	; 1
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	ae 01       	movw	r20, r28
    2272:	4f 5f       	subi	r20, 0xFF	; 255
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	6f e0       	ldi	r22, 0x0F	; 15
    2278:	50 dc       	rcall	.-1888   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
    227a:	31 c0       	rjmp	.+98     	; 0x22de <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	88 23       	and	r24, r24
    2280:	b1 f4       	brne	.+44     	; 0x22ae <_ZN3rtc8alarm_onEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	21 e0       	ldi	r18, 0x01	; 1
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	ae 01       	movw	r20, r28
    228c:	4f 5f       	subi	r20, 0xFF	; 255
    228e:	5f 4f       	sbci	r21, 0xFF	; 255
    2290:	6f e0       	ldi	r22, 0x0F	; 15
    2292:	01 dc       	rcall	.-2046   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x01;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	81 60       	ori	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
    229e:	21 e0       	ldi	r18, 0x01	; 1
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	ae 01       	movw	r20, r28
    22a4:	4f 5f       	subi	r20, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	6f e0       	ldi	r22, 0x0F	; 15
    22aa:	37 dc       	rcall	.-1938   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
    22ac:	18 c0       	rjmp	.+48     	; 0x22de <_ZN3rtc8alarm_onEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	a9 f4       	brne	.+42     	; 0x22de <_ZN3rtc8alarm_onEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	ae 01       	movw	r20, r28
    22be:	4f 5f       	subi	r20, 0xFF	; 255
    22c0:	5f 4f       	sbci	r21, 0xFF	; 255
    22c2:	6f e0       	ldi	r22, 0x0F	; 15
    22c4:	e8 db       	rcall	.-2096   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl |= 0x02;
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	82 60       	ori	r24, 0x02	; 2
    22ca:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	21 e0       	ldi	r18, 0x01	; 1
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	ae 01       	movw	r20, r28
    22d6:	4f 5f       	subi	r20, 0xFF	; 255
    22d8:	5f 4f       	sbci	r21, 0xFF	; 255
    22da:	6f e0       	ldi	r22, 0x0F	; 15
    22dc:	1e dc       	rcall	.-1988   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
	}
	
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <_ZN3rtc9alarm_offEh>:


void rtc::alarm_off( uint8_t valAlarm01 ){
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <_ZN3rtc9alarm_offEh+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <_ZN3rtc9alarm_offEh+0x8>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	9b 83       	std	Y+3, r25	; 0x03
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char uchTempControl { 0x00 };
    22fe:	19 82       	std	Y+1, r1	; 0x01


	if( valAlarm01 == RTC_ALARM_BOTH ){
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	b1 f4       	brne	.+44     	; 0x2332 <_ZN3rtc9alarm_offEh+0x46>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	ae 01       	movw	r20, r28
    2310:	4f 5f       	subi	r20, 0xFF	; 255
    2312:	5f 4f       	sbci	r21, 0xFF	; 255
    2314:	6f e0       	ldi	r22, 0x0F	; 15
    2316:	bf db       	rcall	.-2178   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFC;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	8c 7f       	andi	r24, 0xFC	; 252
    231c:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	9b 81       	ldd	r25, Y+3	; 0x03
    2322:	21 e0       	ldi	r18, 0x01	; 1
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	ae 01       	movw	r20, r28
    2328:	4f 5f       	subi	r20, 0xFF	; 255
    232a:	5f 4f       	sbci	r21, 0xFF	; 255
    232c:	6f e0       	ldi	r22, 0x0F	; 15
    232e:	f5 db       	rcall	.-2070   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
    2330:	31 c0       	rjmp	.+98     	; 0x2394 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_0 ){
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	88 23       	and	r24, r24
    2336:	b1 f4       	brne	.+44     	; 0x2364 <_ZN3rtc9alarm_offEh+0x78>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	21 e0       	ldi	r18, 0x01	; 1
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	ae 01       	movw	r20, r28
    2342:	4f 5f       	subi	r20, 0xFF	; 255
    2344:	5f 4f       	sbci	r21, 0xFF	; 255
    2346:	6f e0       	ldi	r22, 0x0F	; 15
    2348:	a6 db       	rcall	.-2228   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFE;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8e 7f       	andi	r24, 0xFE	; 254
    234e:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	21 e0       	ldi	r18, 0x01	; 1
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	ae 01       	movw	r20, r28
    235a:	4f 5f       	subi	r20, 0xFF	; 255
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	6f e0       	ldi	r22, 0x0F	; 15
    2360:	dc db       	rcall	.-2120   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
    2362:	18 c0       	rjmp	.+48     	; 0x2394 <_ZN3rtc9alarm_offEh+0xa8>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	a9 f4       	brne	.+42     	; 0x2394 <_ZN3rtc9alarm_offEh+0xa8>
		read_block( RTC_ADDR_CON, &uchTempControl, 1 );
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	ae 01       	movw	r20, r28
    2374:	4f 5f       	subi	r20, 0xFF	; 255
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	6f e0       	ldi	r22, 0x0F	; 15
    237a:	8d db       	rcall	.-2278   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		uchTempControl &= 0xFD;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	8d 7f       	andi	r24, 0xFD	; 253
    2380:	89 83       	std	Y+1, r24	; 0x01
		write_block( RTC_ADDR_CON, &uchTempControl, 1);
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	21 e0       	ldi	r18, 0x01	; 1
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	ae 01       	movw	r20, r28
    238c:	4f 5f       	subi	r20, 0xFF	; 255
    238e:	5f 4f       	sbci	r21, 0xFF	; 255
    2390:	6f e0       	ldi	r22, 0x0F	; 15
    2392:	c3 db       	rcall	.-2170   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
	}

}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <_ZN3rtc14clear_interuptEh>:


void rtc::clear_interupt( uint8_t valAlarm01 ){
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <_ZN3rtc14clear_interuptEh+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <_ZN3rtc14clear_interuptEh+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9b 83       	std	Y+3, r25	; 0x03
    23b0:	8a 83       	std	Y+2, r24	; 0x02
    23b2:	6c 83       	std	Y+4, r22	; 0x04
	
	unsigned char chrNull;
	
	
	if( valAlarm01 == RTC_ALARM_0 ){
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	88 23       	and	r24, r24
    23b8:	51 f4       	brne	.+20     	; 0x23ce <_ZN3rtc14clear_interuptEh+0x2c>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	9b 81       	ldd	r25, Y+3	; 0x03
    23be:	21 e0       	ldi	r18, 0x01	; 1
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	ae 01       	movw	r20, r28
    23c4:	4f 5f       	subi	r20, 0xFF	; 255
    23c6:	5f 4f       	sbci	r21, 0xFF	; 255
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	65 db       	rcall	.-2358   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
    23cc:	22 c0       	rjmp	.+68     	; 0x2412 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_1 ){
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	81 30       	cpi	r24, 0x01	; 1
    23d2:	51 f4       	brne	.+20     	; 0x23e8 <_ZN3rtc14clear_interuptEh+0x46>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	9b 81       	ldd	r25, Y+3	; 0x03
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	ae 01       	movw	r20, r28
    23de:	4f 5f       	subi	r20, 0xFF	; 255
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	6b e0       	ldi	r22, 0x0B	; 11
    23e4:	58 db       	rcall	.-2384   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
    23e6:	15 c0       	rjmp	.+42     	; 0x2412 <_ZN3rtc14clear_interuptEh+0x70>
	}else if( valAlarm01 == RTC_ALARM_BOTH ){
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	91 f4       	brne	.+36     	; 0x2412 <_ZN3rtc14clear_interuptEh+0x70>
		read_block( RTC_ADDR_A0S, &chrNull, 1 );
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	ae 01       	movw	r20, r28
    23f8:	4f 5f       	subi	r20, 0xFF	; 255
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	67 e0       	ldi	r22, 0x07	; 7
    23fe:	4b db       	rcall	.-2410   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
		read_block( RTC_ADDR_A1S, &chrNull, 1 );
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	21 e0       	ldi	r18, 0x01	; 1
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	ae 01       	movw	r20, r28
    240a:	4f 5f       	subi	r20, 0xFF	; 255
    240c:	5f 4f       	sbci	r21, 0xFF	; 255
    240e:	6b e0       	ldi	r22, 0x0B	; 11
    2410:	42 db       	rcall	.-2428   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
	}
	
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <_ZN3rtc5alarmEhh9rtc_alarm>:


void rtc::alarm( uint8_t valGetSet, uint8_t valAlarm01, rtc_alarm rtaToSetOrGet ){
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	2a 97       	sbiw	r28, 0x0a	; 10
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	6d 83       	std	Y+5, r22	; 0x05
    243e:	4e 83       	std	Y+6, r20	; 0x06
    2440:	0f 83       	std	Y+7, r16	; 0x07
    2442:	18 87       	std	Y+8, r17	; 0x08
    2444:	29 87       	std	Y+9, r18	; 0x09
    2446:	3a 87       	std	Y+10, r19	; 0x0a
	
	unsigned char valAlarmAddress { 0x00 };
    2448:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uchTempControl { 0x00 };
    244a:	1a 82       	std	Y+2, r1	; 0x02


	if( !valAlarm01 ){
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	88 23       	and	r24, r24
    2450:	19 f4       	brne	.+6      	; 0x2458 <_ZN3rtc5alarmEhh9rtc_alarm+0x38>
			valAlarmAddress = RTC_ADDR_A0S;
    2452:	87 e0       	ldi	r24, 0x07	; 7
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
	}else if( valAlarm01 ){
    2458:	8e 81       	ldd	r24, Y+6	; 0x06
    245a:	88 23       	and	r24, r24
    245c:	11 f0       	breq	.+4      	; 0x2462 <_ZN3rtc5alarmEhh9rtc_alarm+0x42>
		valAlarmAddress = RTC_ADDR_A1S;
    245e:	8b e0       	ldi	r24, 0x0B	; 11
    2460:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( !valGetSet ){
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	88 23       	and	r24, r24
    2466:	51 f4       	brne	.+20     	; 0x247c <_ZN3rtc5alarmEhh9rtc_alarm+0x5c>
		read_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    2468:	ae 01       	movw	r20, r28
    246a:	49 5f       	subi	r20, 0xF9	; 249
    246c:	5f 4f       	sbci	r21, 0xFF	; 255
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	24 e0       	ldi	r18, 0x04	; 4
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	69 81       	ldd	r22, Y+1	; 0x01
    2478:	0e db       	rcall	.-2532   	; 0x1a96 <_ZN3rtc10read_blockEhPhj>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
	}else if( valGetSet ){
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	88 23       	and	r24, r24
    2480:	89 f0       	breq	.+34     	; 0x24a4 <_ZN3rtc5alarmEhh9rtc_alarm+0x84>
		alarm_off( valAlarm01 );
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	6e 81       	ldd	r22, Y+6	; 0x06
    2488:	31 df       	rcall	.-414    	; 0x22ec <_ZN3rtc9alarm_offEh>
		write_block( valAlarmAddress, ( unsigned char* )&rtaToSetOrGet, sizeof( rtc_alarm ));
    248a:	ae 01       	movw	r20, r28
    248c:	49 5f       	subi	r20, 0xF9	; 249
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	24 e0       	ldi	r18, 0x04	; 4
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	69 81       	ldd	r22, Y+1	; 0x01
    249a:	3f db       	rcall	.-2434   	; 0x1b1a <_ZN3rtc11write_blockEhPhj>
		alarm_on( valAlarm01 );
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	6e 81       	ldd	r22, Y+6	; 0x06
    24a2:	c9 de       	rcall	.-622    	; 0x2236 <_ZN3rtc8alarm_onEh>
	}
}
    24a4:	2a 96       	adiw	r28, 0x0a	; 10
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <__cmpsf2>:
    24ba:	2f d0       	rcall	.+94     	; 0x251a <__fp_cmp>
    24bc:	08 f4       	brcc	.+2      	; 0x24c0 <__cmpsf2+0x6>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	08 95       	ret

000024c2 <__fixunssfsi>:
    24c2:	57 d0       	rcall	.+174    	; 0x2572 <__fp_splitA>
    24c4:	88 f0       	brcs	.+34     	; 0x24e8 <__fixunssfsi+0x26>
    24c6:	9f 57       	subi	r25, 0x7F	; 127
    24c8:	90 f0       	brcs	.+36     	; 0x24ee <__fixunssfsi+0x2c>
    24ca:	b9 2f       	mov	r27, r25
    24cc:	99 27       	eor	r25, r25
    24ce:	b7 51       	subi	r27, 0x17	; 23
    24d0:	a0 f0       	brcs	.+40     	; 0x24fa <__fixunssfsi+0x38>
    24d2:	d1 f0       	breq	.+52     	; 0x2508 <__fixunssfsi+0x46>
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	88 1f       	adc	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	1a f0       	brmi	.+6      	; 0x24e4 <__fixunssfsi+0x22>
    24de:	ba 95       	dec	r27
    24e0:	c9 f7       	brne	.-14     	; 0x24d4 <__fixunssfsi+0x12>
    24e2:	12 c0       	rjmp	.+36     	; 0x2508 <__fixunssfsi+0x46>
    24e4:	b1 30       	cpi	r27, 0x01	; 1
    24e6:	81 f0       	breq	.+32     	; 0x2508 <__fixunssfsi+0x46>
    24e8:	5e d0       	rcall	.+188    	; 0x25a6 <__fp_zero>
    24ea:	b1 e0       	ldi	r27, 0x01	; 1
    24ec:	08 95       	ret
    24ee:	5b c0       	rjmp	.+182    	; 0x25a6 <__fp_zero>
    24f0:	67 2f       	mov	r22, r23
    24f2:	78 2f       	mov	r23, r24
    24f4:	88 27       	eor	r24, r24
    24f6:	b8 5f       	subi	r27, 0xF8	; 248
    24f8:	39 f0       	breq	.+14     	; 0x2508 <__fixunssfsi+0x46>
    24fa:	b9 3f       	cpi	r27, 0xF9	; 249
    24fc:	cc f3       	brlt	.-14     	; 0x24f0 <__fixunssfsi+0x2e>
    24fe:	86 95       	lsr	r24
    2500:	77 95       	ror	r23
    2502:	67 95       	ror	r22
    2504:	b3 95       	inc	r27
    2506:	d9 f7       	brne	.-10     	; 0x24fe <__fixunssfsi+0x3c>
    2508:	3e f4       	brtc	.+14     	; 0x2518 <__fixunssfsi+0x56>
    250a:	90 95       	com	r25
    250c:	80 95       	com	r24
    250e:	70 95       	com	r23
    2510:	61 95       	neg	r22
    2512:	7f 4f       	sbci	r23, 0xFF	; 255
    2514:	8f 4f       	sbci	r24, 0xFF	; 255
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	08 95       	ret

0000251a <__fp_cmp>:
    251a:	99 0f       	add	r25, r25
    251c:	00 08       	sbc	r0, r0
    251e:	55 0f       	add	r21, r21
    2520:	aa 0b       	sbc	r26, r26
    2522:	e0 e8       	ldi	r30, 0x80	; 128
    2524:	fe ef       	ldi	r31, 0xFE	; 254
    2526:	16 16       	cp	r1, r22
    2528:	17 06       	cpc	r1, r23
    252a:	e8 07       	cpc	r30, r24
    252c:	f9 07       	cpc	r31, r25
    252e:	c0 f0       	brcs	.+48     	; 0x2560 <__fp_cmp+0x46>
    2530:	12 16       	cp	r1, r18
    2532:	13 06       	cpc	r1, r19
    2534:	e4 07       	cpc	r30, r20
    2536:	f5 07       	cpc	r31, r21
    2538:	98 f0       	brcs	.+38     	; 0x2560 <__fp_cmp+0x46>
    253a:	62 1b       	sub	r22, r18
    253c:	73 0b       	sbc	r23, r19
    253e:	84 0b       	sbc	r24, r20
    2540:	95 0b       	sbc	r25, r21
    2542:	39 f4       	brne	.+14     	; 0x2552 <__fp_cmp+0x38>
    2544:	0a 26       	eor	r0, r26
    2546:	61 f0       	breq	.+24     	; 0x2560 <__fp_cmp+0x46>
    2548:	23 2b       	or	r18, r19
    254a:	24 2b       	or	r18, r20
    254c:	25 2b       	or	r18, r21
    254e:	21 f4       	brne	.+8      	; 0x2558 <__fp_cmp+0x3e>
    2550:	08 95       	ret
    2552:	0a 26       	eor	r0, r26
    2554:	09 f4       	brne	.+2      	; 0x2558 <__fp_cmp+0x3e>
    2556:	a1 40       	sbci	r26, 0x01	; 1
    2558:	a6 95       	lsr	r26
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	81 1d       	adc	r24, r1
    255e:	81 1d       	adc	r24, r1
    2560:	08 95       	ret

00002562 <__fp_split3>:
    2562:	57 fd       	sbrc	r21, 7
    2564:	90 58       	subi	r25, 0x80	; 128
    2566:	44 0f       	add	r20, r20
    2568:	55 1f       	adc	r21, r21
    256a:	59 f0       	breq	.+22     	; 0x2582 <__fp_splitA+0x10>
    256c:	5f 3f       	cpi	r21, 0xFF	; 255
    256e:	71 f0       	breq	.+28     	; 0x258c <__fp_splitA+0x1a>
    2570:	47 95       	ror	r20

00002572 <__fp_splitA>:
    2572:	88 0f       	add	r24, r24
    2574:	97 fb       	bst	r25, 7
    2576:	99 1f       	adc	r25, r25
    2578:	61 f0       	breq	.+24     	; 0x2592 <__fp_splitA+0x20>
    257a:	9f 3f       	cpi	r25, 0xFF	; 255
    257c:	79 f0       	breq	.+30     	; 0x259c <__fp_splitA+0x2a>
    257e:	87 95       	ror	r24
    2580:	08 95       	ret
    2582:	12 16       	cp	r1, r18
    2584:	13 06       	cpc	r1, r19
    2586:	14 06       	cpc	r1, r20
    2588:	55 1f       	adc	r21, r21
    258a:	f2 cf       	rjmp	.-28     	; 0x2570 <__fp_split3+0xe>
    258c:	46 95       	lsr	r20
    258e:	f1 df       	rcall	.-30     	; 0x2572 <__fp_splitA>
    2590:	08 c0       	rjmp	.+16     	; 0x25a2 <__fp_splitA+0x30>
    2592:	16 16       	cp	r1, r22
    2594:	17 06       	cpc	r1, r23
    2596:	18 06       	cpc	r1, r24
    2598:	99 1f       	adc	r25, r25
    259a:	f1 cf       	rjmp	.-30     	; 0x257e <__fp_splitA+0xc>
    259c:	86 95       	lsr	r24
    259e:	71 05       	cpc	r23, r1
    25a0:	61 05       	cpc	r22, r1
    25a2:	08 94       	sec
    25a4:	08 95       	ret

000025a6 <__fp_zero>:
    25a6:	e8 94       	clt

000025a8 <__fp_szero>:
    25a8:	bb 27       	eor	r27, r27
    25aa:	66 27       	eor	r22, r22
    25ac:	77 27       	eor	r23, r23
    25ae:	cb 01       	movw	r24, r22
    25b0:	97 f9       	bld	r25, 7
    25b2:	08 95       	ret

000025b4 <__gesf2>:
    25b4:	b2 df       	rcall	.-156    	; 0x251a <__fp_cmp>
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <__gesf2+0x6>
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	08 95       	ret

000025bc <__mulsf3>:
    25bc:	0b d0       	rcall	.+22     	; 0x25d4 <__mulsf3x>
    25be:	78 c0       	rjmp	.+240    	; 0x26b0 <__fp_round>
    25c0:	69 d0       	rcall	.+210    	; 0x2694 <__fp_pscA>
    25c2:	28 f0       	brcs	.+10     	; 0x25ce <__mulsf3+0x12>
    25c4:	6e d0       	rcall	.+220    	; 0x26a2 <__fp_pscB>
    25c6:	18 f0       	brcs	.+6      	; 0x25ce <__mulsf3+0x12>
    25c8:	95 23       	and	r25, r21
    25ca:	09 f0       	breq	.+2      	; 0x25ce <__mulsf3+0x12>
    25cc:	5a c0       	rjmp	.+180    	; 0x2682 <__fp_inf>
    25ce:	5f c0       	rjmp	.+190    	; 0x268e <__fp_nan>
    25d0:	11 24       	eor	r1, r1
    25d2:	ea cf       	rjmp	.-44     	; 0x25a8 <__fp_szero>

000025d4 <__mulsf3x>:
    25d4:	c6 df       	rcall	.-116    	; 0x2562 <__fp_split3>
    25d6:	a0 f3       	brcs	.-24     	; 0x25c0 <__mulsf3+0x4>

000025d8 <__mulsf3_pse>:
    25d8:	95 9f       	mul	r25, r21
    25da:	d1 f3       	breq	.-12     	; 0x25d0 <__mulsf3+0x14>
    25dc:	95 0f       	add	r25, r21
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	55 1f       	adc	r21, r21
    25e2:	62 9f       	mul	r22, r18
    25e4:	f0 01       	movw	r30, r0
    25e6:	72 9f       	mul	r23, r18
    25e8:	bb 27       	eor	r27, r27
    25ea:	f0 0d       	add	r31, r0
    25ec:	b1 1d       	adc	r27, r1
    25ee:	63 9f       	mul	r22, r19
    25f0:	aa 27       	eor	r26, r26
    25f2:	f0 0d       	add	r31, r0
    25f4:	b1 1d       	adc	r27, r1
    25f6:	aa 1f       	adc	r26, r26
    25f8:	64 9f       	mul	r22, r20
    25fa:	66 27       	eor	r22, r22
    25fc:	b0 0d       	add	r27, r0
    25fe:	a1 1d       	adc	r26, r1
    2600:	66 1f       	adc	r22, r22
    2602:	82 9f       	mul	r24, r18
    2604:	22 27       	eor	r18, r18
    2606:	b0 0d       	add	r27, r0
    2608:	a1 1d       	adc	r26, r1
    260a:	62 1f       	adc	r22, r18
    260c:	73 9f       	mul	r23, r19
    260e:	b0 0d       	add	r27, r0
    2610:	a1 1d       	adc	r26, r1
    2612:	62 1f       	adc	r22, r18
    2614:	83 9f       	mul	r24, r19
    2616:	a0 0d       	add	r26, r0
    2618:	61 1d       	adc	r22, r1
    261a:	22 1f       	adc	r18, r18
    261c:	74 9f       	mul	r23, r20
    261e:	33 27       	eor	r19, r19
    2620:	a0 0d       	add	r26, r0
    2622:	61 1d       	adc	r22, r1
    2624:	23 1f       	adc	r18, r19
    2626:	84 9f       	mul	r24, r20
    2628:	60 0d       	add	r22, r0
    262a:	21 1d       	adc	r18, r1
    262c:	82 2f       	mov	r24, r18
    262e:	76 2f       	mov	r23, r22
    2630:	6a 2f       	mov	r22, r26
    2632:	11 24       	eor	r1, r1
    2634:	9f 57       	subi	r25, 0x7F	; 127
    2636:	50 40       	sbci	r21, 0x00	; 0
    2638:	8a f0       	brmi	.+34     	; 0x265c <__mulsf3_pse+0x84>
    263a:	e1 f0       	breq	.+56     	; 0x2674 <__mulsf3_pse+0x9c>
    263c:	88 23       	and	r24, r24
    263e:	4a f0       	brmi	.+18     	; 0x2652 <__mulsf3_pse+0x7a>
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	bb 1f       	adc	r27, r27
    2646:	66 1f       	adc	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	91 50       	subi	r25, 0x01	; 1
    264e:	50 40       	sbci	r21, 0x00	; 0
    2650:	a9 f7       	brne	.-22     	; 0x263c <__mulsf3_pse+0x64>
    2652:	9e 3f       	cpi	r25, 0xFE	; 254
    2654:	51 05       	cpc	r21, r1
    2656:	70 f0       	brcs	.+28     	; 0x2674 <__mulsf3_pse+0x9c>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <__fp_inf>
    265a:	a6 cf       	rjmp	.-180    	; 0x25a8 <__fp_szero>
    265c:	5f 3f       	cpi	r21, 0xFF	; 255
    265e:	ec f3       	brlt	.-6      	; 0x265a <__mulsf3_pse+0x82>
    2660:	98 3e       	cpi	r25, 0xE8	; 232
    2662:	dc f3       	brlt	.-10     	; 0x265a <__mulsf3_pse+0x82>
    2664:	86 95       	lsr	r24
    2666:	77 95       	ror	r23
    2668:	67 95       	ror	r22
    266a:	b7 95       	ror	r27
    266c:	f7 95       	ror	r31
    266e:	e7 95       	ror	r30
    2670:	9f 5f       	subi	r25, 0xFF	; 255
    2672:	c1 f7       	brne	.-16     	; 0x2664 <__mulsf3_pse+0x8c>
    2674:	fe 2b       	or	r31, r30
    2676:	88 0f       	add	r24, r24
    2678:	91 1d       	adc	r25, r1
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	97 f9       	bld	r25, 7
    2680:	08 95       	ret

00002682 <__fp_inf>:
    2682:	97 f9       	bld	r25, 7
    2684:	9f 67       	ori	r25, 0x7F	; 127
    2686:	80 e8       	ldi	r24, 0x80	; 128
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	08 95       	ret

0000268e <__fp_nan>:
    268e:	9f ef       	ldi	r25, 0xFF	; 255
    2690:	80 ec       	ldi	r24, 0xC0	; 192
    2692:	08 95       	ret

00002694 <__fp_pscA>:
    2694:	00 24       	eor	r0, r0
    2696:	0a 94       	dec	r0
    2698:	16 16       	cp	r1, r22
    269a:	17 06       	cpc	r1, r23
    269c:	18 06       	cpc	r1, r24
    269e:	09 06       	cpc	r0, r25
    26a0:	08 95       	ret

000026a2 <__fp_pscB>:
    26a2:	00 24       	eor	r0, r0
    26a4:	0a 94       	dec	r0
    26a6:	12 16       	cp	r1, r18
    26a8:	13 06       	cpc	r1, r19
    26aa:	14 06       	cpc	r1, r20
    26ac:	05 06       	cpc	r0, r21
    26ae:	08 95       	ret

000026b0 <__fp_round>:
    26b0:	09 2e       	mov	r0, r25
    26b2:	03 94       	inc	r0
    26b4:	00 0c       	add	r0, r0
    26b6:	11 f4       	brne	.+4      	; 0x26bc <__fp_round+0xc>
    26b8:	88 23       	and	r24, r24
    26ba:	52 f0       	brmi	.+20     	; 0x26d0 <__fp_round+0x20>
    26bc:	bb 0f       	add	r27, r27
    26be:	40 f4       	brcc	.+16     	; 0x26d0 <__fp_round+0x20>
    26c0:	bf 2b       	or	r27, r31
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__fp_round+0x18>
    26c4:	60 ff       	sbrs	r22, 0
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <__fp_round+0x20>
    26c8:	6f 5f       	subi	r22, 0xFF	; 255
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	08 95       	ret

000026d2 <vfprintf>:
    26d2:	2f 92       	push	r2
    26d4:	3f 92       	push	r3
    26d6:	4f 92       	push	r4
    26d8:	5f 92       	push	r5
    26da:	6f 92       	push	r6
    26dc:	7f 92       	push	r7
    26de:	8f 92       	push	r8
    26e0:	9f 92       	push	r9
    26e2:	af 92       	push	r10
    26e4:	bf 92       	push	r11
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	63 97       	sbiw	r28, 0x13	; 19
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	6c 01       	movw	r12, r24
    2708:	4b 01       	movw	r8, r22
    270a:	2a 01       	movw	r4, r20
    270c:	fc 01       	movw	r30, r24
    270e:	17 82       	std	Z+7, r1	; 0x07
    2710:	16 82       	std	Z+6, r1	; 0x06
    2712:	83 81       	ldd	r24, Z+3	; 0x03
    2714:	81 ff       	sbrs	r24, 1
    2716:	29 c3       	rjmp	.+1618   	; 0x2d6a <vfprintf+0x698>
    2718:	ae 01       	movw	r20, r28
    271a:	4f 5f       	subi	r20, 0xFF	; 255
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	3a 01       	movw	r6, r20
    2720:	f6 01       	movw	r30, r12
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	f4 01       	movw	r30, r8
    2726:	93 fd       	sbrc	r25, 3
    2728:	85 91       	lpm	r24, Z+
    272a:	93 ff       	sbrs	r25, 3
    272c:	81 91       	ld	r24, Z+
    272e:	4f 01       	movw	r8, r30
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <vfprintf+0x64>
    2734:	16 c3       	rjmp	.+1580   	; 0x2d62 <vfprintf+0x690>
    2736:	85 32       	cpi	r24, 0x25	; 37
    2738:	39 f4       	brne	.+14     	; 0x2748 <vfprintf+0x76>
    273a:	93 fd       	sbrc	r25, 3
    273c:	85 91       	lpm	r24, Z+
    273e:	93 ff       	sbrs	r25, 3
    2740:	81 91       	ld	r24, Z+
    2742:	4f 01       	movw	r8, r30
    2744:	85 32       	cpi	r24, 0x25	; 37
    2746:	31 f4       	brne	.+12     	; 0x2754 <vfprintf+0x82>
    2748:	b6 01       	movw	r22, r12
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	71 d4       	rcall	.+2274   	; 0x3030 <fputc>
    274e:	52 01       	movw	r10, r4
    2750:	25 01       	movw	r4, r10
    2752:	e6 cf       	rjmp	.-52     	; 0x2720 <vfprintf+0x4e>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	f1 2c       	mov	r15, r1
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	20 32       	cpi	r18, 0x20	; 32
    275c:	a0 f4       	brcc	.+40     	; 0x2786 <vfprintf+0xb4>
    275e:	8b 32       	cpi	r24, 0x2B	; 43
    2760:	69 f0       	breq	.+26     	; 0x277c <vfprintf+0xaa>
    2762:	30 f4       	brcc	.+12     	; 0x2770 <vfprintf+0x9e>
    2764:	80 32       	cpi	r24, 0x20	; 32
    2766:	59 f0       	breq	.+22     	; 0x277e <vfprintf+0xac>
    2768:	83 32       	cpi	r24, 0x23	; 35
    276a:	69 f4       	brne	.+26     	; 0x2786 <vfprintf+0xb4>
    276c:	20 61       	ori	r18, 0x10	; 16
    276e:	2c c0       	rjmp	.+88     	; 0x27c8 <vfprintf+0xf6>
    2770:	8d 32       	cpi	r24, 0x2D	; 45
    2772:	39 f0       	breq	.+14     	; 0x2782 <vfprintf+0xb0>
    2774:	80 33       	cpi	r24, 0x30	; 48
    2776:	39 f4       	brne	.+14     	; 0x2786 <vfprintf+0xb4>
    2778:	21 60       	ori	r18, 0x01	; 1
    277a:	26 c0       	rjmp	.+76     	; 0x27c8 <vfprintf+0xf6>
    277c:	22 60       	ori	r18, 0x02	; 2
    277e:	24 60       	ori	r18, 0x04	; 4
    2780:	23 c0       	rjmp	.+70     	; 0x27c8 <vfprintf+0xf6>
    2782:	28 60       	ori	r18, 0x08	; 8
    2784:	21 c0       	rjmp	.+66     	; 0x27c8 <vfprintf+0xf6>
    2786:	27 fd       	sbrc	r18, 7
    2788:	27 c0       	rjmp	.+78     	; 0x27d8 <vfprintf+0x106>
    278a:	30 ed       	ldi	r19, 0xD0	; 208
    278c:	38 0f       	add	r19, r24
    278e:	3a 30       	cpi	r19, 0x0A	; 10
    2790:	78 f4       	brcc	.+30     	; 0x27b0 <vfprintf+0xde>
    2792:	26 ff       	sbrs	r18, 6
    2794:	06 c0       	rjmp	.+12     	; 0x27a2 <vfprintf+0xd0>
    2796:	fa e0       	ldi	r31, 0x0A	; 10
    2798:	1f 9f       	mul	r17, r31
    279a:	30 0d       	add	r19, r0
    279c:	11 24       	eor	r1, r1
    279e:	13 2f       	mov	r17, r19
    27a0:	13 c0       	rjmp	.+38     	; 0x27c8 <vfprintf+0xf6>
    27a2:	4a e0       	ldi	r20, 0x0A	; 10
    27a4:	f4 9e       	mul	r15, r20
    27a6:	30 0d       	add	r19, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	f3 2e       	mov	r15, r19
    27ac:	20 62       	ori	r18, 0x20	; 32
    27ae:	0c c0       	rjmp	.+24     	; 0x27c8 <vfprintf+0xf6>
    27b0:	8e 32       	cpi	r24, 0x2E	; 46
    27b2:	21 f4       	brne	.+8      	; 0x27bc <vfprintf+0xea>
    27b4:	26 fd       	sbrc	r18, 6
    27b6:	d5 c2       	rjmp	.+1450   	; 0x2d62 <vfprintf+0x690>
    27b8:	20 64       	ori	r18, 0x40	; 64
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <vfprintf+0xf6>
    27bc:	8c 36       	cpi	r24, 0x6C	; 108
    27be:	11 f4       	brne	.+4      	; 0x27c4 <vfprintf+0xf2>
    27c0:	20 68       	ori	r18, 0x80	; 128
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <vfprintf+0xf6>
    27c4:	88 36       	cpi	r24, 0x68	; 104
    27c6:	41 f4       	brne	.+16     	; 0x27d8 <vfprintf+0x106>
    27c8:	f4 01       	movw	r30, r8
    27ca:	93 fd       	sbrc	r25, 3
    27cc:	85 91       	lpm	r24, Z+
    27ce:	93 ff       	sbrs	r25, 3
    27d0:	81 91       	ld	r24, Z+
    27d2:	4f 01       	movw	r8, r30
    27d4:	81 11       	cpse	r24, r1
    27d6:	c1 cf       	rjmp	.-126    	; 0x275a <vfprintf+0x88>
    27d8:	9b eb       	ldi	r25, 0xBB	; 187
    27da:	98 0f       	add	r25, r24
    27dc:	93 30       	cpi	r25, 0x03	; 3
    27de:	18 f4       	brcc	.+6      	; 0x27e6 <vfprintf+0x114>
    27e0:	20 61       	ori	r18, 0x10	; 16
    27e2:	80 5e       	subi	r24, 0xE0	; 224
    27e4:	06 c0       	rjmp	.+12     	; 0x27f2 <vfprintf+0x120>
    27e6:	9b e9       	ldi	r25, 0x9B	; 155
    27e8:	98 0f       	add	r25, r24
    27ea:	93 30       	cpi	r25, 0x03	; 3
    27ec:	08 f0       	brcs	.+2      	; 0x27f0 <vfprintf+0x11e>
    27ee:	64 c1       	rjmp	.+712    	; 0x2ab8 <vfprintf+0x3e6>
    27f0:	2f 7e       	andi	r18, 0xEF	; 239
    27f2:	26 ff       	sbrs	r18, 6
    27f4:	16 e0       	ldi	r17, 0x06	; 6
    27f6:	2f 73       	andi	r18, 0x3F	; 63
    27f8:	32 2e       	mov	r3, r18
    27fa:	85 36       	cpi	r24, 0x65	; 101
    27fc:	19 f4       	brne	.+6      	; 0x2804 <vfprintf+0x132>
    27fe:	20 64       	ori	r18, 0x40	; 64
    2800:	32 2e       	mov	r3, r18
    2802:	08 c0       	rjmp	.+16     	; 0x2814 <vfprintf+0x142>
    2804:	86 36       	cpi	r24, 0x66	; 102
    2806:	21 f4       	brne	.+8      	; 0x2810 <vfprintf+0x13e>
    2808:	f2 2f       	mov	r31, r18
    280a:	f0 68       	ori	r31, 0x80	; 128
    280c:	3f 2e       	mov	r3, r31
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <vfprintf+0x142>
    2810:	11 11       	cpse	r17, r1
    2812:	11 50       	subi	r17, 0x01	; 1
    2814:	37 fe       	sbrs	r3, 7
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <vfprintf+0x154>
    2818:	1c 33       	cpi	r17, 0x3C	; 60
    281a:	50 f4       	brcc	.+20     	; 0x2830 <vfprintf+0x15e>
    281c:	ee 24       	eor	r14, r14
    281e:	e3 94       	inc	r14
    2820:	e1 0e       	add	r14, r17
    2822:	27 e0       	ldi	r18, 0x07	; 7
    2824:	0b c0       	rjmp	.+22     	; 0x283c <vfprintf+0x16a>
    2826:	18 30       	cpi	r17, 0x08	; 8
    2828:	38 f0       	brcs	.+14     	; 0x2838 <vfprintf+0x166>
    282a:	27 e0       	ldi	r18, 0x07	; 7
    282c:	17 e0       	ldi	r17, 0x07	; 7
    282e:	05 c0       	rjmp	.+10     	; 0x283a <vfprintf+0x168>
    2830:	27 e0       	ldi	r18, 0x07	; 7
    2832:	4c e3       	ldi	r20, 0x3C	; 60
    2834:	e4 2e       	mov	r14, r20
    2836:	02 c0       	rjmp	.+4      	; 0x283c <vfprintf+0x16a>
    2838:	21 2f       	mov	r18, r17
    283a:	e1 2c       	mov	r14, r1
    283c:	52 01       	movw	r10, r4
    283e:	44 e0       	ldi	r20, 0x04	; 4
    2840:	a4 0e       	add	r10, r20
    2842:	b1 1c       	adc	r11, r1
    2844:	f2 01       	movw	r30, r4
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	0e 2d       	mov	r16, r14
    2850:	a3 01       	movw	r20, r6
    2852:	f7 d2       	rcall	.+1518   	; 0x2e42 <__ftoa_engine>
    2854:	2c 01       	movw	r4, r24
    2856:	09 81       	ldd	r16, Y+1	; 0x01
    2858:	00 ff       	sbrs	r16, 0
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <vfprintf+0x18e>
    285c:	03 ff       	sbrs	r16, 3
    285e:	07 c0       	rjmp	.+14     	; 0x286e <vfprintf+0x19c>
    2860:	31 fc       	sbrc	r3, 1
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <vfprintf+0x1a2>
    2864:	32 fe       	sbrs	r3, 2
    2866:	09 c0       	rjmp	.+18     	; 0x287a <vfprintf+0x1a8>
    2868:	30 e2       	ldi	r19, 0x20	; 32
    286a:	23 2e       	mov	r2, r19
    286c:	07 c0       	rjmp	.+14     	; 0x287c <vfprintf+0x1aa>
    286e:	2d e2       	ldi	r18, 0x2D	; 45
    2870:	22 2e       	mov	r2, r18
    2872:	04 c0       	rjmp	.+8      	; 0x287c <vfprintf+0x1aa>
    2874:	9b e2       	ldi	r25, 0x2B	; 43
    2876:	29 2e       	mov	r2, r25
    2878:	01 c0       	rjmp	.+2      	; 0x287c <vfprintf+0x1aa>
    287a:	21 2c       	mov	r2, r1
    287c:	80 2f       	mov	r24, r16
    287e:	8c 70       	andi	r24, 0x0C	; 12
    2880:	19 f0       	breq	.+6      	; 0x2888 <vfprintf+0x1b6>
    2882:	21 10       	cpse	r2, r1
    2884:	51 c2       	rjmp	.+1186   	; 0x2d28 <vfprintf+0x656>
    2886:	8d c2       	rjmp	.+1306   	; 0x2da2 <vfprintf+0x6d0>
    2888:	37 fe       	sbrs	r3, 7
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <vfprintf+0x1d8>
    288c:	e4 0c       	add	r14, r4
    288e:	04 ff       	sbrs	r16, 4
    2890:	04 c0       	rjmp	.+8      	; 0x289a <vfprintf+0x1c8>
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	81 33       	cpi	r24, 0x31	; 49
    2896:	09 f4       	brne	.+2      	; 0x289a <vfprintf+0x1c8>
    2898:	ea 94       	dec	r14
    289a:	1e 14       	cp	r1, r14
    289c:	74 f5       	brge	.+92     	; 0x28fa <vfprintf+0x228>
    289e:	f8 e0       	ldi	r31, 0x08	; 8
    28a0:	fe 15       	cp	r31, r14
    28a2:	78 f5       	brcc	.+94     	; 0x2902 <vfprintf+0x230>
    28a4:	88 e0       	ldi	r24, 0x08	; 8
    28a6:	e8 2e       	mov	r14, r24
    28a8:	2c c0       	rjmp	.+88     	; 0x2902 <vfprintf+0x230>
    28aa:	36 fc       	sbrc	r3, 6
    28ac:	2a c0       	rjmp	.+84     	; 0x2902 <vfprintf+0x230>
    28ae:	81 2f       	mov	r24, r17
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	84 15       	cp	r24, r4
    28b4:	95 05       	cpc	r25, r5
    28b6:	9c f0       	brlt	.+38     	; 0x28de <vfprintf+0x20c>
    28b8:	2c ef       	ldi	r18, 0xFC	; 252
    28ba:	42 16       	cp	r4, r18
    28bc:	2f ef       	ldi	r18, 0xFF	; 255
    28be:	52 06       	cpc	r5, r18
    28c0:	74 f0       	brlt	.+28     	; 0x28de <vfprintf+0x20c>
    28c2:	43 2d       	mov	r20, r3
    28c4:	40 68       	ori	r20, 0x80	; 128
    28c6:	34 2e       	mov	r3, r20
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <vfprintf+0x20c>
    28ca:	e2 e0       	ldi	r30, 0x02	; 2
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	ec 0f       	add	r30, r28
    28d0:	fd 1f       	adc	r31, r29
    28d2:	e1 0f       	add	r30, r17
    28d4:	f1 1d       	adc	r31, r1
    28d6:	80 81       	ld	r24, Z
    28d8:	80 33       	cpi	r24, 0x30	; 48
    28da:	19 f4       	brne	.+6      	; 0x28e2 <vfprintf+0x210>
    28dc:	11 50       	subi	r17, 0x01	; 1
    28de:	11 11       	cpse	r17, r1
    28e0:	f4 cf       	rjmp	.-24     	; 0x28ca <vfprintf+0x1f8>
    28e2:	37 fe       	sbrs	r3, 7
    28e4:	0e c0       	rjmp	.+28     	; 0x2902 <vfprintf+0x230>
    28e6:	ee 24       	eor	r14, r14
    28e8:	e3 94       	inc	r14
    28ea:	e1 0e       	add	r14, r17
    28ec:	81 2f       	mov	r24, r17
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	48 16       	cp	r4, r24
    28f2:	59 06       	cpc	r5, r25
    28f4:	2c f4       	brge	.+10     	; 0x2900 <vfprintf+0x22e>
    28f6:	14 19       	sub	r17, r4
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <vfprintf+0x230>
    28fa:	ee 24       	eor	r14, r14
    28fc:	e3 94       	inc	r14
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <vfprintf+0x230>
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	37 fe       	sbrs	r3, 7
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <vfprintf+0x240>
    2906:	14 14       	cp	r1, r4
    2908:	15 04       	cpc	r1, r5
    290a:	34 f4       	brge	.+12     	; 0x2918 <vfprintf+0x246>
    290c:	c2 01       	movw	r24, r4
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	05 c0       	rjmp	.+10     	; 0x291c <vfprintf+0x24a>
    2912:	85 e0       	ldi	r24, 0x05	; 5
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	02 c0       	rjmp	.+4      	; 0x291c <vfprintf+0x24a>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	21 10       	cpse	r2, r1
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	11 23       	and	r17, r17
    2922:	31 f0       	breq	.+12     	; 0x2930 <vfprintf+0x25e>
    2924:	21 2f       	mov	r18, r17
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	2f 5f       	subi	r18, 0xFF	; 255
    292a:	3f 4f       	sbci	r19, 0xFF	; 255
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	2f 2d       	mov	r18, r15
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	82 17       	cp	r24, r18
    2936:	93 07       	cpc	r25, r19
    2938:	14 f4       	brge	.+4      	; 0x293e <vfprintf+0x26c>
    293a:	f8 1a       	sub	r15, r24
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <vfprintf+0x26e>
    293e:	f1 2c       	mov	r15, r1
    2940:	83 2d       	mov	r24, r3
    2942:	89 70       	andi	r24, 0x09	; 9
    2944:	41 f4       	brne	.+16     	; 0x2956 <vfprintf+0x284>
    2946:	ff 20       	and	r15, r15
    2948:	31 f0       	breq	.+12     	; 0x2956 <vfprintf+0x284>
    294a:	b6 01       	movw	r22, r12
    294c:	80 e2       	ldi	r24, 0x20	; 32
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	6f d3       	rcall	.+1758   	; 0x3030 <fputc>
    2952:	fa 94       	dec	r15
    2954:	f8 cf       	rjmp	.-16     	; 0x2946 <vfprintf+0x274>
    2956:	22 20       	and	r2, r2
    2958:	21 f0       	breq	.+8      	; 0x2962 <vfprintf+0x290>
    295a:	b6 01       	movw	r22, r12
    295c:	82 2d       	mov	r24, r2
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	67 d3       	rcall	.+1742   	; 0x3030 <fputc>
    2962:	33 fc       	sbrc	r3, 3
    2964:	08 c0       	rjmp	.+16     	; 0x2976 <vfprintf+0x2a4>
    2966:	ff 20       	and	r15, r15
    2968:	31 f0       	breq	.+12     	; 0x2976 <vfprintf+0x2a4>
    296a:	b6 01       	movw	r22, r12
    296c:	80 e3       	ldi	r24, 0x30	; 48
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	5f d3       	rcall	.+1726   	; 0x3030 <fputc>
    2972:	fa 94       	dec	r15
    2974:	f8 cf       	rjmp	.-16     	; 0x2966 <vfprintf+0x294>
    2976:	37 fe       	sbrs	r3, 7
    2978:	58 c0       	rjmp	.+176    	; 0x2a2a <vfprintf+0x358>
    297a:	94 2d       	mov	r25, r4
    297c:	85 2d       	mov	r24, r5
    297e:	57 fe       	sbrs	r5, 7
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <vfprintf+0x2b4>
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	29 2e       	mov	r2, r25
    2988:	38 2e       	mov	r3, r24
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	a2 01       	movw	r20, r4
    2990:	4e 19       	sub	r20, r14
    2992:	51 09       	sbc	r21, r1
    2994:	5d 87       	std	Y+13, r21	; 0x0d
    2996:	4c 87       	std	Y+12, r20	; 0x0c
    2998:	a2 01       	movw	r20, r4
    299a:	42 19       	sub	r20, r2
    299c:	53 09       	sbc	r21, r3
    299e:	5f 87       	std	Y+15, r21	; 0x0f
    29a0:	4e 87       	std	Y+14, r20	; 0x0e
    29a2:	61 2f       	mov	r22, r17
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	44 27       	eor	r20, r20
    29a8:	55 27       	eor	r21, r21
    29aa:	46 1b       	sub	r20, r22
    29ac:	57 0b       	sbc	r21, r23
    29ae:	59 8b       	std	Y+17, r21	; 0x11
    29b0:	48 8b       	std	Y+16, r20	; 0x10
    29b2:	5f ef       	ldi	r21, 0xFF	; 255
    29b4:	25 16       	cp	r2, r21
    29b6:	35 06       	cpc	r3, r21
    29b8:	41 f4       	brne	.+16     	; 0x29ca <vfprintf+0x2f8>
    29ba:	b6 01       	movw	r22, r12
    29bc:	8e e2       	ldi	r24, 0x2E	; 46
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	2a 8b       	std	Y+18, r18	; 0x12
    29c2:	3b 8b       	std	Y+19, r19	; 0x13
    29c4:	35 d3       	rcall	.+1642   	; 0x3030 <fputc>
    29c6:	3b 89       	ldd	r19, Y+19	; 0x13
    29c8:	2a 89       	ldd	r18, Y+18	; 0x12
    29ca:	42 14       	cp	r4, r2
    29cc:	53 04       	cpc	r5, r3
    29ce:	6c f0       	brlt	.+26     	; 0x29ea <vfprintf+0x318>
    29d0:	4c 85       	ldd	r20, Y+12	; 0x0c
    29d2:	5d 85       	ldd	r21, Y+13	; 0x0d
    29d4:	42 15       	cp	r20, r2
    29d6:	53 05       	cpc	r21, r3
    29d8:	44 f4       	brge	.+16     	; 0x29ea <vfprintf+0x318>
    29da:	ee 85       	ldd	r30, Y+14	; 0x0e
    29dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	e6 0d       	add	r30, r6
    29e4:	f7 1d       	adc	r31, r7
    29e6:	81 81       	ldd	r24, Z+1	; 0x01
    29e8:	01 c0       	rjmp	.+2      	; 0x29ec <vfprintf+0x31a>
    29ea:	80 e3       	ldi	r24, 0x30	; 48
    29ec:	51 e0       	ldi	r21, 0x01	; 1
    29ee:	25 1a       	sub	r2, r21
    29f0:	31 08       	sbc	r3, r1
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	48 89       	ldd	r20, Y+16	; 0x10
    29f8:	59 89       	ldd	r21, Y+17	; 0x11
    29fa:	24 16       	cp	r2, r20
    29fc:	35 06       	cpc	r3, r21
    29fe:	44 f0       	brlt	.+16     	; 0x2a10 <vfprintf+0x33e>
    2a00:	b6 01       	movw	r22, r12
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	2a 8b       	std	Y+18, r18	; 0x12
    2a06:	3b 8b       	std	Y+19, r19	; 0x13
    2a08:	13 d3       	rcall	.+1574   	; 0x3030 <fputc>
    2a0a:	2a 89       	ldd	r18, Y+18	; 0x12
    2a0c:	3b 89       	ldd	r19, Y+19	; 0x13
    2a0e:	d1 cf       	rjmp	.-94     	; 0x29b2 <vfprintf+0x2e0>
    2a10:	24 14       	cp	r2, r4
    2a12:	35 04       	cpc	r3, r5
    2a14:	39 f4       	brne	.+14     	; 0x2a24 <vfprintf+0x352>
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	96 33       	cpi	r25, 0x36	; 54
    2a1a:	18 f4       	brcc	.+6      	; 0x2a22 <vfprintf+0x350>
    2a1c:	95 33       	cpi	r25, 0x35	; 53
    2a1e:	11 f4       	brne	.+4      	; 0x2a24 <vfprintf+0x352>
    2a20:	04 ff       	sbrs	r16, 4
    2a22:	81 e3       	ldi	r24, 0x31	; 49
    2a24:	b6 01       	movw	r22, r12
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	45 c0       	rjmp	.+138    	; 0x2ab4 <vfprintf+0x3e2>
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	81 33       	cpi	r24, 0x31	; 49
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <vfprintf+0x360>
    2a30:	0f 7e       	andi	r16, 0xEF	; 239
    2a32:	b6 01       	movw	r22, r12
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	fc d2       	rcall	.+1528   	; 0x3030 <fputc>
    2a38:	11 11       	cpse	r17, r1
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <vfprintf+0x374>
    2a3c:	34 fc       	sbrc	r3, 4
    2a3e:	16 c0       	rjmp	.+44     	; 0x2a6c <vfprintf+0x39a>
    2a40:	85 e6       	ldi	r24, 0x65	; 101
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	15 c0       	rjmp	.+42     	; 0x2a70 <vfprintf+0x39e>
    2a46:	b6 01       	movw	r22, r12
    2a48:	8e e2       	ldi	r24, 0x2E	; 46
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	f1 d2       	rcall	.+1506   	; 0x3030 <fputc>
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	ee 24       	eor	r14, r14
    2a52:	e3 94       	inc	r14
    2a54:	e8 0e       	add	r14, r24
    2a56:	f3 01       	movw	r30, r6
    2a58:	e8 0f       	add	r30, r24
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	80 81       	ld	r24, Z
    2a5e:	b6 01       	movw	r22, r12
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	e6 d2       	rcall	.+1484   	; 0x3030 <fputc>
    2a64:	11 50       	subi	r17, 0x01	; 1
    2a66:	8e 2d       	mov	r24, r14
    2a68:	99 f7       	brne	.-26     	; 0x2a50 <vfprintf+0x37e>
    2a6a:	e8 cf       	rjmp	.-48     	; 0x2a3c <vfprintf+0x36a>
    2a6c:	85 e4       	ldi	r24, 0x45	; 69
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	b6 01       	movw	r22, r12
    2a72:	de d2       	rcall	.+1468   	; 0x3030 <fputc>
    2a74:	57 fc       	sbrc	r5, 7
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <vfprintf+0x3b0>
    2a78:	41 14       	cp	r4, r1
    2a7a:	51 04       	cpc	r5, r1
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <vfprintf+0x3ba>
    2a7e:	04 ff       	sbrs	r16, 4
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <vfprintf+0x3ba>
    2a82:	51 94       	neg	r5
    2a84:	41 94       	neg	r4
    2a86:	51 08       	sbc	r5, r1
    2a88:	8d e2       	ldi	r24, 0x2D	; 45
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <vfprintf+0x3bc>
    2a8c:	8b e2       	ldi	r24, 0x2B	; 43
    2a8e:	b6 01       	movw	r22, r12
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	ce d2       	rcall	.+1436   	; 0x3030 <fputc>
    2a94:	80 e3       	ldi	r24, 0x30	; 48
    2a96:	9a e0       	ldi	r25, 0x0A	; 10
    2a98:	49 16       	cp	r4, r25
    2a9a:	51 04       	cpc	r5, r1
    2a9c:	2c f0       	brlt	.+10     	; 0x2aa8 <vfprintf+0x3d6>
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	5a e0       	ldi	r21, 0x0A	; 10
    2aa2:	45 1a       	sub	r4, r21
    2aa4:	51 08       	sbc	r5, r1
    2aa6:	f7 cf       	rjmp	.-18     	; 0x2a96 <vfprintf+0x3c4>
    2aa8:	b6 01       	movw	r22, r12
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	c1 d2       	rcall	.+1410   	; 0x3030 <fputc>
    2aae:	b6 01       	movw	r22, r12
    2ab0:	c2 01       	movw	r24, r4
    2ab2:	c0 96       	adiw	r24, 0x30	; 48
    2ab4:	bd d2       	rcall	.+1402   	; 0x3030 <fputc>
    2ab6:	4c c1       	rjmp	.+664    	; 0x2d50 <vfprintf+0x67e>
    2ab8:	83 36       	cpi	r24, 0x63	; 99
    2aba:	31 f0       	breq	.+12     	; 0x2ac8 <vfprintf+0x3f6>
    2abc:	83 37       	cpi	r24, 0x73	; 115
    2abe:	79 f0       	breq	.+30     	; 0x2ade <vfprintf+0x40c>
    2ac0:	83 35       	cpi	r24, 0x53	; 83
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <vfprintf+0x3f4>
    2ac4:	54 c0       	rjmp	.+168    	; 0x2b6e <vfprintf+0x49c>
    2ac6:	20 c0       	rjmp	.+64     	; 0x2b08 <vfprintf+0x436>
    2ac8:	52 01       	movw	r10, r4
    2aca:	e2 e0       	ldi	r30, 0x02	; 2
    2acc:	ae 0e       	add	r10, r30
    2ace:	b1 1c       	adc	r11, r1
    2ad0:	f2 01       	movw	r30, r4
    2ad2:	80 81       	ld	r24, Z
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	01 e0       	ldi	r16, 0x01	; 1
    2ad8:	10 e0       	ldi	r17, 0x00	; 0
    2ada:	23 01       	movw	r4, r6
    2adc:	13 c0       	rjmp	.+38     	; 0x2b04 <vfprintf+0x432>
    2ade:	52 01       	movw	r10, r4
    2ae0:	f2 e0       	ldi	r31, 0x02	; 2
    2ae2:	af 0e       	add	r10, r31
    2ae4:	b1 1c       	adc	r11, r1
    2ae6:	f2 01       	movw	r30, r4
    2ae8:	40 80       	ld	r4, Z
    2aea:	51 80       	ldd	r5, Z+1	; 0x01
    2aec:	26 ff       	sbrs	r18, 6
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <vfprintf+0x424>
    2af0:	61 2f       	mov	r22, r17
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <vfprintf+0x428>
    2af6:	6f ef       	ldi	r22, 0xFF	; 255
    2af8:	7f ef       	ldi	r23, 0xFF	; 255
    2afa:	c2 01       	movw	r24, r4
    2afc:	2a 8b       	std	Y+18, r18	; 0x12
    2afe:	8d d2       	rcall	.+1306   	; 0x301a <strnlen>
    2b00:	8c 01       	movw	r16, r24
    2b02:	2a 89       	ldd	r18, Y+18	; 0x12
    2b04:	2f 77       	andi	r18, 0x7F	; 127
    2b06:	14 c0       	rjmp	.+40     	; 0x2b30 <vfprintf+0x45e>
    2b08:	52 01       	movw	r10, r4
    2b0a:	f2 e0       	ldi	r31, 0x02	; 2
    2b0c:	af 0e       	add	r10, r31
    2b0e:	b1 1c       	adc	r11, r1
    2b10:	f2 01       	movw	r30, r4
    2b12:	40 80       	ld	r4, Z
    2b14:	51 80       	ldd	r5, Z+1	; 0x01
    2b16:	26 ff       	sbrs	r18, 6
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <vfprintf+0x44e>
    2b1a:	61 2f       	mov	r22, r17
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vfprintf+0x452>
    2b20:	6f ef       	ldi	r22, 0xFF	; 255
    2b22:	7f ef       	ldi	r23, 0xFF	; 255
    2b24:	c2 01       	movw	r24, r4
    2b26:	2a 8b       	std	Y+18, r18	; 0x12
    2b28:	64 d2       	rcall	.+1224   	; 0x2ff2 <strnlen_P>
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	2a 89       	ldd	r18, Y+18	; 0x12
    2b2e:	20 68       	ori	r18, 0x80	; 128
    2b30:	32 2e       	mov	r3, r18
    2b32:	23 fd       	sbrc	r18, 3
    2b34:	18 c0       	rjmp	.+48     	; 0x2b66 <vfprintf+0x494>
    2b36:	8f 2d       	mov	r24, r15
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	08 17       	cp	r16, r24
    2b3c:	19 07       	cpc	r17, r25
    2b3e:	98 f4       	brcc	.+38     	; 0x2b66 <vfprintf+0x494>
    2b40:	b6 01       	movw	r22, r12
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	74 d2       	rcall	.+1256   	; 0x3030 <fputc>
    2b48:	fa 94       	dec	r15
    2b4a:	f5 cf       	rjmp	.-22     	; 0x2b36 <vfprintf+0x464>
    2b4c:	f2 01       	movw	r30, r4
    2b4e:	37 fc       	sbrc	r3, 7
    2b50:	85 91       	lpm	r24, Z+
    2b52:	37 fe       	sbrs	r3, 7
    2b54:	81 91       	ld	r24, Z+
    2b56:	2f 01       	movw	r4, r30
    2b58:	b6 01       	movw	r22, r12
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	69 d2       	rcall	.+1234   	; 0x3030 <fputc>
    2b5e:	f1 10       	cpse	r15, r1
    2b60:	fa 94       	dec	r15
    2b62:	01 50       	subi	r16, 0x01	; 1
    2b64:	11 09       	sbc	r17, r1
    2b66:	01 15       	cp	r16, r1
    2b68:	11 05       	cpc	r17, r1
    2b6a:	81 f7       	brne	.-32     	; 0x2b4c <vfprintf+0x47a>
    2b6c:	f1 c0       	rjmp	.+482    	; 0x2d50 <vfprintf+0x67e>
    2b6e:	84 36       	cpi	r24, 0x64	; 100
    2b70:	11 f0       	breq	.+4      	; 0x2b76 <vfprintf+0x4a4>
    2b72:	89 36       	cpi	r24, 0x69	; 105
    2b74:	51 f5       	brne	.+84     	; 0x2bca <vfprintf+0x4f8>
    2b76:	52 01       	movw	r10, r4
    2b78:	27 ff       	sbrs	r18, 7
    2b7a:	09 c0       	rjmp	.+18     	; 0x2b8e <vfprintf+0x4bc>
    2b7c:	f4 e0       	ldi	r31, 0x04	; 4
    2b7e:	af 0e       	add	r10, r31
    2b80:	b1 1c       	adc	r11, r1
    2b82:	f2 01       	movw	r30, r4
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	0a c0       	rjmp	.+20     	; 0x2ba2 <vfprintf+0x4d0>
    2b8e:	f2 e0       	ldi	r31, 0x02	; 2
    2b90:	af 0e       	add	r10, r31
    2b92:	b1 1c       	adc	r11, r1
    2b94:	f2 01       	movw	r30, r4
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	07 2e       	mov	r0, r23
    2b9c:	00 0c       	add	r0, r0
    2b9e:	88 0b       	sbc	r24, r24
    2ba0:	99 0b       	sbc	r25, r25
    2ba2:	2f 76       	andi	r18, 0x6F	; 111
    2ba4:	32 2e       	mov	r3, r18
    2ba6:	97 ff       	sbrs	r25, 7
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <vfprintf+0x4ea>
    2baa:	90 95       	com	r25
    2bac:	80 95       	com	r24
    2bae:	70 95       	com	r23
    2bb0:	61 95       	neg	r22
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	20 68       	ori	r18, 0x80	; 128
    2bba:	32 2e       	mov	r3, r18
    2bbc:	2a e0       	ldi	r18, 0x0A	; 10
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	a3 01       	movw	r20, r6
    2bc2:	6e d2       	rcall	.+1244   	; 0x30a0 <__ultoa_invert>
    2bc4:	e8 2e       	mov	r14, r24
    2bc6:	e6 18       	sub	r14, r6
    2bc8:	3e c0       	rjmp	.+124    	; 0x2c46 <vfprintf+0x574>
    2bca:	02 2f       	mov	r16, r18
    2bcc:	85 37       	cpi	r24, 0x75	; 117
    2bce:	21 f4       	brne	.+8      	; 0x2bd8 <vfprintf+0x506>
    2bd0:	0f 7e       	andi	r16, 0xEF	; 239
    2bd2:	2a e0       	ldi	r18, 0x0A	; 10
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	1d c0       	rjmp	.+58     	; 0x2c12 <vfprintf+0x540>
    2bd8:	09 7f       	andi	r16, 0xF9	; 249
    2bda:	8f 36       	cpi	r24, 0x6F	; 111
    2bdc:	91 f0       	breq	.+36     	; 0x2c02 <vfprintf+0x530>
    2bde:	18 f4       	brcc	.+6      	; 0x2be6 <vfprintf+0x514>
    2be0:	88 35       	cpi	r24, 0x58	; 88
    2be2:	59 f0       	breq	.+22     	; 0x2bfa <vfprintf+0x528>
    2be4:	be c0       	rjmp	.+380    	; 0x2d62 <vfprintf+0x690>
    2be6:	80 37       	cpi	r24, 0x70	; 112
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <vfprintf+0x51e>
    2bea:	88 37       	cpi	r24, 0x78	; 120
    2bec:	11 f0       	breq	.+4      	; 0x2bf2 <vfprintf+0x520>
    2bee:	b9 c0       	rjmp	.+370    	; 0x2d62 <vfprintf+0x690>
    2bf0:	00 61       	ori	r16, 0x10	; 16
    2bf2:	04 ff       	sbrs	r16, 4
    2bf4:	09 c0       	rjmp	.+18     	; 0x2c08 <vfprintf+0x536>
    2bf6:	04 60       	ori	r16, 0x04	; 4
    2bf8:	07 c0       	rjmp	.+14     	; 0x2c08 <vfprintf+0x536>
    2bfa:	24 ff       	sbrs	r18, 4
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <vfprintf+0x53c>
    2bfe:	06 60       	ori	r16, 0x06	; 6
    2c00:	06 c0       	rjmp	.+12     	; 0x2c0e <vfprintf+0x53c>
    2c02:	28 e0       	ldi	r18, 0x08	; 8
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	05 c0       	rjmp	.+10     	; 0x2c12 <vfprintf+0x540>
    2c08:	20 e1       	ldi	r18, 0x10	; 16
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <vfprintf+0x540>
    2c0e:	20 e1       	ldi	r18, 0x10	; 16
    2c10:	32 e0       	ldi	r19, 0x02	; 2
    2c12:	52 01       	movw	r10, r4
    2c14:	07 ff       	sbrs	r16, 7
    2c16:	09 c0       	rjmp	.+18     	; 0x2c2a <vfprintf+0x558>
    2c18:	f4 e0       	ldi	r31, 0x04	; 4
    2c1a:	af 0e       	add	r10, r31
    2c1c:	b1 1c       	adc	r11, r1
    2c1e:	f2 01       	movw	r30, r4
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	08 c0       	rjmp	.+16     	; 0x2c3a <vfprintf+0x568>
    2c2a:	f2 e0       	ldi	r31, 0x02	; 2
    2c2c:	af 0e       	add	r10, r31
    2c2e:	b1 1c       	adc	r11, r1
    2c30:	f2 01       	movw	r30, r4
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a3 01       	movw	r20, r6
    2c3c:	31 d2       	rcall	.+1122   	; 0x30a0 <__ultoa_invert>
    2c3e:	e8 2e       	mov	r14, r24
    2c40:	e6 18       	sub	r14, r6
    2c42:	0f 77       	andi	r16, 0x7F	; 127
    2c44:	30 2e       	mov	r3, r16
    2c46:	36 fe       	sbrs	r3, 6
    2c48:	0b c0       	rjmp	.+22     	; 0x2c60 <vfprintf+0x58e>
    2c4a:	33 2d       	mov	r19, r3
    2c4c:	3e 7f       	andi	r19, 0xFE	; 254
    2c4e:	e1 16       	cp	r14, r17
    2c50:	50 f4       	brcc	.+20     	; 0x2c66 <vfprintf+0x594>
    2c52:	34 fe       	sbrs	r3, 4
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <vfprintf+0x598>
    2c56:	32 fc       	sbrc	r3, 2
    2c58:	08 c0       	rjmp	.+16     	; 0x2c6a <vfprintf+0x598>
    2c5a:	33 2d       	mov	r19, r3
    2c5c:	3e 7e       	andi	r19, 0xEE	; 238
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <vfprintf+0x598>
    2c60:	0e 2d       	mov	r16, r14
    2c62:	33 2d       	mov	r19, r3
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <vfprintf+0x59a>
    2c66:	0e 2d       	mov	r16, r14
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <vfprintf+0x59a>
    2c6a:	01 2f       	mov	r16, r17
    2c6c:	34 ff       	sbrs	r19, 4
    2c6e:	0c c0       	rjmp	.+24     	; 0x2c88 <vfprintf+0x5b6>
    2c70:	fe 01       	movw	r30, r28
    2c72:	ee 0d       	add	r30, r14
    2c74:	f1 1d       	adc	r31, r1
    2c76:	80 81       	ld	r24, Z
    2c78:	80 33       	cpi	r24, 0x30	; 48
    2c7a:	11 f4       	brne	.+4      	; 0x2c80 <vfprintf+0x5ae>
    2c7c:	39 7e       	andi	r19, 0xE9	; 233
    2c7e:	08 c0       	rjmp	.+16     	; 0x2c90 <vfprintf+0x5be>
    2c80:	32 ff       	sbrs	r19, 2
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <vfprintf+0x5bc>
    2c84:	0e 5f       	subi	r16, 0xFE	; 254
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <vfprintf+0x5be>
    2c88:	83 2f       	mov	r24, r19
    2c8a:	86 78       	andi	r24, 0x86	; 134
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <vfprintf+0x5be>
    2c8e:	0f 5f       	subi	r16, 0xFF	; 255
    2c90:	33 fd       	sbrc	r19, 3
    2c92:	12 c0       	rjmp	.+36     	; 0x2cb8 <vfprintf+0x5e6>
    2c94:	30 ff       	sbrs	r19, 0
    2c96:	06 c0       	rjmp	.+12     	; 0x2ca4 <vfprintf+0x5d2>
    2c98:	1e 2d       	mov	r17, r14
    2c9a:	0f 15       	cp	r16, r15
    2c9c:	18 f4       	brcc	.+6      	; 0x2ca4 <vfprintf+0x5d2>
    2c9e:	1f 0d       	add	r17, r15
    2ca0:	10 1b       	sub	r17, r16
    2ca2:	0f 2d       	mov	r16, r15
    2ca4:	0f 15       	cp	r16, r15
    2ca6:	60 f4       	brcc	.+24     	; 0x2cc0 <vfprintf+0x5ee>
    2ca8:	b6 01       	movw	r22, r12
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	3b 8b       	std	Y+19, r19	; 0x13
    2cb0:	bf d1       	rcall	.+894    	; 0x3030 <fputc>
    2cb2:	0f 5f       	subi	r16, 0xFF	; 255
    2cb4:	3b 89       	ldd	r19, Y+19	; 0x13
    2cb6:	f6 cf       	rjmp	.-20     	; 0x2ca4 <vfprintf+0x5d2>
    2cb8:	0f 15       	cp	r16, r15
    2cba:	10 f4       	brcc	.+4      	; 0x2cc0 <vfprintf+0x5ee>
    2cbc:	f0 1a       	sub	r15, r16
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <vfprintf+0x5f0>
    2cc0:	f1 2c       	mov	r15, r1
    2cc2:	34 ff       	sbrs	r19, 4
    2cc4:	11 c0       	rjmp	.+34     	; 0x2ce8 <vfprintf+0x616>
    2cc6:	b6 01       	movw	r22, r12
    2cc8:	80 e3       	ldi	r24, 0x30	; 48
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	3b 8b       	std	Y+19, r19	; 0x13
    2cce:	b0 d1       	rcall	.+864    	; 0x3030 <fputc>
    2cd0:	3b 89       	ldd	r19, Y+19	; 0x13
    2cd2:	32 ff       	sbrs	r19, 2
    2cd4:	16 c0       	rjmp	.+44     	; 0x2d02 <vfprintf+0x630>
    2cd6:	31 fd       	sbrc	r19, 1
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <vfprintf+0x60e>
    2cda:	88 e7       	ldi	r24, 0x78	; 120
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <vfprintf+0x612>
    2ce0:	88 e5       	ldi	r24, 0x58	; 88
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	b6 01       	movw	r22, r12
    2ce6:	0c c0       	rjmp	.+24     	; 0x2d00 <vfprintf+0x62e>
    2ce8:	83 2f       	mov	r24, r19
    2cea:	86 78       	andi	r24, 0x86	; 134
    2cec:	51 f0       	breq	.+20     	; 0x2d02 <vfprintf+0x630>
    2cee:	31 ff       	sbrs	r19, 1
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <vfprintf+0x624>
    2cf2:	8b e2       	ldi	r24, 0x2B	; 43
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <vfprintf+0x626>
    2cf6:	80 e2       	ldi	r24, 0x20	; 32
    2cf8:	37 fd       	sbrc	r19, 7
    2cfa:	8d e2       	ldi	r24, 0x2D	; 45
    2cfc:	b6 01       	movw	r22, r12
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	97 d1       	rcall	.+814    	; 0x3030 <fputc>
    2d02:	e1 16       	cp	r14, r17
    2d04:	30 f4       	brcc	.+12     	; 0x2d12 <vfprintf+0x640>
    2d06:	b6 01       	movw	r22, r12
    2d08:	80 e3       	ldi	r24, 0x30	; 48
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	91 d1       	rcall	.+802    	; 0x3030 <fputc>
    2d0e:	11 50       	subi	r17, 0x01	; 1
    2d10:	f8 cf       	rjmp	.-16     	; 0x2d02 <vfprintf+0x630>
    2d12:	ea 94       	dec	r14
    2d14:	f3 01       	movw	r30, r6
    2d16:	ee 0d       	add	r30, r14
    2d18:	f1 1d       	adc	r31, r1
    2d1a:	80 81       	ld	r24, Z
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	87 d1       	rcall	.+782    	; 0x3030 <fputc>
    2d22:	e1 10       	cpse	r14, r1
    2d24:	f6 cf       	rjmp	.-20     	; 0x2d12 <vfprintf+0x640>
    2d26:	14 c0       	rjmp	.+40     	; 0x2d50 <vfprintf+0x67e>
    2d28:	f4 e0       	ldi	r31, 0x04	; 4
    2d2a:	ff 15       	cp	r31, r15
    2d2c:	48 f5       	brcc	.+82     	; 0x2d80 <vfprintf+0x6ae>
    2d2e:	84 e0       	ldi	r24, 0x04	; 4
    2d30:	f8 1a       	sub	r15, r24
    2d32:	33 fe       	sbrs	r3, 3
    2d34:	1d c0       	rjmp	.+58     	; 0x2d70 <vfprintf+0x69e>
    2d36:	21 10       	cpse	r2, r1
    2d38:	24 c0       	rjmp	.+72     	; 0x2d82 <vfprintf+0x6b0>
    2d3a:	03 ff       	sbrs	r16, 3
    2d3c:	27 c0       	rjmp	.+78     	; 0x2d8c <vfprintf+0x6ba>
    2d3e:	0c e8       	ldi	r16, 0x8C	; 140
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	f3 2d       	mov	r31, r3
    2d44:	f0 71       	andi	r31, 0x10	; 16
    2d46:	3f 2e       	mov	r3, r31
    2d48:	f8 01       	movw	r30, r16
    2d4a:	84 91       	lpm	r24, Z
    2d4c:	81 11       	cpse	r24, r1
    2d4e:	21 c0       	rjmp	.+66     	; 0x2d92 <vfprintf+0x6c0>
    2d50:	ff 20       	and	r15, r15
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <vfprintf+0x684>
    2d54:	fd cc       	rjmp	.-1542   	; 0x2750 <vfprintf+0x7e>
    2d56:	b6 01       	movw	r22, r12
    2d58:	80 e2       	ldi	r24, 0x20	; 32
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	69 d1       	rcall	.+722    	; 0x3030 <fputc>
    2d5e:	fa 94       	dec	r15
    2d60:	f7 cf       	rjmp	.-18     	; 0x2d50 <vfprintf+0x67e>
    2d62:	f6 01       	movw	r30, r12
    2d64:	86 81       	ldd	r24, Z+6	; 0x06
    2d66:	97 81       	ldd	r25, Z+7	; 0x07
    2d68:	23 c0       	rjmp	.+70     	; 0x2db0 <vfprintf+0x6de>
    2d6a:	8f ef       	ldi	r24, 0xFF	; 255
    2d6c:	9f ef       	ldi	r25, 0xFF	; 255
    2d6e:	20 c0       	rjmp	.+64     	; 0x2db0 <vfprintf+0x6de>
    2d70:	b6 01       	movw	r22, r12
    2d72:	80 e2       	ldi	r24, 0x20	; 32
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	5c d1       	rcall	.+696    	; 0x3030 <fputc>
    2d78:	fa 94       	dec	r15
    2d7a:	f1 10       	cpse	r15, r1
    2d7c:	f9 cf       	rjmp	.-14     	; 0x2d70 <vfprintf+0x69e>
    2d7e:	db cf       	rjmp	.-74     	; 0x2d36 <vfprintf+0x664>
    2d80:	f1 2c       	mov	r15, r1
    2d82:	b6 01       	movw	r22, r12
    2d84:	82 2d       	mov	r24, r2
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	53 d1       	rcall	.+678    	; 0x3030 <fputc>
    2d8a:	d7 cf       	rjmp	.-82     	; 0x2d3a <vfprintf+0x668>
    2d8c:	00 e9       	ldi	r16, 0x90	; 144
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	d8 cf       	rjmp	.-80     	; 0x2d42 <vfprintf+0x670>
    2d92:	31 10       	cpse	r3, r1
    2d94:	80 52       	subi	r24, 0x20	; 32
    2d96:	b6 01       	movw	r22, r12
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	4a d1       	rcall	.+660    	; 0x3030 <fputc>
    2d9c:	0f 5f       	subi	r16, 0xFF	; 255
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	d3 cf       	rjmp	.-90     	; 0x2d48 <vfprintf+0x676>
    2da2:	23 e0       	ldi	r18, 0x03	; 3
    2da4:	2f 15       	cp	r18, r15
    2da6:	10 f4       	brcc	.+4      	; 0x2dac <vfprintf+0x6da>
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	c2 cf       	rjmp	.-124    	; 0x2d30 <vfprintf+0x65e>
    2dac:	f1 2c       	mov	r15, r1
    2dae:	c5 cf       	rjmp	.-118    	; 0x2d3a <vfprintf+0x668>
    2db0:	63 96       	adiw	r28, 0x13	; 19
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	9f 90       	pop	r9
    2dd2:	8f 90       	pop	r8
    2dd4:	7f 90       	pop	r7
    2dd6:	6f 90       	pop	r6
    2dd8:	5f 90       	pop	r5
    2dda:	4f 90       	pop	r4
    2ddc:	3f 90       	pop	r3
    2dde:	2f 90       	pop	r2
    2de0:	08 95       	ret

00002de2 <__divmodhi4>:
    2de2:	97 fb       	bst	r25, 7
    2de4:	07 2e       	mov	r0, r23
    2de6:	16 f4       	brtc	.+4      	; 0x2dec <__divmodhi4+0xa>
    2de8:	00 94       	com	r0
    2dea:	06 d0       	rcall	.+12     	; 0x2df8 <__divmodhi4_neg1>
    2dec:	77 fd       	sbrc	r23, 7
    2dee:	08 d0       	rcall	.+16     	; 0x2e00 <__divmodhi4_neg2>
    2df0:	0b d0       	rcall	.+22     	; 0x2e08 <__udivmodhi4>
    2df2:	07 fc       	sbrc	r0, 7
    2df4:	05 d0       	rcall	.+10     	; 0x2e00 <__divmodhi4_neg2>
    2df6:	3e f4       	brtc	.+14     	; 0x2e06 <__divmodhi4_exit>

00002df8 <__divmodhi4_neg1>:
    2df8:	90 95       	com	r25
    2dfa:	81 95       	neg	r24
    2dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfe:	08 95       	ret

00002e00 <__divmodhi4_neg2>:
    2e00:	70 95       	com	r23
    2e02:	61 95       	neg	r22
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255

00002e06 <__divmodhi4_exit>:
    2e06:	08 95       	ret

00002e08 <__udivmodhi4>:
    2e08:	aa 1b       	sub	r26, r26
    2e0a:	bb 1b       	sub	r27, r27
    2e0c:	51 e1       	ldi	r21, 0x11	; 17
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <__udivmodhi4_ep>

00002e10 <__udivmodhi4_loop>:
    2e10:	aa 1f       	adc	r26, r26
    2e12:	bb 1f       	adc	r27, r27
    2e14:	a6 17       	cp	r26, r22
    2e16:	b7 07       	cpc	r27, r23
    2e18:	10 f0       	brcs	.+4      	; 0x2e1e <__udivmodhi4_ep>
    2e1a:	a6 1b       	sub	r26, r22
    2e1c:	b7 0b       	sbc	r27, r23

00002e1e <__udivmodhi4_ep>:
    2e1e:	88 1f       	adc	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	5a 95       	dec	r21
    2e24:	a9 f7       	brne	.-22     	; 0x2e10 <__udivmodhi4_loop>
    2e26:	80 95       	com	r24
    2e28:	90 95       	com	r25
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	08 95       	ret

00002e30 <__tablejump2__>:
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	00 24       	eor	r0, r0
    2e36:	00 1c       	adc	r0, r0
    2e38:	0b be       	out	0x3b, r0	; 59
    2e3a:	07 90       	elpm	r0, Z+
    2e3c:	f6 91       	elpm	r31, Z
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	09 94       	ijmp

00002e42 <__ftoa_engine>:
    2e42:	28 30       	cpi	r18, 0x08	; 8
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <__ftoa_engine+0x6>
    2e46:	27 e0       	ldi	r18, 0x07	; 7
    2e48:	33 27       	eor	r19, r19
    2e4a:	da 01       	movw	r26, r20
    2e4c:	99 0f       	add	r25, r25
    2e4e:	31 1d       	adc	r19, r1
    2e50:	87 fd       	sbrc	r24, 7
    2e52:	91 60       	ori	r25, 0x01	; 1
    2e54:	00 96       	adiw	r24, 0x00	; 0
    2e56:	61 05       	cpc	r22, r1
    2e58:	71 05       	cpc	r23, r1
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <__ftoa_engine+0x28>
    2e5c:	32 60       	ori	r19, 0x02	; 2
    2e5e:	2e 5f       	subi	r18, 0xFE	; 254
    2e60:	3d 93       	st	X+, r19
    2e62:	30 e3       	ldi	r19, 0x30	; 48
    2e64:	2a 95       	dec	r18
    2e66:	e1 f7       	brne	.-8      	; 0x2e60 <__ftoa_engine+0x1e>
    2e68:	08 95       	ret
    2e6a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e6c:	30 f0       	brcs	.+12     	; 0x2e7a <__ftoa_engine+0x38>
    2e6e:	80 38       	cpi	r24, 0x80	; 128
    2e70:	71 05       	cpc	r23, r1
    2e72:	61 05       	cpc	r22, r1
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <__ftoa_engine+0x36>
    2e76:	3c 5f       	subi	r19, 0xFC	; 252
    2e78:	3c 5f       	subi	r19, 0xFC	; 252
    2e7a:	3d 93       	st	X+, r19
    2e7c:	91 30       	cpi	r25, 0x01	; 1
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <__ftoa_engine+0x40>
    2e80:	80 68       	ori	r24, 0x80	; 128
    2e82:	91 1d       	adc	r25, r1
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	1f 93       	push	r17
    2e8a:	0f 93       	push	r16
    2e8c:	ff 92       	push	r15
    2e8e:	ef 92       	push	r14
    2e90:	19 2f       	mov	r17, r25
    2e92:	98 7f       	andi	r25, 0xF8	; 248
    2e94:	96 95       	lsr	r25
    2e96:	e9 2f       	mov	r30, r25
    2e98:	96 95       	lsr	r25
    2e9a:	96 95       	lsr	r25
    2e9c:	e9 0f       	add	r30, r25
    2e9e:	ff 27       	eor	r31, r31
    2ea0:	e2 51       	subi	r30, 0x12	; 18
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	99 27       	eor	r25, r25
    2ea6:	33 27       	eor	r19, r19
    2ea8:	ee 24       	eor	r14, r14
    2eaa:	ff 24       	eor	r15, r15
    2eac:	a7 01       	movw	r20, r14
    2eae:	e7 01       	movw	r28, r14
    2eb0:	05 90       	lpm	r0, Z+
    2eb2:	08 94       	sec
    2eb4:	07 94       	ror	r0
    2eb6:	28 f4       	brcc	.+10     	; 0x2ec2 <__ftoa_engine+0x80>
    2eb8:	36 0f       	add	r19, r22
    2eba:	e7 1e       	adc	r14, r23
    2ebc:	f8 1e       	adc	r15, r24
    2ebe:	49 1f       	adc	r20, r25
    2ec0:	51 1d       	adc	r21, r1
    2ec2:	66 0f       	add	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	06 94       	lsr	r0
    2ecc:	a1 f7       	brne	.-24     	; 0x2eb6 <__ftoa_engine+0x74>
    2ece:	05 90       	lpm	r0, Z+
    2ed0:	07 94       	ror	r0
    2ed2:	28 f4       	brcc	.+10     	; 0x2ede <__ftoa_engine+0x9c>
    2ed4:	e7 0e       	add	r14, r23
    2ed6:	f8 1e       	adc	r15, r24
    2ed8:	49 1f       	adc	r20, r25
    2eda:	56 1f       	adc	r21, r22
    2edc:	c1 1d       	adc	r28, r1
    2ede:	77 0f       	add	r23, r23
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	66 1f       	adc	r22, r22
    2ee6:	06 94       	lsr	r0
    2ee8:	a1 f7       	brne	.-24     	; 0x2ed2 <__ftoa_engine+0x90>
    2eea:	05 90       	lpm	r0, Z+
    2eec:	07 94       	ror	r0
    2eee:	28 f4       	brcc	.+10     	; 0x2efa <__ftoa_engine+0xb8>
    2ef0:	f8 0e       	add	r15, r24
    2ef2:	49 1f       	adc	r20, r25
    2ef4:	56 1f       	adc	r21, r22
    2ef6:	c7 1f       	adc	r28, r23
    2ef8:	d1 1d       	adc	r29, r1
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	66 1f       	adc	r22, r22
    2f00:	77 1f       	adc	r23, r23
    2f02:	06 94       	lsr	r0
    2f04:	a1 f7       	brne	.-24     	; 0x2eee <__ftoa_engine+0xac>
    2f06:	05 90       	lpm	r0, Z+
    2f08:	07 94       	ror	r0
    2f0a:	20 f4       	brcc	.+8      	; 0x2f14 <__ftoa_engine+0xd2>
    2f0c:	49 0f       	add	r20, r25
    2f0e:	56 1f       	adc	r21, r22
    2f10:	c7 1f       	adc	r28, r23
    2f12:	d8 1f       	adc	r29, r24
    2f14:	99 0f       	add	r25, r25
    2f16:	66 1f       	adc	r22, r22
    2f18:	77 1f       	adc	r23, r23
    2f1a:	88 1f       	adc	r24, r24
    2f1c:	06 94       	lsr	r0
    2f1e:	a9 f7       	brne	.-22     	; 0x2f0a <__ftoa_engine+0xc8>
    2f20:	84 91       	lpm	r24, Z
    2f22:	10 95       	com	r17
    2f24:	17 70       	andi	r17, 0x07	; 7
    2f26:	41 f0       	breq	.+16     	; 0x2f38 <__ftoa_engine+0xf6>
    2f28:	d6 95       	lsr	r29
    2f2a:	c7 95       	ror	r28
    2f2c:	57 95       	ror	r21
    2f2e:	47 95       	ror	r20
    2f30:	f7 94       	ror	r15
    2f32:	e7 94       	ror	r14
    2f34:	1a 95       	dec	r17
    2f36:	c1 f7       	brne	.-16     	; 0x2f28 <__ftoa_engine+0xe6>
    2f38:	e4 e9       	ldi	r30, 0x94	; 148
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	68 94       	set
    2f3e:	15 90       	lpm	r1, Z+
    2f40:	15 91       	lpm	r17, Z+
    2f42:	35 91       	lpm	r19, Z+
    2f44:	65 91       	lpm	r22, Z+
    2f46:	95 91       	lpm	r25, Z+
    2f48:	05 90       	lpm	r0, Z+
    2f4a:	7f e2       	ldi	r23, 0x2F	; 47
    2f4c:	73 95       	inc	r23
    2f4e:	e1 18       	sub	r14, r1
    2f50:	f1 0a       	sbc	r15, r17
    2f52:	43 0b       	sbc	r20, r19
    2f54:	56 0b       	sbc	r21, r22
    2f56:	c9 0b       	sbc	r28, r25
    2f58:	d0 09       	sbc	r29, r0
    2f5a:	c0 f7       	brcc	.-16     	; 0x2f4c <__ftoa_engine+0x10a>
    2f5c:	e1 0c       	add	r14, r1
    2f5e:	f1 1e       	adc	r15, r17
    2f60:	43 1f       	adc	r20, r19
    2f62:	56 1f       	adc	r21, r22
    2f64:	c9 1f       	adc	r28, r25
    2f66:	d0 1d       	adc	r29, r0
    2f68:	7e f4       	brtc	.+30     	; 0x2f88 <__ftoa_engine+0x146>
    2f6a:	70 33       	cpi	r23, 0x30	; 48
    2f6c:	11 f4       	brne	.+4      	; 0x2f72 <__ftoa_engine+0x130>
    2f6e:	8a 95       	dec	r24
    2f70:	e6 cf       	rjmp	.-52     	; 0x2f3e <__ftoa_engine+0xfc>
    2f72:	e8 94       	clt
    2f74:	01 50       	subi	r16, 0x01	; 1
    2f76:	30 f0       	brcs	.+12     	; 0x2f84 <__ftoa_engine+0x142>
    2f78:	08 0f       	add	r16, r24
    2f7a:	0a f4       	brpl	.+2      	; 0x2f7e <__ftoa_engine+0x13c>
    2f7c:	00 27       	eor	r16, r16
    2f7e:	02 17       	cp	r16, r18
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <__ftoa_engine+0x142>
    2f82:	20 2f       	mov	r18, r16
    2f84:	23 95       	inc	r18
    2f86:	02 2f       	mov	r16, r18
    2f88:	7a 33       	cpi	r23, 0x3A	; 58
    2f8a:	28 f0       	brcs	.+10     	; 0x2f96 <__ftoa_engine+0x154>
    2f8c:	79 e3       	ldi	r23, 0x39	; 57
    2f8e:	7d 93       	st	X+, r23
    2f90:	2a 95       	dec	r18
    2f92:	e9 f7       	brne	.-6      	; 0x2f8e <__ftoa_engine+0x14c>
    2f94:	10 c0       	rjmp	.+32     	; 0x2fb6 <__ftoa_engine+0x174>
    2f96:	7d 93       	st	X+, r23
    2f98:	2a 95       	dec	r18
    2f9a:	89 f6       	brne	.-94     	; 0x2f3e <__ftoa_engine+0xfc>
    2f9c:	06 94       	lsr	r0
    2f9e:	97 95       	ror	r25
    2fa0:	67 95       	ror	r22
    2fa2:	37 95       	ror	r19
    2fa4:	17 95       	ror	r17
    2fa6:	17 94       	ror	r1
    2fa8:	e1 18       	sub	r14, r1
    2faa:	f1 0a       	sbc	r15, r17
    2fac:	43 0b       	sbc	r20, r19
    2fae:	56 0b       	sbc	r21, r22
    2fb0:	c9 0b       	sbc	r28, r25
    2fb2:	d0 09       	sbc	r29, r0
    2fb4:	98 f0       	brcs	.+38     	; 0x2fdc <__ftoa_engine+0x19a>
    2fb6:	23 95       	inc	r18
    2fb8:	7e 91       	ld	r23, -X
    2fba:	73 95       	inc	r23
    2fbc:	7a 33       	cpi	r23, 0x3A	; 58
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <__ftoa_engine+0x180>
    2fc0:	70 e3       	ldi	r23, 0x30	; 48
    2fc2:	7c 93       	st	X, r23
    2fc4:	20 13       	cpse	r18, r16
    2fc6:	b8 f7       	brcc	.-18     	; 0x2fb6 <__ftoa_engine+0x174>
    2fc8:	7e 91       	ld	r23, -X
    2fca:	70 61       	ori	r23, 0x10	; 16
    2fcc:	7d 93       	st	X+, r23
    2fce:	30 f0       	brcs	.+12     	; 0x2fdc <__ftoa_engine+0x19a>
    2fd0:	83 95       	inc	r24
    2fd2:	71 e3       	ldi	r23, 0x31	; 49
    2fd4:	7d 93       	st	X+, r23
    2fd6:	70 e3       	ldi	r23, 0x30	; 48
    2fd8:	2a 95       	dec	r18
    2fda:	e1 f7       	brne	.-8      	; 0x2fd4 <__ftoa_engine+0x192>
    2fdc:	11 24       	eor	r1, r1
    2fde:	ef 90       	pop	r14
    2fe0:	ff 90       	pop	r15
    2fe2:	0f 91       	pop	r16
    2fe4:	1f 91       	pop	r17
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	99 27       	eor	r25, r25
    2fec:	87 fd       	sbrc	r24, 7
    2fee:	90 95       	com	r25
    2ff0:	08 95       	ret

00002ff2 <strnlen_P>:
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	05 90       	lpm	r0, Z+
    2ff6:	61 50       	subi	r22, 0x01	; 1
    2ff8:	70 40       	sbci	r23, 0x00	; 0
    2ffa:	01 10       	cpse	r0, r1
    2ffc:	d8 f7       	brcc	.-10     	; 0x2ff4 <strnlen_P+0x2>
    2ffe:	80 95       	com	r24
    3000:	90 95       	com	r25
    3002:	8e 0f       	add	r24, r30
    3004:	9f 1f       	adc	r25, r31
    3006:	08 95       	ret

00003008 <memcpy>:
    3008:	fb 01       	movw	r30, r22
    300a:	dc 01       	movw	r26, r24
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <memcpy+0xa>
    300e:	01 90       	ld	r0, Z+
    3010:	0d 92       	st	X+, r0
    3012:	41 50       	subi	r20, 0x01	; 1
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	d8 f7       	brcc	.-10     	; 0x300e <memcpy+0x6>
    3018:	08 95       	ret

0000301a <strnlen>:
    301a:	fc 01       	movw	r30, r24
    301c:	61 50       	subi	r22, 0x01	; 1
    301e:	70 40       	sbci	r23, 0x00	; 0
    3020:	01 90       	ld	r0, Z+
    3022:	01 10       	cpse	r0, r1
    3024:	d8 f7       	brcc	.-10     	; 0x301c <strnlen+0x2>
    3026:	80 95       	com	r24
    3028:	90 95       	com	r25
    302a:	8e 0f       	add	r24, r30
    302c:	9f 1f       	adc	r25, r31
    302e:	08 95       	ret

00003030 <fputc>:
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	fb 01       	movw	r30, r22
    303a:	23 81       	ldd	r18, Z+3	; 0x03
    303c:	21 fd       	sbrc	r18, 1
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <fputc+0x16>
    3040:	8f ef       	ldi	r24, 0xFF	; 255
    3042:	9f ef       	ldi	r25, 0xFF	; 255
    3044:	28 c0       	rjmp	.+80     	; 0x3096 <fputc+0x66>
    3046:	22 ff       	sbrs	r18, 2
    3048:	16 c0       	rjmp	.+44     	; 0x3076 <fputc+0x46>
    304a:	46 81       	ldd	r20, Z+6	; 0x06
    304c:	57 81       	ldd	r21, Z+7	; 0x07
    304e:	24 81       	ldd	r18, Z+4	; 0x04
    3050:	35 81       	ldd	r19, Z+5	; 0x05
    3052:	42 17       	cp	r20, r18
    3054:	53 07       	cpc	r21, r19
    3056:	44 f4       	brge	.+16     	; 0x3068 <fputc+0x38>
    3058:	a0 81       	ld	r26, Z
    305a:	b1 81       	ldd	r27, Z+1	; 0x01
    305c:	9d 01       	movw	r18, r26
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	3f 4f       	sbci	r19, 0xFF	; 255
    3062:	31 83       	std	Z+1, r19	; 0x01
    3064:	20 83       	st	Z, r18
    3066:	8c 93       	st	X, r24
    3068:	26 81       	ldd	r18, Z+6	; 0x06
    306a:	37 81       	ldd	r19, Z+7	; 0x07
    306c:	2f 5f       	subi	r18, 0xFF	; 255
    306e:	3f 4f       	sbci	r19, 0xFF	; 255
    3070:	37 83       	std	Z+7, r19	; 0x07
    3072:	26 83       	std	Z+6, r18	; 0x06
    3074:	10 c0       	rjmp	.+32     	; 0x3096 <fputc+0x66>
    3076:	eb 01       	movw	r28, r22
    3078:	09 2f       	mov	r16, r25
    307a:	18 2f       	mov	r17, r24
    307c:	00 84       	ldd	r0, Z+8	; 0x08
    307e:	f1 85       	ldd	r31, Z+9	; 0x09
    3080:	e0 2d       	mov	r30, r0
    3082:	09 95       	icall
    3084:	89 2b       	or	r24, r25
    3086:	e1 f6       	brne	.-72     	; 0x3040 <fputc+0x10>
    3088:	8e 81       	ldd	r24, Y+6	; 0x06
    308a:	9f 81       	ldd	r25, Y+7	; 0x07
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	9f 83       	std	Y+7, r25	; 0x07
    3090:	8e 83       	std	Y+6, r24	; 0x06
    3092:	81 2f       	mov	r24, r17
    3094:	90 2f       	mov	r25, r16
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <__ultoa_invert>:
    30a0:	fa 01       	movw	r30, r20
    30a2:	aa 27       	eor	r26, r26
    30a4:	28 30       	cpi	r18, 0x08	; 8
    30a6:	51 f1       	breq	.+84     	; 0x30fc <__ultoa_invert+0x5c>
    30a8:	20 31       	cpi	r18, 0x10	; 16
    30aa:	81 f1       	breq	.+96     	; 0x310c <__ultoa_invert+0x6c>
    30ac:	e8 94       	clt
    30ae:	6f 93       	push	r22
    30b0:	6e 7f       	andi	r22, 0xFE	; 254
    30b2:	6e 5f       	subi	r22, 0xFE	; 254
    30b4:	7f 4f       	sbci	r23, 0xFF	; 255
    30b6:	8f 4f       	sbci	r24, 0xFF	; 255
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	af 4f       	sbci	r26, 0xFF	; 255
    30bc:	b1 e0       	ldi	r27, 0x01	; 1
    30be:	3e d0       	rcall	.+124    	; 0x313c <__ultoa_invert+0x9c>
    30c0:	b4 e0       	ldi	r27, 0x04	; 4
    30c2:	3c d0       	rcall	.+120    	; 0x313c <__ultoa_invert+0x9c>
    30c4:	67 0f       	add	r22, r23
    30c6:	78 1f       	adc	r23, r24
    30c8:	89 1f       	adc	r24, r25
    30ca:	9a 1f       	adc	r25, r26
    30cc:	a1 1d       	adc	r26, r1
    30ce:	68 0f       	add	r22, r24
    30d0:	79 1f       	adc	r23, r25
    30d2:	8a 1f       	adc	r24, r26
    30d4:	91 1d       	adc	r25, r1
    30d6:	a1 1d       	adc	r26, r1
    30d8:	6a 0f       	add	r22, r26
    30da:	71 1d       	adc	r23, r1
    30dc:	81 1d       	adc	r24, r1
    30de:	91 1d       	adc	r25, r1
    30e0:	a1 1d       	adc	r26, r1
    30e2:	20 d0       	rcall	.+64     	; 0x3124 <__ultoa_invert+0x84>
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <__ultoa_invert+0x48>
    30e6:	68 94       	set
    30e8:	3f 91       	pop	r19
    30ea:	2a e0       	ldi	r18, 0x0A	; 10
    30ec:	26 9f       	mul	r18, r22
    30ee:	11 24       	eor	r1, r1
    30f0:	30 19       	sub	r19, r0
    30f2:	30 5d       	subi	r19, 0xD0	; 208
    30f4:	31 93       	st	Z+, r19
    30f6:	de f6       	brtc	.-74     	; 0x30ae <__ultoa_invert+0xe>
    30f8:	cf 01       	movw	r24, r30
    30fa:	08 95       	ret
    30fc:	46 2f       	mov	r20, r22
    30fe:	47 70       	andi	r20, 0x07	; 7
    3100:	40 5d       	subi	r20, 0xD0	; 208
    3102:	41 93       	st	Z+, r20
    3104:	b3 e0       	ldi	r27, 0x03	; 3
    3106:	0f d0       	rcall	.+30     	; 0x3126 <__ultoa_invert+0x86>
    3108:	c9 f7       	brne	.-14     	; 0x30fc <__ultoa_invert+0x5c>
    310a:	f6 cf       	rjmp	.-20     	; 0x30f8 <__ultoa_invert+0x58>
    310c:	46 2f       	mov	r20, r22
    310e:	4f 70       	andi	r20, 0x0F	; 15
    3110:	40 5d       	subi	r20, 0xD0	; 208
    3112:	4a 33       	cpi	r20, 0x3A	; 58
    3114:	18 f0       	brcs	.+6      	; 0x311c <__ultoa_invert+0x7c>
    3116:	49 5d       	subi	r20, 0xD9	; 217
    3118:	31 fd       	sbrc	r19, 1
    311a:	40 52       	subi	r20, 0x20	; 32
    311c:	41 93       	st	Z+, r20
    311e:	02 d0       	rcall	.+4      	; 0x3124 <__ultoa_invert+0x84>
    3120:	a9 f7       	brne	.-22     	; 0x310c <__ultoa_invert+0x6c>
    3122:	ea cf       	rjmp	.-44     	; 0x30f8 <__ultoa_invert+0x58>
    3124:	b4 e0       	ldi	r27, 0x04	; 4
    3126:	a6 95       	lsr	r26
    3128:	97 95       	ror	r25
    312a:	87 95       	ror	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	ba 95       	dec	r27
    3132:	c9 f7       	brne	.-14     	; 0x3126 <__ultoa_invert+0x86>
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	61 05       	cpc	r22, r1
    3138:	71 05       	cpc	r23, r1
    313a:	08 95       	ret
    313c:	9b 01       	movw	r18, r22
    313e:	ac 01       	movw	r20, r24
    3140:	0a 2e       	mov	r0, r26
    3142:	06 94       	lsr	r0
    3144:	57 95       	ror	r21
    3146:	47 95       	ror	r20
    3148:	37 95       	ror	r19
    314a:	27 95       	ror	r18
    314c:	ba 95       	dec	r27
    314e:	c9 f7       	brne	.-14     	; 0x3142 <__ultoa_invert+0xa2>
    3150:	62 0f       	add	r22, r18
    3152:	73 1f       	adc	r23, r19
    3154:	84 1f       	adc	r24, r20
    3156:	95 1f       	adc	r25, r21
    3158:	a0 1d       	adc	r26, r0
    315a:	08 95       	ret

0000315c <_exit>:
    315c:	f8 94       	cli

0000315e <__stop_program>:
    315e:	ff cf       	rjmp	.-2      	; 0x315e <__stop_program>
